<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OreoDu&#39;s Blog</title>
  
  <subtitle>Wubba lubba dub dub ~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oreodu.github.io/"/>
  <updated>2020-12-20T09:58:59.513Z</updated>
  <id>https://oreodu.github.io/</id>
  
  <author>
    <name>Oreo Du</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Trie</title>
    <link href="https://oreodu.github.io/2020/20201219-Trie/"/>
    <id>https://oreodu.github.io/2020/20201219-Trie/</id>
    <published>2020-12-19T15:53:25.000Z</published>
    <updated>2020-12-20T09:58:59.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="trie">Trie<a title="#trie" href="#trie"></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;trie&quot;&gt;Trie&lt;a title=&quot;#trie&quot; href=&quot;#trie&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/tags/Data-Structure/"/>
    
      <category term="Trie" scheme="https://oreodu.github.io/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>Synchronization</title>
    <link href="https://oreodu.github.io/2020/20201217-Synchronization/"/>
    <id>https://oreodu.github.io/2020/20201217-Synchronization/</id>
    <published>2020-12-17T13:06:00.000Z</published>
    <updated>2020-12-27T12:55:56.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="synchronization">Synchronization<a title="#synchronization" href="#synchronization"></a></h1><p>The kernel is programmed using the shared memory model  and shared data must be protected against concurrent access.</p><p>Causes of Concurrency:<br>• For a single core :<br>• interleaving asynchronousexecution threads (Interruption/preemption)<br>• In the kernel:<br>• Interrupts<br>• Softirqs<br>• Kernel preemption<br>• Sleeping and synchronization<br>• Symmetrical multiprocessing<br>In order to understand and prepare for these, we have to identify shared data and related critical regions. And this needs to be done from the start as concurrency bugs are difficult to detect and solve.</p><p>Critical region/section: part of the code manipulating shared data<br>• must execute atomically, i.e. without interruption<br>• should not be executed in parallel on SMP<br>Race condition: two threads concurrently executing the same critical region.</p><p>• Code safe from access from an interrupt handler: interrupt-safe. This code can be interrupted by an interrupt handler and this will not cause any issue.<br>• Code safe from access from multiple cores: SMPsafe. This code can be executed on multiple cores at the same time without issue.<br>• Code safe from concurrency with kernel preemption: preempt-safe. This code can be preempted without issue</p><p>Need a mechanism to assure a critical region is executed atomically by only one core at the same time → locks.<br>When writing some code, observe the data manipulated by the code. If anyone else (thread/handler) can see it, lock it.<br>Locking is implemented by the programmer voluntarily (own willing)<br>• No indication from the compiler!<br>• No protection generally ends up in data corruption<br>• → inconsistent behavior for the program<br>• → difficult to debug and trace back the source of the issue<br>• Locking/unlocking primitives are implemented through atomic operations</p><p>Deadlocks:<br>Situations in which one or several threads are waiting on locks for one or several resources that will never be freed.</p><p>Prevent deadlocks:<br>• Implement lock ordering.<br>• Do not double-acquire the same lock.</p><p>A lock is said to be contented when there are often threads waiting for it. A highly contented lock can become a bottleneck for the system performance.</p><p>• Coarse lock example: protecting an entire subsystem’s shared data structures<br>• Simple Implementation<br>• Low Scalability<br>• Fine-grained locks:<br>• Complex Implementation<br>• High Scalability</p><h2 id="part.1-atomic-operations">Part.1 Atomic Operations<a title="#part.1-atomic-operations" href="#part.1-atomic-operations"></a></h2><p>It performs (simple) operations in memory and either succeed or fail in their entirety.<br>• Regardless of what operations are executed on other cores<br>• Without interruption</p><p>Examples:<br>• Fetch-and-add: does atomic increment.<br>• Test-and-set: sets a value at a memory location and returns the previous value.<br>• Compare-and-swap: modifies the content of a memory location only if the previous content is equal to a given value.</p><p>Linux provides two APIs:<br>• Integers atomic operations (<code>include/linux/types.h</code>)<br>(API defined in <code>include/asm/atomic.h</code>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> counter;</span><br><span class="line">&#125; <span class="keyword">atomic_t</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">atomic_t</span> v; <span class="comment">/* define v */</span></span><br><span class="line"><span class="keyword">atomic_t</span> u = ATOMIC_INIT(<span class="number">0</span>); <span class="comment">/* define and initialize u to 0 */</span></span><br><span class="line">atomic_set(&amp;v, <span class="number">4</span>); <span class="comment">/* v = 4 (atomically) */</span></span><br><span class="line">atomic_add(<span class="number">2</span>, &amp;v); <span class="comment">/* v = v + 2 == 6 (atomically) */</span></span><br><span class="line">atomic_inc(&amp;v); <span class="comment">/* v = v + 1 == 7 (atomically) */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Atomic Integer Operations: Usage Example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_ATOMIC] &quot;</span></span></span><br><span class="line"><span class="keyword">atomic_t</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">  atomic_inc(&amp;counter);</span><br><span class="line">  msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, atomic_read(&amp;counter));</span><br><span class="line">  msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">atomic_set(&amp;counter, <span class="number">0</span>);</span><br><span class="line">read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">kthread_stop(read_thread);</span><br><span class="line">kthread_stop(write_thread);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>• Bitwise atomic operations (<code>include/linux/bitops.h</code>)<br>(API functions operate on generic pointers (<code>void *</code>)</p><p>​    Example with long on 32-bits systems:<br>​      • Bit 31 is the most significant bit<br>​     • Bit 0 is the least significant bit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> word = <span class="number">0</span>; <span class="comment">/* 32 / 64 bits according to the system */</span></span><br><span class="line"></span><br><span class="line">set_bit(<span class="number">0</span>, &amp;word); <span class="comment">/* bit zero is set atomically */</span></span><br><span class="line">set_bit(<span class="number">1</span>, &amp;word); <span class="comment">/* bit one is set atomically */</span></span><br><span class="line">printk(<span class="string">&quot;&amp;ul¥n&quot;</span>, word); <span class="comment">/* print &quot;3&quot; */</span></span><br><span class="line">clear_bit(<span class="number">1</span>, &amp;word); <span class="comment">/* bit one is unset atomically */</span></span><br><span class="line">change_bit(<span class="number">0</span>, &amp;word); <span class="comment">/* flip bit zero atomically (now unset) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* set bit as zero and return its previous value (atomically) */</span></span><br><span class="line"><span class="keyword">if</span> (test_and_set_bit(<span class="number">0</span>, &amp;word)) &#123;</span><br><span class="line"><span class="comment">/* not true in the case of our example */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* you can mix atomic bit operations and normal C */</span></span><br><span class="line">word = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h2 id="part.2-spin-locks">Part.2 Spin Locks<a title="#part.2-spin-locks" href="#part.2-spin-locks"></a></h2><p>The most common lock used in the kernel which can be held by at most one thread of execution.</p><p>When a thread tries to acquire an already held lock:<br>• Active waiting (spinning)<br>Hurts performance when spinning for too long. However spin-locks are needed in context where one cannot sleep (interrupt)<br>• As opposed to putting the thread to sleep (semaphores/mutexes)</p><p>In process context, do not sleep while holding a spin-lock. Another thread trying to acquire the spin-lock hangs the CPU, preventing you to wake up.</p><p>Usage: (API in <code>include/linux/spinlock.h</code>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_SPINLOCK(my_lock);</span><br><span class="line">spin_lock(&amp;my_lock);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">spin_unlock(&amp;my_lock);</span><br></pre></td></tr></table></figure><p>Lock/unlock methods disable/enable kernel preemption and acquire/release the lock. Lock is compiled away on uniprocessor systems and still needs do disabled/re-enable preemption.</p><p>For Interrupt Handlers:<br>Spin locks do not sleep: it is safe to use them in interrupt context. In an interruption handler, need to disable local interrupts before taking the lock!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spinlock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_SPINLOCK] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line">DEFINE_SPINLOCK(counter_lock);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">spin_lock(&amp;counter_lock);</span><br><span class="line">counter++;</span><br><span class="line">spin_unlock(&amp;counter_lock);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">spin_lock(&amp;counter_lock);</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">spin_unlock(&amp;counter_lock);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line">read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">kthread_stop(read_thread);</span><br><span class="line">kthread_stop(write_thread);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>Reader-Writer Spin Locks:<br>When entities accessing shared data can be clearly divided into readers and writers.</p><p>Example: list updated (write) and searched (read)<br>• When updated, no other entity should update nor search<br>• When searched, no other entity should update<br>• Safe to allow multiple readers in parallel</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_RWLOCK(my_rwlock); <span class="comment">/* declaration &amp; initialization */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reader code</span></span><br><span class="line">read_lock(&amp;my_rwlock);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">read_unlock(&amp;my_rwlock);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Writer code</span></span><br><span class="line">write_lock(&amp;my_rwlock);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">write_unlock(&amp;my_rwlock);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Deadlock</span></span><br><span class="line">read_lock(&amp;my_rwlock);</span><br><span class="line">write_lock(&amp;my_rwlock);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spinlock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_RWSPINLOCK] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line">DEFINE_RWLOCK(counter_lock);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread1</span>, *<span class="title">read_thread2</span>,</span></span><br><span class="line"><span class="class">*<span class="title">read_thread3</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">write_lock(&amp;counter_lock);</span><br><span class="line">counter++;</span><br><span class="line">write_unlock(&amp;counter_lock);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">read_lock(&amp;counter_lock);</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">read_unlock(&amp;counter_lock);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line">read_thread1 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread1&quot;</span>);</span><br><span class="line">read_thread2 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread2&quot;</span>);</span><br><span class="line">read_thread3 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread3&quot;</span>);</span><br><span class="line">write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.3-semaphores-and-mutexes">Part.3 Semaphores and Mutexes<a title="#part.3-semaphores-and-mutexes" href="#part.3-semaphores-and-mutexes"></a></h2><p>Semaphores: sleeping locks (API in <code>include/linux/semaphore.h</code>)<br>• A thread trying to acquire an already held lock is put on a waitqueue. When the semaphore becomes available, one task on the waitqueue is awaken.<br>• Well suited towards locks held for a long time. On the contrary, large overhead for locks held for short periods.<br>• No usable in interrupt context.<br>• A thread can sleep while holding a semaphore. Another thread trying to acquire it will sleep and let you continue.<br>• A thread cannot hold a spinlock while trying to acquire a semaphore. Might sleep!</p><p>• Contrary to spin locks, semaphores allow multiples holders.<br>• Counter initialized to a given value. Decremented each time a thread acquires the<br>semaphore. The semaphore becomes unavailable when the counter reaches 0.<br>• In the kernel, most of the semaphores used are binary semaphores<br>Counter initialized to:  1 -&gt; initially available, 0 -&gt; initially disabled.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> *<span class="title">sem1</span>;</span></span><br><span class="line"></span><br><span class="line">sem1 = kmalloc(<span class="keyword">sizeof</span>(struct semaphore),</span><br><span class="line">GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!sem1)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* counter == 1: binary semaphore */</span></span><br><span class="line">sema_init(&amp;sema, <span class="number">1</span>);</span><br><span class="line">down(sem1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">up(sem1);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Binary semaphore static declaration */</span></span><br><span class="line">DECLARE_MUTEX(sem2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (down_interruptible(&amp;sem2)) &#123;</span><br><span class="line"><span class="comment">/* signal received, semaphore not acquired */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">up(sem2);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DECLARE_RWSEM(rwsem1);</span><br><span class="line"></span><br><span class="line">init_rwsem(&amp;rwsem1);</span><br><span class="line">down_read(rwsem1);</span><br><span class="line"><span class="comment">/* critical (read) region */</span></span><br><span class="line">up_read(&amp;rwsem1);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> *<span class="title">rwsem2</span>;</span></span><br><span class="line">rwsem2 = kmalloc(<span class="keyword">sizeof</span>(struct rw_semaphore),</span><br><span class="line">GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!rwsem2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">init_rwsem(rwsem2);</span><br><span class="line">down_write(rwsem2);</span><br><span class="line"><span class="comment">/* critical (write) region */</span></span><br><span class="line">up_write(rwsem2);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/rwsem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_SEM] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* shared data: */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> *<span class="title">counter_rwsemaphore</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">read_thread2</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">down_write(counter_rwsemaphore);</span><br><span class="line">counter++;</span><br><span class="line">  downgrade_write(counter_rwsemaphore);</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;(writer) counter: %d¥n&quot;</span>, counter);</span><br><span class="line">up_read(counter_rwsemaphore);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">down_read(counter_rwsemaphore);</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">up_read(counter_rwsemaphore);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">counter_rwsemaphore = kmalloc(<span class="keyword">sizeof</span>(struct rw_semaphore), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!counter_rwsemaphore)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">init_rwsem(counter_rwsemaphore);</span><br><span class="line">read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">read_thread2 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread2&quot;</span>);</span><br><span class="line">write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">kthread_stop(read_thread);</span><br><span class="line">kthread_stop(write_thread);</span><br><span class="line">kthread_stop(read_thread2);</span><br><span class="line">kfree(counter_rwsemaphore);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>Mutexes are binary semaphore with stricter use cases: (API in <code>include/linux/mutex.h</code>)<br>• Only one thread can hold the mutex at a time.<br>• A thread locking a mutex must unlock it.<br>• No recursive lock and unlock operations.<br>• A thread cannot exit while holding a mutex.<br>• A mutex cannot be acquired in interrupt context.<br>• A mutex can be managed only through the API.</p><p>With special debugging mode: (CONFIG_DEBUG_MUTEXES)<br>The kernel can check and warn if these constraints are not met.</p><p>If these constraints disallow the use of mutexes, use semaphores. Otherwise always use mutexes.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_MUTEX(mut1); <span class="comment">/* static */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> *<span class="title">mut2</span> =</span> kmalloc(<span class="keyword">sizeof</span>(struct mutex), GFP_KERNEL); <span class="comment">/* dynamic */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mut2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">mutex_init(mut2);</span><br><span class="line">mutex_lock(&amp;mut1);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">mutex_unlock(&amp;mut1);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_MUTEX]: &quot;</span></span></span><br><span class="line"><span class="comment">/* shared data: */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> *<span class="title">mut</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">mutex_lock(mut);</span><br><span class="line">counter++;</span><br><span class="line">mutex_unlock(mut);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">mutex_lock(mut);</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">mutex_unlock(mut);</span><br><span class="line">msleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">mut = kmalloc(<span class="keyword">sizeof</span>(struct mutex), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!mut)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">mutex_init(mut);</span><br><span class="line">read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">kthread_stop(read_thread);</span><br><span class="line">kthread_stop(write_thread);</span><br><span class="line">kfree(mut);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>Spin Lock vs Mutex Usage<br>• Low overhead locking needed? use spin lock<br>• Short lock hold time? use spin lock<br>• Long lock hold time? use mutex<br>• Need to lock in interrupt context? use spin lock<br>• Need to sleep while holding? use mutex</p><h2 id="part.4-other-synchronization-mechanisms">Part.4 Other Synchronization Mechanisms<a title="#part.4-other-synchronization-mechanisms" href="#part.4-other-synchronization-mechanisms"></a></h2><h3 id="completion-variables:">Completion Variables:<a title="#completion-variables:" href="#completion-variables:"></a></h3><p>(API in <code>include/linux/completion.h</code>)<br>Completion variables are used when a thread needs to signal another one of some event. Waiting thread sleeps.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DECLARE_COMPLETION(comp1); <span class="comment">/* static */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">comp2</span> =</span> kmalloc(<span class="keyword">sizeof</span>(struct completion), GFP_KERNEL); <span class="comment">/* dynamic */</span></span><br><span class="line"><span class="keyword">if</span> (!comp2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">init_completion(comp2);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread A</span></span><br><span class="line"><span class="comment">/* signal event: */</span></span><br><span class="line">complete(comp1);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread B</span></span><br><span class="line"><span class="comment">/* wait for signal: */</span></span><br><span class="line">wait_for_completion(comp1);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/completion.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_COMP] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">comp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (counter != <span class="number">1234</span>)</span><br><span class="line">counter++;</span><br><span class="line">complete(comp);</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">wait_for_completion(comp);</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">comp = kmalloc(<span class="keyword">sizeof</span>(struct completion), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!comp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">init_completion(comp);</span><br><span class="line">read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">kfree(comp);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="preemption-disabling:">Preemption Disabling:<a title="#preemption-disabling:" href="#preemption-disabling:"></a></h3><p>When a spin lock is held and preemption is disabled. Some situations require preemption disabling without involving spin locks.</p><p>API to disable kernel preemption<br>• can nest and be implemented through a counter<br>• preempt_disable(). Disable kernel preemption, increment preemption counter<br>• preempt_enable(). Decrement counter and enable preemption if it reaches 0<br>• preempt_enable_no_resched(). Enables kernel preemption and does not check for any pending reschedule.<br>• preempt_count(). Returns preemption counter.<br>• get_cpu(). Disables preemption and return the current CPU id.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cpu = get_cpu(); <span class="comment">/* disable preemption and return current CPU id */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> *<span class="title">my_struct</span> <span class="title">my_variable</span> =</span> per_cpu_structs_array[cpu];</span><br><span class="line"><span class="comment">/* manipulate my_variable */</span></span><br><span class="line">put_cpu(); <span class="comment">/* re-enable preemption */</span></span><br></pre></td></tr></table></figure><h3 id="sequential-locks">Sequential Locks<a title="#sequential-locks" href="#sequential-locks"></a></h3><p>(API in <code>include/linux/seqlock.h</code>)<br>Reader-writer spinlock scaling to many readers and favoring writers.<br>• Implemented with a counter (sequence number).<br>• Before and after reading the data, the counter is checked.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">seqlock_t</span> my_seq_lock = DEFINE_SEQLOCK(my_seq_lock);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Write path</span></span><br><span class="line">write_seqlock(&amp;my_seq_lock);</span><br><span class="line"><span class="comment">/* critical (write) region */</span></span><br><span class="line">write_sequnlock(&amp;my_seq_lock);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read path</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> seq;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">seq = read_seqbegin(&amp;my_seq_lock);</span><br><span class="line"><span class="comment">/* read data here ... */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (read_seqretry(&amp;my_seq_lock, seq));</span><br></pre></td></tr></table></figure><p>Seq locks are useful when:<br>• There are many readers and few writers.<br>• Writers should be favored over readers.</p><p>Example: jiffies.</p><h2 id="part.5-ordering-and-memory-barriers">Part.5 Ordering and Memory Barriers<a title="#part.5-ordering-and-memory-barriers" href="#part.5-ordering-and-memory-barriers"></a></h2><p>Memory reads (load) and write (store) operations can be reordered.<br>• By the compiler (compile time)<br>• By the CPU (run time)</p><p>CPU/compiler are not aware about code in other context.<br>• Communication with hardware<br>• Symmetric multiprocessing</p><p>Memory barriers instruction allows to force the actual execution of load and stores at some point in the program.</p><p>• rmb() (read memory barrier):<br>• No load prior to the code will be reordered after the call<br>• No load after the call will be reordered before the call<br>• i.e. commit all pending loads before continuing<br>• wmb() (write memory barrier):<br>• Same as rmb() with stores instead of loads<br>• mb(): Concerns loads and stores<br>• barrier(): Same as mb() but only for the compiler<br>• read_barrier_depends(). Prevent data-dependent loads (b = a) to be reordered across the barrier. Less costly than rmb() as we block only on a subset of pending loads</p><p>Usage: SMP Optimizations<br>• smp_rmb(): rmb() on SMP and barrier() on UP<br>• smp_read_barrier_depends(): read_barrier_depends() on SMP and barrier() on UP<br>• smp_wmb(): wmb() on SMP and barrier() on UP<br>• smp_mb(): mb() on SMP and barrier() on UP</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;synchronization&quot;&gt;Synchronization&lt;a title=&quot;#synchronization&quot; href=&quot;#synchronization&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The kernel is programmed using the 
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
      <category term="Synchronization" scheme="https://oreodu.github.io/tags/Synchronization/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Heap</title>
    <link href="https://oreodu.github.io/2020/2020-12-09-Heap/"/>
    <id>https://oreodu.github.io/2020/2020-12-09-Heap/</id>
    <published>2020-12-09T06:13:00.000Z</published>
    <updated>2020-12-09T11:52:35.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="heap">Heap<a title="#heap" href="#heap"></a></h1><div class="φcy"><div class="φda"><table><thead><tr><th style="text-align:center">Operation</th><th style="text-align:center">find-min</th><th style="text-align:center">delete-min</th><th style="text-align:center">insert</th><th style="text-align:center">decrease-key</th><th style="text-align:center">meld</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Binary_heap" target="_blank">Binary</a></td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(<em>n</em>)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Leftist_tree" target="_blank">Leftist</a></td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Binomial_heap" target="_blank">Binomial</a></td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)[<a href="https://en.wikipedia.org/wiki/Binary_heap#cite_note-amortized-21" target="_blank">c]</a></td><td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Fibonacci_heap" target="_blank">Fibonacci</a></td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Pairing_heap" target="_blank">Pairing</a></td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>o</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Brodal_queue" target="_blank">Brodal</a></td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/w/index.php?title=Rank-pairing_heap&amp;action=edit&amp;redlink=1" target="_blank">Rank-pairing</a></td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Fibonacci_heap" target="_blank">Strict Fibonacci</a>]</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>Θ</em>(1)</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/2%E2%80%933_heap" target="_blank">2–3 heap</a></td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>O</em>(log <em>n</em>)</td><td style="text-align:center"><em>Θ</em>(1)</td><td style="text-align:center"><em>?</em></td></tr></tbody></table></div></div><h2 id="prat.1-basis">Prat.1 Basis<a title="#prat.1-basis" href="#prat.1-basis"></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;heap&quot;&gt;Heap&lt;a title=&quot;#heap&quot; href=&quot;#heap&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;div class=&quot;φcy&quot;&gt;&lt;div class=&quot;φda&quot;&gt;&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Heap" scheme="https://oreodu.github.io/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>Associative array</title>
    <link href="https://oreodu.github.io/2020/20201202-Associative-arrays/"/>
    <id>https://oreodu.github.io/2020/20201202-Associative-arrays/</id>
    <published>2020-12-02T15:29:25.000Z</published>
    <updated>2020-12-24T07:44:54.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="associative-array">Associative array<a title="#associative-array" href="#associative-array"></a></h1><h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3><p>(概略图)</p><p><strong>· materials:</strong><br>· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>· Wikipedia</p><p>In many applications, we have to associative a value with a key.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gljwlvpo2yj30ui0c8tem.jpg" alt="Screen Shot 2020-12-11 at 14.33.22" style="zoom: 50%;"><p>The associative array (map, symbol table, or dictionary) is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. The client can insert key-value pairs into the symbol table and search for the value associated with a given key later.</p><h2 id="part.1-api">Part.1 API<a title="#part.1-api" href="#part.1-api"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolTable</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">SymbolTable</span>()                // <span class="title">create</span> <span class="title">a</span> <span class="title">symbol</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">put</span>(<span class="title">Key</span> <span class="title">key</span>, <span class="title">Value</span> <span class="title">val</span>) // <span class="title">put</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pair</span> <span class="title">into</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">delete</span>(<span class="title">Key</span> <span class="title">key</span>)         // <span class="title">remove</span> <span class="title">key</span>(<span class="title">and</span> <span class="title">its</span> <span class="title">value</span>) <span class="title">from</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">get</span>(<span class="title">Key</span> <span class="title">key</span>)            // <span class="title">get</span> <span class="title">the</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span> (<span class="title">null</span> <span class="title">if</span> <span class="title">key</span> <span class="title">is</span> <span class="title">absent</span>)</span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">contains</span>(<span class="title">Key</span> <span class="title">key</span>)    // <span class="title">whether</span> <span class="title">it</span> <span class="title">contains</span> <span class="title">a</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">isEmpty</span>()            // <span class="title">whether</span> <span class="title">table</span> <span class="title">is</span> <span class="title">empty</span></span></span><br><span class="line"><span class="class">  <span class="title">int</span> <span class="title">size</span>()                   // <span class="title">number</span> <span class="title">of</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pairs</span> <span class="title">in</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">Iterable</span>&lt;<span class="title">key</span>&gt; <span class="title">keys</span>()         // <span class="title">all</span> <span class="title">the</span> <span class="title">keys</span> <span class="title">in</span> <span class="title">the</span> <span class="title">table</span></span></span><br></pre></td></tr></table></figure><p>As for ordered symbol tables where keys are <code>Comparable</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolTable</span>&lt;<span class="title">Key</span>&lt;<span class="keyword">extends</span> <span class="title">COmparable</span>&lt;<span class="title">Key</span>&gt;&gt;, <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">SymbolTable</span>()                // <span class="title">create</span> <span class="title">a</span> <span class="title">symbol</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">put</span>(<span class="title">Key</span> <span class="title">key</span>, <span class="title">Value</span> <span class="title">val</span>) // <span class="title">put</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pair</span> <span class="title">into</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">delete</span>(<span class="title">Key</span> <span class="title">key</span>)         // <span class="title">remove</span> <span class="title">key</span>(<span class="title">and</span> <span class="title">its</span> <span class="title">value</span>) <span class="title">from</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">get</span>(<span class="title">Key</span> <span class="title">key</span>)            // <span class="title">get</span> <span class="title">the</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span> (<span class="title">null</span> <span class="title">if</span> <span class="title">key</span> <span class="title">is</span> <span class="title">absent</span>)</span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">contains</span>(<span class="title">Key</span> <span class="title">key</span>)    // <span class="title">whether</span> <span class="title">it</span> <span class="title">contains</span> <span class="title">a</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">isEmpty</span>()            // <span class="title">whether</span> <span class="title">table</span> <span class="title">is</span> <span class="title">empty</span></span></span><br><span class="line"><span class="class">  <span class="title">int</span> <span class="title">size</span>()                   // <span class="title">number</span> <span class="title">of</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pairs</span> <span class="title">in</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">min</span>()                    // <span class="title">smallest</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">max</span>()                    // <span class="title">largest</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">floor</span>(<span class="title">Key</span> <span class="title">key</span>)           // <span class="title">the</span> <span class="title">largest</span> <span class="title">key</span> <span class="title">which</span> <span class="title">is</span> <span class="title">smaller</span> <span class="title">than</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">ceiling</span>(<span class="title">Key</span> <span class="title">key</span>)         // <span class="title">the</span> <span class="title">smallest</span> <span class="title">key</span> <span class="title">which</span> <span class="title">is</span> <span class="title">gretaer</span> <span class="title">than</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">int</span> <span class="title">rank</span>(<span class="title">Key</span> <span class="title">key</span>)            // <span class="title">number</span> <span class="title">of</span> <span class="title">keys</span> <span class="title">that</span> <span class="title">is</span> <span class="title">strictly</span> <span class="title">less</span> <span class="title">than</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">select</span>(<span class="title">int</span> <span class="title">k</span>)            // <span class="title">key</span> <span class="title">of</span> <span class="title">rank</span> <span class="title">k</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">deleteMin</span>()             // <span class="title">delete</span> <span class="title">the</span> <span class="title">smallest</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">deleteMax</span>()             // <span class="title">delete</span> <span class="title">the</span> <span class="title">largest</span> <span class="title">key</span></span></span><br><span class="line">  int size(Key lo, Key hi)     // number of keys in[lo...hi]</span><br><span class="line">  <span class="function">Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span>  <span class="comment">// keys in [lo...hi] with sorted order</span></span></span><br><span class="line"><span class="function">  Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span>         <span class="comment">// all keys in the table with sorted order</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client example</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrequencyCounter</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FrequencyCounter</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> distinct = <span class="number">0</span>, words = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minlen = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        ST&lt;String, Integer&gt; st = <span class="keyword">new</span> ST&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compute frequency counts</span></span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            String key = StdIn.readString();</span><br><span class="line">            <span class="keyword">if</span> (key.length() &lt; minlen) <span class="keyword">continue</span>;</span><br><span class="line">            words++;</span><br><span class="line">            <span class="keyword">if</span> (st.contains(key)) &#123;</span><br><span class="line">                st.put(key, st.get(key) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                st.put(key, <span class="number">1</span>);</span><br><span class="line">                distinct++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find a key with the highest frequency count</span></span><br><span class="line">        String max = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        st.put(max, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : st.keys()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.get(word) &gt; st.get(max))</span><br><span class="line">                max = word;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StdOut.println(max + <span class="string">&quot; &quot;</span> + st.get(max));</span><br><span class="line">        StdOut.println(<span class="string">&quot;distinct = &quot;</span> + distinct);</span><br><span class="line">        StdOut.println(<span class="string">&quot;words    = &quot;</span> + words);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.2-implementations">Part.2 Implementations<a title="#part.2-implementations" href="#part.2-implementations"></a></h2><h3 id="sequential-search-in-an-unordered-linked-list.">Sequential search in an unordered linked list.<a title="#sequential-search-in-an-unordered-linked-list." href="#sequential-search-in-an-unordered-linked-list."></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequentialSearchST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Key key;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SequentialSearchST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;arguement to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to get() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) <span class="keyword">return</span> x.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to put() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) &#123;</span><br><span class="line">                x.val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        first = <span class="keyword">new</span> Node(key, val, first);</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Arguement to delete() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(first.key)) first = first.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x.next != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.next.key)) &#123;</span><br><span class="line">                x.next = x.next.next;</span><br><span class="line">                n--;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            queue.add(x.key);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SequentialSearchST&lt;String, Integer&gt; st = <span class="keyword">new</span> SequentialSearchST&lt;String, Integer&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;w&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;a&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;e&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.delete(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(st.size());</span><br><span class="line">        <span class="keyword">for</span> (String s : st.keys()) &#123;</span><br><span class="line">            System.out.println(s + <span class="string">&quot; &quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unsuccessful search and insert in an (unordered) linked-list symbol table both use N compares, and successful search uses N compares in the worst case.</p><p>In particular, inserting N keys into an initially empty linked-list symbol table uses ~N^2/2 compares.</p><h3 id="binary-search-in-an-ordered-array">Binary search in an ordered array<a title="#binary-search-in-an-ordered-array" href="#binary-search-in-an-ordered-array"></a></h3><p>The underlying data structure is two parallel array, with the keys kept in order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_CAPACITY = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Key[] keys;</span><br><span class="line">    <span class="keyword">private</span> Value[] vals;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinarySearchST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(INIT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinarySearchST</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        keys = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        vals = (Value[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> capacity &gt;= n;</span><br><span class="line">        Key[] tempk = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        Value[] tempv = (Value[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tempk[i] = keys[i];</span><br><span class="line">            tempv[i] = vals[i];</span><br><span class="line">        &#125;</span><br><span class="line">        vals = tempv;</span><br><span class="line">        keys = tempk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to get() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) <span class="keyword">return</span> vals[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to rank() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>, hi = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid  = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) hi = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) lo = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to put() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) &#123;</span><br><span class="line">            vals[i] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == keys.length) resize(<span class="number">2</span> * keys.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt; i; j--) &#123;</span><br><span class="line">            keys[j] = keys[j - <span class="number">1</span>];</span><br><span class="line">            vals[j] = vals[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        keys[i] = key;</span><br><span class="line">        vals[i] = val;</span><br><span class="line">        n++;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to delete is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == n || keys[i].compareTo(key) != <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            keys[j] = keys[j + <span class="number">1</span>];</span><br><span class="line">            vals[j] = vals[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n--;</span><br><span class="line">        keys[n] = <span class="keyword">null</span>;</span><br><span class="line">        keys[n] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; n == keys.length / <span class="number">4</span>) resize(keys.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Symbol table underflow error&quot;</span>);</span><br><span class="line">        delete(min());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Symbol table underflow error&quot;</span>);</span><br><span class="line">        delete(max());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     *  Ordered symbol table methods.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;called max() with empty symbol table&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> keys[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;called min() with empty symbol table&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> keys[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span> || k &gt;= size()) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;called select() with invalid argument: &quot;</span> + k);</span><br><span class="line">        <span class="keyword">return</span> keys[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to floor() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class="number">0</span>) <span class="keyword">return</span> keys[i];</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> keys[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">ceiling</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (i == n) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> keys[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;decond argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) <span class="keyword">return</span> rank(hi) - rank(lo) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> rank(hi) - rank(lo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to keys() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to keys() is null&quot;</span>);</span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> queue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rank(lo); i &lt; rank(hi); i++) queue.add(keys[i]);</span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) queue.add(keys[rank(hi)]);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     *  Check internal invariants.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isSorted() &amp;&amp; rankCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (keys[i].compareTo(keys[i-<span class="number">1</span>]) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rankCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (i != rank(select(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (keys[i].compareTo(select(rank(keys[i]))) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BinarySearchST&lt;String, Integer&gt; st = <span class="keyword">new</span> BinarySearchST&lt;&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;w&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;e&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.put(<span class="string">&quot;y&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        st.put(<span class="string">&quot;q&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        st.put(<span class="string">&quot;o&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;k&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        st.put(<span class="string">&quot;p&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rank: &quot;</span> + st.rank(<span class="string">&quot;h&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;select: &quot;</span> + st.select(<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;floor: &quot;</span> + st.floor(<span class="string">&quot;m&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Ceiling: &quot;</span> + st.ceiling(<span class="string">&quot;k&quot;</span>));</span><br><span class="line">        st.delete(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        st.deleteMin();</span><br><span class="line">        st.deleteMax();</span><br><span class="line">        <span class="keyword">for</span> (String s: st.keys(<span class="string">&quot;i&quot;</span>,<span class="string">&quot;z&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(s + <span class="string">&quot; &quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inserting a new key into an ordered array uses ~ 2N array accesses in the worst case, so inserting N keys into an initially empty table uses ~ N^2 array accesses in the worst case.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gls6tyaqnlj30hm0iyq48.jpg" alt="Screen Shot 2020-12-18 at 18.28.25" style="zoom:50%;"><h3 id="binary-search-trees">Binary search trees<a title="#binary-search-trees" href="#binary-search-trees"></a></h3><p>See more details about binary search tree <a href="https://oreodu.github.io/2020/20201005-Tree" target="_blank">here</a>.</p><p>We implement the symbol-table in  a way that combines the flexibility of insertion in linked lists with the efficiency of search in an ordered array.</p><p>The running times of algorithms on binary search trees depend on the shapes of the trees, which, in turn, depends on the order in which keys are inserted.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Key key;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> Node left, right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">// number of nodes in subtree</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> get(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> get(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls to put() with a null key&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = put(root, key, val);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = put(x.left, key, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = put(x.right, key, val);</span><br><span class="line">        <span class="keyword">else</span>  x.val = val;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST unberflow&quot;</span>);</span><br><span class="line">        root = deleteMin(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">        x.left = deleteMin(x.left);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST underflow&quot;</span>);</span><br><span class="line">        root = deleteMax(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMax</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">        x.right = deleteMax(x.right);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls delete() with a null key&quot;</span>);</span><br><span class="line">        root = delete(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = delete(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = delete(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">            <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">            Node t = x;</span><br><span class="line">            x = min(t.right);</span><br><span class="line">            x.right = deleteMin(t.right);</span><br><span class="line">            x.left = t.left;</span><br><span class="line">        &#125;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.right) + size(x.left);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls min() with empty BST&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> min(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">min</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls max() with empty BTS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> max(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">max</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to floor is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to floor with empty BST&quot;</span>);</span><br><span class="line">        Node x = floor(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node x,Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = floor(x.right, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Key x = floor2(root, key, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Node x, Key key, Key best)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> best;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.left, key, best);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.right, key, x.key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">ceiling</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to ceiling() with empty BTS&quot;</span>);</span><br><span class="line">        Node x = ceiling(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too large&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> ceiling(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = ceiling(x.left, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rank &lt; <span class="number">0</span> || rank &gt;= size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to select() is invaild: &quot;</span> + rank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> select(root, rank);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Key <span class="title">select</span><span class="params">(Node x, <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> leftsize = size(x.left);</span><br><span class="line">        <span class="keyword">if</span> (leftsize &gt; rank) <span class="keyword">return</span> select(x.left, rank);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (leftsize &lt; rank) <span class="keyword">return</span> select(x.right, rank - leftsize - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to rank() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> rank(key, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key, Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> rank(key, x.left);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> + size(x.left) + rank(key, x.right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> size(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Key&gt;();</span><br><span class="line">        <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to keys() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to keys() is null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        keys(root, queue, lo, hi);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> cmplo = lo.compareTo(x.key);</span><br><span class="line">        <span class="keyword">int</span> cmphi = hi.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt; <span class="number">0</span>) keys(x.left, queue, lo, hi);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt;= <span class="number">0</span> &amp;&amp; cmphi &gt;= <span class="number">0</span>) queue.add(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmphi &gt; <span class="number">0</span>) keys(x.right, queue, lo, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) <span class="keyword">return</span> rank(hi) - rank(lo) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> rank(hi) - rank(lo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(height(x.left), height(x.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">levelorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; keys = <span class="keyword">new</span> LinkedList&lt;Key&gt;();</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            Node x = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            keys.offer(x.key);</span><br><span class="line">            queue.offer(x.left);</span><br><span class="line">            queue.offer(x.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; q = <span class="keyword">new</span> Queue&lt;Key&gt;();</span><br><span class="line">  inorder(root, q);</span><br><span class="line">   <span class="keyword">return</span> q;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node x, Queue&lt;Key&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inorder(x.left, q);</span><br><span class="line">        q.enqueue(x.key);</span><br><span class="line">        inorder(x.right, q);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isBST()) System.out.println(<span class="string">&quot;Not in symmetric order!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isSizeConsistent()) System.out.println(<span class="string">&quot;Subtree counts not consistent!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isRankConsistent()) System.out.println(<span class="string">&quot;Ranks not consistent&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> isBST() &amp;&amp; isSizeConsistent() &amp;&amp; isRankConsistent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isBST(root, <span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">(Node x, Key min, Key max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (min != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(min) &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(max) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBST(x.left, min, x.key) &amp;&amp; isBST(x.right, x.key, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isSizeConsistent(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (x.size != size(x.left) + size(x.right) + <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSizeConsistent(x.left) &amp;&amp; isSizeConsistent(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRankConsistent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (i != rank(select(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Key key : keys())</span><br><span class="line">            <span class="keyword">if</span> (key.compareTo(select(rank(key))) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BST&lt;String, Integer&gt; st = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;J&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        st.put(<span class="string">&quot;A&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        st.put(<span class="string">&quot;S&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;K&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        st.put(<span class="string">&quot;L&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.put(<span class="string">&quot;Q&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        st.put(<span class="string">&quot;M&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The height of the tree is :&quot;</span> + st.height());</span><br><span class="line">        System.out.println(<span class="string">&quot;The Ceiling of the key C is :&quot;</span> + st.ceiling(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The floor of the key N is :&quot;</span> + st.floor(<span class="string">&quot;N&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The rank of the key J is :&quot;</span> + st.rank(<span class="string">&quot;J&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Select :&quot;</span> + st.select(<span class="number">4</span>));</span><br><span class="line">        st.deleteMax();</span><br><span class="line">        st.deleteMin();</span><br><span class="line">        <span class="keyword">for</span> (String s: st.keys()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s: st.levelorder()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glyzekktvoj30qk0ny764.jpg" alt="Screen Shot 2020-12-24 at 15.33.12" style="zoom: 33%;"><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glyzndqivzj313y0dgq5g.jpg" alt="Screen Shot 2020-12-24 at 15.42.04" class="φcx"></p><h2 id="part.3-applications">Part.3 Applications<a title="#part.3-applications" href="#part.3-applications"></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;associative-array&quot;&gt;Associative array&lt;a title=&quot;#associative-array&quot; href=&quot;#associative-array&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;a t
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/tags/Data-Structure/"/>
    
      <category term="binary search tree" scheme="https://oreodu.github.io/tags/binary-search-tree/"/>
    
  </entry>
  
  <entry>
    <title>Priority Queue</title>
    <link href="https://oreodu.github.io/2020/20201202-Priority-Queues/"/>
    <id>https://oreodu.github.io/2020/20201202-Priority-Queues/</id>
    <published>2020-12-02T15:29:25.000Z</published>
    <updated>2020-12-11T07:14:59.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="priority-queue">Priority Queue<a title="#priority-queue" href="#priority-queue"></a></h1><h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3><p>(概略图)</p><p><strong>· materials:</strong><br>· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>· Wikipedia</p><p>Often, we collect a set of items, then process the one with the largest key, then perhaps collect more items, then process the one with the current largest key, and so forth. We don’t need to have all keys in full sorted order. Two important operations during the process are insert and remove the maximum.</p><p>As for many abstract data structure they have limited operations so that they can maintain some features of the data that stored in it and provide some required results more efficiently. So does priority queue. Different from the stack(remove the item most recently added) or queue(remove the item least recently added), priority queue can remove the element based on the priority (Max: the largest item, Min: the smallest item) and also insert items in a very efficient way.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhfo4e6igj30v00hiwgf.jpg" alt="Screen Shot 2020-12-09 at 11.16.08" style="zoom:33%;"><h2 id="part.1-api-for-priority-queue">Part.1 API for priority queue<a title="#part.1-api-for-priority-queue" href="#part.1-api-for-priority-queue"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the key in the priority queue must be Comparable and immutable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt;</span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>()                   // <span class="title">create</span> <span class="title">an</span> <span class="title">empty</span> <span class="title">priority</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>(<span class="title">Comparator</span>&lt;<span class="title">Key</span>&gt; <span class="title">comparator</span>) </span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>(<span class="title">int</span> <span class="title">capacity</span>)       // <span class="title">create</span> <span class="title">a</span> <span class="title">priority</span> <span class="title">of</span> <span class="title">initial</span> <span class="title">capacity</span></span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>(<span class="title">int</span> <span class="title">capacity</span>, <span class="title">Comparator</span>&lt;<span class="title">Key</span>&gt; <span class="title">comparator</span>)</span></span><br><span class="line">  MaxPQ(Key[] a)            // create a priority with given keys</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(key v)</span>        <span class="comment">// insert a key into the priority queue</span></span></span><br><span class="line"><span class="function">  Key <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span>         <span class="comment">// delete the arbitary value in the pq with index i </span></span></span><br><span class="line"><span class="function">  Key <span class="title">delMax</span><span class="params">()</span>              <span class="comment">// return and remove the largest key</span></span></span><br><span class="line"><span class="function">  Key <span class="title">max</span><span class="params">()</span>                 <span class="comment">// return the largest key</span></span></span><br><span class="line"><span class="function">  <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>         <span class="comment">// is the priority quque empty</span></span></span><br><span class="line"><span class="function">  <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                <span class="comment">// number of entries in the priority queue</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  MinPQ&lt;Transaction&gt; pq = <span class="keyword">new</span> MinPQ&lt;Transaction&gt;();</span><br><span class="line">  <span class="keyword">while</span> (StdIn.hasNextLine()) &#123;</span><br><span class="line">    String line = StdIn.readLine();</span><br><span class="line">    Transaction item = <span class="keyword">new</span> Transaction(line);</span><br><span class="line">    pq.insert(item);</span><br><span class="line">    <span class="keyword">if</span> (pq.size() &gt; M)</span><br><span class="line">      pq.delMin();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.2-implementations">Part.2 Implementations<a title="#part.2-implementations" href="#part.2-implementations"></a></h2><p>Attention: The key in the priority queue should be immutable!</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhqc3jpzwj30v20n20v3.jpg" alt="Screen Shot 2020-12-09 at 17.25.11" style="zoom: 40%;"><h3 id="1.-unordered-or-ordered-array-implementation">1. Unordered or ordered array implementation<a title="#1.-unordered-or-ordered-array-implementation" href="#1.-unordered-or-ordered-array-implementation"></a></h3><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhez1hlqoj31180gw0w7.jpg" alt="Screen Shot 2020-12-09 at 10.52.03" style="zoom: 40%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnorderedMaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Key[] pq;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> N;     <span class="comment">// number of the pq</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UnorderedMaxPQ</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    pq = (Key[] <span class="keyword">new</span> Comparable[capacity];)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">    pq[N++] = x;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (less(max,i)) max = i;</span><br><span class="line">    &#125;</span><br><span class="line">    exch(max, N - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> pq[--N];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See ordered max priority queue code <a href="https://algs4.cs.princeton.edu/24pq/OrderedArrayMaxPQ.java.html" target="_blank">here</a>.</p><p>Except array, we can also use linked list(unordered and reverse-ordered) to store the data.</p><p>All of the elementary implementations just discussed have the property that <em>either</em> the <em>insert</em> or the <em>remove the maximum</em> operation takes linear time in the worst case.</p><h3 id="2.-binary-heap">2. Binary heap<a title="#2.-binary-heap" href="#2.-binary-heap"></a></h3><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhm2c13loj30n60maacz.jpg" alt="Screen Shot 2020-12-09 at 14.57.27" style="zoom:33%;"><p>We can see the implementations of binary heap and more details <a href="https://oreodu.github.io/2020/20201005-Tree" target="_blank">here</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Key</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key[] pq;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFACTOR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;Key&gt; comparator;  <span class="comment">// optional comparator</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>, comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Comparable[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> capacity, Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Object[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(Key[] a)</span> </span>&#123;</span><br><span class="line">        N = a.length;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Comparable[N + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(a,<span class="number">0</span>, pq, <span class="number">1</span>, N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            sink(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxPQ</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;The heap is underflow!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pq[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* pq maintains the smallest N items</span></span><br><span class="line"><span class="comment">        if (N == pq.length) &#123;</span></span><br><span class="line"><span class="comment">            if (x.compareTo(max()) &lt; 0) delete(1);</span></span><br><span class="line"><span class="comment">            else return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The key can&#x27;t be null!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (N == pq.length - <span class="number">1</span>) resize(REFACTOR * pq.length);</span><br><span class="line">        pq[++N] = x;</span><br><span class="line">        swim(N);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxPQ</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delete(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Priority queue underflow&quot;</span>);</span><br><span class="line">        Key max = pq[i];</span><br><span class="line">        exch(i, N--);</span><br><span class="line">        sink(i);</span><br><span class="line">        pq[N + <span class="number">1</span>] = <span class="keyword">null</span>;  <span class="comment">// prevent loitering</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxPQ</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> capacity &gt; N;</span><br><span class="line">        Key[] newArray = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        System.arraycopy(pq,<span class="number">0</span>, newArray, <span class="number">0</span>, N + <span class="number">1</span>);</span><br><span class="line">        pq = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions to restore the heap invariant.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k)) &#123;</span><br><span class="line">            exch(k, k/<span class="number">2</span>);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions for compares and swaps.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Comparable&lt;Key&gt;) pq[i]).compareTo(pq[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> comparator.compare(pq[i], pq[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Key tmp = pq[i];</span><br><span class="line">        pq[i] = pq[j];</span><br><span class="line">        pq[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is heap[1..n] a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxPQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pq[i] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N+<span class="number">1</span>; i &lt; pq.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pq[i] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pq[<span class="number">0</span>] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxPQOrdered(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is subtree of heap[1..n] rooted at k a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxPQOrdered</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; N) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span>*k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left  &lt;= N &amp;&amp; less(k, left))  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= N &amp;&amp; less(k, right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxPQOrdered(left) &amp;&amp; isMaxPQOrdered(right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Iterator.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Key&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeapIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> BinaryMaxHeap&lt;Key&gt; copy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeapIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size());</span><br><span class="line">            <span class="keyword">else</span> copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size(), comparator);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">                copy.insert(pq[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !copy.isEmpty(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Key <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> copy.delMax();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        BinaryMaxHeap&lt;Integer&gt; bh = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(a);</span><br><span class="line">        System.out.println(bh.max());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See the implementation of MinPQ <a href="https://algs4.cs.princeton.edu/24pq/MinPQ.java.html" target="_blank">here</a>.</p><p>See more different priority queue: <a href="IndexMaxPQ">IndexMaxPQ</a>, <a href="https://algs4.cs.princeton.edu/24pq/IndexMinPQ.java.html" target="_blank">IndexMinPQ</a>, <a href="https://algs4.cs.princeton.edu/24pq/Multiway.java.html" target="_blank">Multiway</a>.</p><h2 id="part.3-applications">Part.3 Applications<a title="#part.3-applications" href="#part.3-applications"></a></h2><p><strong>·</strong> <strong>Event-driven simulation (customers in a line, colliding particles)</strong><br><strong>·</strong> Numerical computation (reducing roundoff error)<br><strong>·</strong> Data compression (Huffman codes)<br><strong>·</strong> Graph searching (Dijkstra’s algorithm, Prim’s algorithm)<br><strong>·</strong> Number theory (sum of powers)<br><strong>·</strong> Artificial intelligence (A* search)<br><strong>·</strong> Statistics (maintain largest M values in a sequence)<br><strong>·</strong> Operating systems (loading balancing, interrupt handling)<br><strong>·</strong> Discrete optimization (bin packing, scheduling)<br><strong>·</strong> Spam filtering (Bayesian spam filter)</p><h3 id="example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)">Example : Molecular dynamics simulation of hard discs (Event-driven simulation)<a title="#example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)" href="#example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)"></a></h3><p>Goal: Simulate the motion of N moving particles that behave according to the laws of elastic collision.</p><p>Hard disc model<br>・Moving particles interact via elastic collisions with each other and walls.<br>・Each particle is a disc with known position, velocity, mass, and radius.<br>・No other forces.</p><p>Event-driven simulation (Change state only when something happens.)<br>・Between collisions, particles move in straight-line trajectories.<br>・Focus only on times when collisions occur.<br>・Collision prediction.<br>・Maintain PQ of collision events, prioritized by time.<br>・Collision resolution.<br>・Remove the min = get next collision.</p><p>See more details <a href="https://algs4.cs.princeton.edu/61event/" target="_blank">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;priority-queue&quot;&gt;Priority Queue&lt;a title=&quot;#priority-queue&quot; href=&quot;#priority-queue&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;a title=&quot;#overv
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Heapsort" scheme="https://oreodu.github.io/tags/Heapsort/"/>
    
      <category term="binary heap" scheme="https://oreodu.github.io/tags/binary-heap/"/>
    
  </entry>
  
  <entry>
    <title>File Systems</title>
    <link href="https://oreodu.github.io/2020/20201118-File-Systems/"/>
    <id>https://oreodu.github.io/2020/20201118-File-Systems/</id>
    <published>2020-11-17T17:42:00.000Z</published>
    <updated>2020-12-27T07:05:06.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="file-systems">File Systems<a title="#file-systems" href="#file-systems"></a></h1><p>Abstracting Files – Virtual File Systems (VFS)</p><h2 id="part.1-general-presentation">Part.1 General Presentation<a title="#part.1-general-presentation" href="#part.1-general-presentation"></a></h2><h3 id="the-virtual-file-system(vfs)">The virtual File System(VFS)<a title="#the-virtual-file-system(vfs)" href="#the-virtual-file-system(vfs)"></a></h3><p>Abstract all the filesystems models supported by Linux and allow them to coexitst and cooperate.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwj9zjaq2j30lk0aedhi.jpg" alt="Screen Shot 2020-11-21 at 09.24.08" style="zoom:50%;"><h3 id="common-filesystem-interface">Common filesystem interface<a title="#common-filesystem-interface" href="#common-filesystem-interface"></a></h3><p>VFS allows user-space to access files independently of the concrete filesystem they are stored on, with a common interface. Interface can work transparently between filesystems.</p><h3 id="filesystem-abstraction-layer">Filesystem abstraction layer<a title="#filesystem-abstraction-layer" href="#filesystem-abstraction-layer"></a></h3><p>VFS redirect user-space requests to the corresponding concrete filesystem. Developing a new filesystem for Linux means conforming with the bottom interface.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwjybnua2j30tq086wgd.jpg" alt="Screen Shot 2020-11-21 at 09.47.36" style="zoom: 50%;"><h3 id="unix-filesystems">Unix filesystems<a title="#unix-filesystems" href="#unix-filesystems"></a></h3><p>Filesystem can refer to a filesystem type or a partition. Hierarchical tree of files organized into directories.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwk64e3hdj30qq0cw76o.jpg" alt="Screen Shot 2020-11-21 at 09.55.06" style="zoom:50%;"><p>File: ordered string bytes from file address @0 to address @file_size-1. The associated metadata (name, assess permissions, modification date, etc) is separated from the file data into specific objects(<code>inodes</code>, <code>dentries)</code>.</p><p>Directory: Folder containing files or other directories(sub-directories). Sub-directories can be nested to create path.</p><h2 id="part.2-vfs-data-structures">Part.2 VFS data structures<a title="#part.2-vfs-data-structures" href="#part.2-vfs-data-structures"></a></h2><h3 id="generalities">Generalities<a title="#generalities" href="#generalities"></a></h3><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwkksu6qtj310w0ju79j.jpg" alt="Screen Shot 2020-11-21 at 10.09.12" style="zoom: 33%;"><p><code>dentry</code>: it is associated with a file or a directory and store the file/directory name and its location in the directory tree. It performs directory specific operations and constructed on the fly as files and directories are accessed: generally no on-disk representation.</p><h4 id="dentry-states">Dentry states<a title="#dentry-states" href="#dentry-states"></a></h4><p>A dentry can be used , unused or negative.<br>Used: corresponds to a valid inode(pointed by d_inode) with one or more users(d_count)<br>Unused: valid inode, but no current users.(kept in RAM for caching, can be discarded)<br>Negative: does not point to a valid inode.(kept around for caching and can be discarded)</p><h4 id="the-dentry-cache">The dentry cache<a title="#the-dentry-cache" href="#the-dentry-cache"></a></h4><p>Dentries are constructed on demand and kept in RAM for quick future pathname lookups.<br>There are three parts:</p><ol><li>Linked list of used dentries linked by the <code>i_dentry</code> field of their inode. (One inode can have multiple links, thus multiple dentries)</li><li>Linked list of LRU sorted unused and negative dentries.(LRU: quick reclamation from the tail of the list.)</li><li>Hash table + hash function to quickly resolve a path into the corresponding dentry present in the dcache.<br>Hash table:  <code>dentry_hashtable</code> array, each element is a pointer to a list of dentries hashing to the same value.<br>Hashing function: <code>d_hash()</code>, filesystem can provide its own hshing function.<br>Dentry lookup in the dcache: <code>d_lookup()</code>, returns dentry on success, NULL on failure.<br>Inodes are similarly cached in RAM, in the inode cache, dentries in the dcache are pining inodes in the node cache.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/dcache.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> &#123;</span></span><br><span class="line">  <span class="keyword">atmoic_t</span> d_conut; <span class="comment">/* usage count */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> d_flags; <span class="comment">/* dentry flags */</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> d_lock; <span class="comment">/* per-dentry lock */</span></span><br><span class="line">  <span class="keyword">int</span> d_mounted; <span class="comment">/* indicated if it is a mount point */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">d_inode</span>;</span> <span class="comment">/* assoociated inode */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">d_dash</span>;</span> <span class="comment">/* list of hash table entries */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `inculde/linux/dcache.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> &#123;</span></span><br><span class="line">  <span class="comment">/* determine if an entry to use from the dcache is valid, generally set to NULL */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_revalidate)(struct dentry*, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">int</span> (*d_weak_revalidate)(struct dentry *, unsighned <span class="keyword">int</span>);</span><br><span class="line">  <span class="comment">/* Create a hash value for entry to insert in the dcache */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_hash)(<span class="keyword">const</span> struct dentry *, struct qstr *);</span><br><span class="line">  <span class="comment">/* compare two filenames, requires `dcache_lock` */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_compare)(<span class="keyword">const</span> struct dentry *,</span><br><span class="line">               , <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> struct qstr *);</span><br><span class="line">  <span class="comment">/* called by VFS when `d_count` reaches zero, requires `dcache_lock` and `d_lock` */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_delete)(<span class="keyword">const</span> struct dentry);</span><br><span class="line">  <span class="keyword">int</span> (*d_init)(struct dentry *);</span><br><span class="line">  <span class="comment">/* called when the dentry is going to be freed */</span></span><br><span class="line">  <span class="keyword">void</span> (*d_release)(struct dentry *);</span><br><span class="line">  <span class="keyword">void</span> (*d_prune)(struct dentry *);</span><br><span class="line">  <span class="comment">/* called when the dentry looses its inode and calls `input()` */</span></span><br><span class="line"><span class="keyword">void</span> (*d_iput)(struct dentry *, struct inode *);</span><br><span class="line"><span class="keyword">char</span> *(*d_dname)(struct dentry *, <span class="keyword">char</span> *, <span class="keyword">int</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *(*<span class="title">d_automount</span>)(<span class="keyword">struct</span> <span class="title">path</span> *);</span></span><br><span class="line"><span class="keyword">int</span> (*d_manage)(<span class="keyword">const</span> struct path *, <span class="keyword">bool</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *(*<span class="title">d_real</span>)(<span class="keyword">struct</span> <span class="title">dentry</span> *</span></span><br><span class="line"><span class="class">                           , <span class="title">const</span> <span class="keyword">struct</span> <span class="title">inode</span> *, <span class="title">unsigned</span> <span class="title">int</span>);</span></span><br><span class="line">&#125;__cacheline_aligned;</span><br></pre></td></tr></table></figure><p><code>inode</code>: it is related to file or directory and contains metadata(file size, owner id/group, etc) plus information about how to manipulate the file/directory. It must be produced by the filesystem on-demand when a file/directory is accessed.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `inculde/linux/fs.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">i_hash</span>;</span> <span class="comment">/* hash list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">i_list</span>;</span> <span class="comment">/* list of nodes */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">i_sb_list</span>;</span> <span class="comment">/* list of superblock */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">i_dentry</span>;</span> <span class="comment">/* list of dentries */</span></span><br><span class="line">  unsighned <span class="keyword">long</span> i_ino; <span class="comment">/* inode number */</span></span><br><span class="line">  <span class="keyword">atomic_t</span> i_count; <span class="comment">/* reference counter */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i_nlink; <span class="comment">/* number of hard links */</span></span><br><span class="line">  <span class="keyword">uid_t</span> i_uid; <span class="comment">/* uer id of owner */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/fs.h` */</span></span><br><span class="line"><span class="comment">/* invoke on an innode object */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode_operations</span> &#123;</span></span><br><span class="line">  <span class="comment">/* create a new node with access mode `mode` */</span></span><br><span class="line">  <span class="comment">/* call from `creat()` and `open()` syscalls */</span></span><br><span class="line">  <span class="keyword">int</span> (*creat) (struct inode *, struct dentry *, <span class="keyword">umode_t</span>, <span class="keyword">bool</span>);</span><br><span class="line">  <span class="comment">/* create a hard link with name `dentry` in the directory `dir`, pointing to old_dentry */</span></span><br><span class="line">  <span class="keyword">int</span> (*link) (struct dentry *, struct inode *, struct dentry *);</span><br><span class="line">  <span class="comment">/* remove an inode from the directory `dir` */</span></span><br><span class="line">  <span class="keyword">int</span> (*unlink) (struct inode *, struct dentry);</span><br><span class="line">  <span class="comment">/* creates a symbolic link named `symname`, to the file `dentry` in directory `dir` */</span></span><br><span class="line">  <span class="keyword">int</span> (*symlink) (struct inode *, struct dentry *, <span class="keyword">const</span> <span class="keyword">char</span>*);</span><br><span class="line">  <span class="comment">/* create a directory inside `dir` with name `dentry` */</span></span><br><span class="line">  <span class="keyword">int</span> (*mkdir) (struct inode *, struct dentry *, <span class="keyword">umode_t</span>);</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>superblock</code>: it contains global information about the filesystem(partition) and created by filesystem and given to VFS at mount time. Disk-based filesystem store it in a special location and other filesystems have a way to generate it at mount time.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/fs.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">s_list</span>;</span>    <span class="comment">/* list of all superblocks */</span></span><br><span class="line">  <span class="keyword">dev_t</span> s_dev;                <span class="comment">/* identifier */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> s_blocksize; <span class="comment">/* block size (bytes) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> s_blocksize_bits <span class="comment">/* block size (bits) */</span></span><br><span class="line">  <span class="keyword">loff_t</span> s_maxbytes; <span class="comment">/* max file size */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> *<span class="title">s_type</span>;</span> <span class="comment">/* filesystem type */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span> *<span class="title">s_op</span>;</span> <span class="comment">/* superblock operations */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span> *<span class="title">dq_op</span>;</span> <span class="comment">/* quota methods */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span> *<span class="title">s_qcop</span>;</span> <span class="comment">/* quota control methods */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/fs.h` */</span></span><br><span class="line"><span class="comment">/* each field is a function pointer operating on a struct super_block */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span> &#123;</span></span><br><span class="line">  <span class="comment">/* creats and initialize a new inode */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *(*<span class="title">alloc_inode</span>) (<span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">sb</span>);</span></span><br><span class="line">  <span class="comment">/* deallocate an inode */</span></span><br><span class="line">  <span class="keyword">void</span> (*destory_inode) (struct inode *);</span><br><span class="line">  <span class="comment">/* marks an inode as dirty(ext filesystems) */</span></span><br><span class="line">  <span class="keyword">void</span> (*dirty_inode) (struct inode *, <span class="keyword">int</span> flags);</span><br><span class="line">  <span class="comment">/* writes the inode to disk, wait specifies if the wirte should be synchronoous */</span></span><br><span class="line">  <span class="keyword">int</span> (*write_inode) (struct inode *, struct writeback_control *wbc);</span><br><span class="line">  <span class="comment">/* called by VFS when the last reference to the inode is dropped */</span></span><br><span class="line">  <span class="keyword">int</span> (*drop_inode) (struct inode *);</span><br><span class="line">  <span class="keyword">void</span> (*evict_inode) (struct inode*);</span><br><span class="line">  <span class="comment">/* called by VFS on unmoount(holding s lock) */</span></span><br><span class="line">  <span class="keyword">void</span> (*put_super) (struct super_block *);</span><br><span class="line">  <span class="comment">/* synchronize filesystem metadata with on-disk filesystem, wait specifies if the operation should be synchronous */</span></span><br><span class="line">  <span class="keyword">int</span> (*sync_fs) (struct super_block *sb, <span class="keyword">int</span> wait);</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>file</code>: it contains information about a file opened by a process and is created on <code>open()</code> and destroyed on <code>close()</code>.<br>Two processes opening the same file: Two file objects, pointing to the same unique dentry, that points itself on a unique inode.<br>No corresponding on-disk data structure.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in inculde/linux/fs.h */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">f_path</span>;</span> <span class="comment">/* contains the dentry */</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> f_lock; <span class="comment">/* lock */</span></span><br><span class="line">  <span class="keyword">atomic_t</span> f_count; <span class="comment">/* usage count */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> f_flags; <span class="comment">/* open flags */</span></span><br><span class="line">  <span class="keyword">mode_t</span> f_mode; <span class="comment">/* file access mode */</span></span><br><span class="line">  <span class="keyword">logg_t</span> f_pos; <span class="comment">/* file offset */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fown_struct</span> <span class="title">f_owner</span>;</span> <span class="comment">/* owner data for signals */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">f_cred</span>;</span> <span class="comment">/* file credentials */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file_ra_state</span> <span class="title">f_ra</span>;</span> <span class="comment">/* read-ahead state */</span></span><br><span class="line">  u64 f_version; <span class="comment">/* version number */</span></span><br><span class="line">  <span class="keyword">void</span> *private_data; <span class="comment">/* private data */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">f_ep_link</span>;</span> <span class="comment">/* list of epoll links */</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> f_ep_lock; <span class="comment">/* epoll lock */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">f_mapping</span>;</span> <span class="comment">/* page cache mapping */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">  <span class="comment">/* update file offset */</span></span><br><span class="line"><span class="keyword">loff_t</span> (*llseek) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</span><br><span class="line">  <span class="comment">/* read operation */</span></span><br><span class="line"><span class="keyword">ssize_t</span> (*read) (struct file *, <span class="keyword">char</span> user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *); </span><br><span class="line">  <span class="comment">/* write operation */</span></span><br><span class="line">  <span class="keyword">ssize_t</span> (*write) (struct file *, <span class="keyword">const</span> <span class="keyword">char</span> user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line">  <span class="keyword">ssize_t</span> (*read_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">  <span class="keyword">ssize_t</span> (*write_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">  <span class="keyword">int</span> (*iterate) (struct file *, struct dir_context *);</span><br><span class="line">  <span class="keyword">int</span> (*iterate_shared) (struct file *, struct dir_context *);</span><br><span class="line">  <span class="comment">/* sleeps waiting for activity on a given file */</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(struct file *, struct poll_table_struct *)</span></span>;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>VFS implemented in a manner very close to object-oriented programming.</p><h2 id="part.3-filesystem-and-process-data-structures">Part.3 Filesystem and process data structures<a title="#part.3-filesystem-and-process-data-structures" href="#part.3-filesystem-and-process-data-structures"></a></h2><h3 id="filesystem-data-structures">Filesystem data structures<a title="#filesystem-data-structures" href="#filesystem-data-structures"></a></h3><p><code>struct file_system_type</code>: information about a specific concrete filesystem type.<br>One per filesystem supported (chosen at compile time) independently of the mounted filesystem.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `incule/linux/fs.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name; <span class="comment">/* name */</span></span><br><span class="line"><span class="keyword">int</span> fs_flags; <span class="comment">/* flags */</span></span><br><span class="line"><span class="comment">/* mount a partition */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *(*<span class="title">mount</span>) (<span class="keyword">struct</span> <span class="title">file_system_type</span> *</span></span><br><span class="line"><span class="class">                           , <span class="title">int</span>, <span class="title">const</span> <span class="title">char</span> *, <span class="title">void</span> *);</span></span><br><span class="line"><span class="comment">/* terminate access to the superblock */</span></span><br><span class="line"><span class="keyword">void</span> (*kill_sb) (struct super_block *); <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> * <span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">fs_supers</span>;</span></span><br><span class="line"><span class="comment">/* runtime lock validation */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_lock_key</span>;</span></span><br><span class="line"><span class="comment">/* module owning the fs */</span></span><br><span class="line"><span class="comment">/* linked list of fs types */</span></span><br><span class="line"><span class="comment">/* linked list of superblocks */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_umount_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_vfs_rename_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_writers_key</span>[<span class="title">SB_FREEZE_LEVELS</span>];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_lock_key</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_mutex_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_mutex_dir_key</span>;</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>When a filesystem is mounted, a <code>vfsmount</code> structure is created which represents a specific instance of the filesystem: a mount point.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/mount.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_root</span>;</span> <span class="comment">/* root of the mounted tree */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">mnt_sb</span>;</span> <span class="comment">/* pointer to superblock */</span></span><br><span class="line"><span class="keyword">int</span> mnt_flags; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="process-data-structure">Process data structure<a title="#process-data-structure" href="#process-data-structure"></a></h3><p><code>struct_files_struct</code>: contains per-process information about opened files and file descriptors. ( defined in <code>include/linux/fdtable.h</code>)<br><code>struct_fs_struct</code>: filesystem information related to a process.(defined in <code>include/linux/fs struct.h</code>)<br><code>struct_mnt_namespace</code>: provide processes with unique views of a mounted filesystem.(defined in <code>fs/mount.h</code>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;file-systems&quot;&gt;File Systems&lt;a title=&quot;#file-systems&quot; href=&quot;#file-systems&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Abstracting Files – Virtual File Systems (VFS)&lt;
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/tags/Linux/"/>
    
      <category term="File Systems" scheme="https://oreodu.github.io/tags/File-Systems/"/>
    
  </entry>
  
  <entry>
    <title>Interrupts</title>
    <link href="https://oreodu.github.io/2020/20201109-Interrupts/"/>
    <id>https://oreodu.github.io/2020/20201109-Interrupts/</id>
    <published>2020-11-09T12:05:00.000Z</published>
    <updated>2020-11-09T14:03:40.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="interrupts">Interrupts<a title="#interrupts" href="#interrupts"></a></h1><h2 id="part.1-general-information">Part.1 General information<a title="#part.1-general-information" href="#part.1-general-information"></a></h2><p>Because the device is slow compared to the CPU, we can have hardware devices signal the CPU that they are ready.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj75qsgrcj313y08uacn.jpg" alt="Screen Shot 2020-11-09 at 20.32.05" style="zoom: 33%;"><p><strong>Exceptions</strong> are interrupt issued by the CPU executing some code which happen synchronously with respect to the CPU clock. (Software interrupts, as opposed to hardware devices.) They are also managed by the kernel the same way as hardware interrupts.<br>Program faults: divide-by-zero, page fault, general protection fault, etc.<br>Voluntary exceptions: <code>INT</code> assembly instruction, for example for syscall invocation</p><p>Interrupts are electrical signals multiplexed by the interrupt controller. They can be received in a completely non-deterministic way. The kernel/user space can be interrupted at (nearly) any time to process an interrupt.</p><p><strong>Device identifier</strong>: interrupt line or Interrupt ReQuest (IRQ)<br><strong>Function executed by the CPU</strong>: interrupt handler or Interrupt Service Routine (ISR)</p><p>The interrupt handlers (ISR) are kernel C fuctions associated to interrupt lines.<br>Specific prototype, run in interrupt context, opposite to process context (system call).<br>Also called atomic context as one cannot sleep in an ISR. It is not a schedulable entity.</p><p>Managing an interrupt involves two high-level steps:<br>· Acknowledging the reception (mandatory, fast)<br>· Potentially performing additional work (possibly slow)</p><p>Processing an interrupt is broken down between:<br>· Top-half: time-critical operations (ex: ack), run immediately upon reception.<br>· Bottom-half: less critical/time-consuming work, run later with other interrupts enabled</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* (block 1) */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">omap_kp_probe</span><span class="params">(struct platform_device *pdev)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  omap_kp-&gt;irq = platform_get_irq(pdev, <span class="number">0</span>); </span><br><span class="line">  <span class="keyword">if</span>(omap_kp-&gt;irq &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(request_irq(omap_kp-&gt;irq, omap_kp_interrupt, <span class="number">0</span>,<span class="string">&quot;omap-keypad&quot;</span>, omap_kp) &lt; <span class="number">0</span>) </span><br><span class="line">      <span class="keyword">goto</span> err4;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (block 2) */</span></span><br><span class="line"><span class="comment">/* Tophalf: interrupt handler (ISR) */</span> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">irqreturn_t</span> <span class="title">omap_kp_interrupt</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* disable keyboard interrupt */</span> </span><br><span class="line">  omap_writew(<span class="number">1</span>, <span class="comment">/* . . . */</span>);</span><br><span class="line">  tasklet_schedule(&amp;kp_tasklet);</span><br><span class="line">  <span class="keyword">return</span> IRQ_HANDLED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (block 3) */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DECLARE_TASKLET_DISABLED</span><span class="params">(kp_tasklet, omap_kp_tasklet, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (block 4) */</span> </span><br><span class="line"><span class="comment">/* Bottom half */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">omap_kp_tasklet</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> data)</span> </span>&#123;</span><br><span class="line"> <span class="comment">/* performs lot of work */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.2-registering-&amp;-writing-an-interrupt-handler">Part.2 Registering &amp; writing an interrupt handler<a title="#part.2-registering-&amp;-writing-an-interrupt-handler" href="#part.2-registering-&amp;-writing-an-interrupt-handler"></a></h2><h3 id="interrupt-handler-registration:-request_irq()">Interrupt handler registration: <code>request_irq()</code><a title="#interrupt-handler-registration:-request_irq()" href="#interrupt-handler-registration:-request_irq()"></a></h3><p>Return 0 on success or standard error code and can sleep.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* in the includes/linux/interrupt.h */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> must_check</span><br><span class="line">request_irq(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq, <span class="keyword">irq_handler_t</span> handler, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags,<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">void</span> *dev)</span><br></pre></td></tr></table></figure><p><code>irp</code>: interrupt number.<br><code>handler</code>: function pointer to the actual handler.<br><code>name</code>: String describing the associated device.<br><code>dev</code>: unique value identifying a device among a set of devices sharing an interrupt line.<br><code>flag</code>:  IRQF_DISABLED, IRQF_SAMPLE_RANDOM, IRQF_TIMER, IRQF_SHARED</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// registration</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">omap_kp_probe</span><span class="params">(struct platform_device *pdev)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  <span class="keyword">if</span>(request_irq(omap_kp-&gt;irq, omap_kp_interrupt, <span class="number">0</span>, <span class="string">&quot;omap-keypad&quot;</span>, omap_kp) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> err4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handler</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">irqreturn_t</span> <span class="title">omap_kp_interrupt</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id)</span> </span>&#123;</span><br><span class="line">  omap_writew(<span class="number">1</span>, OMAP1_MPUIO_BASE+ OMAP_MPUIO_KBD_MASKIT);</span><br><span class="line">  tasklet_schedule(&amp;kp_tasklet);</span><br><span class="line">  <span class="keyword">return</span> IRQ_HANDLED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// free an irq </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">omap_kp_remove</span><span class="params">(struct platform_device *pdev)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  free_irq(omap_kp-&gt;irq, omap_kp);</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="inside-the-interrupt">Inside the interrupt<a title="#inside-the-interrupt" href="#inside-the-interrupt"></a></h3><p>prototype:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">irqreturn_t</span> <span class="title">handler_name</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev)</span></span>;</span><br></pre></td></tr></table></figure><p><code>dev</code> parameter:<br>Must be unique between handlers sharing an interrupt line. Set when registering the handler and can be accessed by the handler.</p><p>Return value:<br><code>IRQ_NONE</code>: the expected device was not the source of the interrupt.<br><code>IRQ_HANDLED</code>: correct invocation</p><h3 id="shared-handlers">Shared handlers<a title="#shared-handlers" href="#shared-handlers"></a></h3><p>On registration: <code>IRQ_SHARED</code> flag, <code>dev</code> must be unique (ex: a pointer to a data structure representing the device in question).</p><p>Handler must be able to detect that the device actually generated the interrupt it is called from. When an interrupt occurs on a shared line, the kernel executes sequentially all the handlers sharing this line. Need hardware support at the device level and detection code in the handler.</p><h2 id="part.3-interrupt-context">Part.3 Interrupt context<a title="#part.3-interrupt-context" href="#part.3-interrupt-context"></a></h2><p>The kernel can execute in Interrupt vs process context.<br>· In process context following a syscall/an exception<br>· In interrupt context upon a hardware interrupt reception</p><p>In interrupt context, sleeping/blocking is not possible.<br>· The handler is not a schedulable entity (user/kernel thread)<br>· No kmalloc(x, GFP KERNEL). Use GFP ATOMIC<br>· No use of blocking synchronization primitives (ex: mutex). Use spinlocks</p><p>Interrupt context is time-critical. Other code is interrupted.</p><p>Interrupt handler stack: 1 dedicated stack per core for handlers (1 page)</p><h2 id="part.4-interrupt-handling-internals-in-linux">Part.4 Interrupt handling internals in Linux<a title="#part.4-interrupt-handling-internals-in-linux" href="#part.4-interrupt-handling-internals-in-linux"></a></h2><h3 id="interrupt-processing-path">Interrupt processing path<a title="#interrupt-processing-path" href="#interrupt-processing-path"></a></h3><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj948fvn5j317g0hk0z6.jpg" alt="Screen Shot 2020-11-09 at 21.39.58" style="zoom:33%;"><p>Specific entry point for each interrupt line.<br>· Saves the interrupt number and the current registers.<br>· call <code>do_IRQ()</code>.</p><p>do IRQ():<br>· Acknowledge interrupt reception and disable the line.<br>· calls architecture specific functions.</p><p>Call chain ends up by calling <code>_handle_irq_event_percpu()</code><br>· Re-enable interrupts on the line if IRQF DISABLED was not, specified during handler registration.<br>· Call the handler if the line is not shared.<br>· Otherwise iterate over all the handlers registered on that line.<br>· Disable interrupts on the line again if they were previously enabled.</p><p><code>do_IRQ()</code> returns to entry point that call <code>ret_from_intr()</code>.<br>· Checks if reschedule is needed (need resched).<br>· Restore register values.</p><h2 id="part.5-/proc/interrupts">Part.5 /proc/interrupts<a title="#part.5-/proc/interrupts" href="#part.5-/proc/interrupts"></a></h2><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj9dtp630j312c08eq53.jpg" alt="Screen Shot 2020-11-09 at 21.49.17" style="zoom:33%;"><p>Columns:<br>· Interrupt line (not showed if no handler installed).<br>· Per-cpu occurrence count.<br>· Related interrupt controller name.<br>·  Edge/level (fasteoi): way the interrupt is triggered.<br>· Associated device name.</p><h2 id="part.6-interrupt-control">Part.6 Interrupt control<a title="#part.6-interrupt-control" href="#part.6-interrupt-control"></a></h2><p>Kernel code sometimes needs to disable interrupts to ensure atomic execution of a section of code.</p><p>The kernel provides an API to disable/enable interrupts:<br>· Disable interrupts for the current CPU.<br>· Mask an interrupt line for the entire machine.</p><p>Note that disabling interrupts does not protect against concurrent access from other cores. Need locking, often used in conjunction with interrupts disabling.</p><h3 id="disabling-interrupts-on-the-local-core">Disabling interrupts on the local core<a title="#disabling-interrupts-on-the-local-core" href="#disabling-interrupts-on-the-local-core"></a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">local_irq_disable();</span><br><span class="line"><span class="comment">/*...*/</span></span><br><span class="line">local_irq_enable();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Need to save the interrupts state in order not to disable them twice */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags; </span><br><span class="line">local_irq_save(flags);     <span class="comment">/* disable interrupts if needed */</span></span><br><span class="line">local_irq_restore(flags); <span class="comment">/* restores interrupts to the previous state */</span> </span><br><span class="line"><span class="comment">/* flags is passed as value but both functions are actually macros */</span></span><br></pre></td></tr></table></figure><h3 id="disabling-/-enabling-a-specific-interrupt-line">Disabling / enabling a specific interrupt line<a title="#disabling-/-enabling-a-specific-interrupt-line" href="#disabling-/-enabling-a-specific-interrupt-line"></a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disable_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>;        <span class="comment">/* Does not return until any currently running handler finishe */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disable_irq_nosync</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>; <span class="comment">/* Do not wait for handler termination */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enable_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>;      <span class="comment">/* Enables interrupt line */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">synchronize_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>; <span class="comment">/* Wait for a specific line handler to terminate before returning */</span></span><br></pre></td></tr></table></figure><p>These enable/disable calls can nest. Must enable as much times as the previous disabling call number.<br>These functions do not sleep. They can be called from interrupt context.</p><h3 id="querying-the-status-of-the-interrupt-system">Querying the status of the interrupt system<a title="#querying-the-status-of-the-interrupt-system" href="#querying-the-status-of-the-interrupt-system"></a></h3><p><code>in_interrupt()</code> returns nonzero if the calling code is in interrupt context. Handler or bottom-half.<br><code>in_irq()</code> returns nonzero only if in a handler.<br>To check if the code is in process context: <code>!in_interrupt()</code>.</p><p>Interrupts: <a href="http://www.mathcs.emory.edu/~jallen/Courses/355/Syllabus/6-io/0-External/interupt.html">http://www.mathcs.emory.edu/~jallen/Courses/355/Syllabus/6-io/0-External/interupt.html</a><br>More details on Linux interrupt management (v3.18): <a href="https://0xax.gitbooks.io/linux-insides/content/interrupts/">https://0xax.gitbooks.io/linux-insides/content/interrupts/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;interrupts&quot;&gt;Interrupts&lt;a title=&quot;#interrupts&quot; href=&quot;#interrupts&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;part.1-general-information&quot;&gt;Part.1 General informa
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Device Drivers</title>
    <link href="https://oreodu.github.io/2020/20201109-Device-Drivers/"/>
    <id>https://oreodu.github.io/2020/20201109-Device-Drivers/</id>
    <published>2020-11-09T01:25:00.000Z</published>
    <updated>2020-11-09T12:01:18.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="device-drivers">Device Drivers<a title="#device-drivers" href="#device-drivers"></a></h1><p>Abstracting Devices – Modules and Interrupts</p><h2 id="part.1-kernel-modules:-presentation">Part.1 Kernel modules: presentation<a title="#part.1-kernel-modules:-presentation" href="#part.1-kernel-modules:-presentation"></a></h2><p>Modules are pieces of kernel code that can be dynamically loaded and unloaded at runtime.</p><h3 id="modules-benefits:">Modules benefits:<a title="#modules-benefits:" href="#modules-benefits:"></a></h3><p>· No reboot</p><p>Saves a lot of time when developing/debugging</p><p>· No need to compile the entire kernel</p><p>· Saves memory and CPU time by running on-demand</p><p>· No performance difference between module and built-in kernel code</p><p>· Help identifying buggy code</p><p>Ex: identifying a buggy driver compiled as a module by selectively running them.</p><h2 id="part.2-writing-a-kernel-module">Part.2 Writing a kernel module<a title="#part.2-writing-a-kernel-module" href="#part.2-writing-a-kernel-module"></a></h2><p>The module is linked against the entire kernel, it is visible on all of the kernel global variables. To avoid  namespace pollution and involuntary reuse of variable names, we can use a well defined naming convention and use <code>static</code> as much as possible.</p><p>Kernel symbols list is generally present in <code>/proc/kallsys</code> .</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create a C file anywhere on the filesystem. (No need to be inside the kernel sources).  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; /* Needed by all modules */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; /* KERN_INFO */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; /* init and exit macros */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> answer initdata = <span class="number">42</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> init <span class="title">lkp_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Moduele loaded ...¥n&quot;</span>);</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;The answer is %d...¥n&quot;</span>, answer);</span><br><span class="line">  <span class="comment">/* Return 0 on success, something else on error */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">staticvoid <span class="built_in">exit</span> <span class="title">lkp_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Module exiting...¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* `init. &amp; exit` functions launched at the load /unload time.  */</span></span><br><span class="line">module_init(lkp_init);</span><br><span class="line">module_exit(lkp_exit);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* `MODULE_* macros`:  General info about the module. */</span></span><br><span class="line">MODULE_LICENCE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;PierreOlivier&lt;polivier@vt.edu&gt;&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Sample kernel module&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="part.3-compiling-a-kernel-module">Part.3 Compiling a kernel module<a title="#part.3-compiling-a-kernel-module" href="#part.3-compiling-a-kernel-module"></a></h2><p>Create a <code>Makeflie</code> in the same directory as the module source fie. After the compilation, the complied module is the file with <code>.ko</code>. extension.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `KERNELRELEASE` is defined in the top-level makefile in the linux kernel source code.</span></span><br><span class="line"><span class="keyword">ifneq</span>  (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">obj-m := hello.o</span><br><span class="line"><span class="comment"># multiple source files. </span></span><br><span class="line"><span class="comment"># obj-m += file1.c</span></span><br><span class="line"><span class="comment"># obj-m += file2.c</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">KDIR := /lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build  <span class="comment"># path to kernel sources root directory</span></span><br><span class="line">PWD:= <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p><code>shell pwd</code>: Get the path of current working directory.</p><p><code>shell uname -r</code>: Get the version of the current kernel.</p><p><code>KDIR</code>: The source code directory of the current kernel.<br>(<code>/lib/modules/$(shell uname -r)/build</code> or <code>/usr/src/linux-header-$(shell uname -r)/</code>)</p><p><code>make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modules</code>:</p><p>First change the directory to the location specified by the <code>-C</code> option ( kernel source code directory), where the top-level makefile of the kernel is stored. Then, the <code>M=</code> option makes the makefile return to the module source code directory before constructing the modules target and the modules target points to the module set in the <code>obj-m</code> variable(<code>hello.o</code>).</p><h2 id="part.4-launching-a-kernel-module">Part.4 Launching a kernel module<a title="#part.4-launching-a-kernel-module" href="#part.4-launching-a-kernel-module"></a></h2><p>When we launch a kernel module, we need administrator privileges(root).</p><h3 id="insmod/rnmode"><code>insmod/rnmode</code><a title="#insmod/rnmode" href="#insmod/rnmode"></a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo insmod file.ko <span class="comment">/* the module is loaded and init function is executed. */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rmmod file.ko <span class="comment">/* remove the module and exit function is called. */</span></span><br></pre></td></tr></table></figure><p>Note that a module is compiled against a specific kernel version and will not load on the another kernel.</p><h3 id="modprobe"><code>modprobe</code><a title="#modprobe" href="#modprobe"></a></h3><p><code>make modules_install</code> from the kernel sources install the modules in a standard location on the filesystem.(Generally <code>/lib/modules/&lt;kernel version&gt;</code>) and those modules can be inserted through <code>modprobe</code>. Such installed modules can be loaded automatically at boot time by editing <code>/etc/modules</code> or the files in <code>/ets/modprobe.d</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe &lt;<span class="keyword">module</span> name&gt;</span><br></pre></td></tr></table></figure><p><code>Insmod</code> handles modules dependencies. (Dependency list generated in <code>/lib/modules/&lt;kernel version/modules.dep&gt;</code>)</p><h2 id="part.5-modules:-miscellaneous-information">Part.5 Modules: miscellaneous information<a title="#part.5-modules:-miscellaneous-information" href="#part.5-modules:-miscellaneous-information"></a></h2><p>Modules parameters can be entered from the command line at the launch time.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; /* ... */</span></span></span><br><span class="line">staticint int_param = <span class="number">42</span>;</span><br><span class="line">staticchar *string_param =<span class="string">&quot;defaultvalue&quot;</span>;</span><br><span class="line"></span><br><span class="line">module_param(int_param, <span class="keyword">int</span>, <span class="number">0</span>); </span><br><span class="line">MODULE_PARM_DESC(int_param,<span class="string">&quot;Asampleintegerkernelmoduleparameter&quot;</span>);</span><br><span class="line">module_param(string_param, charp, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH); MODULE_PARM_DESC(string_param,<span class="string">&quot;Anotherparameter,astring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">staticint init <span class="title">lkp_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Intparam:%d¥n&quot;</span>, int_param);</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Stringparam:%s¥n&quot;</span>, string_param); <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo insmod lkp.ko int_param&#x3D;12 string_param&#x3D;&quot;hello&quot;</span><br></pre></td></tr></table></figure><p><code>modinfo</code>: info about a kernel module.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">modinfo my_module.ko</span><br><span class="line">filename:        /tmp/test/my_module.ko</span><br><span class="line">description:     Sample kernel <span class="keyword">module</span></span><br><span class="line">author:   Pierre Olivier &lt;polivier@vt.edu GPL</span><br><span class="line">license:  A5ADE92B1C81DCC4F774A37</span><br><span class="line">srcversion: </span><br><span class="line">depends: </span><br><span class="line">vermagic: <span class="number">4.8</span><span class="number">.0</span><span class="number">-34</span>-generic SMP mod_unload modversions</span><br><span class="line">parm:int_param:<span class="function">A sample integer kernel <span class="keyword">module</span> <span class="title">parameter</span> <span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line">parm: string_param:Another parameter, a string (charp)</span><br></pre></td></tr></table></figure><p><code>lsmod</code>: list currently running modules. (Can also look in <code>/proc/modules</code>)</p><h2 id="part.6-memory-allocation">Part.6 Memory allocation<a title="#part.6-memory-allocation" href="#part.6-memory-allocation"></a></h2><h3 id="kmalloc"><code>kmalloc</code><a title="#kmalloc" href="#kmalloc"></a></h3><p>Allocate memory that is virtually and physically contiguous. (Maximum allocated size : 4MB on x86 (architecture dependent)).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">char</span> *my_string = (<span class="keyword">char</span> *)kmalloc(<span class="number">128</span>, GFP_KERNEL);</span><br><span class="line">my_struct my_struct_ptr = (my_struct *)kmalloc(<span class="keyword">sizeof</span>(my_struct), GFP_KERNEL);</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">kfree(my_string); kfree(my_struct_ptr);</span><br></pre></td></tr></table></figure><h3 id="vmalloc"><code>vmalloc</code><a title="#vmalloc" href="#vmalloc"></a></h3><p>Allocate memory that is virtually contiguous, but not physically contiguous. No size limit other than the amount of free RAM (at least on 64 bit architectures.  Might sleep.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/vmalloc.h&gt;</span></span></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">char</span> *my_string = (<span class="keyword">char</span> *)vmalloc(<span class="number">128</span>);</span><br><span class="line">my_struct my_struct_ptr = (my_struct *)vmalloc(<span class="keyword">sizeof</span>(my_struct)); <span class="comment">/* ... */</span></span><br><span class="line">vfree(my_string); </span><br><span class="line">vfree(my_struct_ptr);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;device-drivers&quot;&gt;Device Drivers&lt;a title=&quot;#device-drivers&quot; href=&quot;#device-drivers&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Abstracting Devices – Modules and Inter
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Process Scheduling</title>
    <link href="https://oreodu.github.io/2020/20201026-Process-Scheduling/"/>
    <id>https://oreodu.github.io/2020/20201026-Process-Scheduling/</id>
    <published>2020-10-26T01:25:00.000Z</published>
    <updated>2020-10-30T12:06:50.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="process-scheduling">Process Scheduling<a title="#process-scheduling" href="#process-scheduling"></a></h1><h2 id="part.1-general-information">Part.1 General information<a title="#part.1-general-information" href="#part.1-general-information"></a></h2><h3 id="scheduling">Scheduling<a title="#scheduling" href="#scheduling"></a></h3><p>When in the system there are more ready-to-run processes than the number of cores. The scheduler is responsible for making the best use of the resource that is the CPU time and decides which process should run,  when, and for how long.</p><p>Now: <strong>Completely Fair Scheduler (CFS)</strong> is used in Linux.</p><h3 id="multitasking">Multitasking<a title="#multitasking" href="#multitasking"></a></h3><p>Single core: gives the illusion that multiple processes are running concurrently.<br>Multi-cores: enable true parallelism.</p><p>2 types of multitasking OS:<br>· Cooperative multitasking: a process does not stop running until it decides to do so (yield the CPU).<br>· Preemptive multitasking: The OS can interrupt the execution of a process: preemption. Generally after the process expires its timeslice. It is based on tasks priorities.</p><h3 id="scheduling-policy">Scheduling policy<a title="#scheduling-policy" href="#scheduling-policy"></a></h3><p>Scheduling policy are the set of rules determining the choices made by a given model of scheduler.</p><p>· I/O-bound processes<br>Spend most of their time <em>waiting for I/O</em>: disk, network, but also keyboard, mouse, etc. Should run often and for a small time frame.</p><p>· Compute-bound processes<br>Heavy use of the CPU. Should not run often, but for a long time.</p><ol><li>Priority</li></ol><p>Order process according to their ”importance” from the scheduler standpoint.</p><p>Linux has 2 priority ranges:</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk2i0y1dnpj30za05a0uq.jpg" alt="Screen Shot 2020-10-26 at 09.53.58" style="zoom: 33%;"><p>· Nice value : ranges from <code>-20 to +19</code>, default is 0 (High values of nice means lower priority)<br>List process and their nice values with <code>ps ax -o pid,ni,cmd</code></p><p>· Real-time priority : range configurable (default 0 to 99) (Higher values mean higher priority）<br>Processes labeled real-time always execute before standard (nice) processes.<br>List processes and their real-time priority using <code>ps ax -o pid,rtprio,cmd</code></p><ol start="2"><li>Timeslice</li></ol><p>How much time a process should execute before being preempted. The timeslice a process receives is function of the load of the systems and is also weighted by the process priority. It is <em>a proportion</em> of the CPU.</p><h2 id="part.2-linux-completely-fair-scheduler-(cfs)">Part.2 Linux Completely Fair Scheduler (CFS)<a title="#part.2-linux-completely-fair-scheduler-(cfs)" href="#part.2-linux-completely-fair-scheduler-(cfs)"></a></h2><h3 id="scheduling-classes">Scheduling classes<a title="#scheduling-classes" href="#scheduling-classes"></a></h3><p>· CPU classes : coexisting CPU algorithms. Each task belongs to a class.</p><p>CFS: <code>SCHED_OTHER</code>, implemented in <code>kernel/sched/fair.c</code>.</p><p>· Real-time classes : For predictable schedule. <code>SCHED_RR</code>, <code>SCHED_FIFO</code>, <code>SCHED_DEADLINE</code></p><p><code>sched_class</code> data structure :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> &#123;</span></span><br><span class="line">   <span class="comment">/* Called when a task enters a runnable stat */</span></span><br><span class="line">  <span class="keyword">void</span> (*enqueue_task) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Called when a task becomes unrunnable */</span></span><br><span class="line"><span class="keyword">void</span> (*dequeue_task) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Yield the processor (dequeue then enqueue back immediatly) */</span></span><br><span class="line"><span class="keyword">void</span> (*yield_task) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Checks if a task that entered the runnable state should preempt the currently running task */</span></span><br><span class="line"><span class="keyword">void</span> (*check_preempt_curr) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Chooses the next task to run */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * (*<span class="title">pick_next_task</span>) (/* . . . */);</span> </span><br><span class="line">  <span class="comment">/* Called when the currentluy running task changes its scheduling class or task group to the related scheduler */</span></span><br><span class="line">  <span class="keyword">void</span> (*set_cur_task) (<span class="comment">/* ...*/</span>);</span><br><span class="line">  <span class="comment">/* Called regularly (default: 10 ms) from the system timer tick handler, might lead to context switch */</span></span><br><span class="line"><span class="keyword">void</span> (*task_tick) (<span class="comment">/* . . . */</span>);</span><br><span class="line"><span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fair-scheduling">Fair scheduling<a title="#fair-scheduling" href="#fair-scheduling"></a></h3><p>3 main (high-level) CFS concepts;<br>· CFS runs a process for some times, then swaps it for the runnable process that has run the least.<br>· No default timeslice, CFS calculates how long a process should run according to the number of runnable processes.<br>· No default timeslice, CFS calculates how long a process should run according to the number of runnable processes.</p><p><strong>Targeted latency</strong> : period during which all runnable processes should be scheduled at least once.</p><h2 id="part.3-cfs-implementation">Part.3 CFS implementation<a title="#part.3-cfs-implementation" href="#part.3-cfs-implementation"></a></h2><h3 id="time-accounting">Time accounting<a title="#time-accounting" href="#time-accounting"></a></h3><p><code>sched_entity</code> structure in the <code>task_struct</code> (se field).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">load_weight</span> <span class="title">load</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">run_node</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">group_node</span>;</span> </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> on_rq;</span><br><span class="line">  </span><br><span class="line">  u64 exec_start;</span><br><span class="line">u64 sum_exec_runtime;</span><br><span class="line">u64 vruntime;</span><br><span class="line">u64 prev_sum_exec_runtime;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* additional statistics not shown here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Virtual runtime: How much time a process has been executed (ns).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_curr</span><span class="params">(struct cfs_rq * cfs_rq)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> *<span class="title">curr</span> =</span> cfs_rq -&gt; curr;</span><br><span class="line">  u64 now  = rq_clock_task(rq_of(cfs_rq));</span><br><span class="line">  u64 delta_exec;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (unlikely(!curr)) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  delta_exec = now - curr-&gt;exec_start;</span><br><span class="line">  <span class="keyword">if</span> (unlikely(s64)delta_exec &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  curr-&gt;exec_start = now;</span><br><span class="line">  </span><br><span class="line">  schedstat_set(curr-&gt;statistics.exec_max, max(delta_exec, curr-&gt;statistics.exec_max));</span><br><span class="line">  curr-&gt;sum_exec_runtime += delta_exec;</span><br><span class="line">  schedstat_add(cfs_rq-&gt;exec_clock, delta_exec);</span><br><span class="line">  </span><br><span class="line">  curr-&gt;vruntome += calc_delta_fair(delta_exec,curr);</span><br><span class="line">  update_min_vruntme(cfs_rq);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(entity_is_task(curr)) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">currtask</span> =</span> task_of(curr);</span><br><span class="line">    </span><br><span class="line">    trace_sched_stat_runtime(curtask, delta_exec, curr-&gt;vruntime);</span><br><span class="line">    cpuacct_charge(curtask, delta_exec);</span><br><span class="line">    account_group_exec_runtime(curtask, delta_exec);</span><br><span class="line">    </span><br><span class="line">    account_cfs_rq_runtime(cfs_rq, delta_exec);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Invoked regularly by the system timer, and when a process becomes runnable/unrunnable.</p><h3 id="process-selection">Process selection<a title="#process-selection" href="#process-selection"></a></h3><p>When CFS needs to choose which runnable process to run next:<br>The process with the smallest runtime is selected. It is the leftmost node in the tree.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct sched_entity * <span class="title">pick_first_entity</span><span class="params">(struct cfs_rq *cfs_rq)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">left</span> =</span>cfs_rq-&gt;rb_leftmost;</span><br><span class="line"><span class="keyword">if</span> (!left) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> rb_entry(left, struct sched_entity, run_node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>adding a process to the tree</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Aprocess is added through enqueue entity. */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue_entity</span><span class="params">(struct cfs_rq *cfs_rq, </span></span></span><br><span class="line"><span class="function"><span class="params">                           struct sched_entity *se, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> renorm = ! (flags &amp; ENQUEUE_WAKEUP) || (flags &amp; ENQUEUE_MIGRATED); </span><br><span class="line">  <span class="keyword">bool</span> curr = cfs_rq-&gt;curr == se;</span><br><span class="line">  <span class="keyword">if</span> (renorm &amp;&amp;curr) se-&gt;vruntime += cfs_rq-&gt;min_vruntime;</span><br><span class="line"></span><br><span class="line">  update_curr(cfs_rq);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (renorm &amp;&amp;!curr) se-&gt;vruntime += cfs_rq-&gt;min_vruntime;</span><br><span class="line">  </span><br><span class="line">update_load_avg(se, UPDATE_TG);</span><br><span class="line">  enqueue_entity_load_avg(cfs_rq, se);</span><br><span class="line">  account_entity_enqueue(cfs_rq, se);</span><br><span class="line">  update_cfs_shares(cfs_rq);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(flags &amp; ENQUEUE_WAKEUP) place_entity(cfs_rq, se, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  check_schedstat_required(); </span><br><span class="line">  update_stats_enqueue(cfs_rq, se, flags); </span><br><span class="line">  check_spread(cfs_rq, se);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(!curr) enqueue_entity(cfs_rq, se);</span><br><span class="line">  se-&gt;on_rq = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (cfs_rq-&gt;nr_running == <span class="number">1</span>) &#123;</span><br><span class="line">    list_add_leaf_cfs_rq(cfs_rq);</span><br><span class="line">    check_enqueue_throttle(cfs_rq);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue_entity</span><span class="params">(struct cfs_rq, *cfs_rq, </span></span></span><br><span class="line"><span class="function"><span class="params">                           struct sched_entity *se)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> **<span class="title">link</span> =</span> &amp;cfs_rq-&gt;tasks_timeline.rb_node; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">parent</span> =</span> <span class="literal">NULL</span>; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> *<span class="title">entry</span>;</span></span><br><span class="line"><span class="keyword">int</span> leftmost = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Find the right place in the rbtree: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (*link) &#123;</span><br><span class="line">    parent = *link;</span><br><span class="line">  entry = rb_entry(parent, struct sched_entity, run_node);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Wedont care about collisions. </span></span><br><span class="line"><span class="comment">* Nodes withthe same key stay together. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (entity_before(se, entry)) &#123;</span><br><span class="line">    link = &amp;parent-&gt;rb_left;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    link =&amp;parent-&gt;rb_right;</span><br><span class="line">    leftmost = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Maintain a cache of leftmost tree </span></span><br><span class="line"><span class="comment">* entries (it is frequently used): </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (leftmost) cfs_rq-&gt;rb_leftmost = &amp;se-&gt;run_node; </span><br><span class="line">rb_link_node(&amp;se-&gt;run_node, parent, link);</span><br><span class="line">rb_insert_color(&amp;se-&gt;run_node, &amp;cfs_rq-&gt;tasks_timeline);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ol start="2"><li>removing a process from the tree</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct <span class="keyword">void</span> <span class="title">dequeue_entity</span><span class="params">(struct cfs_rq *cfs_rq, </span></span></span><br><span class="line"><span class="function"><span class="params">                           struct sched_entity *se, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">  update_curr(cfs_rq); </span><br><span class="line">  dequeue_entity_load_avg(cfs_rq, se);</span><br><span class="line">  update_stats_dequeue(cfs_rq, se, flags );</span><br><span class="line">  </span><br><span class="line">  clear_buddies(cfs_rq, se);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (se != cfs_rq-&gt;curr) dequeue_entity(cfs_rq, se);</span><br><span class="line">  se-&gt;on_rq = <span class="number">0</span>;</span><br><span class="line">  account_entity_dequeue(cfs_rq, se);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!(flags &amp; DEQUEUE_SLEEP)) se-&gt;vruntime -= cfs_rq-&gt;min_vruntime; </span><br><span class="line">  </span><br><span class="line">  return_cfs_rq_runtime(cfs_rq);</span><br><span class="line">  update_cfs_shares(cfs_rq);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> ((flags &amp;(DEQUEUE_SAVE| DEQUEUE_MOVE)) == DEQUEUE_SAVE)</span><br><span class="line">    update_min_vruntime(cfs_rq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dequeue_entity</span><span class="params">(struct cfs_rq *cfs_rq, s</span></span></span><br><span class="line"><span class="function"><span class="params">                           truct sched_entity *se)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cfs_rq-&gt;rb_leftmost == &amp;se-&gt;run_node) &#123; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">next_node</span>;</span></span><br><span class="line">    next_node = rb_next(&amp;se-&gt;run_node);</span><br><span class="line">    cfs_rq-&gt;rb_leftmost = next_node;</span><br><span class="line">  &#125;</span><br><span class="line">rb_erase(&amp;se-&gt;run_node, &amp;cfs_rq-&gt;tasks_timeline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Entry point: <code>schedule()</code></li></ol><p>The kernel calls <code>schedule()</code> anytime it wants to invoke the scheduler. Calls <code>pick_next_task()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> struct task_struct * <span class="title">pick_next_task</span><span class="params">(struct rq *rq, struct</span></span></span><br><span class="line"><span class="function"><span class="params">task_struct *prev, struct pin_cookie cookie)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> *<span class="keyword">class</span> =</span> &amp; fair_sched_class; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (likely(prev-&gt;sched_class ==class &amp;&amp; </span><br><span class="line">             rq-&gt;nr_running == rq-&gt;cfs.h_nr_running)) &#123;</span><br><span class="line">    p = fair_sched_class.pick_next_task(rq, prev, cookie);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (unlikely(p == RETRY_TASK)) <span class="keyword">goto</span> again;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!p)) p = idle_sched_class.pick_next_task(rq, prev, cookie);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">again: </span><br><span class="line">  for_each_class(class) &#123;</span><br><span class="line">    p =class-&gt;pick_next_task(rq, prev, cookie);</span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">      <span class="keyword">if</span> (unlikely(p == RETRY_TASK)) <span class="keyword">goto</span> again; </span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> BUG(); </span><br><span class="line"> <span class="comment">/* the idle class will always have a runnable task */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sleeping-and-waking-up">Sleeping and waking up<a title="#sleeping-and-waking-up" href="#sleeping-and-waking-up"></a></h3><p>Multiple reasons for a task to sleep:<br>Specified amount of time, waiting for I/O, blocking on a mutex, etc.</p><p>Going to sleep - steps:<br>· Task marks itself as sleeping<br>· Task enters a waitqueue<br>· Task leaves the rbtree of runnable processes<br>· Task calls <code>schedule()</code>  to select a new process to run</p><p>Two states associated with sleeping:<br><code>TASK INTERRUPTIBLE</code>: Will be awaken on signal reception<br><code>TASK UNINTERRUPTIBLE</code>: Ignore signals</p><p>Wait queue: List of processes waiting for an event to occur.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span> <span class="title">wait_queue_head_t</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span> &#123;</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> lock;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">task_list</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some simple interfaces used to go to sleep have races: It is possible to go to sleep <em>after</em> the event we are waiting for has occurred.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We assume the wait queue we want to wait on is accessible through a variable q */</span> </span><br><span class="line">DEFINE_WAIT(wait); <span class="comment">/* initialize a wait queue entry */</span></span><br><span class="line">add_wait_queue(q, &amp;wait);</span><br><span class="line"><span class="keyword">while</span> (!condition) &#123; </span><br><span class="line">  <span class="comment">/* event weare waiting for */</span></span><br><span class="line">  prepare_to_wait(&amp;q, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line">  <span class="keyword">if</span>(signal_pending(current))</span><br><span class="line">   <span class="comment">/* handle signal */</span></span><br><span class="line">    schedule();</span><br><span class="line">&#125;</span><br><span class="line">finish_wait(&amp;q, &amp;wait);</span><br></pre></td></tr></table></figure><p><strong>Steps for waiting on a waitqueue:</strong><br>· Create a wait queue entry (<code>DEFINE_WAIT()</code>).<br>· Add the calling process to a wait queue (<code>add_wait_queue()</code>).<br>· Call <code>prepare_to_wait()</code> to change the  process state.<br>· If the state is <code>TASK_INTERRUPTIBLE</code>, a signal can wake the task up <em>→</em> need to check.<br>· Executes another process with <code>schedule()</code>.<br>· When the task awakens, check the condition.<br>· When the condition is true, get out of the wait queue and set the state accordingly using <code>finish_wait()</code>.</p><p><strong>Waking up</strong> is taken care of by <code>wake_up()</code>. Awakes all the processes on a wait queue by default.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up(x) wake_up(x, TASK_NORMAL, 1 , NULL)</span></span><br><span class="line"> <span class="comment">/* type of x i s wait_queue_head_t */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wake_up_common</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, </span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">unsigned</span> <span class="keyword">int</span> mode, <span class="keyword">int</span> nr_exclusive, </span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> wake_flags, <span class="keyword">void</span> *key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">wait_queue_t</span> *curr, *next;</span><br><span class="line">  </span><br><span class="line">  list_for_each_entry_safe(curr, next, &amp;q-&gt;task_list, task_list) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> flags = curr-&gt;flags;</span><br><span class="line">    <span class="keyword">if</span> (curr-&gt;func(curr, mode, wake_flags, key) &amp;&amp; (flags &amp; WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">/* wakes up only a subset of ’exclusive’ tasks */</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exclusive tasks are added through <code>prepare_to_wait_exclusive()</code>.</p><p>A wait queue entry contains a pointer to a wake-up function : <code>include/linux/wait.h</code>.</p><p><code>default_wake_function()</code>  calls <code>try_to_wake up()</code> -&gt; which calls ttwu_queue() -&gt; which calls <code>ttwu_do_activate()</code>  (put the task back on runqueue)  -&gt; which calls <code>ttwu_do_wakeup</code> which sets the task state to TASK RUNNING.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedefstruct wait_queue <span class="keyword">wait_queue_t</span>;</span><br><span class="line">typedefint (*<span class="keyword">wait_queue_func_t</span>)(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> flags, <span class="keyword">void</span> *key); </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">default_wake_function</span><span class="params">(*<span class="keyword">wait_queue_func_t</span>)</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode,<span class="keyword">int</span> flags, <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue</span> &#123;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="keyword">wait_queue_func_t</span> func;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>· Per-CPU runqueues (rbtrees): To avoid costly accesses to shared data structures.</p><p>· Runqueues must be kept balanced.<br>Ex: dual-core with one large runqueue of high-priority processes, and a small one with low-priority processes. High-priority processes get less CPU time than low-priority ones.<br>A load balancing algorithm is run periodically. Balances the queues based on processes priorities and their actual CPU usage.</p><h2 id="part.4-preemptions-and-context-switching">Part.4 Preemptions and context switching<a title="#part.4-preemptions-and-context-switching" href="#part.4-preemptions-and-context-switching"></a></h2><h3 id="context-switch">Context switch<a title="#context-switch" href="#context-switch"></a></h3><p>A <strong>context switch</strong> is the action of swapping the process currently running on the CPU to another one which is performed by the <code>context_switch()</code> function. The function is called by <code>schedule()</code>.</p><p>1.Switch the address space through <code>switch_mm()</code>.<br>2.Switch the CPU state (registers) through <code>switch_to()</code>.</p><p>A task can voluntarily relinquish the CPU by calling <code>schedule()</code>.</p><p>The kernel check if there is a need of preemption based on the <code>need_resched</code> flag.</p><p><code>need_resched</code> is set by:<br>1.<code>scheduler_tick()</code> when the currently running task needs to be preempted.<br>2.<code>try_to_wake_up()</code> when a process with higher priority wakes up.</p><p><code>need_resched</code> flag is checked:<br>Upon returning to user space (from a syscall or an interrupt).<br>Upon returning from an interrupt.</p><p>If the flag is set, <code>schedule()</code> is called.</p><p>User preemption happens:<br>When return to user space from a syscall.<br>When return to user space from an interrupt.<br>With Linux,  the kernel is also subject to preemption.</p><h3 id="kernel-preemption">Kernel preemption<a title="#kernel-preemption" href="#kernel-preemption"></a></h3><p>In linux, a task can be preempted in the kernel as long as execution is in a safe state (Not holding any lock (kernel is SMP safe)).</p><p>If <code>need_resched &amp;&amp; !preempt_count</code> <em>→</em> safe to preempt. <code>preempt_count</code> in the <code>thread_info</code> structure (Indicates the current lock depth).</p><p>Checked when returning to the kernel from interrupt. <code>need_resched</code> is also checked when releasing a lock and preempt count is 0.</p><p>Kernel code can also call directly <code>schedule()</code>.</p><p>Kernel preemption can occur :<br>1.On return from interrupt to kernel space.<br>2.When kernel code becomes preemptible again.<br>3.If a task explicitly calls <code>schedule()</code> from the kernel.<br>4.If a task in the kernel blocks (ex: mutex, result in a call to <code>schedule()</code>)</p><h3 id="real-time-scheduling-policies">Real-time scheduling policies<a title="#real-time-scheduling-policies" href="#real-time-scheduling-policies"></a></h3><p>Real-time task of any scheduling class will always run before non-real time ones (<code>CFS</code>, <code>SCHED_OTHER</code>). <code>schedule()</code> → <code>pick next task()</code> → <code>for_each_class()</code>.</p><p>Two classical RT scheduling policies (<code>kernel/sched/rt.c</code>):<br>· <code>SCHED_FIFO</code>:<br>Tasks run until it blocks/yield, only a higher priority RT task can preempt it.<br>Round-robin for tasks of same priority.<br>· <code>SCHED_RR</code>:<br>Same as <code>SCHED_FIFO</code>, but with a fixed timeslice.</p><h3 id="scheduling-related-syscalls">Scheduling-related syscalls<a title="#scheduling-related-syscalls" href="#scheduling-related-syscalls"></a></h3><p>See more details from <a href="https://www.informit.com/articles/article.aspx?p=101760&amp;seqNum=5" target="_blank">here</a>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt; #include &lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_err</span><span class="params">(<span class="keyword">int</span> ret, <span class="keyword">char</span> *func)</span> </span>&#123; </span><br><span class="line">  perror(func);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span> pid = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">sp</span>;</span></span><br><span class="line">  <span class="keyword">int</span> max_rr_prio, min_rr_prio = <span class="number">-42</span>; </span><br><span class="line">  <span class="keyword">size_t</span> cpu_set_size = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">cpu_set_t</span> cs;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* GetthePIDofthecallingprocess */</span></span><br><span class="line">  pid = getpid();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Mypidis:%d¥n&quot;</span>, pid); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Gettheschedulingclass */</span></span><br><span class="line">ret = sched_getscheduler(pid); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getscheduler&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;sched_getschedulerreturns:&quot;</span><span class="string">&quot;%d¥n&quot;</span>, ret);</span><br><span class="line">  assert(ret == SCHED_OTHER);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* Getthepriority(nice/RT) */</span></span><br><span class="line">sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">ret = sched_getparam(pid, &amp;sp);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">sp.sched_priority);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Setthepriority(nicevalue) */</span></span><br><span class="line">ret = nice(<span class="number">1</span>); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>)handle_err(ret,<span class="string">&quot;nice&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Getthepriority */</span></span><br><span class="line">sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">ret = sched_getparam(pid, &amp;sp); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">sp.sched_priority);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* SwtichscheduleingclasstoFIFOandthepriorityto99 */</span></span><br><span class="line">  sp.sched_priority = <span class="number">99</span>;</span><br><span class="line">ret = sched_setscheduler(pid, SCHED_FIFO, &amp;sp); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_setscheduler&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Gettheschedulingclass */</span></span><br><span class="line">ret = sched_getscheduler(pid); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getscheduler&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;sched_getschedulerreturns:&quot;</span><span class="string">&quot;%d¥n&quot;</span>, ret);</span><br><span class="line">  assert(ret == SCHED_FIFO);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Getthepriority */</span></span><br><span class="line">sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">ret = sched_getparam(pid, &amp;sp); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">         sp.sched_priority);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* SettheRTpriority */</span></span><br><span class="line">sp.sched_priority = <span class="number">42</span>;</span><br><span class="line">ret = sched_setparam(pid, &amp;sp);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_setparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Prioritychangedto%d¥n&quot;</span>,</span><br><span class="line">sp.sched_priority);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Getthepriority */</span></span><br><span class="line">sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">ret = sched_getparam(pid, &amp;sp);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">sp.sched_priority);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* GetthemaxpriorityvalueforSCHED_RR */</span></span><br><span class="line">max_rr_prio = sched_get_priority_max(SCHED_RR); </span><br><span class="line">  <span class="keyword">if</span>(max_rr_prio == <span class="number">-1</span>)</span><br><span class="line">    handle_err(max_rr_prio,<span class="string">&quot;sched_get_priority_max&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;MaxRRprio:%d¥n&quot;</span>, max_rr_prio);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* GettheminpriorityvalueforSCHED_RR */</span></span><br><span class="line">min_rr_prio = sched_get_priority_min(SCHED_RR); </span><br><span class="line">  <span class="keyword">if</span>(min_rr_prio == <span class="number">-1</span>)</span><br><span class="line">    handle_err(min_rr_prio,<span class="string">&quot;sched_get_priority_min&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;MinRRprio:%d¥n&quot;</span>, min_rr_prio);</span><br><span class="line">  cpu_set_size = <span class="keyword">sizeof</span>(<span class="keyword">cpu_set_t</span>);</span><br><span class="line">  CPU_ZERO(&amp;cs); <span class="comment">/* clearthemask */</span></span><br><span class="line">  CPU_SET(<span class="number">0</span>, &amp;cs);</span><br><span class="line">  CPU_SET(<span class="number">1</span>, &amp;cs);</span><br><span class="line">  <span class="comment">/* SettheaffinitytoCPUs0and1only */</span></span><br><span class="line">ret = sched_setaffinity(pid, cpu_set_size, &amp;cs);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_setaffinity&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GettheCPUaffinity */</span></span><br><span class="line">CPU_ZERO(&amp;cs);</span><br><span class="line">ret = sched_getaffinity(pid,cpu_set_size, &amp;cs);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret, <span class="string">&quot;sched_getaffinity&quot;</span>);</span><br><span class="line">  assert(CPU_ISSET(<span class="number">0</span>, &amp;cs));</span><br><span class="line">  assert(CPU_ISSET(<span class="number">1</span>, &amp;cs));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;AffinitytestsOK¥n&quot;</span>);</span><br><span class="line">  <span class="comment">/* YieldtheCPU */</span></span><br><span class="line">  ret = sched_yield(); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret, <span class="string">&quot;sched_yield&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;process-scheduling&quot;&gt;Process Scheduling&lt;a title=&quot;#process-scheduling&quot; href=&quot;#process-scheduling&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;part.1-general-inf
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Memory Management</title>
    <link href="https://oreodu.github.io/2020/20201025-Memory-Management/"/>
    <id>https://oreodu.github.io/2020/20201025-Memory-Management/</id>
    <published>2020-10-25T00:07:00.000Z</published>
    <updated>2020-10-30T12:51:25.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="memory-management">Memory Management<a title="#memory-management" href="#memory-management"></a></h1><h2 id="part.1-address-space-and-memory-descripter">Part.1 Address space and memory descripter<a title="#part.1-address-space-and-memory-descripter" href="#part.1-address-space-and-memory-descripter"></a></h2><h3 id="address-space">Address space<a title="#address-space" href="#address-space"></a></h3><p>The memory that a process can access is called its address space.  It is defined by the process page table and set up by the kernel.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk19i68q35j30zu0akwi3.jpg" alt="Screen Shot 2020-10-25 at 08.13.37" style="zoom:45%;"><p>Each process is given a flat(as opposed to segmented) 32/64-bits address space and a memory address is an index within the address space.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk19oatz2gj30ly07q40h.jpg" alt="Screen Shot 2020-10-25 at 08.19.30" style="zoom: 67%;"><p>Interval of addresses that the process has the right to access: virtual memory areas (VMAs).</p><p>VMAs can be dynamically added or removed to the process address space and have associated permissions: read, write, execute. When a process try to access an address outside of valid VMAs, or access a VMA with wrong permissions: segmentation fault.</p><p>VMAs cancontain:<br>Mapping of the executable file code (text section)<br>Mapping of the executable file initialized variables (data section)<br>Mapping of the zero page for uninitialized variables (bss section)<br>Mapping of the zero page for the user-space stack<br>Text, data, bss for each shared library used<br>Memory-mapped files, shared memory segment, anonymous mappings (used by malloc)</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk1ah62rodj310g0bygny.jpg" alt="Screen Shot 2020-10-25 at 08.47.11" style="zoom: 40%;"><h3 id="memory-descriptor">Memory descriptor<a title="#memory-descriptor" href="#memory-descriptor"></a></h3><ol><li><p>The kernel represent a process address space through a struct <code>mm_struct</code> object, the memory descriptor which is defined in <code>include/linux/mm_types.h</code>.</p><p>All <code>mm_struct</code> are linked together in a doubly linked list. Through the <code>mmlist </code> field if the <code>mm_struct</code>.</p><p>See more from <a href="https://elixir.bootlin.com/linux/latest/ident/mm_struct" target="_blank">here</a>.</p></li><li><p>Memory descriptor allocation</p><p>A task memory descriptor is located in the <code>mm_field</code> of the corresponding <code>task_struct</code>. Current task memory descriptor: <code>current-&gt;m</code>. During <code>fork()</code>,<code>copy_mm()</code> is making a copy of the parent memory descriptor for the child. <code>copy_mm()</code>calls <code>dup_mm()</code> which calls <code>allocate_mm()</code> which allocates a <code>mm_struct</code> object from a slab cache.</p><p>Two threads sharing the same address space have the <code>mm_field</code> of their <code>task_struct</code> pointing to the same <code>mm_struc</code> object. Threads are created using the <code>CLONE_VM</code> flag passed to <code>clone()</code> → <code>allocate_mm()</code> is not called.</p></li><li><p>Memory descriptor destruction</p><p>When a process exits, <code>do_exit()</code> is called. It calls <code>exit_mm()</code>. Performs some housekeeping/statistics updates.</p><p>Call <code>mm_put()</code>. <code>mm_put()</code> decrements the <code>users</code> field and calls <code>_mmput()</code> if it reaches 0. <code>_mmput()</code> calls <code>mmdrop()</code>, that decrements the <code>count</code> field and calls <code>mm_drop()</code> if it reaches 0. <code>_mmdrop()</code> calls <code>free_mm()</code> which return the memory for the <code>mm_struct()</code> to the slab cache (i.e. free).</p></li><li><p>Memory descriptor and kernel threads</p><p>Kernel threads do not have a user-space address space. <code>mm</code> field of a kernel thread <code>task_struct</code> is <code>NULL</code>. When a kernel thread is scheduled, the kernel notice its <code>mm</code> is <code>NULL</code> so it keeps the previous address space loaded (page tables) and makes  the <code>active_mm</code> field of the kernel thread to point on the borrowed <code>mm_struct</code>.</p></li></ol><h2 id="part.2-virtual-memory-area">Part.2 Virtual Memory Area<a title="#part.2-virtual-memory-area" href="#part.2-virtual-memory-area"></a></h2><h3 id="vm_area_struct"><code>vm_area_struct</code><a title="#vm_area_struct" href="#vm_area_struct"></a></h3><p>Each VMA is represented by an object of type <code>vm_area_struct</code> and defined in <code>include/linux/mm_types.h</code>. See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/vm_area_struct" target="_blank">here</a>. Each VMA is unique to the associated <code>mm_struct</code>. Two processes mapping the same file will have two different <code>mm_struct</code> objects, and two different vm area struct objects. Two threads sharing a <code>mm_struct</code> object also share the <code>vm_area_struct</code> objects.</p><h3 id="flags">Flags<a title="#flags" href="#flags"></a></h3><p>Flags specify properties and information for all the pages contained in the VMA.</p><p><code>VM READ</code>: pages can be read from<br><code>VM WRITE</code>: pages can be written to<br><code>VM EXEC</code>: code inside pages can be executed<br><code>VM SHARED</code>: pages are shared between multiple processes (if unset the mapping is private)</p><p><code>VM MAYREAD</code>: the <code>VM READ</code> flag can be set<br><code>VM MAYWRITE</code>: the <code>VM WRITE</code> flag can be set<br><code>VM MAYEXEC</code>: the <code>VM EXEC</code> flag can be set<br><code>VM MAYSHARE</code>: the <code>VM SHARED</code> flag can be set</p><p><code>VM GROWSDOWN</code>: area can grow downwards<br><code>VM GROWSUP</code>: area can grow upwards<br><code>VM SHM</code>: area can be used for shared memory<br><code>VM DENYWRITE</code>: area maps an unwritable file<br><code>VM EXECUTABLE</code>: area maps an executable file<br>… …</p><h3 id="vma-operations">VMA operations<a title="#vma-operations" href="#vma-operations"></a></h3><p><code>vm ops</code>  in <code>vm_area_struct</code> points to a <code>vm_operations_struct</code> object which contains function pointers to operate on a specific VMAs and is defined in include/linux/mm.h. See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/vm_operations_struct" target="_blank">here</a>.</p><p>Function pointers in vm operations struct:<br><code>open()</code>: called when the area is added to an address space.<br><code>close()</code>: called when the area is removed from an address space.<br><code>fault()</code>: invoked by the page fault handler when a page that is not present in physical memory is accessed.<br><code>page_mkwrite()</code>:invoked by the page fault handler when a previously read-only page is made writable.</p><h3 id="vmas-in-real-life">VMAs in real life<a title="#vmas-in-real-life" href="#vmas-in-real-life"></a></h3><p>From userspace, one can observe the VMAs map for a given process: <code>cat /proc/&lt;pid&gt;/maps</code>.</p><p>· <code>/proc/&lt;pid&gt;/maps</code>  columnsdescription:<br>Address range Permissions<br>Start offset of file mapping<br>Device containing the mapped file<br>Mapped file inode number<br>Mapped file pathname</p><p>Can also use the command <code>pmap &lt;pid&gt;</code>.</p><h2 id="part.3-vma-manipulation">Part.3 VMA manipulation<a title="#part.3-vma-manipulation" href="#part.3-vma-manipulation"></a></h2><h3 id="finding-a-vma">Finding a VMA<a title="#finding-a-vma" href="#finding-a-vma"></a></h3><p><code>find_vma()</code>: used to find a VMA in which a specific memory address resides, its prototype in include/linux/mm.h and  it is defined in mm/mmap.c. See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/find_vma" target="_blank">here</a>.</p><p><code>find_vma_prev()</code>: returns in addition the last VMA before a given address.</p><p><code>find_vma_intersection()</code>: returns the first VMA overlapping a given address range.</p><h3 id="creating-an-address-interval">Creating an address interval<a title="#creating-an-address-interval" href="#creating-an-address-interval"></a></h3><p><code>do_mmap()</code> is used to create a new linear address interval which can result in the creation of a new VMAs<br>or a merge of the create area with an adjacent one when they have the same permissions.</p><p>On error <code>do_mmap()</code> returns a negative value.</p><p>On success:<br>The kernel tries to merge the new interval with an adjacent one having same permissions.<br>Otherwise, create a new VMA.<br>Returns a pointer to the start of the mapped memory area.</p><p><code>do_mmap()</code> is exported to user-space through <code>mmap2()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">externunsignedlong <span class="title">do_mmap</span><span class="params">(struct file *file, unsignedlong addr, unsignedlong len, unsignedlong prot, unsignedlong flags,<span class="keyword">vm_flags_t</span> vm_flags, unsignedlong pgoff, unsignedlong *populate)</span></span>;</span><br></pre></td></tr></table></figure><p>Caller must hold <code>mm-&gt;mmap_sem</code> (RW semaphore). Maps the file <code>file</code> in the address space at address <code>addr</code> for length <code>len</code>. Mapping starts at offset <code>pgoff</code> in the file. <code>prot</code> specifies access permissions for the memory pages: <code>PROT READ</code>, <code>PROT WRITE</code>, <code>PROT EXEC</code>, <code>PROT NONE</code>.</p><p><code>flags</code> specifies the rest of the <code>VMAoptions</code>:<br><code>MAP SHARED</code>: mapping can be shared<br><code>MAP PRIVATE</code>: mapping cannot be shared<br><code>MAP FIXED</code>: created interval must start at addr<br><code>MAP ANONYMOUS</code>: mapping is not file-backed<br><code>MAP GROWSDOWN</code>: corresponds to VM GROWSDOWN<br>… …</p><h3 id="removing-an-address-interval">Removing an address interval<a title="#removing-an-address-interval" href="#removing-an-address-interval"></a></h3><p>Removing an address interval is done through <code>do_munmap()</code> and <code>0</code> returned on success.</p><p>Exported to user-space through <code>munmap()</code>.</p><h2 id="part.4-page-tables">Part.4 Page Tables<a title="#part.4-page-tables" href="#part.4-page-tables"></a></h2><p>All memory accesses made by the CPU are virtual and translated to physical addresses through the page tables. Linux kernel set the page tables and the translation is made automatically by the hardware (MMU) according to the page tables content. Page size is machine dependent. Typical values for x86 are <strong>4K</strong>, 2M, and 1G. Most of the pages are used for (1) kernel/userspace memory (<em>anonymous mapping</em>) or (2) file mapping.</p><p>The address space is defined by VMAs and is sparsely populated(One address space per process → one page table per process). A hierarchical tree structure is used to define the page table.</p><img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-10-25 at 11.07.47.png" alt="Screen Shot 2020-10-25 at 11.07.47" style="zoom:50%;"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk1el0seruj30ta0c6gmv.jpg" alt="Screen Shot 2020-10-25 at 11.09.15" style="zoom:50%;"><p>Each <strong>physical page</strong> is represented by a struct page. Assuming 8GB of RAM and 4K-sized pages: 128MB reserved for struct page objects(<em>∼</em>1.5%).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The kernel uses struct page to keep track of the owner of the page */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;            <span class="comment">/* page status (permission,etc.) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> counters;              <span class="comment">/* usage count */</span></span><br><span class="line">  <span class="keyword">atomic_t</span> _mapcount;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">private</span>;          <span class="comment">/* private mapping */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">mapping</span>;</span>  <span class="comment">/* file mapping */</span></span><br><span class="line">  <span class="keyword">pgoff_t</span> index;                  <span class="comment">/* offset within mapping */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lru</span>;</span></span><br><span class="line">  <span class="keyword">void</span> *<span class="keyword">virtual</span>;                  <span class="comment">/* virtualaddres */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="zones">Zones<a title="#zones" href="#zones"></a></h3><p>Because of hardware limitations, only certain physical pages can be used in certain contexts. Physical memory is divided into <strong>zones</strong>. Zones layout is completely architecture dependent.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk2g0o5aojj30u80ecwgj.jpg" alt="Screen Shot 2020-10-26 at 08.44.18" style="zoom:33%;"><p><code>ZONE DMA</code>: pages with which DMA(Direct Memory Access) can be used.<br><code>ZONE DMA32</code>: memory for other DMA limited devices.<br><code>ZONE NORMAL</code>: page always mapped in the address space.<br><code>ZONE HIGHMEM:</code> pages only mapped temporary.</p><p>Each zone is represented by a struct zone object and is defined in <code>include/linux/mmzone.h</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zone</span> &#123;</span></span><br><span class="line">  <span class="comment">/* minimum,lowandhighwatermarksusedforper-area memory allocation. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span>      watermark[NR_WMARK];</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>         *name;</span><br><span class="line">  spinlook           lock;     <span class="comment">/* protects against concurrent access */</span></span><br><span class="line">  <span class="comment">/* list of free pages to serve memory allocation requests */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">free_area</span>   <span class="title">free_area</span>[<span class="title">MAX_ORDER</span>];</span></span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.5-low-level-memory-allocator">Part.5 Low-level memory allocator<a title="#part.5-low-level-memory-allocator" href="#part.5-low-level-memory-allocator"></a></h2><p>Low-level mechanisms allocating memory with page-sized granularity. Interface is in <code>include/linux/gfp.h</code>. For more details from <a href="https://elixir.bootlin.com/linux/latest/source/include/linux/gfp.h" target="_blank">here</a>.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk2g8sh7hej30oa0iy77k.jpg" alt="Screen Shot 2020-10-26 at 08.52.18" style="zoom:50%;"><p>· Allocates 2^<em>order</em> contiguous pages (1 <em>&lt; &lt; order</em> )<br>· Returns the address of the first allocated struct page.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct page * <span class="title">alloc_pages</span><span class="params">(<span class="keyword">gfp_t</span> gfp_mask, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>;</span><br></pre></td></tr></table></figure><p>To actually use the allocated memory, need to convert to virtual address.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">page_address</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure><p>Or we can allocate and get the virtual address directly.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">get_free_pages</span><span class="params">(<span class="keyword">gfp_t</span> gfp_mask, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>;</span><br></pre></td></tr></table></figure><p>To get a page filled with zeros.</p><p>A page containing user space data (process A) that is freed can be later given to another process (process B) and we don’t want process B to read information from process A.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">get_zeroed_page</span><span class="params">(<span class="keyword">gfp_t</span> gfp_mask)</span></span>;</span><br></pre></td></tr></table></figure><p>Free pages, only free the pages you allocate!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_pages</span><span class="params">(struct page *page, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_pages</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_page</span><span class="params">(struct page *page)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_page</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> addr)</span></span>;</span><br></pre></td></tr></table></figure><p>Buddy system :</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk2zog05xij30ta0jatco.jpg" alt="Screen Shot 2020-10-26 at 20.04.44" style="zoom:50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Low-level memory allocator, Usage example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gfp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREE <span class="meta-string">&quot;[LOWLEVEL]:&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAEG_ORDER_REQUESTED 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTS_IN_PAGE (PAGE_SIZE/sizeof(int))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> virt_addr;</span><br><span class="line"></span><br><span class="line"><span class="function">struct <span class="keyword">int</span> _int <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *int_array;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  printk(PRINT_PREE <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  virt_addr =get_free_pages(GFP_KERNEL,</span><br><span class="line">                            PAGES_ORDER_REQUESTED); </span><br><span class="line">  <span class="keyword">if</span>(!virt_addr) &#123;</span><br><span class="line">    printk(PRINT_PREF <span class="string">&quot;Error in allocation¥n &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  int_array = (<span class="keyword">int</span> *)virt_addr;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) int_array[i] = i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) printk(PRINT_PREF <span class="string">&quot;array[%d] = %d¥n&quot;</span>, </span><br><span class="line">                                       i, int_array[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  free_pages(virt_addr,</span><br><span class="line">            PAGES_ORDER_REQUESTED);</span><br><span class="line">  printk(PRINT_PREE <span class="string">&quot;Exiting module ¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br></pre></td></tr></table></figure><h2 id="part.6-kmalloc()-and-vmalloc()">Part.6 <code>kmalloc()</code> and <code>vmalloc()</code><a title="#part.6-kmalloc()-and-vmalloc()" href="#part.6-kmalloc()-and-vmalloc()"></a></h2><p><code>kmalloc()</code> (declared in <code>includes/linux/slab.h</code>)  allocates byte-sized chunks of memory which is physically contiguous and return a pointer to the first allocated byte on success.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">kmalloc</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">gfp_t</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="kmalloc-flags"><code>kmalloc</code> flags<a title="#kmalloc-flags" href="#kmalloc-flags"></a></h3><p><code>gfp_t</code> is an unsigned int defined in <code>include/linux/types.h</code> and other types and modifier are declared and documented in <code>include/linux/gfp.h</code>.</p><p>Specify options for the allocated memory:<br>·  Action modifiers ( How should the memory be allocated? )</p><img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-10-26 at 20.58.40.png" alt="Screen Shot 2020-10-26 at 20.58.40" style="zoom: 33%;"><p>· Zone modifiers ( From which zone should the allocated memory come )</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk31gtxbzzj30tg058aay.jpg" alt="Screen Shot 2020-10-26 at 21.01.52" style="zoom:40%;"><p>Kernel allocates from <code>ZONE_NORMAL</code> or <code>ZONE_DMA</code> with a strong preference for <code>ZONE NORMAL</code> when there is no flag specified.</p><p>· Type flags ( Combination of action and zone modifiers )</p><p><code>GFP_ATOMIC</code>, <code>GEP_NOWAIT</code>, <code>GFP_NOIO</code>, <code>GFP_NOFS</code>, <code>GFP_KERNEL</code>, <code>GFP_USER</code>, <code>GFP_DMA</code>, <code>GFP_HIGHUSER</code></p><p>Which flag to use.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk31vx5ps8j30vk0g2go6.jpg" alt="Screen Shot 2020-10-26 at 21.21.10" style="zoom:40%;"><h3 id="kfree"><code>kfree</code><a title="#kfree" href="#kfree"></a></h3><p>Memory allocated with <code>kmalloc()</code> needs to be freed with <code>kfree()</code>(declared in <code>include/linux/slab.h</code>).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">ptr</span>;</span></span><br><span class="line">ptr = kmalloc(<span class="keyword">sizeof</span>(struct my_struct), GEP_KERNEL);</span><br><span class="line"><span class="keyword">if</span>(!ptr)&#123;</span><br><span class="line">  <span class="comment">/* handle error. */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* work with ptr. */</span></span><br><span class="line">kfree(ptr);</span><br></pre></td></tr></table></figure><h3 id="vmalloc()"><code>vmalloc()</code><a title="#vmalloc()" href="#vmalloc()"></a></h3><p><code>vmalloc()</code>  allocates virtually contiguous pages that are not guarantee to map to physically contiguous ones.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">vmalloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> s i z e )</span> </span>; <span class="function"><span class="keyword">void</span> <span class="title">vfree</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *addr)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">ptr</span>;</span></span><br><span class="line"></span><br><span class="line">ptr = vmalloc(<span class="keyword">sizeof</span>(struct my_struct));</span><br><span class="line"><span class="keyword">if</span>(!ptr) &#123;</span><br><span class="line">  <span class="comment">/* handler error. */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* work with ptr. */</span></span><br><span class="line"></span><br><span class="line">vfree(ptr);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* kmalloc() allocatedsizelimitation */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[KMALLOC_TEST]: &quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> i ; <span class="keyword">void</span> *ptr;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;;i*=<span class="number">2</span>) &#123;</span><br><span class="line">ptr = kmalloc(i, GFP_KERNEL); </span><br><span class="line">    <span class="keyword">if</span>(!ptr) &#123;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;could not allocate %lu bytes¥n&quot;</span>, i);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">kfree(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit); </span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="part.7-slab-layer">Part.7 Slab layer<a title="#part.7-slab-layer" href="#part.7-slab-layer"></a></h2><p>Allocating/freeing data structures is done very often in the kernel and the data should be cached. An allocator aware of data structure size, page size, and total cache size is more efficient and should be <a href="https://en.wikipedia.org/wiki/Non-uniform_memory_access" target="_blank">NUMA-aware</a> and implement <a href="https://en.wikipedia.org/wiki/Cache_coloring" target="_blank">cache-coloring</a>.</p><p>Slab layer/slab allocator: Linux’s generic allocation caching interface. Each cache contains one or several slabs( physically contiguous pages). Slabs contain objects(actual data structure slots). In order to reduce the fragmentation, allocation requests are served from partial slabs if present and a new empty slab is actually allocated in case the cache is full.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a new cache is crested using: */</span></span><br><span class="line"><span class="function">struct kmem_cache *<span class="title">kmem_cache_create</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">size_t</span> size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">size_t</span> align, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">unsigned</span> <span class="keyword">long</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">void</span> (*ctor)(<span class="keyword">void</span> *))</span></span>;</span><br></pre></td></tr></table></figure><ol><li>Flags</li></ol><p><code>SLAB_HW_CACHEALIGN</code>: Each object in a slab is aligned to a cache line.</p><p><code>SLAB_POISON</code> : Fill the slab with know values (a5a5a5a5) to detect accesses to uninitialized memory.</p><p><code>SLAB_PANIC</code>: Slab layer panics if the allocation fails.</p><p><code>SLAB_CACHE_DMA</code>: Allocation made from DMA-enabled memory.</p><p><code>SLAB_RED_ZONE</code> : Extra padding around objects to detect buffer overflows.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk3lnszab3j30pe0c4tag.jpg" alt="Screen Shot 2020-10-27 at 08.45.15" style="zoom:33%;"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk3ln8s2vyj30py0c075q.jpg" alt="Screen Shot 2020-10-27 at 08.44.45" style="zoom:33%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Slab layer usage example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SLAB_TEST] &quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> &#123;</span> </span><br><span class="line">  <span class="keyword">int</span> int_param;</span><br><span class="line">  <span class="keyword">long</span> long_param; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">ptr1</span>, *<span class="title">ptr2</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">my_cache</span>;</span></span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">my_cache = kmem_cache_create(<span class="string">&quot;pierre-cache&quot;</span>, </span><br><span class="line">                               <span class="keyword">sizeof</span>(struct my_struct), <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(!my_cache) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  ptr1 = kmem_cache_alloc(my_cache, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span>(!ptr1)&#123;</span><br><span class="line">    ret = -ENOMEM;</span><br><span class="line"><span class="keyword">goto</span> destroy_cache;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">ptr2 = kmem_cache_alloc(my_cache, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span>(!ptr2)&#123;</span><br><span class="line">    ret = -ENOMEM; </span><br><span class="line">    <span class="keyword">goto</span> freeptr1;</span><br><span class="line">&#125;</span><br><span class="line">ptr1-&gt;int_param =<span class="number">42</span>; </span><br><span class="line">  ptr1-&gt;long_param = <span class="number">42</span>; </span><br><span class="line">  ptr2-&gt;int_param =<span class="number">43</span>;</span><br><span class="line">  ptr2-&gt;long_param = <span class="number">43</span>;</span><br><span class="line">  </span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;ptr1 = &#123;%d, %ld&#125; ; ptr2 = &#123;%d, %ld&#125;¥n&quot;</span>, </span><br><span class="line">         ptr1-&gt;int_param, ptr1-&gt;long_param, ptr2-&gt;int_param, </span><br><span class="line">         ptr2-&gt;long_param);</span><br><span class="line">  </span><br><span class="line">  kmem_cache_free(my_cache, ptr2);</span><br><span class="line">  freeptr1:</span><br><span class="line">  kmem_cache_free(my_cache, ptr1);</span><br><span class="line">  destroy_cache: </span><br><span class="line">  kmem_cache_destroy(my_cache);</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="part.8-stack,-high-memory-and-per-cpu-allocation">Part.8 Stack, high memory and per-cpu allocation<a title="#part.8-stack,-high-memory-and-per-cpu-allocation" href="#part.8-stack,-high-memory-and-per-cpu-allocation"></a></h2><h3 id="stack">Stack<a title="#stack" href="#stack"></a></h3><p>A user-space stack for execution in user space and it is is large and grows dynamically.</p><p>A kernel stack for execution in the kernel and it is small and has a fixed-size (Generally 8KB on 32-bit architectures and 16KB on 64-bit).</p><p>Use a per-cpu stack (1 single page) dedicated to interrupt handlers.</p><h3 id="high-memory-allocation">High memory allocation<a title="#high-memory-allocation" href="#high-memory-allocation"></a></h3><p>On x86_32, physical memory above 896MB is not permanently mapped within the kernel address space. Because of the limited size of the address space and the 1G/3G kernel/user-space physical memory split. Before usage, pages from highmem must be mapped after allocation.</p><p>Permanent mapping (<code>include/linux/highmem.h</code>):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmap</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure><p>· Works on low and high memory.<br>· Maps (update the page table) and return the given<br>· May sleep, use only in process context<br>· Number of permanent mappings is limited, unmap when done:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kunmap</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gfp.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/highmem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[HIGHMEM]: &quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTS_IN_PAGE (PAGE_SIZE/sizeof(int))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">my_page</span>;</span> </span><br><span class="line">  <span class="keyword">void</span> *my_ptr;</span><br><span class="line"><span class="keyword">int</span> i, *int_array;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>); </span><br><span class="line">  </span><br><span class="line">  my_page = alloc_page(GFP_HIGHUSER);</span><br><span class="line"><span class="keyword">if</span>(!my_page) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">my_ptr = kmap(my_page); </span><br><span class="line">  int_array = (<span class="keyword">int</span> *)my_ptr;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) &#123; </span><br><span class="line">    int_array[i] = i;</span><br><span class="line">    printk(PRINT_PREF <span class="string">&quot;array[%d] = %d¥n&quot;</span>, i, int_array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  kunmap(my_page); </span><br><span class="line">  free_pages(my_page, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br></pre></td></tr></table></figure><p>Temporary mappings: Also called atomic mappings as they can be used from interrupt context and uses a per-cpu pre-reserved slot. Do not sleep while holding a temporary mapping.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmap_atomic</span><span class="params">(struct page *page)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kunmap_atomic</span><span class="params">(<span class="keyword">void</span> *addr)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gfp.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/highmem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[HIGHMEM_ATOMIC]: &quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTS_IN_PAGE (PAGE_SIZE/sizeof(int))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">my_page</span>;</span> </span><br><span class="line">  <span class="keyword">void</span> *my_ptr;</span><br><span class="line"><span class="keyword">int</span> i, *int_array;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  my_page = alloc_page(GFP_HIGHUSER);</span><br><span class="line"><span class="keyword">if</span>(!my_page) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  my_ptr = kmap_atomic(my_page); </span><br><span class="line">  int_array = (<span class="keyword">int</span> *)my_ptr;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) &#123;</span><br><span class="line">    int_array[i] = i;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;array[%d] = %d¥n&quot;</span>, i , int_array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">kunmap_atomic(my_ptr); </span><br><span class="line">  __free_pages(my_page, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br></pre></td></tr></table></figure><h3 id="per-cpu">Per-cpu<a title="#per-cpu" href="#per-cpu"></a></h3><p>Per-cpu data: data that is unique to each CPU (i.e. each core)  and is implemented through arrays in which each index corresponds to a CPU.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> my_percpu[NR_CPUS]; <span class="comment">/* NR_CPUS contains the number of cores */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cpu;</span><br><span class="line"></span><br><span class="line">cpu = get_cpu(); <span class="comment">/* get current CPU, disable kernel preemption */</span></span><br><span class="line">my_percpu[cpu]++; <span class="comment">/* access the data */</span></span><br><span class="line">put_cpu(); <span class="comment">/* re-enable kernel preemption */</span></span><br></pre></td></tr></table></figure><p>Disabling kernel preemption(<code>get cpu()</code>/<code>put cpu()</code>) while accessing per-cpu data is necessary.<br>Preemption then reschedule on another core <em>→</em> cpu not valid anymore.<br>Another task preempting the current one might access the per-cpu data <em>→</em> race condition.</p><p>Linux provides an API to manipulate per-cpu data: <code>percpu</code> in <code> include/linux/percpu.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Compile-time per-cpu data structure usage: */</span></span><br><span class="line">DEFINE_PER_CPU(type, name) ; <span class="comment">/* Creation */</span></span><br><span class="line"><span class="comment">/* To refer to a per-cpu data structure declared elsewhere */</span></span><br><span class="line">DECLARE_PER_CPU(name, type); </span><br><span class="line"><span class="comment">/* Data manipulation */</span></span><br><span class="line">get_cpu_var(name)++; <span class="comment">/* increment name on this CPU */</span> </span><br><span class="line">put_cpu_var(name);  <span class="comment">/* Done, disable kernel preemption */</span></span><br><span class="line"><span class="comment">/* Access another CPU data */</span></span><br><span class="line">per_cpu(name, cpu)++; <span class="comment">/* increment name on the given CPU */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Per-cpu data at runtime */</span></span><br><span class="line"><span class="comment">/* Allocation */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">my_var</span> =</span> alloc_percpu(struct my_struct); </span><br><span class="line"><span class="keyword">if</span>(!my_var) &#123;</span><br><span class="line"><span class="comment">/* allocation error */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Manipulation: */</span></span><br><span class="line">get_cpu_var(my_var)++;</span><br><span class="line">put_cpu_var(my_var);</span><br><span class="line"><span class="comment">/* Deallocation: */</span></span><br><span class="line">free_percpu(my_var);</span><br></pre></td></tr></table></figure><p>Benefits of per-cpu data:<br>· Removes/minimizes the need for locking.<br>· Reduces cache thrashing.Processor access local data so there is less cache coherency overhead (invalidation) in multicore systems.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Per-CPU allocation: usage example (static) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/percpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/smp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[PERCPU] &quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">thread1</span>, *<span class="title">thread2</span>, *<span class="title">thread3</span>;</span></span><br><span class="line">DEFINE_PER_CPU(<span class="keyword">int</span>, my_var) ; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">thread_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!kthread_should_stop()) &#123;</span><br><span class="line">    <span class="keyword">int</span> cpu;</span><br><span class="line">    get_cpu_var(my_var)++;</span><br><span class="line">    cpu = smp_processor_id();</span><br><span class="line">printk(<span class="string">&quot;cpu[%d] = %d¥n&quot;</span>,</span><br><span class="line">           cpu, get_cpu_var(my_var)); </span><br><span class="line">    put_cpu_var(my_var);</span><br><span class="line">    msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cpu;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(cpu=<span class="number">0</span>; cpu&lt;NR_CPUS; cpu++) per_cpu(my_var, cpu) = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  wmb();</span><br><span class="line">thread1 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread1&quot;</span>);</span><br><span class="line">thread2 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread2&quot;</span>);</span><br><span class="line">thread3 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread3&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">exit</span> <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  kthread_stop(thread1); </span><br><span class="line">  kthread_stop(thread2); </span><br><span class="line">  kthread_stop(thread3);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Per-CPU allocation: usage example (dynamic) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/percpu.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/smp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[PERCPU] &quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">thread1</span>, *<span class="title">thread2</span>, * <span class="title">thread3</span>;</span></span><br><span class="line"><span class="keyword">void</span> my_var2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">thread_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!kthread_should_stop()) &#123;</span><br><span class="line">    <span class="keyword">int</span> *local_ptr, cpu;</span><br><span class="line">    local_ptr = get_cpu_ptr(my_var2); </span><br><span class="line">    cpu = smp_processor_id(); </span><br><span class="line">    (*local_ptr)++;</span><br><span class="line">printk(<span class="string">&quot;cpu[%d] = %d¥n&quot;</span>, cpu, *local_ptr); </span><br><span class="line">    put_cpu_ptr(my_var2); </span><br><span class="line">    msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *local_ptr;</span><br><span class="line"><span class="keyword">int</span> cpu;</span><br><span class="line">printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">my_var2 = alloc_percpu(<span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">if</span>(!my_var2) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(cpu=<span class="number">0</span>; cpu&lt;NR_CPUS; cpu++) &#123;</span><br><span class="line">    local_ptr = per_cpu_ptr(my_var2, cpu);</span><br><span class="line">    *local_ptr = <span class="number">0</span>;</span><br><span class="line">put_cpu();</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">wmb();</span><br><span class="line">thread1 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread1&quot;</span>);</span><br><span class="line">thread2 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread2&quot;</span>);</span><br><span class="line">thread2 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread2&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">exit</span> <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  kthread_stop(thread1);</span><br><span class="line">  kthread_stop(thread2);</span><br><span class="line">  kthread_stop(thread3);</span><br><span class="line">  free_percpu(my_var2);</span><br><span class="line">  printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit); </span><br><span class="line"></span><br><span class="line">sMODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="choosing-the-right-allocation-method">Choosing the right allocation method<a title="#choosing-the-right-allocation-method" href="#choosing-the-right-allocation-method"></a></h3><p>Need physically contiguous memory?<br>· <code>kmalloc()</code> or low-level allocator, with flags:<br>GFP_KERNELif sleeping is allowed.<br>GFP_ATOMIC otherwise.</p><p>Need large amount of memory, not physically contiguous:<br>· <code>vmalloc()</code></p><p>Frequently creating/destroying large amount of the same data structure:<br>· Use the slab layer</p><p>Need to allocate from high memory?<br>· Use <code>alloc_page()</code> then <code>kmap()</code> or <code>kmap_atomic()</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;memory-management&quot;&gt;Memory Management&lt;a title=&quot;#memory-management&quot; href=&quot;#memory-management&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;part.1-address-space-a
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Process Management</title>
    <link href="https://oreodu.github.io/2020/20201024-Process-Management/"/>
    <id>https://oreodu.github.io/2020/20201024-Process-Management/</id>
    <published>2020-10-24T02:13:00.000Z</published>
    <updated>2020-10-28T08:31:19.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="process-management">Process Management<a title="#process-management" href="#process-management"></a></h1><h2 id="part.1-process">Part.1 Process<a title="#part.1-process" href="#part.1-process"></a></h2><p>Every application(program) comes into execution through means of process, <strong>process</strong> is a running instance of a program. Processes are created through different system calls, most popular are <strong>fork()</strong> and <strong>exec()</strong>.</p><p>The fork() creates a new process by duplicating the calling process, The new process, referred to as child, is an exact duplicate of the calling process, referred to as parent.</p><p>In computing, exec is a functionality of an operating system that runs an executable file in the context of an already existing process, replacing the previous executable.  As a new process is not created, the process identifier (PID) does not change, but the machine code, data, heap, and stack of the process are replaced by those of the new program.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk082r4imbj30bq0kg40e.jpg" alt="Screen Shot 2020-10-24 at 10.38.27" style="zoom:33%;"><p>Tutorial on [<code>fork()</code>](<a href="http://www.csl.mtu.edu/cs4411.ck/www/NOTES/">http://www.csl.mtu.edu/cs4411.ck/www/NOTES/</a> process/fork/create.html) usage.<br>Combining <a href="https://ece.uwaterloo.ca/dwharder/icsrts/Tutorials/fork_exec/" target="_blank"> <code>fork()</code> and <code>exec()</code></a>. (execl(), execlp(), execle(), execv(), execvp(), execve())</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fork() == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//child process</span></span><br><span class="line"><span class="keyword">char</span> * execve_str[] = &#123;<span class="string">&quot;env&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> * env[] = &#123;<span class="string">&quot;PATH=/tmp&quot;</span>, <span class="string">&quot;USER=lei&quot;</span>, <span class="string">&quot;STATUS=testing&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (execve(<span class="string">&quot;/usr/bin/env&quot;</span>,execve_str,env) &lt;<span class="number">0</span> )&#123;</span><br><span class="line">perror(<span class="string">&quot;error on exec&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//parent process</span></span><br><span class="line">wait(&amp;childpid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;execve done\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.2-the-process-descriptor">Part.2 The process descriptor<a title="#part.2-the-process-descriptor" href="#part.2-the-process-descriptor"></a></h2><p>See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/task_struct" target="_blank">here</a> or <a href="http://www.science.smith.edu/~nhowe/262/oldlabs/sched.html" target="_blank">here</a>.</p><p>In the Linux kernel, processes are defined as <code>task_struct</code> structures in <code>include/linux/sched.h</code>, line 281. This structure contains every relevant information about a process.</p><p>List of processes implemented as a linked list of <code>task struct</code>. It is dynamically allocated (heap) through the slab allocator.</p><p>Quick access to <code>task struct</code> of the task currently running on a core: arch/x86/include/asm/current.h.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk0iv2pigvj30b60degmo.jpg" alt="Screen Shot 2020-10-24 at 16.51.34" style="zoom: 50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Full structure definition in linux/sched.h */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tastk_struct</span> &#123;</span> </span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">long</span> state; </span><br><span class="line">  <span class="keyword">void</span> *<span class="built_in">stack</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">int</span> prio; </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">cpumask_t</span> cpus_allowed;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tasks</span>;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">parent</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">children</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling</span>;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="process-states">Process states<a title="#process-states" href="#process-states"></a></h3><p>State field of the task struct:</p><p>· <code>TASK_RUNNING</code>:<br>Process is runnable (running or in a CPU run queue) In user or kernel space.</p><p>· <code>TASK_INTERRUPTIBLE</code>:<br>Process is sleeping waiting for some condition.<br>Switched to TASK RUNNING on condition true or signal received.</p><p>· <code>TASK_UNINTERRUPTIBLE</code>:<br>Same as TASK INTERRUPTIBLE but does not wake up on signal.</p><p>· <code>TASK_TRACED</code>:<br>Traced by another process(ex:debugger)</p><p>· <code>TASK_STOPPED</code>:<br>Not running nor waiting,result of the reception of some signals to pause the process.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk0jhtmibbj319m0o0gv2.jpg" alt="Screen Shot 2020-10-24 at 17.12.52" style="zoom: 33%;"><h3 id="process-hierarchy">Process hierarchy<a title="#process-hierarchy" href="#process-hierarchy"></a></h3><p>· Root: init, PID 1<br>Launched by the kernel as the last step of the boot process.<br>· fork-based process creation:<br>Each process has aparent: parent pointer in the <code>task_struct</code>.<br>· Processes may have children: children field(list head).<br>· Processes may have siblings: siblings field.<br>· List of all tasks: tasks field.<br>Easy manipulation through <code>next task(t)</code> and <code>for eachprocess(t)</code>.</p><h2 id="part.3-process-creation">Part.3 Process creation<a title="#part.3-process-creation" href="#part.3-process-creation"></a></h2><p>Linux does not implements creating a tasks from nothing.</p><p><code>fork()</code> &amp; <code>exec()</code></p><p>· <code>fork()</code> creates a child, copy of the parent process. Only PID, PPID and some resources/stats differ. Linux duplicates the parent page tables and creates a new process descriptor.</p><p>Page table access bits: read-only.<br>Copy-On-Write (COW): memory pages are copied only when they are referenced for write operations.</p><p>· <code>exec()</code> loads into a process address space a new executable.</p><h3 id="forking-:-fork()-and-vfork()">Forking : <code>fork()</code> and <code>vfork()</code><a title="#forking-:-fork()-and-vfork()" href="#forking-:-fork()-and-vfork()"></a></h3><p><code>fork()</code> is implemented by the <code>clone()</code> system call. <code>sys_clone()</code> calls <code>do_fork()</code>, which calls <code>copy_process()</code> and starts the new task.</p><p><code>copy_process()</code>:</p><ol><li>Calls <code>dup_tasks_truct()</code>. Duplicates kernel stack, <code>task_struct</code> and <code>thread_info</code>.</li><li>Checks that we do not overflow the processes number limit.</li><li>Small amount of values are modified in the <code>task_struct</code>.</li><li>Calls <code>sched_fork()</code> to set the child <code>state</code> set to <code>TASK_NEW</code> .</li><li>Copies parent info: files, signal handlers, etc.</li><li>Gets a new PID through <code>alloc_pid()</code>.</li><li>Returns a pointer to the created child <code>task_struct</code>.</li></ol><p>Finally, <code>do_fork()</code> calls wake up <code>new_task()</code>. State becomes <code>TASK_RUNNING</code></p><p><code>vfork()</code>: alternative without copy of the address space.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ProcessCreation.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* This is the child process.  print my student id. */</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;My student id is : 31206833\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* The fork failed.  Report failure.  */</span></span><br><span class="line">      perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">/* This is the parent process.  Wait for the child to complete.  */</span></span><br><span class="line">     <span class="keyword">if</span> (waitpid (pid, &amp;status, <span class="number">0</span>) != pid)</span><br><span class="line">       status = <span class="number">-1</span>;</span><br><span class="line">     <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.4-threads">Part.4 Threads<a title="#part.4-threads" href="#part.4-threads"></a></h2><p>Threads are concurrent flows of execution belonging to the same program sharing the same address space.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk0qkit41ej30f20eggnv.jpg" alt="Screen Shot 2020-10-24 at 21.18.20" style="zoom:50%;"><p>In Linux there is no concept of a thread.</p><ol><li>No scheduling particularity.</li><li>A thread is just another process sharing some information with other processes.</li><li>Each thread has its own <code>task_struct</code>.</li><li>Created through <code>clone()</code> with specific flags indicating sharing. More information form <a href="https://man7.org/linux/man-pages/man2/clone.2.html" target="_blank">here</a>.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ThreadCreation.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> errExit(msg)    do &#123; perror(msg); exit(EXIT_FAILURE);&#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">childFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;My student id is : 312. \n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Terminating func...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In the main.&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">stack</span>;</span><br><span class="line">    <span class="keyword">char</span> *stackTop;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">stack</span> = <span class="built_in">malloc</span>(STACK_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>)</span><br><span class="line">        errExit(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">    stackTop = <span class="built_in">stack</span> + STACK_SIZE;  </span><br><span class="line"></span><br><span class="line">    pid = clone(&amp;childFunc, stackTop, CLONE_VM｜CLONE_VFORK， <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;clone&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;clone() returned %ld\n&quot;</span>, (<span class="keyword">long</span>) pid);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kernel-threads">Kernel threads<a title="#kernel-threads" href="#kernel-threads"></a></h3><p>Kernel threads are schedulable entities (like regular processes) and do not have their own address space( <code>mm</code>  in <code>task_struct</code> is NULL).</p><p>Kernel threads are all forked from the <code>kthread </code> kernel thread (PID 2), using <code>clone()</code>. To create a kernel thread, use <code>kthread_create() </code>.</p><p>When created through <code>kthread_create()</code>, the thread is not in a runnable state and need to call <code>wake_up_process()</code> or use <code>kthread run()</code>.</p><p>Thread runs until it calls do <code>exit()</code> or until another part of the kernel calls <code>kthread_stop()</code>.</p><h2 id="part.5-process-termination">Part.5 Process termination<a title="#part.5-process-termination" href="#part.5-process-termination"></a></h2><p>Termination on invoking the <code>exit()</code> system call which can be implicitly inserted by the compiler on <code>return</code> from <code>main</code>. <code>sys_exit()</code> calls <code>do_exit()</code>.</p><h3 id="do-exit()-(kernel/exit.c):"><code>do exit()</code> (kernel/exit.c):<a title="#do-exit()-(kernel/exit.c):" href="#do-exit()-(kernel/exit.c):"></a></h3><ol><li>Call <code>exit_signals()</code> which set the <code>PF EXITING</code> flag in the <code>task_struct</code></li><li>Set the exit code in the <code>exit_code</code> field of the <code>task_struct</code>. (To be retrieved by the parent.)</li><li>Call <code>exit_mm()</code> to release the <code>mm_struct</code> for the task. If it is not shared with any other process, it is destroyed.</li><li>Call <code>exit_sem()</code>:process dequeued from potential semaphores queues.</li><li>Call <code>exit_fs()</code> and <code>exit_files()</code> to update accounting information. Potential data structures that are not used anymore are freed.</li><li>Call <code>exit_notify()</code>. Send signals to parent and reparent potential children. Set the <code>exit_state</code> of the <code>task_struct</code> to <code>EXIT ZOMBIE</code> .</li><li>Call <code>do_taskdead()</code>. Set the <code>state</code> to <code>TASK DEAD</code> ,  call <code>schedule()</code> and never returns.</li></ol><p>At that point, what is left is the <code>task_struct</code>, <code>thread info</code> and kernel stack. To provide information to the parent. Parent notifies the kernel when everything can be freed.</p><h3 id="task_struct-cleanup:"><code>task_struct</code> cleanup:<a title="#task_struct-cleanup:" href="#task_struct-cleanup:"></a></h3><ol><li><p>Separated from the process of exiting because of the need to pass exit information to the parent. Until the parent grab the exit information through <code>wait4()</code>.</p></li><li><p>Cleanup implemented in <code>release_task()</code> called from the <code>wait4()</code> implementation.</p><p>Remove the task from the task list. Release and free remaining resources.</p></li></ol><p>A parent exits before its child. Child must be reparented(To another process in the current thread group or <code>init</code> if that fails).</p><p><code>exit notify()</code> calls <code>forget_original_parent()</code>, that calls <code>find_newreaper()</code>. Returns the <code>task_struct</code> of another task in the thread group if it exists, otherwise the one from init. Then, all the children of the currently dying task are reparented to the reaper.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;process-management&quot;&gt;Process Management&lt;a title=&quot;#process-management&quot; href=&quot;#process-management&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;part.1-process&quot;&gt;Pa
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Linux Basics</title>
    <link href="https://oreodu.github.io/2020/20201023-Linux-Basics/"/>
    <id>https://oreodu.github.io/2020/20201023-Linux-Basics/</id>
    <published>2020-10-23T04:43:00.000Z</published>
    <updated>2020-10-24T02:17:46.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-basics">Linux Basics<a title="#linux-basics" href="#linux-basics"></a></h1><h2 id="part.1-history">Part.1 History<a title="#part.1-history" href="#part.1-history"></a></h2><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gjyai1ptkcj30q60j0tc5.jpg" alt="截屏2020-10-22 下午5.10.17" style="zoom: 67%;"><p>​            (From Advanced Operating Systems in The University of Tokyo)</p><p>Unix:</p><p>Unix is very popular and ported to multiple architectures due to its simple design and ease of use.</p><p>Simplicity:<br>➢ Small number of system calls with clearly defined design.<br>➢ Everything is a file.<br>➢ Written in C for portability.<br>➢ Easy and fast process creation (fork()).<br>➢ Simple and efficient Inter-Process Communication mechanisms (IPC).</p><h2 id="part.2-linux-open-source-model">Part.2 Linux open source model<a title="#part.2-linux-open-source-model" href="#part.2-linux-open-source-model"></a></h2><p>Benefits of open source vs closed development:</p><p>➢ Security, stability: Given enough eyeballs, all bugs are shallow.<br>➢ Code quality.<br>➢ Freely modifiable by anyone having an interest to do so.<br>➢ Education, research:  We can PEEK at the code to understand how it works and we can POKE it to experiment and build new systems.</p><h2 id="part.3-linux-kernel">Part.3 Linux Kernel<a title="#part.3-linux-kernel" href="#part.3-linux-kernel"></a></h2><p>Sources are freely <a href="https://www.kernel.org/" target="_blank">available</a>.</p><p>Manages the hardware and provides <strong>interfaces</strong> or user space processes to access the hardware and perform privileged operations.</p><p>Monolithic Model: Opposed to the <em>microkernel</em> model, Linux is monolithic. All the OS services run in kernel, privileged mode. System calls are the one and only way an application can enter the kernel to request OS services and privileged operations such as accessing the hardware.</p><p>Kernel vs user level programming:<br>➢ No C library mostly because of speed and size. However, the kernel implements lots of usefull functions from the C library.<br>➢ 2% assembly, the rest in GNU C (GCC extensions).<br>➢ No memory protection.<br>➢ Highly concurrent: Preemption, interrupts, running on SMP (Symmetric Multiprocessor System). Race conditions without proper synchronization.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gjybtotr4sj30vu0mqaib.jpg" alt="截屏2020-10-22 下午7.17.10" style="zoom: 50%;"><p>​            (From Advanced Operating Systems in The University of Tokyo)</p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gjyfieodezj30ys0hsk0q.jpg" alt="Screen Shot 2020-10-22 at 21.24.39" style="zoom: 55%;"><p>​               (From Advanced Operating Systems in The University of Tokyo)</p><h3 id="system-calls">System calls<a title="#system-calls" href="#system-calls"></a></h3><p>Syscalls can be classified into groups:<br>➢ <strong>Process management/scheduling:</strong> fork, exit, execve, nice,{<em>get|set</em>}priority,{get|set}pid, etc.<br>➢ <strong>Memory management:</strong> brk, mmap, swap{on|of}, etc.<br>➢ <strong>File system</strong>: open, read, write, lseek, stat, etc.<br>➢ <strong>Inter-Process Communication</strong>: pipe, shmget, semget, etc.<br>➢ <strong>Time management</strong>: {get|set}timeofday, time, timer create, etc.<br>➢ Others: *{<em>get|set</em>}*uid, syslog, connect, etc.</p><p>System calls table syscall identifier(unique integer).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 common read sys_read</span><br><span class="line">1 common write sys_write</span><br><span class="line">2 common open sys_open</span><br><span class="line">3 common close sys_close</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><h3 id="syscall-invocation(user-space-side)">Syscall invocation(user space side)<a title="#syscall-invocation(user-space-side)" href="#syscall-invocation(user-space-side)"></a></h3><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gjz28nljggj30xi06uabg.jpg" alt="Screen Shot 2020-10-23 at 10.30.07" style="zoom:50%;"><p>​   (From Advanced Operating Systems in The University of Tokyo)</p><p>Syscalls are rarely invoked directly. Most of them are wrapped by the C library. The programmer uses the C library Application Programming Interface (API).</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gjz2kopy4lj30zo04oabx.jpg" alt="Screen Shot 2020-10-23 at 10.42.38" class="φcx"></p><p>​  (From Advanced Operating Systems in The University of Tokyo)</p><p>System calls behavior is documented in man pages.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man &lt;syscall name&gt;</span><br></pre></td></tr></table></figure><p>Some syscalls does not have a wrapper in the C library. A syscall can be called directly through syscall man syscall.(invocation without the wrapper)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bytes_written = syscall(SYS_write, <span class="number">1</span>, message, <span class="number">14</span>);</span><br></pre></td></tr></table></figure><p>On x86 64, syscalls can be used directly through thesyscall assembly instruction.(invocation without the C library)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># syscall_asm.s</span><br><span class="line">.global _start</span><br><span class="line">      .text </span><br><span class="line">_start:</span><br><span class="line"><span class="meta"># write(1, message, 14) </span></span><br><span class="line">mov $<span class="number">1</span>, %rax</span><br><span class="line">mov $<span class="number">1</span>, %rdi</span><br><span class="line">mov $message, %rsi </span><br><span class="line">        mov $<span class="number">14</span>, %rdx </span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        <span class="meta"># exit(0)</span></span><br><span class="line">mov $<span class="number">60</span>, %rax x</span><br><span class="line">        <span class="keyword">or</span> %rdi, %rdi </span><br><span class="line">        syscall</span><br><span class="line">message:</span><br><span class="line">.ascii <span class="string">&quot;Hello, world!¥n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="syscall-execution(kernel-space-side)">Syscall execution(kernel space side)<a title="#syscall-execution(kernel-space-side)" href="#syscall-execution(kernel-space-side)"></a></h3><p>When an interrupt is received by the CPU, it stops whatever it is doing and <strong>the kernel executes the interrupt handler</strong>.</p><p>Interrupts:<br>Asynchronous: <strong>hardware interrupts</strong>, issued from devices.<br>Synchronous: <strong>exceptions</strong>, triggered involuntarily by the program Itself.<br>Synchronous, programmed exceptions: <strong>software interrupts</strong>, issued voluntarily by the code of the program itself.</p><p>How is a syscall invoked from user space:<br>➢ User space put the <strong>syscall identifier and parameters values into registers</strong> (x86)<br>➢ Then issues a <strong>software interrupt</strong><br>➢ The kernel executes the interrupt handler, <strong>system call handler</strong>.<br>Puts the registers values into a data structure placed on the stack<br>Checks the validity of the syscall (number of arguments)<br>Then execute the system call implementation.</p><p>How to exchange data between user and memory areas with pointers:<br>➢When a kernel function gets a pointer to some memory in user space it needs to use: The kernel copies it into its memory area (<code>copy from user</code>) .<br>➢ When the kernel wants to write in a user space buffer: It uses <code>copy to user</code>.</p><h3 id="implementing-a-new-system-call">Implementing a new system call<a title="#implementing-a-new-system-call" href="#implementing-a-new-system-call"></a></h3><ol><li>Write your syscall function<br>In an existing file if it makes sense. Is it related to time management ? <em>→</em> kernel/time/time.c<br>Or, if the implementation is large and self-contained: in a new file. You will have to edit the kernel <code>Makefiles</code> to integrate it in the compilation process.</li><li>Add it to the syscall table and give it an identifier<br><code>arch/x86/syscalls/syscall 64.tbl</code>for Linux 4.0</li><li>Add the prototype in <code>include/linux/syscalls.h</code>.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_gettimeofday</span><span class="params">(struct timeval_user *tv, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 struct timezone_user *tz)</span></span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>Recompile, reboot and run. Touching the syscall table will trigger the entire kernel compilation</li></ol><p>➢ <strong>Pros:</strong> Easy to implement and use, fast<br>➢ <strong>Cons</strong>:<br>Needs an official syscall number<br>Interface cannot change after implementation<br>Must be registered for each architecture<br>Probably too much work for small exchanges of information<br>➢ <strong>Alternative</strong>:<br>Device or virtual file:User/kernel space communication through <code>read,write,ioctl</code>.</p><h2 id="part.4-virtual-machine">Part.4 Virtual machine<a title="#part.4-virtual-machine" href="#part.4-virtual-machine"></a></h2><blockquote><p>I would classify virtual machine technologies into three categories (not all products fit clearly into one category):</p><ul><li><a href="http://en.wikipedia.org/wiki/Full_virtualization" target="_blank">Full virtualization</a>, i.e., complete hardware emulation. Examples: <a href="http://en.wikipedia.org/wiki/QEMU" target="_blank">Qemu</a>, <a href="http://en.wikipedia.org/wiki/DOSBox" target="_blank">Dosbox</a>. Pro: you can potentially emulate any architecture on any hardware. Con: it’s the slowest way to do it.</li><li>Hardware-assisted virtualization, where you can emulate machine X on machine X. This can be a lot faster than full virtualization, because most instructions are executed natively, but you lose the ability to run a foreign architecture. There are two sub-categories:</li><li>Hypervisor-based VMs: you run several OSes alongside each other. The bottom layer, called the hypervisor, is a special-purpose OS that runs the VMs and nothing else. Examples: <a href="http://en.wikipedia.org/wiki/Xen" target="_blank">Xen</a>, <a href="http://en.wikipedia.org/wiki/VMware_ESX" target="_blank">VMware ESX</a>.</li><li>Hosted VMs: there is a main OS, the VM is an application on this main OS. Examples: <a href="http://en.wikipedia.org/wiki/VirtualBox" target="_blank">VirtualBox</a>, <a href="http://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine" target="_blank">KVM</a>.</li><li><a href="http://en.wikipedia.org/wiki/Operating_system-level_virtualization" target="_blank">OS-level virtualization</a>: you run several instances of the same OS. This can be in turn a lot more lightweight than hardware virutalization, but you lose some isolation and of course the ability to run different OSes. Examples: <a href="http://en.wikipedia.org/wiki/OpenVZ" target="_blank">OpenVZ</a>, <a href="http://en.wikipedia.org/wiki/FreeBSD_jail" target="_blank">FreeBSD jails</a>.</li></ul><p>(From <a href="https://unix.stackexchange.com/questions/5741/what-are-the-differences-between-various-vm-software" target="_blank">here</a>.)</p></blockquote><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gjyzldca2dj30b40bsgmh.jpg" alt="image1" style="zoom:80%;"><p>​                                                 (KVM + Qemu. From <a href="https://www.packetflow.co.uk/what-is-the-difference-between-qemu-and-kvm/" target="_blank">here</a>)</p><p>GDB server: more details from <a href="https://www.gnu.org/software/gdb/" target="_blank">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux-basics&quot;&gt;Linux Basics&lt;a title=&quot;#linux-basics&quot; href=&quot;#linux-basics&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;part.1-history&quot;&gt;Part.1 History&lt;a title=&quot;#p
      
    
    </summary>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://oreodu.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Operating System" scheme="https://oreodu.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Exercises in Lad</title>
    <link href="https://oreodu.github.io/2020/20201014-Exercises-in-Lad/"/>
    <id>https://oreodu.github.io/2020/20201014-Exercises-in-Lad/</id>
    <published>2020-10-14T06:37:00.000Z</published>
    <updated>2020-10-14T06:38:40.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="exercises">Exercises<a title="#exercises" href="#exercises"></a></h1><p>研究テーマを決める前に、以下のプログラミング課題を一通り</p><hr><p>課題１：　A*　（基本的な探索アルゴリズムの実装、　高速なコードの実装）</p><p>Russell &amp;Norvigで紹介された8パズルを、Ａ＊アルゴリズムを用いて解くプログラムを実装する。<br>　　以下の３つの条件における性能（実行時間）を評価・比較する<br>a)　ヒューリスティック関数を使わないＡ＊（h(s)=0 for all states)<br>b)  ゴールの位置にないタイルの数をヒューリスティックとする　　（Russell and Norvig p.106）<br>b)  マンハッタン距離をヒューリスティックとする　　（Russell and Norvig p.106）</p><p>評価実験は１００個以上のランダムに作成したパズル初期状態に対して行う。<br>但し、単純ランダムにタイルを割り当てて初期状態を作ると、解が存在しない初期状態が多い。<br>正しいパズルの初期状態の生成方法：　まず、正しい状態（＝ゴール状態）から、一歩ランダムな方向にに空タイルを移動する。<br>このように空タイルをランダムな方向に移動する作業を繰り返すとパズルはどんどん崩れるが、必ず解（ゴールまでの経路）が存在する。<br>一般的には、ランダム移転数を増やすほど、「難しい」パズルが生成される。<br>** C/C++で実装すればどんな問題でも1秒以内で解けるはず(信原君がRubyで実装したソルバは数秒以内で全ての問題が解けた）</p><p>課題１A:　データ構造等の工夫で高速な１５パズルの実装を目指す</p><p>まず、１５パズルのソルバを実装する（８パズルのソルバを作成していれば簡単なはず）。<br>ヒューリスティックはマンハッタン距離を使う。<br>上記の８パズルのように１５パズルの問題をランダム生成すれば、かなり難しい問題が生成される。<br>一秒間に展開されるノード数を測る（ソルバを実行して、終了時に生成されたノード数　/ 実行時間）。</p><p>目標：　一秒間に１００万ノード以上生成するソルバを実装。</p><p>ある程度自力で頑張った後、以下の論文を読む。<br><a href="http://www.aaai.org/ocs/index.php/SOCS/SOCS12/paper/viewFile/5404/5682">http://www.aaai.org/ocs/index.php/SOCS/SOCS12/paper/viewFile/5404/5682</a></p><hr><p>課題２<br>任意の数独パズルを解くソルバを実装しなさい。<br>入力ファイル：　以下のページの「test cases」にテキスト形式の問題集が置かれてます。<br><a href="http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku/">http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku/</a><br>上のページには数独の解き方の解説も書かれてますが、<br>殆ど一般性が無いアドバイスなので（全てのパズルを解く保障が無い）、解き方の解説は無視しましょう。<br>正しい解き方はRusell&amp;Norvigの教科書の制約充足の章に紹介されている手法です。<br>１）まず、深さ優先探索を用いたバックトラック法を実装<br>２）更に効率良く解く為に、制約伝播(constraint propagation)を実装する。<br>今回の課題の味噌は（２）です。</p><p>正しく実装すれば、「難しい」と言われているパズルもミリ秒単位以内で解けます</p><p>** 遠藤君が実装した制約伝播＋バックトラックを用いたPython ソルバ(PyPy JIT)は上記サイトのmsk_009問題集1,011門を全問解くのに要した時間が15秒。</p><hr><p>課題３</p><p>数独の課題でバックトラック＋制約伝播はかなり強力な手法だと実感したと思います。<br>では、ＢＴ＋制約伝播はどこまで通用するのか、違う問題を通じて確認しましょう。<br>ついでに、そろそろ本物の学術論文を読み始めましょう。</p><p>Russell&amp;Norvig 5.3 (p.151)にN-Queens問題が紹介されてます。<br>このN-Queens問題に対して：</p><p>１）バックトラック法＋制約伝播を用いたソルバを実装する<br>　　入力：　Queenの数N</p><p>２）　局所探索法（min-conflicts法)を用いたソルバを実装する。<br>制約充足における局所探索法は教科書（第２版）の制約充足の章で簡潔に説明されているが、<br>教科書の洗練された説明だけでなく、原文を読む（当時、かなり大きなインパクトがあった有名な論文で、ＡＩ分野の「名作」の一つ。<br>Solving Large-Scale Constraint Satisfaction and Scheduling Problems<br>Using a Heuristic Repair Method presented at the Eighth National<br>Conference on Artificial Intelligence (AAAI-90)<br><a href="https://www.aaai.org/Papers/AAAI/1990/AAAI90-003.pdf">https://www.aaai.org/Papers/AAAI/1990/AAAI90-003.pdf</a><br>この論文で紹介されたアルゴリズムを実装する。</p><p>局所探索法のソルバを正しく、効率良く実装すれば、かなり大規模な問題が解けるはず。</p><p>３）　上記ソルバ１，２、を比較する</p><p>**遠藤君の結果（３・２６）<br>N=1,000,000の問題を128秒で解けた(python, pypy JIT on 1.06GHz Core 2 Duo, 2GB RAM)</p><hr><p>課題４</p><p>今度はN-Queens問題をboolean satisfiability (SAT)として表現し<br>て解くプログラムを作りましょう。</p><p>以下の資料(Chumin Li作)にNQueensSATモデルの概要が説明されている：<br><a href="https://sites.google.com/site/aflabinternal/sharedfiles/Li-SAT-modeling-slides.pdf?attredirects=0&amp;d=1">https://sites.google.com/site/aflabinternal/sharedfiles/Li-SAT-modeling-slides.pdf?attredirects=0&amp;d=1</a></p><p>但し、SATソルバは自分で作らず、<br>ネットから高性能のソルバを拾って利用する。例えば、<br><a href="http://minisat.se/">http://minisat.se/</a>   （他のソルバでも構わない）</p><p>minisatf等が処理可能な標準ファイル形式(.cnf 形式)の説明：<br><a href="http://www.satcompetition.org/2009/format-benchmarks2009.html">http://www.satcompetition.org/2009/format-benchmarks2009.html</a></p><p>要するに、Queenの数Nを入力として、<br>１）SATソルバが処理できる形式のファイルを作成、<br>（この変換作業が今回の課題の味噌）<br>２）SATソルバを実行、<br>３）結果を読み込み、正しい解か確認</p><p>minisatは基本的には制約伝播＋木探索なので局所探索には劣るが、汎用ＳＡＴソルバでどこまで解けるか実感する（前回作った、自作の制約伝播＋深さ優先探索ソルバと比較する）</p><hr><p>課題５：汎用なプランナと、問題に特化した探索アルゴリズムを比較する</p><p>課題＃1で実装した8パズルのソルバと、最新の汎用プランナFast Downwardを比較する</p><p>汎用プランナFast Downwardをダウンロードして、コンパイルする<br><a href="http://www.fast-downward.org/HomePage">http://www.fast-downward.org/HomePage</a><br><a href="http://www.fast-downward.org/ObtainingAndRunningFastDownward">http://www.fast-downward.org/ObtainingAndRunningFastDownward</a></p><p>FastDownwardを実装するには、問題(ドメイン）の一般的なモデルファイルおよび具体的な問題のインスタンスファイルが必要</p><p>このサイトから8パズルのモデル・インスタンスファイルのペア３問：eight01.pddl, eight01x.pddl　,<br>eight02,eight02x, eight03,eight03xをダウンロード：<br><a href="http://www.ida.liu.se/~TDDC65/ai/la/strips/">http://www.ida.liu.se/~TDDC65/ai/la/strips/</a></p><p>まず、eight01.pddl, eight01x.pddlをなるべく理解する。<br>PDDL形式を理解するには、まずはRussell&amp;Norvigのプランニングの章（１１）を復習。<br>PDDL形式の入門的な説明 <a href="http://users.cecs.anu.edu.au/~patrik/pddlman/writing.html">http://users.cecs.anu.edu.au/~patrik/pddlman/writing.html</a></p><p>課題１で作った8パズルソルバの為に、eight01.pddl, eight01x.pddl… eight3x.pddlに相当する<br>入力ファイルを作成する（自動的な変換でなく、手作業でＯＫ）。</p><p>8パズルソルバとFastDownwardの探索性能を比較する：<br>Fast Downwardの実行：　<a href="http://www.fast-downward.org/PlannerUsage">http://www.fast-downward.org/PlannerUsage</a></p><hr><p>課題６：　進化計算<br>Black-box関数最適化contest<br><a href="http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2016/CEC2016.htm">http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2016/CEC2016.htm</a></p><p>ここで紹介されている４番目のtechnical report (single parameter)のベンチマーク問題に対する進化アルゴリズムを実装する。</p><p>J. J. Liang, B-Y. Qu, P. N. Suganthan, “Problem Definitions and Evaluation Criteria for the CEC 2014 Special Session and Competition on Single Objective Real-Parameter Numerical Optimization”, Technical Report 201311, Computational Intelligence Laboratory, Zhengzhou University, Zhengzhou, China  and  Technical Report, Nanyang Technological University, Singapore, December 2013. (Single parameter-operator set based case)</p><p>まずは自分で考えて、何か実装する。</p><p>次に、SHADEを実装してみる。<br><a href="http://metahack.org/CEC2013-SHADE.pdf">http://metahack.org/CEC2013-SHADE.pdf</a></p><p>参考に：田邊のコード（C++版、Java版　Matlab/Octave版）　<a href="https://sites.google.com/site/tanaberyoji/software">https://sites.google.com/site/tanaberyoji/software</a></p><p>ハマったら、　今年のcontestに投稿してみる：　<a href="http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2017/CEC2017.htm">http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2017/CEC2017.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;exercises&quot;&gt;Exercises&lt;a title=&quot;#exercises&quot; href=&quot;#exercises&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;研究テーマを決める前に、以下のプログラミング課題を一通り&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;課題１：　A*　（基本的な探索アルゴ
      
    
    </summary>
    
    
      <category term="Sundries Storage" scheme="https://oreodu.github.io/categories/Sundries-Storage/"/>
    
    
      <category term="Lad Task" scheme="https://oreodu.github.io/tags/Lad-Task/"/>
    
  </entry>
  
  <entry>
    <title>Mathematical Proof and Discussion of &quot;Fast and Slow Pointer&quot;</title>
    <link href="https://oreodu.github.io/2020/20201014-Mathematical-Proof-and-Discussion-of-Fast-and-Slow-Pointer/"/>
    <id>https://oreodu.github.io/2020/20201014-Mathematical-Proof-and-Discussion-of-Fast-and-Slow-Pointer/</id>
    <published>2020-10-14T06:08:00.000Z</published>
    <updated>2020-10-14T06:39:44.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mathematical-proof-and-discussion-of--&quot;fast-and-slow-pointer&quot;">Mathematical Proof and Discussion of  “Fast and Slow Pointer”<a title="#mathematical-proof-and-discussion-of--&quot;fast-and-slow-pointer&quot;" href="#mathematical-proof-and-discussion-of--&quot;fast-and-slow-pointer&quot;"></a></h2><ul><li><pre><code> https://math.stackexchange.com/questions/913499/proof-of-floyd-cycle-chasing-tortoise-and-hare</code></pre></li><li><pre><code> https://hongyangyu.github.io/algorithm/2017/09/04/Fast-Pointer-and-Slow-Pointer/</code></pre></li><li><pre><code> https://zhuanlan.zhihu.com/p/60736361</code></pre></li><li><pre><code> https://www.jianshu.com/p/a821b0a15b51</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mathematical-proof-and-discussion-of--&amp;quot;fast-and-slow-pointer&amp;quot;&quot;&gt;Mathematical Proof and Discussion of  “Fast and Slow Pointe
      
    
    </summary>
    
    
      <category term="Sundries Storage" scheme="https://oreodu.github.io/categories/Sundries-Storage/"/>
    
    
      <category term="Linked list" scheme="https://oreodu.github.io/tags/Linked-list/"/>
    
      <category term="Two pointers" scheme="https://oreodu.github.io/tags/Two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>Collections in Java</title>
    <link href="https://oreodu.github.io/2020/20201013-Collection-in-Java/"/>
    <id>https://oreodu.github.io/2020/20201013-Collection-in-Java/</id>
    <published>2020-10-13T01:06:00.000Z</published>
    <updated>2020-10-13T01:07:30.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections-in-java">Collections in Java<a title="#collections-in-java" href="#collections-in-java"></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections-in-java&quot;&gt;Collections in Java&lt;a title=&quot;#collections-in-java&quot; href=&quot;#collections-in-java&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Java" scheme="https://oreodu.github.io/tags/Java/"/>
    
      <category term="Data Structure" scheme="https://oreodu.github.io/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Java Basics 03</title>
    <link href="https://oreodu.github.io/2020/20201007-Java-Basics-03/"/>
    <id>https://oreodu.github.io/2020/20201007-Java-Basics-03/</id>
    <published>2020-10-07T08:13:00.000Z</published>
    <updated>2020-11-23T01:12:50.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-basics-03">Java Basics 03<a title="#java-basics-03" href="#java-basics-03"></a></h1><h2 id="part.1-iterator">Part.1 Iterator<a title="#part.1-iterator" href="#part.1-iterator"></a></h2><p>Iterator is an interface which belongs to collection framework in the <code>java.util.Iterator</code>. It allows us to traverse the collection, access the data element and remove the data elements of the collection.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>; <span class="comment">// usually don&#x27;t use remove.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLLStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> class Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> ListIterator();&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;Item&gt; current = sentinel.next;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> current != <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SLListStack&lt;Integer&gt; s = <span class="keyword">new</span> SLListStack&lt;&gt;();</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// s is iterable.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n: s) System.out.println(n);</span><br><span class="line">    Iterator&lt;Integer&gt; i = SLListStack.iterator();</span><br><span class="line">    <span class="keyword">while</span>(i.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = i.next();</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.2-testing">Part.2 Testing<a title="#part.2-testing" href="#part.2-testing"></a></h2><p>Assertion: statement to test assumptions about the program.<br>Helps detect logic bugs.<br>Document the code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -ea Myprogram &#x2F;&#x2F; enable assertions</span><br><span class="line">java -da Myprogram &#x2F;&#x2F; disable assertions (default)</span><br></pre></td></tr></table></figure><h2 id="part.3-exception">Part.3 Exception<a title="#part.3-exception" href="#part.3-exception"></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-basics-03&quot;&gt;Java Basics 03&lt;a title=&quot;#java-basics-03&quot; href=&quot;#java-basics-03&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;part.1-iterator&quot;&gt;Part.1 Iterator&lt;a
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://oreodu.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://oreodu.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Union Find</title>
    <link href="https://oreodu.github.io/2020/20201005-Union-Find/"/>
    <id>https://oreodu.github.io/2020/20201005-Union-Find/</id>
    <published>2020-10-05T00:55:00.000Z</published>
    <updated>2020-12-08T07:23:54.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="union-find">Union-Find<a title="#union-find" href="#union-find"></a></h1><h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3><p>(概略图)</p><p><strong>· materials:</strong><br>· Wikipedia<br>· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>· You can see the implementations of those linear list <a href="https://github.com/OreoDu/Implementations/tree/main/src/Algorithms/UnionFind" target="_blank">here</a>.</p><p>A  disjoint-set data structure is a data structure that keeps track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets.</p><p>A  union-find algorithm is an algorithm that performs two useful operations on such a data structure:<br>· Find: Determine which subset a particular element is in. Used to check if two elements are in the same subset.<br>· Union: Join two subsets into a single subset.</p><h2 id="part.1-quik-find-(eager-approach)">Part.1 Quik-Find (eager approach)<a title="#part.1-quik-find-(eager-approach)" href="#part.1-quik-find-(eager-approach)"></a></h2><p>Data structure: Integer array id[] of length N<br>Interpretation: <em>p</em> and <em>q</em> are connected iff they have the same id.</p><p><img src="https://i.loli.net/2020/09/25/4fotqNvk6Klr8R9.png" alt="1" style="zoom:50%;">     <img src="https://i.loli.net/2020/09/25/HDLj7Pg83npwJVG.png" alt="2" style="zoom: 33%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFind</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QuickFind</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    id  = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">      id[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id[p] == id[q];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//change all entries whose id equals id[p] to id[q].</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> pid = id[p];</span><br><span class="line">      <span class="keyword">int</span> qid = id[q];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;id.length; i++)</span><br><span class="line">          <span class="keyword">if</span> (id[i] == pid) id[i] = qid;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.2--quik-union-(lazy-approach)">Part.2  Quik-Union (lazy approach)<a title="#part.2--quik-union-(lazy-approach)" href="#part.2--quik-union-(lazy-approach)"></a></h2><p>Data structure: Integer array id[] of length N<br>Interpretation: id[i] is the parent of i.</p><p><img src="https://i.loli.net/2020/09/25/CxwA365cELkj9pN.png" alt="3" style="zoom:50%;">        <img src="https://i.loli.net/2020/09/25/zYEd4WNAnvfsIyc.png" alt="4" style="zoom:33%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickUnion</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        id  = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;N; i++) id[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(p!=id[p]) p = id[p];</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root(p) == root(q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set the id of p&#x27;s root to the id of q&#x27;s root.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pr = root(p);</span><br><span class="line">        <span class="keyword">int</span> qr = root(q);</span><br><span class="line">        id[pr] = qr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="part.3-improvement:-weighed-quick-union">Part.3 Improvement: Weighed quick union<a title="#part.3-improvement:-weighed-quick-union" href="#part.3-improvement:-weighed-quick-union"></a></h2><p>In order to avoid tall trees, we can keep track of the <em>size</em> of each tree and balance by linking root of smaller tree to root of larger tree.</p><p>Data structure: Integer array id[] of length N and extra helper array size[].</p><p><img src="https://i.loli.net/2020/09/25/n2XLPSoFVrMQwq7.png" alt="6" style="zoom:50%;">          <img src="https://i.loli.net/2020/09/25/t8GTg5mU2w6oIYA.png" alt="5" style="zoom: 25%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Only need to change the union method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pr = root(p);</span><br><span class="line">        <span class="keyword">int</span> qr = root(q);</span><br><span class="line">        <span class="keyword">if</span> (pr == qr) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (size[pr]&lt;size[qr]) &#123;</span><br><span class="line">            id[pr] = qr;</span><br><span class="line">            size[qr] += size[pr];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            id[qr] = pr;</span><br><span class="line">            size[pr] += size[qr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We can also link the root based on the rank(or height). But tracking the size is better.</p><img src="https://i.loli.net/2020/09/25/DgFo2cv6utdXqMO.jpg" alt="12" style="zoom: 25%;"><h2 id="part.4-improvement:-path-compression">Part.4 Improvement: path compression<a title="#part.4-improvement:-path-compression" href="#part.4-improvement:-path-compression"></a></h2><p>In order to reduce the height of the trees, we can update the parent of the node to the root we found.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Only need to change the root method.</span></span><br><span class="line"><span class="comment">//add second loop to root() to set the id[] of each examined node to the root.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = p;</span><br><span class="line">    <span class="keyword">while</span>(r!=id[r]) r = id[r];</span><br><span class="line">    <span class="keyword">while</span>(p!= id[p])&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = id[p];</span><br><span class="line">        id[p] = r;</span><br><span class="line">        p = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make every other node in path point to its grandparent</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p!=id[p])&#123;</span><br><span class="line">        id[p] = id[id[p]];</span><br><span class="line">        p = id[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="analysis-of-running-time:">Analysis of running time:<a title="#analysis-of-running-time:" href="#analysis-of-running-time:"></a></h4><p>(lg* : times you take logN to get one)</p><img src="https://i.loli.net/2020/09/25/L6xFqZDORv8lkrP.png" alt="122" style="zoom:50%;"><h4 id="union-find-application">Union Find Application<a title="#union-find-application" href="#union-find-application"></a></h4><p>· Percolation.<br>· Games (Go, Hex).<br>· Dynamic connectivity.<br>· Least common ancestor.<br>· Equivalence of finite state automata.<br>· Hinley-Milner polymorphic type inference.<br>· Kruskal’s minimum spanning tree algorithm.<br>· Compiling equivalence statements in Fortran.<br>· Morphological attribute openings and closings.<br>· Matlab’s bwlabel() function in image processing.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;union-find&quot;&gt;Union-Find&lt;a title=&quot;#union-find&quot; href=&quot;#union-find&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;a title=&quot;#overview&quot; href=&quot;#over
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Union Find" scheme="https://oreodu.github.io/tags/Union-Find/"/>
    
  </entry>
  
  <entry>
    <title>Tree</title>
    <link href="https://oreodu.github.io/2020/20201005-Tree/"/>
    <id>https://oreodu.github.io/2020/20201005-Tree/</id>
    <published>2020-10-05T00:50:00.000Z</published>
    <updated>2020-12-24T07:30:48.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tree">Tree<a title="#tree" href="#tree"></a></h1><h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3><p>(概略图)</p><p><strong>· materials:</strong><br>· Wikipedia</p><h2 id="part.1-basis">Part.1 Basis<a title="#part.1-basis" href="#part.1-basis"></a></h2><p>Recursive Description: A tree has a root and a list of branchesEach branch is a treeA tree with zero branches is called a leaf.</p><p>Relative Description: Each location in a tree is called a nodeEach node has a label valueOne node can be the parent/child of another.</p><p><img src="https://i.loli.net/2020/09/13/fDJtsRH6xkdKNCG.png" alt="11" class="φcx"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use the recursive description</span></span><br><span class="line"><span class="comment"># We can also use the class to define the tree and its related attributes and methods.</span></span><br><span class="line"><span class="comment"># Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch)</span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line"><span class="comment"># Selectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br><span class="line"></span><br><span class="line">print(tree(<span class="number">3</span>, [tree(<span class="number">1</span>),tree(<span class="number">2</span>, [tree(<span class="number">1</span>),tree(<span class="number">1</span>)])])) <span class="comment"># [3, [1], [2, [1], [1]]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tree processing</span></span><br><span class="line"><span class="comment"># conut the nodes in a Tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_nodes</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree): <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    lst = [count_nodes(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(lst,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># count the leaves</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree): <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="comment"># leaves = [count_leaves(b) for b in branches(tree)] #[[1],[[1],[1]]]</span></span><br><span class="line">    leaves = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree):</span><br><span class="line">        leaves += count_leaves(tree) <span class="comment"># [1,1,1]</span></span><br><span class="line">    <span class="keyword">return</span> leaves</span><br><span class="line"></span><br><span class="line"><span class="comment"># print the tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">tree,indent = <span class="number">0</span></span>):</span></span><br><span class="line">    print(<span class="string">&#x27; &#x27;</span>*indent,label(tree))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree):</span><br><span class="line">            print_tree(b,indent+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a tree from an exsisted tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree): <span class="keyword">return</span> tree(label(tree)**<span class="number">2</span>)</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> brannches(tree):</span><br><span class="line">        lst += [suqare_tree(b)]</span><br><span class="line">    <span class="keyword">return</span> tree(label(tree)**<span class="number">2</span>,lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prune the tree </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prune</span>(<span class="params">t,x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> label(t) == x: <span class="keyword">return</span> null</span><br><span class="line">    branches(t) = [b <span class="keyword">for</span> b <span class="keyword">in</span> branches(t) <span class="keyword">if</span> label(b) != x ]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branchces():</span><br><span class="line">        prune( b,x)</span><br></pre></td></tr></table></figure><h2 id="part.2-binary-tree">Part.2 Binary tree<a title="#part.2-binary-tree" href="#part.2-binary-tree"></a></h2><p>Binary tree is a tree in which each node has at most two children and it is empty or node with links to left and right binary trees.</p><h3 id="1.-definitions">1. Definitions<a title="#1.-definitions" href="#1.-definitions"></a></h3><p>Array representation.</p><p>・Indices start at 1.</p><p>・Take nodes in level order.</p><p>・No explicit links needed!</p><h3 id="2.-properties">2. properties<a title="#2.-properties" href="#2.-properties"></a></h3><h3 id="3.-operations">3. Operations<a title="#3.-operations" href="#3.-operations"></a></h3><h4 id="insertion">Insertion<a title="#insertion" href="#insertion"></a></h4><h4 id="deletion">Deletion<a title="#deletion" href="#deletion"></a></h4><h4 id="traversal">Traversal<a title="#traversal" href="#traversal"></a></h4><h3 id="4.-types">4. Types<a title="#4.-types" href="#4.-types"></a></h3><h4 id="full-binary-tree">Full binary tree<a title="#full-binary-tree" href="#full-binary-tree"></a></h4><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glherxqlk1j30sg0l90tn.jpg" alt="1024px-Full_binary.svg" style="zoom:25%;"><h4 id="complete-binary-tree">Complete binary tree<a title="#complete-binary-tree" href="#complete-binary-tree"></a></h4><p>Perfectly balanced, except for bottom level.</p><p>Property. Height of complete tree with N nodes is <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.706ex" height="3.343ex" style="vertical-align: -1.171ex;" viewbox="0 -934.9 2887.4 1439.2" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title"><title id="MathJax-SVG-1-Title">⎣lg N⎦</title><defs aria-hidden="true"><path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/><path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"><text font-family="monospace" stroke="none" transform="scale(71.759) matrix(1 0 0 -1 0 0)">⎣</text> <use xlink:href="#E1-MJMATHI-6C" x="609" y="0"/> <use xlink:href="#E1-MJMATHI-67" x="908" y="0"/> <use xlink:href="#E1-MJMATHI-4E" x="1388" y="0"/><g transform="translate(2277,0)"><text font-family="monospace" stroke="none" transform="scale(71.759) matrix(1 0 0 -1 0 0)">⎦</text></g></g></svg>.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glheq6q6epj31hc0rvjt0.jpg" alt="1920px-Complete_binary2.svg" style="zoom:15%;"><h4 id="balanced-binary-tree">Balanced binary tree<a title="#balanced-binary-tree" href="#balanced-binary-tree"></a></h4><h3 id="5.-applications">5. Applications<a title="#5.-applications" href="#5.-applications"></a></h3><h4 id="sort-and-search">Sort and Search<a title="#sort-and-search" href="#sort-and-search"></a></h4><h5 id="binary-heap">Binary heap<a title="#binary-heap" href="#binary-heap"></a></h5><ol><li>Definition</li></ol><p>Binary heap is defined as a binary tree with two additional constrains.</p><p><strong>·</strong> Shape property: it must be a complete binary tree, represented in level order in an array (not using the first entry).</p><p><strong>·</strong> Heap property: (partially ordered) the key stored in each node is either greater than or equal to or less than or equal to the keys in the node’s children, according to some total order.</p><ol start="2"><li>Operations and implementations</li></ol><p>Binary heap is usually represented by the array which is the same with the binary tree implementation above.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhm2c13loj30n60maacz.jpg" alt="Screen Shot 2020-12-09 at 14.57.27" style="zoom:33%;"><p>Both insert and remove operations are adding or removing from the end of the heap. Then in order to restore the heap property, we traverse up or down the heap.</p><p><strong>Insert</strong></p><p>To add an element to a heap:</p><ol><li>Add the element to the bottom level of the heap at the leftmost open space.</li><li>Compare the added element with its parent; if they are in the correct order, stop.</li><li>If not, do the <em>Bottom-up reheapify (swim)</em> operation, swap the element with its parent and return to the previous step.()</li></ol><p><strong>Delete</strong></p><p>To delete the root(maximum in a max-heap or minimum in a min-heap)  or an arbitrary element from the heap:</p><ol><li>Replace the root of the heap with the last element on the last level.</li><li>Compare the new root with its children; if they are in the correct order, stop.</li><li>If not, do the <em>Top-down heapify (sink)</em> operation, swap the element with one of its children and return to the previous step. (Swap with its smaller child in a min-heap and its larger child in a max-heap.)</li></ol><p><strong>Search</strong></p><p>Finding an arbitrary element takes O(n) time.</p><p><strong>Building a heap</strong></p><p>Building a heap from an array of n input elements can be done by starting with an empty heap, then successively inserting each element.</p><p>Or we can treat the array as a binary tree of arbitrary order and start from the second lowest level and sift the root of each subtree downward until the heap property is restored.</p><p><strong>Decrease key</strong></p><p><strong>·</strong> Find the index of the element we want to modify<br><strong>·</strong> Decrease the value of the node<br><strong>·</strong> Sink down (assuming a max heap) to restore the heap property</p><p>**Increase key **</p><p><strong>·</strong> Find the index of the element we want to modify<br><strong>·</strong> Increase the value of the node<br><strong>·</strong> Swim up (assuming a max heap) to restore the heap property</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryMaxHeap</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key[] heap;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFACTOR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;Key&gt; comparator;  <span class="comment">// optional comparator</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>, comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        heap = (Key[]) <span class="keyword">new</span> Comparable[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(<span class="keyword">int</span> capacity, Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">        heap = (Key[]) <span class="keyword">new</span> Object[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(Key[] a)</span> </span>&#123;</span><br><span class="line">        N = a.length;</span><br><span class="line">        heap = (Key[]) <span class="keyword">new</span> Comparable[N + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(a,<span class="number">0</span>, heap, <span class="number">1</span>, N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            sink(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;The heap is underflow!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> heap[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* pq maintains the smallest N items</span></span><br><span class="line"><span class="comment">        if (N == pq.length) &#123;</span></span><br><span class="line"><span class="comment">            if (x.compareTo(max()) &lt; 0) delete(1);</span></span><br><span class="line"><span class="comment">            else return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The key can&#x27;t be null!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (N == heap.length - <span class="number">1</span>) resize(REFACTOR * heap.length);</span><br><span class="line">        heap[++N] = x;</span><br><span class="line">        swim(N);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delete(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Priority queue underflow&quot;</span>);</span><br><span class="line">        Key max = heap[i];</span><br><span class="line">        exch(i, N--);</span><br><span class="line">        sink(i);</span><br><span class="line">        heap[N + <span class="number">1</span>] = <span class="keyword">null</span>;  <span class="comment">// prevent loitering</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> capacity &gt; N;</span><br><span class="line">        Key[] newArray = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        System.arraycopy(heap,<span class="number">0</span>, newArray, <span class="number">0</span>, N + <span class="number">1</span>);</span><br><span class="line">        heap = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions to restore the heap invariant.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k)) &#123;</span><br><span class="line">            exch(k, k/<span class="number">2</span>);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions for compares and swaps.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Comparable&lt;Key&gt;) heap[i]).compareTo(heap[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> comparator.compare(heap[i], heap[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Key tmp = heap[i];</span><br><span class="line">        heap[i] = heap[j];</span><br><span class="line">        heap[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is heap[1..n] a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heap[i] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N+<span class="number">1</span>; i &lt; heap.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heap[i] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heap[<span class="number">0</span>] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxHeapOrdered(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is subtree of heap[1..n] rooted at k a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxHeapOrdered</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; N) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span>*k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left  &lt;= N &amp;&amp; less(k, left))  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= N &amp;&amp; less(k, right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxHeapOrdered(left) &amp;&amp; isMaxHeapOrdered(right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Iterator.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Key&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeapIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> BinaryMaxHeap&lt;Key&gt; copy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeapIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size());</span><br><span class="line">            <span class="keyword">else</span> copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size(), comparator);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">                copy.insert(heap[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !copy.isEmpty(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Key <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> copy.delMax();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        BinaryMaxHeap&lt;Integer&gt; bh = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(a);</span><br><span class="line">        System.out.println(bh.max());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Applications</li></ol><p>See more about <a href="https://oreodu.github.io/2020/20201202-Priority-Queues" target="_blank">Priority queue</a>.<br>See more about <a href="https://oreodu.github.io/2020/20200102-Sorting" target="_blank">Heapsort</a></p><h5 id="binary-search-tree">Binary search tree<a title="#binary-search-tree" href="#binary-search-tree"></a></h5><ol><li>Definition</li></ol><p>A binary search tree (BST) is a binary tree where each node has a <code>Comparable</code> key (and an associated value) and satisfies the restriction that the key in any node is larger than the keys in all nodes in that node’s left subtree and smaller than the keys in all nodes in that node’s right subtree.</p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glxlmt4qi7j30h00aq77s.jpg" alt="Screen Shot 2020-12-23 at 10.51.28" style="zoom:50%;"><ol start="2"><li>Operations and implementations</li></ol><p>The running times of algorithms on binary search trees depend on the shapes of the trees, which, in turn, depends on the order in which keys are inserted.</p><p>Search, insertion, finding the minimum, finding the maximum, floor, ceiling, rank, select, delete the minimum, delete the maximum, delete, and range count operations all take time proportional to the height of the tree, in the worst case.</p><p><strong>Floor and ceiling</strong>:</p><p>If a given key key is less than the key at the root of a BST, then the floor of key (the largest key in the BST less than or equal to key) <em>must</em> be in the left subtree. If key is greater than the key at the root, then the floor of key <em>could</em> be in the right subtree, but only if there is a key smaller than or equal to key in the right subtree; if not (or if key is equal to the key at the root) then the key at the root is the floor of key. Finding the ceiling is similar, interchanging right and left.</p><p><strong>Selection</strong>:</p><p>Suppose that we seek the key of rank <em>k</em> (the key such that precisely <em>k</em> other keys in the BST are smaller). If the number of keys <em>t</em> in the left subtree is larger than <em>k</em>, we look (recursively) for the key of rank <code>k</code> in the left subtree; if <em>t</em> is equal to <em>k</em>, we return the key at the root; and if <em>t</em> is smaller than <em>k</em>, we look (recursively) for the key of rank <em>k - t - 1</em> in the right subtree.</p><p><strong>Delete</strong>:</p><p>Save a link to the node to be deleted in <code>t</code>. Set <code>x</code> to point to its successor <code>min(t.right)</code>.  Set the right link of x (which is supposed to point to the BST containing all the keys larger than <code>x.key</code>) to <code>deleteMin(t.right)</code>, the link to the BST containing all the keys that are larger than <code>x.key</code> after the deletion. Set the left link of <code>x</code> (which was null) to <code>t.left</code> (all the keys that are less than both the deleted key and its successor).</p><p><strong>Range search</strong>:</p><p>Based on <em>inorder</em> traversal of the BST, we add each key that is in the range to a <code>Queue</code>, and to skip the recursive calls for subtrees that cannot contain keys in the range.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DataStructure;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Key key;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> Node left, right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">// number of nodes in subtree</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls get() with a null key&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> get(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> get(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls to put() with a null key&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = put(root, key, val);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = put(x.left, key, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = put(x.right, key, val);</span><br><span class="line">        <span class="keyword">else</span>  x.val = val;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST unberflow&quot;</span>);</span><br><span class="line">        root = deleteMin(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">        x.left = deleteMin(x.left);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST underflow&quot;</span>);</span><br><span class="line">        root = deleteMax(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMax</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">        x.right = deleteMax(x.right);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls delete() with a null key&quot;</span>);</span><br><span class="line">        root = delete(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = delete(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = delete(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">            <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">            Node t = x;</span><br><span class="line">            x = min(t.right);</span><br><span class="line">            x.right = deleteMin(t.right);</span><br><span class="line">            x.left = t.left;</span><br><span class="line">        &#125;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.right) + size(x.left);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls min() with empty BST&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> min(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">min</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls max() with empty BTS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> max(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">max</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to floor is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to floor with empty BST&quot;</span>);</span><br><span class="line">        Node x = floor(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node x,Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = floor(x.right, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Key x = floor2(root, key, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Node x, Key key, Key best)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> best;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.left, key, best);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.right, key, x.key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">ceiling</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to ceiling() with empty BTS&quot;</span>);</span><br><span class="line">        Node x = ceiling(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too large&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> ceiling(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = ceiling(x.left, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rank &lt; <span class="number">0</span> || rank &gt;= size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to select() is invaild: &quot;</span> + rank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> select(root, rank);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Key <span class="title">select</span><span class="params">(Node x, <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> leftsize = size(x.left);</span><br><span class="line">        <span class="keyword">if</span> (leftsize &gt; rank) <span class="keyword">return</span> select(x.left, rank);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (leftsize &lt; rank) <span class="keyword">return</span> select(x.right, rank - leftsize - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to rank() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> rank(key, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key, Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> rank(key, x.left);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> + size(x.left) + rank(key, x.right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> size(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Key&gt;();</span><br><span class="line">        <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to keys() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to keys() is null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        keys(root, queue, lo, hi);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> cmplo = lo.compareTo(x.key);</span><br><span class="line">        <span class="keyword">int</span> cmphi = hi.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt; <span class="number">0</span>) keys(x.left, queue, lo, hi);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt;= <span class="number">0</span> &amp;&amp; cmphi &gt;= <span class="number">0</span>) queue.add(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmphi &gt; <span class="number">0</span>) keys(x.right, queue, lo, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) <span class="keyword">return</span> rank(hi) - rank(lo) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> rank(hi) - rank(lo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(height(x.left), height(x.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">levelorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; keys = <span class="keyword">new</span> LinkedList&lt;Key&gt;();</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            Node x = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            keys.offer(x.key);</span><br><span class="line">            queue.offer(x.left);</span><br><span class="line">            queue.offer(x.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isBST()) System.out.println(<span class="string">&quot;Not in symmetric order!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isSizeConsistent()) System.out.println(<span class="string">&quot;Subtree counts not consistent!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isRankConsistent()) System.out.println(<span class="string">&quot;Ranks not consistent&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> isBST() &amp;&amp; isSizeConsistent() &amp;&amp; isRankConsistent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isBST(root, <span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">(Node x, Key min, Key max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (min != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(min) &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(max) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBST(x.left, min, x.key) &amp;&amp; isBST(x.right, x.key, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isSizeConsistent(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (x.size != size(x.left) + size(x.right) + <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSizeConsistent(x.left) &amp;&amp; isSizeConsistent(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRankConsistent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (i != rank(select(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Key key : keys())</span><br><span class="line">            <span class="keyword">if</span> (key.compareTo(select(rank(key))) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BST&lt;String, Integer&gt; st = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;J&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        st.put(<span class="string">&quot;A&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        st.put(<span class="string">&quot;S&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;K&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        st.put(<span class="string">&quot;L&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.put(<span class="string">&quot;Q&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        st.put(<span class="string">&quot;M&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The height of the tree is :&quot;</span> + st.height());</span><br><span class="line">        System.out.println(<span class="string">&quot;The Ceiling of the key C is :&quot;</span> + st.ceiling(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The floor of the key N is :&quot;</span> + st.floor(<span class="string">&quot;N&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The rank of the key J is :&quot;</span> + st.rank(<span class="string">&quot;J&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Select :&quot;</span> + st.select(<span class="number">4</span>));</span><br><span class="line">        st.deleteMax();</span><br><span class="line">        st.deleteMin();</span><br><span class="line">        <span class="keyword">for</span> (String s: st.keys()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s: st.levelorder()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>Applications</li></ol><p><a href="https://oreodu.github.io/2020/20201202-Associative-arrays" target="_blank">Associative arrays</a>.</p><h5 id="red-black-tree">Red-Black tree<a title="#red-black-tree" href="#red-black-tree"></a></h5><h5 id="b-tree">B-tree<a title="#b-tree" href="#b-tree"></a></h5><h4 id="encoding">Encoding<a title="#encoding" href="#encoding"></a></h4><p>Huffman coding and cladograms</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tree&quot;&gt;Tree&lt;a title=&quot;#tree&quot; href=&quot;#tree&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;a title=&quot;#overview&quot; href=&quot;#overview&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;(概略图)
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Binary tree" scheme="https://oreodu.github.io/tags/Binary-tree/"/>
    
      <category term="Binary heap" scheme="https://oreodu.github.io/tags/Binary-heap/"/>
    
      <category term="Binary search tree" scheme="https://oreodu.github.io/tags/Binary-search-tree/"/>
    
      <category term="Red-Black tree" scheme="https://oreodu.github.io/tags/Red-Black-tree/"/>
    
      <category term="B-tree" scheme="https://oreodu.github.io/tags/B-tree/"/>
    
  </entry>
  
  <entry>
    <title>Hash Table</title>
    <link href="https://oreodu.github.io/2020/20201005-Hash-Table/"/>
    <id>https://oreodu.github.io/2020/20201005-Hash-Table/</id>
    <published>2020-10-05T00:45:00.000Z</published>
    <updated>2020-10-05T00:52:04.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3><p>(概略图)</p><p><strong>· materials:</strong><br>· Wikipedia</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;overview&quot;&gt;Overview&lt;a title=&quot;#overview&quot; href=&quot;#overview&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;(概略图)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;· materials:&lt;/strong&gt;&lt;br&gt;
· Wikipedia&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://oreodu.github.io/categories/Data-Structure/"/>
    
    
      <category term="Hash Table" scheme="https://oreodu.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Other Algorithms</title>
    <link href="https://oreodu.github.io/2020/20200924-Other-Algorithms/"/>
    <id>https://oreodu.github.io/2020/20200924-Other-Algorithms/</id>
    <published>2020-09-24T07:53:25.000Z</published>
    <updated>2020-10-03T18:17:00.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="other-algorithms">Other Algorithms<a title="#other-algorithms" href="#other-algorithms"></a></h2><h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3><p>(概略图)</p><p><strong>· materials:</strong><br>· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>· <a href="https://sp19.datastructur.es/" target="_blank"><u>CS61B Spring 2019 at UCB</u></a><br>· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>· Wikipedia</p><h3 id><a title="#" href="#"></a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;other-algorithms&quot;&gt;Other Algorithms&lt;a title=&quot;#other-algorithms&quot; href=&quot;#other-algorithms&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;a title
      
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://oreodu.github.io/categories/Algorithms/"/>
    
    
      <category term="Other Algorithms" scheme="https://oreodu.github.io/tags/Other-Algorithms/"/>
    
  </entry>
  
</feed>
