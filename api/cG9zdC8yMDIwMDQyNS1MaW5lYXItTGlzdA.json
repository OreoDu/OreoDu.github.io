{"title":"Linear List","date":"2020-04-25T07:45:00.000Z","slug":"20200425-Linear-List","comments":true,"tags":["Array","Linked list","Queue","Stack","Two pointers"],"categories":["Data Structure"],"updated":"2020-10-14T02:41:21.074Z","content":"<h2 id=\"Linear-List\">Linear List<a href=\"post/20200425-Linear-List#Linear-List\"></a></h2><h3 id=\"Overview\">Overview<a href=\"post/20200425-Linear-List#Overview\"></a></h3><p>(概略图)</p>\n<h3 id=\"materials\">materials:<a href=\"post/20200425-Linear-List#materials\"></a></h3><p>· Wikipedia</p>\n<p>· <a href=\"https://sp19.datastructur.es/\" target=\"_blank\" rel=\"noopener\">CS61B Spring 2019 at UCB</a>   </p>\n<p>· <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\" rel=\"noopener\"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a></p>\n<p>A list or sequence is an abstract data type that represents a countable number of ordered values, where the same value may occur more than once. Lists are typically implemented either as linked lists (either singly or doubly linked) or as arrays, usually variable length or dynamic arrays.</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">Linked list</th>\n<th align=\"center\">Array</th>\n<th align=\"center\">Dynamic array</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Indexing</td>\n<td align=\"center\">Θ(<em>n</em>)</td>\n<td align=\"center\">Θ(1)</td>\n<td align=\"center\">Θ(1)</td>\n</tr>\n<tr>\n<td align=\"center\">Insert/delete at beginning</td>\n<td align=\"center\">Θ(1)</td>\n<td align=\"center\">N/A</td>\n<td align=\"center\">Θ(<em>n</em>)</td>\n</tr>\n<tr>\n<td align=\"center\">Insert/delete at end</td>\n<td align=\"center\">Θ(1) (known); Θ(<em>n</em>) (unknown)</td>\n<td align=\"center\">N/A</td>\n<td align=\"center\">Θ(1) <a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\" rel=\"noopener\">amortized</a></td>\n</tr>\n<tr>\n<td align=\"center\">Insert/delete in middle</td>\n<td align=\"center\">search time + Θ(1)</td>\n<td align=\"center\">N/A</td>\n<td align=\"center\">Θ(<em>n</em>)</td>\n</tr>\n<tr>\n<td align=\"center\">Wasted space (average)</td>\n<td align=\"center\">Θ(<em>n</em>)</td>\n<td align=\"center\">0</td>\n<td align=\"center\">Θ(<em>n</em>)</td>\n</tr>\n</tbody></table></div></div>\n<h2 id=\"Part-1-Array\">Part.1 Array<a href=\"post/20200425-Linear-List#Part-1-Array\"></a></h2><p>Array consists of a linear collection of values or variables store in contiguous space that can be selected by one or more indices. Arrays are used to implement other data structures, such as lists, heaps, hash tables, deques, queues, stacks, strings, and VLists. </p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/10/05/eTAkmIBp8izjosD.gif\" alt=\"objects-tenElementArray\" data-zoomable></p></div>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Arrays in Java. Declaration, instantiation, assignment</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">char</span>[] b = &#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'f'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The array data type in java is static array. Static arrays have a size that is fixed when they are created and consequently do not allow elements to be inserted or removed. However, by allocating a new array and copying the contents of the old array to it, it is possible to effectively implement a <em>dynamic</em> version of an array.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Array in Python is list data type. List is mutable.</span></span><br><span class=\"line\">list0 = list()</span><br><span class=\"line\">list1 = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">100</span>]  </span><br><span class=\"line\">list2 = [<span class=\"string\">'Hello'</span>]*<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Efficiency\">Efficiency<a href=\"post/20200425-Linear-List#Efficiency\"></a></h4><p>Random access is available. However, modification(add or remove elements) with reallocation or reorganization of the entire structure have poor space and time complexity because the data items need not be stored contiguously in memory or on disk, while restructuring an array at run-time is a expensive operation.</p>\n<p>Arrays take linear (O(n)) space in the number of elements n that they hold. Array-based implementations of other data structures are frequently simple and space-efficient, requiring little space overhead.</p>\n<p>In an array with element size k and on a machine with a cache line size of B bytes, iterating through an array of n elements requires the minimum of ceiling(nk/B) cache misses, because its elements occupy contiguous memory locations. Arrays have better cache locality compared to linked lists.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AList</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REFACTOR = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        items = (T[]) <span class=\"keyword\">new</span> Object[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        T[] newArray = (T[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        System.arraycopy(items, <span class=\"number\">0</span>, newArray, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">        items = newArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> size;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(T x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == items.length) resize(size * REFACTOR);</span><br><span class=\"line\">        items[size++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The list is empty.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> r = (<span class=\"keyword\">double</span>) size / items.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0.25</span>) resize(items.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">            T returnValue = items[size - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">// avoid loitering</span></span><br><span class=\"line\">            items[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printAList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) System.out.println(<span class=\"string\">\"The array is empty.\"</span>);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;size; i++) &#123;</span><br><span class=\"line\">            System.out.print(items[i] + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Special-Arrays\">Special Arrays<a href=\"post/20200425-Linear-List#Special-Arrays\"></a></h4><p><a href=\"https://en.wikipedia.org/wiki/Dynamic_array\" target=\"_blank\" rel=\"noopener\">Dynamic arrays</a> or growable arrays are similar to arrays but add the ability to insert and delete elements; adding and deleting at the end is particularly efficient. However, they reserve linear (Θ(<em>n</em>)) additional storage, whereas arrays do not reserve additional storage.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Associative_array\" target=\"_blank\" rel=\"noopener\">Associative arrays</a> provide a mechanism for array-like functionality without huge storage overheads when the index values are sparse. Specialized associative arrays with integer keys include <a href=\"https://en.wikipedia.org/wiki/Radix_tree\" target=\"_blank\" rel=\"noopener\">Patricia tries</a>, <a href=\"https://en.wikipedia.org/wiki/Judy_array\" target=\"_blank\" rel=\"noopener\">Judy arrays</a>, and <a href=\"https://en.wikipedia.org/wiki/Van_Emde_Boas_tree\" target=\"_blank\" rel=\"noopener\">van Emde Boas trees</a>.</p>\n<h2 id=\"Part-2-Linked-List\">Part.2 Linked List<a href=\"post/20200425-Linear-List#Part-2-Linked-List\"></a></h2><p>A linked list is a linear collection of nodes( data and reference) which together represent a sequence and whose order is not given by their physical placement in memory. Instead,  the reference of each node points to the next. They can be used to implement several other common abstract data types, including lists, stacks, queues, <a href=\"https://en.wikipedia.org/wiki/Associative_array\" target=\"_blank\" rel=\"noopener\">associative arrays</a>, and <a href=\"https://en.wikipedia.org/wiki/S-expression\" target=\"_blank\" rel=\"noopener\">S-expressions</a>.</p>\n<img src=\"https://i.loli.net/2020/10/05/xJ2w3mbatEvh7FV.png\" alt=\"122\" style=\"zoom: 25%;\">\n\n<h4 id=\"Efficiency-1\">Efficiency<a href=\"post/20200425-Linear-List#Efficiency-1\"></a></h4><p>This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration. A drawback of linked lists is that access time is linear (and difficult to pipeline). Faster access, such as random access, is not feasible and reverse traversing is difficult because linked lists are inherently sequential access. Also </p>\n<p>Linked list are dynamic, so the length of list can increase or decrease as necessary. Each node does not necessarily follow the previous one physically in the memory. But they use more memory than arrays because of the storage used by their pointers.</p>\n<p>Nodes are stored noncontiguously, greatly increasing the time periods required to access individual elements within the list, especially with a CPU cache.</p>\n<h3 id=\"Ⅰ-Singly-linked-list\">Ⅰ. Singly linked list<a href=\"post/20200425-Linear-List#Ⅰ-Singly-linked-list\"></a></h3><img src=\"https://i.loli.net/2020/10/07/VwNKaRGuY8pcjWv.png\" alt=\"sllist\" style=\"zoom: 50%;\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SLList</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T i, Node&lt;T&gt; n)</span> </span>&#123;</span><br><span class=\"line\">            item = i;</span><br><span class=\"line\">            next = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Invariant: Sentinel (be guaranteed to be true during code execution.)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; sentinel;</span><br><span class=\"line\">    <span class=\"comment\">// Cache: size (put aside data to speed up retrieval)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SLList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sentinel = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SLList</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; first = <span class=\"keyword\">new</span> Node&lt;&gt;(x,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        sentinel = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,first);</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> size; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; n = <span class=\"keyword\">new</span> Node&lt;&gt;(x,sentinel.next);</span><br><span class=\"line\">        sentinel.next = n;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sentinel.next == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sentinel.next.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The List is empty\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;T&gt; re = sentinel.next;</span><br><span class=\"line\">            sentinel.next = sentinel.next.next;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> re.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = sentinel;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p.next != <span class=\"keyword\">null</span>) p = p.next;</span><br><span class=\"line\">        p.next = <span class=\"keyword\">new</span> Node&lt;&gt;(x,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printSLList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = sentinel.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!= <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.print(p.item + <span class=\"string\">\"--&gt;\"</span>);</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"End of the List.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅱ-Doubly-Linked-List\">Ⅱ. Doubly Linked List<a href=\"post/20200425-Linear-List#Ⅱ-Doubly-Linked-List\"></a></h3><img src=\"https://i.loli.net/2020/10/07/qMoSrQEA4tf9Bku.png\" alt=\"ddlist\" style=\"zoom:50%;\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DLList</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node&lt;T&gt; next;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node&lt;T&gt; pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Node&lt;T&gt; pre, T item, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pre = pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; sentinel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DLList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sentinel = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DLList</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        sentinel = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;T&gt; first = <span class=\"keyword\">new</span> Node&lt;&gt;(sentinel,x,sentinel);</span><br><span class=\"line\">        sentinel.pre = first;</span><br><span class=\"line\">        sentinel.next = first;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; n = <span class=\"keyword\">new</span> Node&lt;&gt;(sentinel, x, sentinel.next);</span><br><span class=\"line\">        sentinel.next = n;</span><br><span class=\"line\">        n.next.pre = n;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sentinel.next.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The list is empty.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;T&gt; re  = sentinel.next;</span><br><span class=\"line\">            sentinel.next = sentinel.next.next;</span><br><span class=\"line\">            re.next.pre = sentinel;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> re.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sentinel.pre.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; n = <span class=\"keyword\">new</span> Node&lt;&gt;(sentinel.pre,x,sentinel);</span><br><span class=\"line\">        sentinel.pre.next = n;</span><br><span class=\"line\">        sentinel.pre = n;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The list is empty\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;T&gt; re = sentinel.pre;</span><br><span class=\"line\">            sentinel.pre = re.pre;</span><br><span class=\"line\">            re.pre.next = sentinel;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> re.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printDLList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; p = sentinel.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != sentinel) &#123;</span><br><span class=\"line\">            System.out.print(p.item + <span class=\"string\">\"-&gt;\"</span>);</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"The end of the list\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part-3-Stack\">Part.3 Stack<a href=\"post/20200425-Linear-List#Part-3-Stack\"></a></h2><p>A stack is an abstract data type that serves as a collection of elements, with two main principal operations:</p>\n<ul>\n<li>push, which adds an element to the collection, and</li>\n<li>pop, which removes the most recently added element that was not yet removed. <strong>LIFO</strong> (<strong>last in, first out</strong>)</li>\n</ul>\n<img src=\"https://i.loli.net/2020/10/07/9sd4mlFK8hnC3PM.png\" alt=\"pictorial-representation-of-stack\" style=\"zoom:50%;\">\n\n<p>​                                                                                  (from <a href=\"https://www.softwaretestinghelp.com/stack-in-cpp/\" target=\"_blank\" rel=\"noopener\">here</a>)</p>\n<h3 id=\"Ⅰ-SLListStack\">Ⅰ.  SLListStack<a href=\"post/20200425-Linear-List#Ⅰ-SLListStack\"></a></h3><p>Every operation takes constant time in the worst case but uses extra time and space to deal with the link.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SLListStack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node&lt;T&gt; next;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node&lt;T&gt; sentinel;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; sentinel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SLListStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sentinel = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; n = <span class=\"keyword\">new</span> Node&lt;&gt;(x,sentinel.next);</span><br><span class=\"line\">        sentinel.next = n;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"There is no element in the stack\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;T&gt; re = sentinel.next;</span><br><span class=\"line\">            sentinel.next = re.next;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> re.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅱ-AListStack\">Ⅱ. AListStack<a href=\"post/20200425-Linear-List#Ⅱ-AListStack\"></a></h3><p>Every operation takes constant amortized time but less wasted space.    `</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AListStack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REFACTOR = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AListStack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        items =(T[]) <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        T[] n =(T[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        System.arraycopy(items,<span class=\"number\">0</span>,n,<span class=\"number\">0</span>,size);</span><br><span class=\"line\">        items = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> size;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (items.length == size) resize(size*REFACTOR);</span><br><span class=\"line\">        items[size++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The stack is empty.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> r = (<span class=\"keyword\">double</span>) size / items.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0.25</span>) resize(items.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">            T returnValue = items[size - <span class=\"number\">1</span>];</span><br><span class=\"line\">            items[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅲ-Applications\">Ⅲ. Applications<a href=\"post/20200425-Linear-List#Ⅲ-Applications\"></a></h3><ul>\n<li>Parsing in a computer.</li>\n<li>Java virtual machine.</li>\n<li>Undo  in a word processor.</li>\n<li>Back button in a web browser.</li>\n<li>Implementing function calls in  a compiler.<ul>\n<li>Function call: push local environment and return address.</li>\n<li>Return: pop return address and local environment.</li>\n</ul>\n</li>\n<li>Arithmetic expression evaluation.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EvaluationStack</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Or we can use the java.util.Stack.</span></span><br><span class=\"line\">        AListStack&lt;Integer&gt; numQueue = <span class=\"keyword\">new</span> AListStack&lt;&gt;();</span><br><span class=\"line\">        AListStack&lt;Character&gt; opeQueue = <span class=\"keyword\">new</span> AListStack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c: args[<span class=\"number\">0</span>].toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"string\">'('</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Character.isDigit(c)) numQueue.push(Character.getNumericValue(c));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">'*'</span> || c == <span class=\"string\">'+'</span> || c == <span class=\"string\">'/'</span> || c == <span class=\"string\">'-'</span>) opeQueue.push(c);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ope = opeQueue.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num0 = numQueue.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num1 = numQueue.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ope == <span class=\"string\">'*'</span>) numQueue.push(num1 * num0);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ope == <span class=\"string\">'/'</span>) numQueue.push(num1 / num0);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ope == <span class=\"string\">'+'</span>) numQueue.push(num1 + num0);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ope == <span class=\"string\">'-'</span>) numQueue.push(num1 - num0);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"The result of the expression is: \"</span> + numQueue.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part-4-Queue\">Part.4 Queue<a href=\"post/20200425-Linear-List#Part-4-Queue\"></a></h2><p>A queue is an abstract data type that serves as a collection of elements, with two main principal operations:</p>\n<ul>\n<li>enqueue, which adds an element to the collection, and</li>\n<li>dequeue, which removes the least recently added element that was not yet removed. <strong>FIFO</strong> (<strong>first in, first out</strong>)</li>\n</ul>\n<img src=\"https://i.loli.net/2020/10/07/lcLWI7BeUgfFqRy.png\" alt=\"0_TRbfsq86lqDoqW6b\" style=\"zoom: 20%;\">\n\n<h3 id=\"Ⅰ-DLListQueue\">Ⅰ. DLListQueue<a href=\"post/20200425-Linear-List#Ⅰ-DLListQueue\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DLListQueue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node&lt;T&gt; next;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node&lt;T&gt; pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Node&lt;T&gt; pre, T item, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pre  = pre;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node&lt;T&gt; sentinel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DLListQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sentinel = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> size;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; n = <span class=\"keyword\">new</span> Node&lt;&gt;(sentinel, x, sentinel.next);</span><br><span class=\"line\">        sentinel.next = n;</span><br><span class=\"line\">        n.next.pre = n;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The queue is empty!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;T&gt; returnValue = sentinel.pre;</span><br><span class=\"line\">            returnValue.pre.next = sentinel;</span><br><span class=\"line\">            sentinel.pre = returnValue.pre;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> returnValue.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅱ-AListQueue\">Ⅱ. AListQueue<a href=\"post/20200425-Linear-List#Ⅱ-AListQueue\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AListQueue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REFACTOR = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AListQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        items = (T[]) <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">        head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        T[] n = (T[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = tail-head;</span><br><span class=\"line\">        System.arraycopy(items,<span class=\"number\">0</span>,n,<span class=\"number\">0</span>,size);</span><br><span class=\"line\">        items = n;</span><br><span class=\"line\">        head = <span class=\"number\">0</span>;</span><br><span class=\"line\">        tail = size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> tail - head;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> tail == head;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == items.length) resize((tail - head)*REFACTOR);</span><br><span class=\"line\">        items[tail++] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == head) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"The queue is empty.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> r = (<span class=\"keyword\">double</span>) (tail - head) / items.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0.25</span>) resize(items.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">            T returnValue = items[tail];</span><br><span class=\"line\">            items[tail++] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part-5-Java-collections-Library\">Part.5 Java collections Library<a href=\"post/20200425-Linear-List#Part-5-Java-collections-Library\"></a></h2><p><code>java.util.List</code> : is API for an sequence of items.</p>\n<p><code>java.util.ArrayList</code> : implements <code>java.util.List</code> and uses resizing array.</p>\n<p><code>java.util.LinkedList</code> : implements <code>java.util.List</code> and uses linked list.</p>\n<p><code>java.util.Stack</code> : extends <code>java.util.Vector</code> and implements <code>java.util.List</code>.</p>\n<p><code>java.util.Queue</code> : An interface.</p>\n<p>See more obout collections <a href>here</a>.</p>\n","prev":{"title":"Basis & Regression & Classification","slug":"20200501-Machine-Learning-Basis"},"next":{"title":"Searching and Sorting","slug":"20200102-Searching-and-Sorting"},"link":"https://oreodu.github.io/post/20200425-Linear-List/","toc":[{"title":"Linear List","id":"Linear-List","index":"1","children":[{"title":"Overview","id":"Overview","index":"1.1"},{"title":"materials:","id":"materials","index":"1.2"}]},{"title":"Part.1 Array","id":"Part-1-Array","index":"2"},{"title":"Part.2 Linked List","id":"Part-2-Linked-List","index":"3","children":[{"title":"Ⅰ. Singly linked list","id":"Ⅰ-Singly-linked-list","index":"3.1"},{"title":"Ⅱ. Doubly Linked List","id":"Ⅱ-Doubly-Linked-List","index":"3.2"}]},{"title":"Part.3 Stack","id":"Part-3-Stack","index":"4","children":[{"title":"Ⅰ.  SLListStack","id":"Ⅰ-SLListStack","index":"4.1"},{"title":"Ⅱ. AListStack","id":"Ⅱ-AListStack","index":"4.2"},{"title":"Ⅲ. Applications","id":"Ⅲ-Applications","index":"4.3"}]},{"title":"Part.4 Queue","id":"Part-4-Queue","index":"5","children":[{"title":"Ⅰ. DLListQueue","id":"Ⅰ-DLListQueue","index":"5.1"},{"title":"Ⅱ. AListQueue","id":"Ⅱ-AListQueue","index":"5.2"}]},{"title":"Part.5 Java collections Library","id":"Part-5-Java-collections-Library","index":"6"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/post/20200425-Linear-List/\" title=\"Linear List\">https://oreodu.github.io/post/20200425-Linear-List/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}