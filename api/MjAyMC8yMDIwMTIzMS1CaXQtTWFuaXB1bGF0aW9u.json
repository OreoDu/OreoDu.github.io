{"title":"Bit Manipulation","date":"2020-12-31T09:13:25.000Z","date_formatted":{"ll":"Dec 31, 2020","L":"12/31/2020","MM-DD":"12-31"},"link":"2020/20201231-Bit-Manipulation","comments":true,"tags":["Bit Manipulation"],"categories":["Algorithms"],"updated":"2021-01-02T01:28:06.514Z","content":"<h1 id=\"bit-manipulation\">Bit Manipulation<a title=\"#bit-manipulation\" href=\"#bit-manipulation\"></a></h1>\n<p>Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.</p>\n<h2 id=\"part.1-bitwise-operators\">Part.1 Bitwise Operators<a title=\"#part.1-bitwise-operators\" href=\"#part.1-bitwise-operators\"></a></h2>\n<p><strong>NOT ( ~ ):</strong> Bitwise NOT is a unary operator that flips the bits of the number.</p>\n<p><strong>AND ( &amp; ):</strong> Bitwise AND is a binary operator that operates on two equal-length bit patterns.<br>\nIf both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.</p>\n<p><strong>OR ( | ):</strong> Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND.<br>\nIf both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.</p>\n<p><strong>XOR ( ^ ):</strong> Bitwise XOR also takes two equal-length bit patterns.<br>\nIf both bits in the compared position of the bit patterns are the same, the bit in the resulting bit pattern is 0, otherwise 1.</p>\n<p><strong>Left Shift ( &lt;&lt; ):</strong> Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end.<br>\nLeft shift is equivalent to multiplying the bit pattern with <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.251ex\" height=\"2.676ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -1006.6 969.3 1152.1\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">2^k</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-32\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6B\" x=\"707\" y=\"583\"/>\n</g>\n</svg> ( if we are shifting k bits ).</p>\n<p><strong>Right Shift ( &gt;&gt; ):</strong> Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end.<br>\nRight shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).</p>\n<h2 id=\"part.2-algorithms-based-on-bitwise-operations\">Part.2 Algorithms based on bitwise operations<a title=\"#part.2-algorithms-based-on-bitwise-operations\" href=\"#part.2-algorithms-based-on-bitwise-operations\"></a></h2>\n<h3 id><a title=\"#\" href=\"#\"></a></h3>\n","prev":{"title":"Topological Sort","link":"2021/20210103-Topological-Sort"},"next":{"title":"Trie","link":"2020/20201219-Trie"},"plink":"https://oreodu.github.io/2020/20201231-Bit-Manipulation/","toc":[{"id":"bit-manipulation","title":"Bit Manipulation","index":"1","children":[{"id":"part.1-bitwise-operators","title":"Part.1 Bitwise Operators","index":"1.1"},{"id":"part.2-algorithms-based-on-bitwise-operations","title":"Part.2 Algorithms based on bitwise operations","index":"1.2"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201231-Bit-Manipulation/\" title=\"Bit Manipulation\">https://oreodu.github.io/2020/20201231-Bit-Manipulation/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}