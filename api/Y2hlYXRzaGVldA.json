{"title":"","date":"2021-08-02T09:34:23.278Z","date_formatted":{"ll":"Aug 2, 2021","L":"08/02/2021","MM-DD":"08-02"},"updated":"2021-01-20T12:12:56.480Z","content":"<h1 id=\"ascii-code\">ASCII Code<a title=\"#ascii-code\" href=\"#ascii-code\"></a></h1>\n<p><code>0 ~ 9</code>: 48 ~ 57<br>\n<code>A ~ Z</code>: 65 ~ 90<br>\n<code>a ~ z</code>: 97 ~ 122</p>\n<h1 id=\"method-in-java\">Method in java<a title=\"#method-in-java\" href=\"#method-in-java\"></a></h1>\n<h2 id=\"math\"><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html\">Math</a><a title=\"#math\" href=\"#math\"></a></h2>\n<p><code>MAth.E</code>, <code>Math.PI</code></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static int</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#abs(int)\" target=\"_blank\">abs</a></strong>(int a)</td>\n<td>Returns the absolute value of an <code>int</code> value.</td>\n</tr>\n<tr>\n<td>static int</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#max(int,int)\" target=\"_blank\">max</a></strong>(int a, int b)</td>\n<td>Returns the greater of two <code>int</code> values.</td>\n</tr>\n<tr>\n<td>static int</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#min(int,int)\" target=\"_blank\">min</a></strong>(int a, int b)</td>\n<td>Returns the smaller of two <code>int</code> values.</td>\n</tr>\n<tr>\n<td>static int</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#round(float)\" target=\"_blank\">round</a></strong>(float a)</td>\n<td>Returns the closest <code>int</code> to the argument, with ties rounding to positive infinity.</td>\n</tr>\n<tr>\n<td>static double</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#sqrt(double)\" target=\"_blank\">sqrt</a></strong>(double a)</td>\n<td>Returns the correctly rounded positive square root of a <code>double</code> value.</td>\n</tr>\n<tr>\n<td>static double</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#pow(double,double)\" target=\"_blank\">pow</a></strong>(double a, double b)</td>\n<td>Returns the value of the first argument raised to the power of the second argument.</td>\n</tr>\n<tr>\n<td>static double</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()\" target=\"_blank\">random</a></strong>()</td>\n<td>Returns a <code>double</code> value with a positive sign, greater than or equal to <code>0.0</code> and less than <code>1.0</code>.</td>\n</tr>\n<tr>\n<td>static double</td>\n<td><strong><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#log(double)\" target=\"_blank\">log</a></strong>(double a)</td>\n<td>Returns the natural logarithm (base <em>e</em>) of a <code>double</code> value.</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"java.util-package\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/package-summary.html\">Java.util Package</a><a title=\"#java.util-package\" href=\"#java.util-package\"></a></h2>\n<h3 id=\"random\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Random.html\">Random</a><a title=\"#random\" href=\"#random\"></a></h3>\n<h1 id=\"data-structure\">Data Structure<a title=\"#data-structure\" href=\"#data-structure\"></a></h1>\n<h2 id=\"date\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Date.html\">Date</a><a title=\"#date\" href=\"#date\"></a></h2>\n<h2 id=\"string\"><a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html\">String</a><a title=\"#string\" href=\"#string\"></a></h2>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>indexOf(char ch)</td>\n<td>Returns the index of the first occurrence of a character</td>\n</tr>\n<tr>\n<td>char</td>\n<td>charAt(int index)</td>\n<td>Returns the char value at the specified index</td>\n</tr>\n<tr>\n<td>int</td>\n<td>length()</td>\n<td>Returns the length of the string</td>\n</tr>\n<tr>\n<td>char[]</td>\n<td>toCharArray()</td>\n<td>Returns the character array of characters</td>\n</tr>\n<tr>\n<td>String</td>\n<td>trim()</td>\n<td>Return the string after eliminating the double spaces</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>equals(String str)</td>\n<td>Determine whether two strings are the same</td>\n</tr>\n<tr>\n<td>String[]</td>\n<td>split(String regex)</td>\n<td>Use regular expressions to split strings</td>\n</tr>\n<tr>\n<td>String</td>\n<td>substring(start, end)</td>\n<td>Get the substring including the start and excluding the end</td>\n</tr>\n<tr>\n<td>String</td>\n<td>concat(String str)</td>\n<td>Concatenates the specified string to the end of this string</td>\n</tr>\n<tr>\n<td>String</td>\n<td>replace(char oldChar, char newChar)</td>\n<td>Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar</td>\n</tr>\n<tr>\n<td>static String</td>\n<td>valueOf(T t)</td>\n<td>Returns the string representation of the T argument</td>\n</tr>\n<tr>\n<td>static String</td>\n<td>format(String format, Object… args)</td>\n<td>Returns a formatted string using the specified format string and arguments</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> data[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(data);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// convert String to other type</span></span><br><span class=\"line\">Byte.parseByte(String s);</span><br><span class=\"line\">Double.parseDouble(String s);</span><br><span class=\"line\">Float.parseFloat(String s);</span><br><span class=\"line\">Integer.parseInt(String s);</span><br><span class=\"line\">Long.parseLong(String s);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// convert other type to String</span></span><br><span class=\"line\">String.valueOf(<span class=\"keyword\">int</span> i);</span><br><span class=\"line\">String.valueOf(<span class=\"keyword\">char</span>[] data);</span><br><span class=\"line\">String.valueOf(Object obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"character\"><a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html\">Character</a><a title=\"#character\" href=\"#character\"></a></h2>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static int</td>\n<td>digit(char ch, int radix)</td>\n<td>Returns the numeric value of the character <code>ch</code> in the specified radix.</td>\n</tr>\n<tr>\n<td>static int</td>\n<td>getNumericValue(char ch)</td>\n<td>Returns the int value that the specified Unicode character represents.</td>\n</tr>\n<tr>\n<td>static boolean</td>\n<td>isAlphabetic(int codePoint)</td>\n<td>Determines if the specified character (Unicode code point) is an alphabet.</td>\n</tr>\n<tr>\n<td>static boolean</td>\n<td>isDigit(char ch)</td>\n<td>Determines if the specified character is a digit.</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"integer\"><a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html\">Integer</a><a title=\"#integer\" href=\"#integer\"></a></h2>\n<p><code>Integer.MAX_VALUE</code>,  <code>Integer.MIN_VALUE</code></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static String</td>\n<td>toString(int i)</td>\n<td>Returns a <code>String</code> object representing this <code>Integer</code>’s value.</td>\n</tr>\n<tr>\n<td>static Integer</td>\n<td>valueOf(String s)</td>\n<td>Returns an <code>Integer</code> object holding the value of the specified <code>String</code>.</td>\n</tr>\n<tr>\n<td>static int</td>\n<td>parseInt(String s)</td>\n<td>Parses the string argument as a signed decimal integer.</td>\n</tr>\n<tr>\n<td>static String</td>\n<td>toBinaryString(int i)</td>\n<td>Returns a string representation of the integer argument as an unsigned integer in base 2.</td>\n</tr>\n<tr>\n<td>short</td>\n<td>shortValue()</td>\n<td>Returns the value of this Integer as a short.</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"array\">Array<a title=\"#array\" href=\"#array\"></a></h2>\n<p><code>int[]</code>, <code>char[]</code>, <code>Object[]</code>, <code>boolean[]</code>, <code>List&lt;Integer&gt;[]</code></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>length</td>\n<td>Returns the length of the array</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>array[index]</td>\n<td>Returns the value at the specified index of the array</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"java.util.arrays\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html\">java.util.Arrays</a><a title=\"#java.util.arrays\" href=\"#java.util.arrays\"></a></h3>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static <T> List<T></T></T></td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-\" target=\"_blank\">asList</a></strong>(T… a)</td>\n<td>Returns a fixed-size list backed by the specified array.</td>\n</tr>\n<tr>\n<td>static int</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#binarySearch-int:A-int-\" target=\"_blank\">binarySearch</a></strong>(int[] a, int key), <strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#binarySearch-int:A-int-int-int-\" target=\"_blank\">binarySearch</a></strong>(int[] a, int fromIndex, int toIndex, int key)</td>\n<td>Searches the specified array of ints for the specified value using the binary search algorithm.</td>\n</tr>\n<tr>\n<td>static int[]</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-int:A-int-\" target=\"_blank\">copyOf</a></strong>(int[] original, int newLength)</td>\n<td>Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.</td>\n</tr>\n<tr>\n<td>static int[]</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOfRange-int:A-int-int-\" target=\"_blank\">copyOfRange</a></strong>(int[] original, int from, int to)</td>\n<td>Copies the specified range of the specified array into a new array.</td>\n</tr>\n<tr>\n<td>static boolean</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#deepEquals-java.lang.Object:A-java.lang.Object:A-\" target=\"_blank\">deepEquals</a></strong>(<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\">Object</a>[] a1, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\">Object</a>[] a2)</td>\n<td>Returns <code>true</code> if the two specified arrays are <em>deeply equal</em> to one another.</td>\n</tr>\n<tr>\n<td>static String</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-\" target=\"_blank\">deepToString</a></strong>(<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\">Object</a>[] a)</td>\n<td>the “deep contents” of the specified array.</td>\n</tr>\n<tr>\n<td>static String</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#toString-java.lang.Object:A-\" target=\"_blank\">toString</a></strong>(<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\">Object</a>[] a)</td>\n<td>Returns a string representation of the contents of the specified array.</td>\n</tr>\n<tr>\n<td>static void</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#fill-int:A-int-int-int-\" target=\"_blank\">fill</a></strong>(int[] a, int fromIndex, int toIndex, int val)</td>\n<td>Assigns the specified int value to each element of the specified range of the specified array of ints.</td>\n</tr>\n<tr>\n<td>static void</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-java.lang.Object:A-int-int-\" target=\"_blank\">sort</a></strong>(<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\">Object</a>[] a, int fromIndex, int toIndex)</td>\n<td>Sorts the specified range of the specified array of objects into ascending order, according to the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html\" target=\"_blank\">natural ordering</a> of its elements.</td>\n</tr>\n</tbody>\n</table></div></div><p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEgy1gmk6fd65jgj31qd0u0dlq.jpg\" alt=\"image-20210112003314146\" class=\"φcx\"></p>\n<h2 id=\"collections\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html\">Collections</a><a title=\"#collections\" href=\"#collections\"></a></h2>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>addAll(Collection)&lt;? extends E&gt; c)</td>\n<td>Adds all of the elements in the specified collection to this collection (optional operation).</td>\n</tr>\n<tr>\n<td>void</td>\n<td>clear()</td>\n<td>Removes all of the elements from this collection (optional operation).</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>containsAll(Collection&lt;?&gt; c)</td>\n<td>Returns true if this collection contains all of the elements in the specified collection.</td>\n</tr>\n<tr>\n<td>Object[]</td>\n<td>toArray()</td>\n<td>Returns an array containing all of the elements in this collection.</td>\n</tr>\n</tbody>\n</table></div></div><p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\" target=\"_blank\">List</a>,  <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html\" target=\"_blank\">LinkedList</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\" target=\"_blank\">ArrayList</a></p>\n<h2 id=\"vector\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html\">Vector</a><a title=\"#vector\" href=\"#vector\"></a></h2>\n<h2 id=\"stack\">Stack<a title=\"#stack\" href=\"#stack\"></a></h2>\n<p>Usually we use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html\" target=\"_blank\">Deque</a> as stack in java.</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html\" target=\"_blank\">ArrayDeque</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deque&lt;E&gt; queue &#x3D; new ArrayDeque&lt;E&gt;();</span><br></pre></td></tr></table></figure>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th><strong><code>Queue</code> Method</strong></th>\n<th><strong>Equivalent <code>Deque</code> Method</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#add-E-\" target=\"_blank\"><code>add(e)</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#addLast-E-\" target=\"_blank\"><code>addLast(e)</code></a></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#offer-E-\" target=\"_blank\"><code>offer(e)</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#offerLast-E-\" target=\"_blank\"><code>offerLast(e)</code></a></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#remove--\" target=\"_blank\"><code>remove()</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#removeFirst--\" target=\"_blank\"><code>removeFirst()</code></a></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#poll--\" target=\"_blank\"><code>poll()</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#pollFirst--\" target=\"_blank\"><code>pollFirst()</code></a></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#element--\" target=\"_blank\"><code>element()</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#getFirst--\" target=\"_blank\"><code>getFirst()</code></a></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html#peek--\" target=\"_blank\"><code>peek()</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#peek--\" target=\"_blank\"><code>peekFirst()</code></a></td>\n</tr>\n</tbody>\n</table></div></div><div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th><strong>Stack Method</strong></th>\n<th><strong>Equivalent <code>Deque</code> Method</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#push-E-\" target=\"_blank\"><code>push(e)</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#addFirst-E-\" target=\"_blank\"><code>addFirst(e)</code></a></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#pop--\" target=\"_blank\"><code>pop()</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#removeFirst--\" target=\"_blank\"><code>removeFirst()</code></a></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#peek--\" target=\"_blank\"><code>peek()</code></a></td>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html#peekFirst--\" target=\"_blank\"><code>peekFirst()</code></a></td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"queue\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html\">Queue</a><a title=\"#queue\" href=\"#queue\"></a></h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html\" target=\"_blank\">ArrayDeque</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html\" target=\"_blank\">LinkedList</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\" target=\"_blank\">PriorityQueue</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Queue&lt;T&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;T&gt;();</span><br></pre></td></tr></table></figure>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>add(E e)</td>\n<td>Add elements at the end of the queue</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>offer(E e)</td>\n<td>Add elements at the end of the queue</td>\n</tr>\n<tr>\n<td>E</td>\n<td>peek()</td>\n<td>View the first element in the queue</td>\n</tr>\n<tr>\n<td>E</td>\n<td>poll()</td>\n<td>Poll out the first element</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"set\">Set<a title=\"#set\" href=\"#set\"></a></h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html\" target=\"_blank\">AbstractSet</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html\" target=\"_blank\">HashSet</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html\" target=\"_blank\">LinkedHashSet</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html\" target=\"_blank\">TreeSet</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;T&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>add(E e)</td>\n<td>Adds the specified element to this set if it is not already present (optional operation).</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>contains(Object o)</td>\n<td>Returns true if this set contains the specified element.</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"map\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a><a title=\"#map\" href=\"#map\"></a></h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html\" target=\"_blank\">HashMap</a>,  <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html\" target=\"_blank\">Hashtable</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html\" target=\"_blank\">LinkedHashMap</a>,  <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html\" target=\"_blank\">TreeMap</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;K, V&gt; map = <span class=\"keyword\">new</span> HashMap&lt;K, V&gt;();</span><br></pre></td></tr></table></figure>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>V</td>\n<td>put(K key, V value)</td>\n<td>Store the key-value pair in the Map. If the previous key has a value, overwrite it.</td>\n</tr>\n<tr>\n<td>V</td>\n<td>get(Object key)</td>\n<td>Get the value by key, return null if it fails</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>keySet()</td>\n<td>Return the collection of all keys in the Map</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>containsKey(Object key)</td>\n<td>Check whether a key is included</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>containsValue(Object value)</td>\n<td>Check whether it contains a certain value</td>\n</tr>\n<tr>\n<td>default V</td>\n<td>getOrDefault(Object key, V defaultValue)</td>\n<td>If key is in the map, return its value. Otherwise return the defaultValue passed in (it is useful when sorting the count).</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"priority-queue\"><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\">Priority Queue</a><a title=\"#priority-queue\" href=\"#priority-queue\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> PriorityQueue&lt;<span class=\"keyword\">int</span>[]&gt;(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] s1, <span class=\"keyword\">int</span>[] s2)</span> </span>&#123; <span class=\"keyword\">return</span> s1[<span class=\"number\">0</span>] - s2[<span class=\"number\">0</span>];&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Return Value</th>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html#add-E-\" target=\"_blank\">add</a></strong>(<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\" target=\"_blank\">E</a> e)</td>\n<td>Inserts the specified element into this priority queue.</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>contains(Object o)</td>\n<td>Returns <code>true</code> if this queue contains the specified element.</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html#offer-E-\" target=\"_blank\">offer</a></strong>(<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\" target=\"_blank\">E</a> e)</td>\n<td>Inserts the specified element into this priority queue.</td>\n</tr>\n<tr>\n<td>E</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html#peek--\" target=\"_blank\">peek</a></strong>()</td>\n<td>Retrieves, but does not remove, the head of this queue, or returns <code>null</code> if this queue is empty.</td>\n</tr>\n<tr>\n<td>E</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html#poll--\" target=\"_blank\">poll</a></strong>()</td>\n<td>Retrieves and removes the head of this queue, or returns <code>null</code> if this queue is empty.boolean</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html#remove-java.lang.Object-\" target=\"_blank\">remove</a></strong>(<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\">Object</a> o)</td>\n<td>Removes a single instance of the specified element from this queue, if it is present.</td>\n</tr>\n<tr>\n<td>Int</td>\n<td><strong><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html#size--\" target=\"_blank\">size</a></strong>()</td>\n<td>Returns the number of elements in this collection.</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"union-find\">Union Find<a title=\"#union-find\" href=\"#union-find\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Algorithms.UnionFind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] roots;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] size;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> rootsNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnionFind</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        rootsNumber = N;</span><br><span class=\"line\">        roots = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">        size = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">            roots[i] = i;</span><br><span class=\"line\">            size[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root(i) == root(j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(roots[i] != i) i = roots[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != roots[node]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = roots[node];</span><br><span class=\"line\">            roots[node] = i;</span><br><span class=\"line\">            node = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ri = root(i);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rj = root(j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size[ri]&lt;size[rj]) &#123;</span><br><span class=\"line\">            roots[ri] = rj;</span><br><span class=\"line\">            size[rj] += size[ri];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            roots[rj] = ri;</span><br><span class=\"line\">            size[ri] += size[rj];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Once a connection is formed, the number of the roots will decrease one.</span></span><br><span class=\"line\">        rootsNumber--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"algorithms\">Algorithms<a title=\"#algorithms\" href=\"#algorithms\"></a></h1>\n<h2 id=\"recursion\">Recursion<a title=\"#recursion\" href=\"#recursion\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> &lt;T&gt; recursion (<span class=\"keyword\">int</span> level, T param1, T param2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// recursion terminator</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level &gt; MAX_LEVEL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// print result</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// processlogic in current level</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// drill down</span></span><br><span class=\"line\">    recursion(level + <span class=\"number\">1</span>, p1,p2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// reverse the current level status if needed</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bfs\">BFS<a title=\"#bfs\" href=\"#bfs\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span>[][] visited,<span class=\"keyword\">int</span>[][] index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Integer&gt; q = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    visited[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    q.add(i * m + j);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = q.poll();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = node / m;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = node % m;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt; index[<span class=\"number\">0</span>].length; a++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempx = row + index[<span class=\"number\">0</span>][a];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempy = col + index[<span class=\"number\">1</span>][a];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isValid(tempx, tempy, grid, visited)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// After being put in the queue, it must be marked as visited immediately.</span></span><br><span class=\"line\">               <span class=\"comment\">// If mark it when it is moved out the queue, it will cause many duplicate nodes to enter the queue.</span></span><br><span class=\"line\">                visited[tempx][tempy] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                q.add(tempx * m + tempy);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dfs\">DFS<a title=\"#dfs\" href=\"#dfs\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">char</span>[][] grid,<span class=\"keyword\">int</span>[][] index,<span class=\"keyword\">int</span>[][] visited)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;0&#x27;</span> || visited[i][j] == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt; index[<span class=\"number\">0</span>].length; a++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempx = i + index[<span class=\"number\">0</span>][a];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempy = j + index[<span class=\"number\">1</span>][a];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempx &gt;= <span class=\"number\">0</span> &amp;&amp; tempx &lt; grid.length &amp;&amp; tempy &gt;= <span class=\"number\">0</span> &amp;&amp; tempy &lt; grid[<span class=\"number\">0</span>].length)</span><br><span class=\"line\">            dfs(tempx, tempy, grid, index, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sinking island idea</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    res = Math.max(res, dfs(i, j, grid));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span> || i &gt;= grid.length || j &gt;= grid[i].length || grid[i][j] == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        grid[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">        num += dfs(i + <span class=\"number\">1</span>, j, grid);</span><br><span class=\"line\">        num += dfs(i - <span class=\"number\">1</span>, j, grid);</span><br><span class=\"line\">        num += dfs(i, j + <span class=\"number\">1</span>, grid);</span><br><span class=\"line\">        num += dfs(i, j - <span class=\"number\">1</span>, grid);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"backtrack\">BackTrack<a title=\"#backtrack\" href=\"#backtrack\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] used;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] nums;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nums = nums;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n];</span><br><span class=\"line\">        </span><br><span class=\"line\">\t    List&lt;Integer&gt; tmp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t    backtrack(tmp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(List&lt;Integer&gt; tmp, <span class=\"keyword\">int</span> depth)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (depth == nums.length) &#123;</span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(tmp));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (used[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            used[j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            tmp.add(nums[j]);</span><br><span class=\"line\">            </span><br><span class=\"line\">            backtrack(tmp, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            used[j] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            tmp.remove(depth);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","link":"cheatsheet","comments":true,"plink":"https://oreodu.github.io/cheatsheet/","toc":[{"id":"ascii-code","title":"ASCII Code","index":"1"},{"id":"method-in-java","title":"Method in java","index":"2","children":[{"id":"math","title":"Math","index":"2.1"},{"id":"java.util-package","title":"Java.util Package","index":"2.2"}]},{"id":"data-structure","title":"Data Structure","index":"3","children":[{"id":"date","title":"Date","index":"3.1"},{"id":"string","title":"String","index":"3.2"},{"id":"character","title":"Character","index":"3.3"},{"id":"integer","title":"Integer","index":"3.4"},{"id":"array","title":"Array","index":"3.5"},{"id":"collections","title":"Collections","index":"3.6"},{"id":"vector","title":"Vector","index":"3.7"},{"id":"stack","title":"Stack","index":"3.8"},{"id":"queue","title":"Queue","index":"3.9"},{"id":"set","title":"Set","index":"3.10"},{"id":"map","title":"Map","index":"3.11"},{"id":"priority-queue","title":"Priority Queue","index":"3.12"},{"id":"union-find","title":"Union Find","index":"3.13"}]},{"id":"algorithms","title":"Algorithms","index":"4","children":[{"id":"recursion","title":"Recursion","index":"4.1"},{"id":"bfs","title":"BFS","index":"4.2"},{"id":"dfs","title":"DFS","index":"4.3"},{"id":"backtrack","title":"BackTrack","index":"4.4"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/cheatsheet/\" title=\"undefined\">https://oreodu.github.io/cheatsheet/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}