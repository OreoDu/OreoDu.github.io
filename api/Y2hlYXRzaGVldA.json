{"title":"","date":"2020-10-23T12:00:51.250Z","date_formatted":{"ll":"Oct 23, 2020","L":"10/23/2020","MM-DD":"10-23"},"updated":"2020-10-11T02:18:48.171Z","content":"<h1 id=\"data-structure\">Data Structure<a title=\"#data-structure\" href=\"#data-structure\"></a></h1>\n<h2 id=\"union-find\">Union Find<a title=\"#union-find\" href=\"#union-find\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Other.UnionFind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] roots;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] size;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> rootsNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnionFind</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        rootsNumber = N;</span><br><span class=\"line\">        roots = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">        size = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">            roots[i] = i;</span><br><span class=\"line\">            size[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root(i) == root(j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(roots[i]!=i) i = roots[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node!= roots[node]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = roots[node];</span><br><span class=\"line\">            roots[node] = i;</span><br><span class=\"line\">            node = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ri = roots[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rj = roots[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size[ri]&lt;size[rj]) &#123;</span><br><span class=\"line\">            roots[ri] = rj;</span><br><span class=\"line\">            size[rj] += size[ri];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            roots[rj] = ri;</span><br><span class=\"line\">            size[ri] = size[rj];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Once a connection is formed, the number of the roots will decrease one.</span></span><br><span class=\"line\">        rootsNumber--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"algorithms\">Algorithms<a title=\"#algorithms\" href=\"#algorithms\"></a></h1>\n<h2 id=\"recursion\">Recursion<a title=\"#recursion\" href=\"#recursion\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> &lt;T&gt; recursion (<span class=\"keyword\">int</span> level, T param1, T param2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// recursion terminator</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level &gt; MAX_LEVEL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// print result</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// processlogic in current level</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// drill down</span></span><br><span class=\"line\">    recursion(level + <span class=\"number\">1</span>, p1,p2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// reverse the current level status if needed</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bfs\">BFS<a title=\"#bfs\" href=\"#bfs\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span>[][] visited,<span class=\"keyword\">int</span>[][] index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Integer&gt; q = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    visited[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    q.add(i * m + j);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = q.poll();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = node / m;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = node % m;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt; index[<span class=\"number\">0</span>].length; a++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempx = row + index[<span class=\"number\">0</span>][a];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempy = col + index[<span class=\"number\">1</span>][a];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isValid(tempx, tempy, grid, visited)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// After being put in the queue, it must be marked as visited immediately.</span></span><br><span class=\"line\">               <span class=\"comment\">// If mark it when it is moved out the queue, it will cause many duplicate nodes to enter the queue.</span></span><br><span class=\"line\">                visited[tempx][tempy] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                q.add(tempx * m + tempy);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dfs\">DFS<a title=\"#dfs\" href=\"#dfs\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">char</span>[][] grid,<span class=\"keyword\">int</span>[][] index,<span class=\"keyword\">int</span>[][] visited)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;0&#x27;</span> || visited[i][j] == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt; index[<span class=\"number\">0</span>].length; a++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempx = i + index[<span class=\"number\">0</span>][a];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempy = j + index[<span class=\"number\">1</span>][a];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempx &gt;= <span class=\"number\">0</span> &amp;&amp; tempx &lt; grid.length &amp;&amp; tempy &gt;= <span class=\"number\">0</span> &amp;&amp; tempy &lt; grid[<span class=\"number\">0</span>].length)</span><br><span class=\"line\">            dfs(tempx, tempy, grid, index, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n","link":"cheatsheet","comments":true,"plink":"https://oreodu.github.io/cheatsheet/","toc":[{"id":"data-structure","title":"Data Structure","index":"1","children":[{"id":"union-find","title":"Union Find","index":"1.1"}]},{"id":"algorithms","title":"Algorithms","index":"2","children":[{"id":"recursion","title":"Recursion","index":"2.1"},{"id":"bfs","title":"BFS","index":"2.2"},{"id":"dfs","title":"DFS","index":"2.3"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/cheatsheet/\" title=\"undefined\">https://oreodu.github.io/cheatsheet/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}