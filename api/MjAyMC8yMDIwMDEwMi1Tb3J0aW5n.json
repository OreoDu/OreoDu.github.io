{"title":"Sorting","date":"2020-01-02T01:29:25.000Z","date_formatted":{"ll":"Jan 2, 2020","L":"01/02/2020","MM-DD":"01-02"},"link":"2020/20200102-Sorting","comments":true,"tags":["Classical Algorithms"],"categories":["Algorithms"],"updated":"2020-11-25T08:37:05.042Z","content":"<h1 id=\"sorting\">Sorting<a title=\"#sorting\" href=\"#sorting\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>\n· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>\n· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>\n· <a href=\"https://sp19.datastructur.es/\" target=\"_blank\">CS61B Spring 2019 at UCB</a><br>\n· <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\">Algorithms, Part I,Ⅱ by Princeton University</a><br>\n· Wikipedia<br>\n· You can see the implementations of those sort algorithms <a href=\"https://github.com/OreoDu/Implementations/tree/main/src/Algorithms/Sort\" target=\"_blank\">here</a>.</p>\n<p>Many sorting algorithms to choose from:</p>\n<p>Internal sorts.<br>\n・<strong>Insertion sort</strong>, <strong>selection sort</strong>,  <strong>bubble sort</strong>,  shaker sort.<br>\n・<strong>Quick sort</strong>,  <strong>merge sort</strong>,  heap sort,  samplesort, <strong>shellsort</strong>.<br>\n・Solitaire sort, red-black sort, splaysort, Yaroslavskiy sort, psort, …</p>\n<p>External sorts.<br>\nPoly-phase mergesort, cascade-merge, oscillating sort.</p>\n<p>String/radix sorts.<br>\nDistribution, MSD, LSD, 3-way string quicksort.</p>\n<p>Parallel sorts.<br>\n・Bitonic sort, Batcher even-odd sort.<br>\n・Smooth sort, cube sort, column sort.<br>\n・GPUsort.</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Name</th>\n<th>Worst</th>\n<th>Average</th>\n<th>Best</th>\n<th>In-place</th>\n<th>Stability</th>\n<th>Space Complexity</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bubble Sort</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>$ N $</td>\n<td>In-place</td>\n<td>Stable</td>\n<td>O(1)</td>\n<td>$  \\frac{N(N-1)}{2} $ exchanges</td>\n</tr>\n<tr>\n<td>Selection Sort</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>In-place</td>\n<td>No</td>\n<td>O(1)</td>\n<td>$N$ exchanges</td>\n</tr>\n<tr>\n<td>Insertion Sort</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>$ \\frac{N^2}{4} $</td>\n<td>$ N $</td>\n<td>In-place</td>\n<td>Stable</td>\n<td>O(1)</td>\n<td>use for small N or partially ordered.</td>\n</tr>\n<tr>\n<td>Shell Sort</td>\n<td>depend on the increment sequence</td>\n<td>-</td>\n<td>$ N $</td>\n<td>In-place</td>\n<td>No</td>\n<td>O(1)</td>\n<td>tight code, subquadratic.</td>\n</tr>\n<tr>\n<td>Merge Sort</td>\n<td>$ N lg N $</td>\n<td>$ N lg N $</td>\n<td>$ N lg N $</td>\n<td>Out-place)</td>\n<td>Stable</td>\n<td>O(n)</td>\n<td>$ N lg N $ guarantee, stable.</td>\n</tr>\n<tr>\n<td>Quick Sort</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>$ 2N lg N $</td>\n<td>$ N lg N $</td>\n<td>In-place</td>\n<td>No</td>\n<td>O(1)</td>\n<td>$ N lg N $ probabilistic guarantee fastest in practice.</td>\n</tr>\n<tr>\n<td>3-way quick</td>\n<td>$ \\frac{N^2}{2} $</td>\n<td>$ 2N lg N $</td>\n<td>N</td>\n<td>In-place</td>\n<td>No</td>\n<td>O(1)</td>\n<td>improves quicksort in presence of duplicate keys</td>\n</tr>\n</tbody>\n</table></div></div><p>Stability: long-distance exchange might move an item past some equal item.</p>\n<h2 id=\"part.1-elementary-sort\">Part.1 Elementary Sort<a title=\"#part.1-elementary-sort\" href=\"#part.1-elementary-sort\"></a></h2>\n<h3 id=\"ⅰ.--selection-sort-&amp;--bubble-sort\">Ⅰ.  Selection Sort &amp;  Bubble Sort<a title=\"#ⅰ.--selection-sort-&amp;--bubble-sort\" href=\"#ⅰ.--selection-sort-&amp;--bubble-sort\"></a></h3>\n<p>Unlike the basic sort method inserting elements into the sorted subarray, we can select the <code>i-th</code> largest element  and put the value into the <code>a[i]</code>. We can select the element from the front portion and put it in the back or  we can select the element from the back portion and put it in the front.</p>\n<p>There are two ways to select element. The first method is bubble sort. It operates by repeatedly swapping the adjacent elements if they are in the wrong order which result in that the <code>i-th</code> largest element is moved to <code>a[i]</code>.</p>\n<img src=\"https://i.loli.net/2020/10/17/DjUukWQXEGFqBln.png\" alt=\"22\" style=\"zoom:20%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n-i-<span class=\"number\">1</span>; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] &gt; a[j+<span class=\"number\">1</span>]) exch(a, j, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The second method called selection sort. It sorts an array by repeatedly finding the index <code>min</code> of smallest remaining element from the unsorted part and swap <code>a[i]</code> and <code>a[min]</code>.</p>\n<img src=\"https://i.loli.net/2020/10/17/29Xv3rjCIUksJxD.jpg\" alt=\"22\" style=\"zoom:25%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        min = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] &lt; a[min]) min = j;</span><br><span class=\"line\">        exch(a, i, min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Selection sort is more efficient and faster than the bubble sort because of less exchanges.</p>\n<h3 id=\"ⅱ.--insertion-sort\">Ⅱ.  Insertion Sort<a title=\"#ⅱ.--insertion-sort\" href=\"#ⅱ.--insertion-sort\"></a></h3>\n<p>Find the proper position for <code>a[i]</code> in <code>0-th</code> ~  <code>(i-1)-th</code> sorted subarray by swapping <code>a[i]</code> with each larger element to its left.</p>\n<img src=\"https://i.loli.net/2020/10/17/WdkRHFXYelstmpq.png\" alt=\"11\" style=\"zoom: 20%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] &lt; a[j-<span class=\"number\">1</span>]) exch(a, j, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ⅲ.-shell-sort\">Ⅲ. Shell Sort<a title=\"#ⅲ.-shell-sort\" href=\"#ⅲ.-shell-sort\"></a></h3>\n<p>Shell Sort is mainly a variation of Insertion Sort. In insertion sort, we move elements only one position ahead. The idea of Shell Sort is to allow exchange of far items.</p>\n<p>In Shell Sort, we make the array h-sorted for a large value of h. We keep reducing the value of h until it becomes 1. An array is said to be h-sorted if all sub-lists of every <code>h-th</code> element is sorted.</p>\n<p>After the previous h-sort, the array is partially sorted so the insertion will be fast (a g-sorted array remains g-sorted after h-sorting. See  the proof below or <a href=\"https://cs.stackexchange.com/questions/47096/why-does-decreasing-the-gap-size-in-shell-sort-never-undo-previous-sorts\" target=\"_blank\">here</a>).</p>\n<img src=\"https://i.loli.net/2020/10/18/AzZPorRqkJcVM9p.jpg\" alt=\"11\" style=\"zoom: 30%;\">\n<p>Increment sequence that we can use:<br>\n<strong>Power of two minus one</strong>: 1,3,7,…<br>\n<strong>3x+1</strong>: 1,4,13,40,…<br>\n<strong>Sedgewick</strong>: 1,5,19,41,109,…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">    <span class=\"comment\">// while (h &lt; n/3) h = h*3 + 1;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = n/<span class=\"number\">3</span>; h &gt;= <span class=\"number\">1</span>; h = h/<span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; n ; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h &amp;&amp; a[j] &lt; a[j-h]; j -= h)</span><br><span class=\"line\">                exch(a,j,j-h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"part.2-advanced-sort\">Part.2 Advanced Sort<a title=\"#part.2-advanced-sort\" href=\"#part.2-advanced-sort\"></a></h2>\n<h3 id=\"ⅰ.-marge-sort\">Ⅰ. Marge sort<a title=\"#ⅰ.-marge-sort\" href=\"#ⅰ.-marge-sort\"></a></h3>\n<p>Java sort for objects.</p>\n<h4 id=\"basic-idea:\">Basic idea:<a title=\"#basic-idea:\" href=\"#basic-idea:\"></a></h4>\n<p>divide array into two halves, recursively sort each half and merge two halves.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gkyv16hv4nj30tw0eqgq1.jpg\" alt=\"Screen Shot 2020-11-23 at 09.42.02\" style=\"zoom:50%;\">\n<h4 id=\"running-time\">Running Time<a title=\"#running-time\" href=\"#running-time\"></a></h4>\n<p>Proposition: Merge sort uses at most $NlgN$ compares and $6NlgN$ array accesses to sort any array of size N.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gkyv1su20aj30lg054wf0.jpg\" alt=\"Screen Shot 2020-11-23 at 09.42.40\" style=\"zoom:50%;\">\n<img src=\"/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-23 at 09.43.16.png\" alt=\"Screen Shot 2020-11-23 at 09.43.16\" style=\"zoom:50%;\">\n<p>$ D(N) = 2D(\\frac{N}{2}) + N $</p>\n<p>$ \\frac{D(N)}{N} = \\frac{D(\\frac{N}{2})}{\\frac{N}{2}} + 1 = \\frac{D(\\frac{N}{4})}{\\frac{N}{4}} + 1 + 1= … = \\frac{D(\\frac{N}{N})}{\\frac{N}{N}} + 1…+ 1 = lg N$</p>\n<h4 id=\"memory\">Memory<a title=\"#memory\" href=\"#memory\"></a></h4>\n<p>Proposition: Merge sort uses extra space proportional to N.</p>\n<p>A sorting algorithm is in-place if it uses &lt;= <em>clogN</em> extra memory. (Insertion sort, selection sort, shell sort) ---- In-place merge sort.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// divide and conquer prototype</span></span><br><span class=\"line\"><span class=\"comment\">// Solve a problem by bividing it into two halves, sovling the two halves, </span></span><br><span class=\"line\"><span class=\"comment\">// and then putting the solutions together to get the appropriate answer.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, Comparable[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a, lo, mid)</span></span>;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a, mid + <span class=\"number\">1</span>, hi)</span></span>;</span><br><span class=\"line\"> \t <span class=\"comment\">// copy</span></span><br><span class=\"line\"> \t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= hi; k++) &#123;</span><br><span class=\"line\">  \t  aux[k] = a[k];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"comment\">// merge</span></span><br><span class=\"line\"> \t <span class=\"keyword\">int</span> i = lo, j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"> \t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class=\"line\">  \t  <span class=\"keyword\">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class=\"line\">  \t  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; hi) a[k] = aux[i++];</span><br><span class=\"line\">  \t  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(aux[j], aux[i])) a[k] = aux[j++];</span><br><span class=\"line\">  \t  <span class=\"keyword\">else</span> a[k] = aux[i++];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\"> \t <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a,lo,hi)</span></span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, Comparable[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hi &lt;= lo) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (lo + hi) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    sort(a, aux, lo, mid);</span><br><span class=\"line\">    sort(a, aux, mid + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">    merge(a, aux, lo, mid, hi);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">    Comparable[] aux = <span class=\"keyword\">new</span> Comparable[a.length];</span><br><span class=\"line\">    sort(a, aux, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"improvement\">Improvement<a title=\"#improvement\" href=\"#improvement\"></a></h4>\n<ol>\n<li>Because merge sort has too much overhead for tiny subarrays so we use insertion sort for small subarrays. Cutoff to insertion sort for ≈ 7items.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, Comparable[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt;= lo) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt;= lo + CUTOFF -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    Insertion.sort(a, lo, hi);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (lo + hi) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  sort(a, aux, lo, mid);</span><br><span class=\"line\">  sort(a, aux, mid + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">  merge(a, aux, lo, mid, hi);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>If the biggest item in the first half &lt;= smallest item in the second half, we can just stop and move forward.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, Comparable[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt;= lo) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt;= lo + CUTOFF -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    Insertion.sort(a, lo, hi);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = (lo + hi) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  sort(a, aux, lo, mid);</span><br><span class=\"line\">  sort(a, aux, mid + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!less(a[mid + <span class=\"number\">1</span>],a[mid])) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  merge(a, aux, lo, mid, hi);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>In the previous code, we have to copy the merge part in the a[] into aux[] and then merge (copy the merge result from the aux[] to a[]). So in order to save time and eliminate the copy, we can switch the role of the input and auxiliary array in each recursive call.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, Comparable[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a, lo, mid)</span></span>;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a, mid + <span class=\"number\">1</span>, hi)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"> \t \t<span class=\"keyword\">int</span> i = lo, j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"> \t \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class=\"line\">  \t  \t<span class=\"keyword\">if</span> (i &gt; mid) aux[k] = a[j++];</span><br><span class=\"line\">  \t  \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; hi) aux[k] = a[i++];</span><br><span class=\"line\">  \t  \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(a[j], a[i])) aux[k] = a[j++];</span><br><span class=\"line\">  \t \t \t<span class=\"keyword\">else</span> aux[k] = a[i++];</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\"> \t \t<span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a,lo,hi)</span></span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, Comparable[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (hi &lt;= lo) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (hi &lt;= lo + CUTOFF -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \tInsertion.sort(a, lo, hi);</span><br><span class=\"line\">   \t \t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">int</span> mid = (lo + hi) / <span class=\"number\">2</span>;</span><br><span class=\"line\"> \t\tsort(aux, a, lo, mid);</span><br><span class=\"line\">  \tsort(aux, a, mid + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(!less(a[mid + <span class=\"number\">1</span>],a[mid])) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  \tmerge(a, aux, lo, mid, hi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">      Comparable[] aux = <span class=\"keyword\">new</span> Comparable[a.length];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) aux[i] = a[i];</span><br><span class=\"line\">    \tsort(a, aux, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Bottom-up merge sort</li>\n</ol>\n<p>Basic idea: pass through array and merge the subarrays of size 2, 4, 8, 16 …</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gkz03bkbrcj30ri0fewid.jpg\" alt=\"Screen Shot 2020-11-23 at 12.36.57\" style=\"zoom:50%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeBU</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Comparable[] aux;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, Comparable[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a, lo, mid)</span></span>;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a, mid + <span class=\"number\">1</span>, hi)</span></span>;</span><br><span class=\"line\"> \t <span class=\"comment\">// copy</span></span><br><span class=\"line\"> \t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= hi; k++) &#123;</span><br><span class=\"line\">  \t  aux[k] = a[k];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"comment\">// merge</span></span><br><span class=\"line\"> \t <span class=\"keyword\">int</span> i = lo, j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"> \t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class=\"line\">  \t  <span class=\"keyword\">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class=\"line\">  \t  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; hi) a[k] = aux[i++];</span><br><span class=\"line\">  \t  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (less(a[j], a[i])) a[k] = aux[j++];</span><br><span class=\"line\">  \t  <span class=\"keyword\">else</span> a[k] = aux[i++];</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\"> \t <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isSorted</span><span class=\"params\">(a,lo,hi)</span></span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\"> \t\tComparable[] aux = <span class=\"keyword\">new</span> Comparable[N];</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> sz = <span class=\"number\">1</span>; sz &lt; N; sz = sz + sz)</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>; lo &lt; N - sz; lo += sz + sz)</span><br><span class=\"line\">        merge(a, aux, lo, lo + sz - <span class=\"number\">1</span>, Math.min(lo + sz + sz - <span class=\"number\">1</span>, N - <span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ⅱ.quick-sort\">Ⅱ.Quick Sort<a title=\"#ⅱ.quick-sort\" href=\"#ⅱ.quick-sort\"></a></h3>\n<p>Java sort for primitive types.</p>\n<h4 id=\"basic-idea:-1\">Basic idea:<a title=\"#basic-idea:-1\" href=\"#basic-idea:-1\"></a></h4>\n<p>・Shuffle the array.</p>\n<p>・Partition so that, for some k . Entry k is in place, no larger element to the left of k, no smaller entry to the right of k.</p>\n<p>​    Repeat until i and j pointers cross.<br>\n・Scan i from left to right so long as (a[i] &lt; a[lo]).<br>\n・Scan j from right to left so long as (a[j] &gt; a[lo]).<br>\n・Exchange a[i] with a[j]. (a[i] &gt;=  a[lo] and a[j] &lt;= a[lo])<br>\n​    When pointers cross.<br>\n・Exchange a[j] with a[lo].</p>\n<p>・Sort each piece recursively.</p>\n<img src=\"/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-24 at 13.06.23.png\" alt=\"Screen Shot 2020-11-24 at 13.06.23\" style=\"zoom: 33%;\">\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gl03jjxlnvj3154050jrz.jpg\" alt=\"Screen Shot 2020-11-24 at 11.21.56\" style=\"zoom:67%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = lo, j = hi + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (less(a[++i], a[lo])) <span class=\"keyword\">if</span> (i == hi) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (less(a[lo], a[--j])) <span class=\"keyword\">if</span> (j == lo) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &gt;= j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      exch(a, i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exch(a, lo, j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// shuffling is needed for performance guarantee</span></span><br><span class=\"line\">    StdRandom.shuffle(a);</span><br><span class=\"line\">    sort(a, <span class=\"number\">0</span> , a.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hi &lt;= lo) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = partition(a, lo, hi);</span><br><span class=\"line\">    sort(a, lo, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">    sort(a, j+<span class=\"number\">1</span>, hi);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"average-case-analysis\">Average-case analysis<a title=\"#average-case-analysis\" href=\"#average-case-analysis\"></a></h4>\n<p>Proposition. The average number of compares $ C_N $ to quick sort an array of N distinct keys is ~ $ 2N lnN$ (and the number of exchanges is ~ ⅓ $ N ln N$)</p>\n<p>$ C_N = (N + 1) + (\\frac{C_0 + C_{N-1}}{N}) + (\\frac{C_1 + C_{N-2}}{N}) + … + (\\frac{C_{N-1} + C_{0}}{N})$</p>\n<p>$ \\frac{1}{N} $ is the partitioning probability. There are $ N + 1 $ compares during the partition. $ C_0 = C_1 = 0, N&gt;1 $</p>\n<p>$ NC_N = N(N+1) + 2(C_0 + C_1 +…+ C_{N-1}) $</p>\n<p>$ (N-1)C_{N-1} = N(N-1) + 2(C_0 + C_1 +…+ C_{N-2}) $</p>\n<p>Subtract the above two equation:</p>\n<p>$ NC_N - (N-1)C_{N-1} = 2N + 2C_{N-1} $</p>\n<p>Rearrange terms and divide by $ N (N + 1)$:</p>\n<p>$ \\frac{C_N}{N+1} = \\frac{C_{N-1}}{N} + \\frac{2}{N+1}  = \\frac{C_{N-2}}{N-1} + \\frac{2}{N} + \\frac{2}{N+1} = \\frac{2}{3} + \\frac{2}{4} + \\frac{2}{5} + … + \\frac{2}{N + 1} $</p>\n<p>$ C_N = 2(N+1)(\\frac{1}{3} + \\frac{1}{4} + \\frac{1}{5} + … + \\frac{1}{N+1}) $</p>\n<p>~ $ \\int^{N+1}_{3}{\\frac{1}{x}dx} $   ~   $ 2(N+1)ln N  ≈ 1.39N lg N $</p>\n<h4 id=\"summary-of-performance-characteristics\">Summary of performance characteristics<a title=\"#summary-of-performance-characteristics\" href=\"#summary-of-performance-characteristics\"></a></h4>\n<p>Worst case. Number of compares is quadratic. $ N + (N-1) + (N-2) + … + 1 $ ~ $ \\frac{1}{2}N^2 $</p>\n<p>Average case. Number of compares is ~ 1.39 N lg N. (Faster than merge sort because of less data movement)</p>\n<p>Memory. Quicksort is an in-place sorting algorithm<br>\n· Partitioning: constant extra space.<br>\n· Depth of recursion: logarithmic extra space (with high probability).</p>\n<p>Quick sort is not stable.</p>\n<h4 id=\"practical-improvements\">Practical improvements<a title=\"#practical-improvements\" href=\"#practical-improvements\"></a></h4>\n<ol>\n<li>Like merge sort, quick sort also has too much overhead for tiny subarrays so we can cutoff to insertion sort for ≈ 10 items.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt;= lo + CUTOFF - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    Insertion.sort(a, lo, hi);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> j = partition(a, lo, hi);</span><br><span class=\"line\">  sort(a, lo, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">  sort(a, j+<span class=\"number\">1</span>, hi);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Median of sample<br>\n・Best choice of pivot item = median.<br>\n・Estimate true median by taking median of sample(a[lo], a[mid], a[hi]).<br>\n・Median of 3 random items.<br>\nSee more details <a href=\"https://stackoverflow.com/questions/7559608/median-of-three-values-strategy\" target=\"_blank\">here</a>.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">medianOf3</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (less(a[hi],a[lo])) exch(a, lo, hi);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (less(a[mid],a[lo])) exch(a, mid, lo);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (less(a[hi],a[mid])) exch(a, mid, hi);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (hi &lt;= lo) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">int</span> m = medianOf3(a, lo, (lo + hi)/<span class=\"number\">2</span>, hi);</span><br><span class=\"line\">   swap(a, lo, m);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">int</span> j = partition(a, lo, hi);</span><br><span class=\"line\">   sort(a, lo, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">   sort(a, j+<span class=\"number\">1</span>, hi);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"quick-select\">Quick-Select<a title=\"#quick-select\" href=\"#quick-select\"></a></h4>\n<p>Goal. Given an array of N items, find a kth smallest item.<br>\nOnce we got the <code>top k</code>, then Min (k = 0), max (k = N - 1), median (k = N/ 2).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Comparable <span class=\"title\">select</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  StdRandom.shuffle(a);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>, hi = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (hi &gt; lo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = partition(a, lo, hi);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &lt; k) lo = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; k) hi = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> a[k];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a[k];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Quick-select takes linear time on average.<br>\nIntuitively, each partitioning step splits array approximately in half:<br>\n$ N + \\frac{N}{2} + \\frac{N}{4} + … + 1 $ ~ $ 2N $ compares.</p>\n<p>Formal analysis: $ C_N = 2N + 2k ln(\\frac{N}{k}) +2(N-k)ln(\\frac{N}{N-k}) $  (if k = $ \\frac{N}{2} $ , $ C_N = (2 + 2ln)N $)</p>\n<p>Quick-select uses ~ $ \\frac{1}{2}N^2 $ compares in the worst case.</p>\n<h4 id=\"duplicate-keys----dijkstra-3-way\">Duplicate keys – Dijkstra 3-way<a title=\"#duplicate-keys----dijkstra-3-way\" href=\"#duplicate-keys----dijkstra-3-way\"></a></h4>\n<p>Goal. Partition array into 3 parts so that:<br>\n・Entries between lt and gt equal to partition item v.<br>\n・No larger entries to left of lt.<br>\n・No smaller entries to right of gt.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gl18n7o35lj30my0dcdgl.jpg\" alt=\"Screen Shot 2020-11-25 at 11.04.11\" style=\"zoom: 33%;\">\n<p>・Let <code>v</code> be partitioning item <code>a[lo]</code>.<br>\n・Scan <code>i</code> from left to right.<br>\n・(<code>a[i]</code> &lt; v): exchange <code>a[lt]</code> with <code>a[i]</code>; increment both <code>lt</code> and <code>i</code> .<br>\n・(<code>a[i]</code> &gt; v): exchange <code>a[gt]</code> with <code>a[i]</code>; decrement <code>gt</code> .<br>\n・(<code>a[i]</code> == v): increment <code>i</code>.</p>\n<img src=\"/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-25 at 15.36.10.png\" alt=\"Screen Shot 2020-11-25 at 15.36.10\" style=\"zoom: 50%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hi &lt;= lo) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> lt = lo, gt = hi, i = lo;</span><br><span class=\"line\">  Comparable v = a[lo];</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt;= gt) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cmp = a[i].compareTo(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) exch(a, lt++, i++);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) exch(a, i, gt--);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sort(a, lo, lt - <span class=\"number\">1</span>);</span><br><span class=\"line\">  sort(a, gt + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Sorting lower bound: If there are n distinct keys and the $i^{th}$ one occurs $x_i$ times, any compare-based sorting algorithm must use at least $ lg(\\frac{N!}{x_1! x_2!..x_n!}) $   ~  $ \\sum^{n}_{i = 1}{x_i lg\\frac{x_i}{N}} $ ($ NlgN $ when all distinct, linear when only a constant number of distinct keys) compares in the worst case.</p>\n<p>Quick sort with 3-way partitioning is entropy-optimal.  [Sedgewick-Bentley, 1997]<br>\n(whatever the distribution of equal keys in there, this thing is going to use number of compares that’s proportional to the best that you could possibly do)</p>\n<h3 id=\"ⅲ.-heap-sort\">Ⅲ. Heap Sort<a title=\"#ⅲ.-heap-sort\" href=\"#ⅲ.-heap-sort\"></a></h3>\n<h3 id=\"ⅳ.--bucket-sort\">Ⅳ.  Bucket sort<a title=\"#ⅳ.--bucket-sort\" href=\"#ⅳ.--bucket-sort\"></a></h3>\n<h3 id=\"ⅴ.-radix-sort\">Ⅴ. Radix sort<a title=\"#ⅴ.-radix-sort\" href=\"#ⅴ.-radix-sort\"></a></h3>\n<h2 id=\"part.3-sorting-complexity\">Part.3 Sorting Complexity<a title=\"#part.3-sorting-complexity\" href=\"#part.3-sorting-complexity\"></a></h2>\n<p>(Framework to study efficiency of algorithms for solving a particular problem X)</p>\n<h3 id=\"model-of-computation\">Model of computation<a title=\"#model-of-computation\" href=\"#model-of-computation\"></a></h3>\n<p>(allowable operations): Decision tree.</p>\n<p>Proposition: Any compare-based sorting algorithm must use at least lg ( N ! ) ~ N lg N compares in the worst-case.</p>\n<p>Assume array consists of N distinct values $a_1$ through $a_N$ and there are N! different orderings. As for the worst case, there will be h(the height of the decision tree) compares.</p>\n<p>Binary tree of height h  ⇒ at most $2^k$ leaves.<br>\nN! Different orderings  ⇒ at least N! leaves.</p>\n<p>$2^h ≥ leaves ≥ N! ⇒ h ≥ lg (N!) ~ NlgN (Stirling’s approximation) $</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gkze0wkxnrj30su0kigom.jpg\" alt=\"Screen Shot 2020-11-23 at 20.39.01\" style=\"zoom: 45%;\">\n<h3 id=\"cost-model-(operation-counts):\">Cost model (operation counts):<a title=\"#cost-model-(operation-counts):\" href=\"#cost-model-(operation-counts):\"></a></h3>\n<p>compares.</p>\n<h3 id=\"upper-bound\">Upper bound<a title=\"#upper-bound\" href=\"#upper-bound\"></a></h3>\n<p>(Cost guarantee provided by some algorithm for X): ~ <em>N lg N</em> from merge sort.</p>\n<h3 id=\"lower-bound\">Lower bound<a title=\"#lower-bound\" href=\"#lower-bound\"></a></h3>\n<p>(Proven limit on cost guarantee of all algorithms for X): ~ <em>N lg N</em></p>\n<p>Lower bound may not hold if the algorithm has information about:<br>\n・The initial order of the input.  (partially-ordered arrays)<br>\n・The distribution of key values. (duplicate keys)<br>\n・The representation of the keys.<br>\n(Digital properties of keys:  We can use digit/character compares instead of key compares for numbers and strings.)</p>\n<h3 id=\"optimal-algorithm\">Optimal algorithm<a title=\"#optimal-algorithm\" href=\"#optimal-algorithm\"></a></h3>\n<p>(Algorithm with best possible cost guarantee for X): merge sort. (But it is not optimal with respect to space usage)</p>\n<h2 id=\"part.4-sort-in-java\">Part.4 Sort in Java<a title=\"#part.4-sort-in-java\" href=\"#part.4-sort-in-java\"></a></h2>\n<p>If we want to sort any type of data,we can use interface to simplify the process.</p>\n<h3 id=\"comparable-interface\">Comparable interface<a title=\"#comparable-interface\" href=\"#comparable-interface\"></a></h3>\n<p>Sort using a type’s natural order.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Comparable interface (Built in java)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Item</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Item i)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object Implementation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">X</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"meta\">@Overide</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(X x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Sort Implementaion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> N = x.length();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j&gt;<span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x[j].compareTo(x[j-<span class=\"number\">1</span>])&lt;<span class=\"number\">0</span>) exch(x, j, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Client</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXSorter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        X[] x = &#123;x1,x2,x3&#125;;</span><br><span class=\"line\">        x.sort();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"comparator-interface\">Comparator interface<a title=\"#comparator-interface\" href=\"#comparator-interface\"></a></h3>\n<p>Sort using an alternate order. Required property: Must be a total order.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Key</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Key v, Key w)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>using with our sorting libraries</li>\n</ol>\n<p>・Use <code>Object</code> instead of <code>Comparable</code>.<br>\n・Pass Comparator to sort() and less() and use it in less().</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Object[] a, Comparator comparator)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; less(comparator, a[j], a[j-<span class=\"number\">1</span>]); j--)</span><br><span class=\"line\">     exch(a, j, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparator c, Object v, Object w)</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> c.compare(v, w) &lt; <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">  Object swap = a[i]; </span><br><span class=\"line\">  a[i] = a[j]; </span><br><span class=\"line\">  a[j] = swap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>system sort</li>\n</ol>\n<p>・Create Comparator object.<br>\n・Pass as second argument to Arrays.sort().</p>\n<p>Decouples the definition of the data type from the definition of what it means to compare two objects of that type.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] a;</span><br><span class=\"line\"><span class=\"comment\">// use natural order</span></span><br><span class=\"line\">Arrays.sort(a);</span><br><span class=\"line\"><span class=\"comment\">// Uses alternate order defined by Comparator&lt;String&gt; object.</span></span><br><span class=\"line\">Arrays.sort(a, String.CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\">Arrays.sort(a, Collator.getInstance(<span class=\"keyword\">new</span> Locale(<span class=\"string\">&quot;es&quot;</span>)));</span><br><span class=\"line\">Arrays.sort(a, <span class=\"keyword\">new</span> BritishPhoneBookOrder());</span><br></pre></td></tr></table></figure>\n<p>To implement a comparator:</p>\n<p>・Define a (nested) class that implements the Comparator interface.<br>\n・Implement the compare() method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;Student&gt; BY_NAME = <span class=\"keyword\">new</span> ByName();</span><br><span class=\"line\"> \t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;Student&gt; BY_SECTION = <span class=\"keyword\">new</span> BySection();</span><br><span class=\"line\"> \t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"> \t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> section;</span><br><span class=\"line\"> <span class=\"comment\">/* ... */</span></span><br><span class=\"line\"> \t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ByName</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student v, Student w)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v.name.compareTo(w.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> \t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BySection</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student v, Student w)</span> </span>&#123; </span><br><span class=\"line\">     \t<span class=\"keyword\">return</span> v.section - w.section;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// polar order</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point2D</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Comparator&lt;Point2D&gt; POLAR_ORDER = <span class=\"keyword\">new</span> PolarOrder();</span><br><span class=\"line\"> \t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> x, y;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ccw</span><span class=\"params\">(Point2D a, Point2D b, Point2D c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> area2 = (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (area2 &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// clockwise</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (area2 &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> +<span class=\"number\">1</span>; <span class=\"comment\">// counter-clockwise</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// collinear</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> \t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolarOrder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Point2D</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Point2D q1, Point2D q2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">double</span> dy1 = q1.y - y;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">double</span> dy2 = q2.y - y;</span><br><span class=\"line\">      <span class=\"comment\">// p, q1, q2 are horizontal</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">if</span> (dy1 == <span class=\"number\">0</span> &amp;&amp; dy2 == <span class=\"number\">0</span>) &#123; <span class=\"comment\">/*...*/</span> &#125;</span><br><span class=\"line\">      <span class=\"comment\">// q1 above, q2 below</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dy1 &gt;= <span class=\"number\">0</span> &amp;&amp; dy2 &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"comment\">// q2 above, q1 below</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dy2 &gt;= <span class=\"number\">0</span> &amp;&amp; dy1 &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> +<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"comment\">// both above or below</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -ccw(Point2D.<span class=\"keyword\">this</span>, q1, q2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"system-sorts\">System sorts<a title=\"#system-sorts\" href=\"#system-sorts\"></a></h3>\n<p><code>Arrays.sort()</code></p>\n<p>Has different method for each primitive type and datatypes that implement <code>Comparable</code>.</p>\n<p>Uses tuned quick sort for primitive types and tuned merge sort for objects.</p>\n<h4 id=\"engineering-a-system-sort\">engineering a system sort<a title=\"#engineering-a-system-sort\" href=\"#engineering-a-system-sort\"></a></h4>\n<p>Basic algorithm = quicksort.<br>\n・Cutoff to insertion sort for small subarrays.<br>\n・Partitioning scheme: Bentley-McIlroy 3-way partitioning.<br>\n・Partitioning item.<br>\n– small arrays: middle entry<br>\n– medium arrays: median of 3<br>\n– large arrays: Tukey’s ninther</p>\n<p>Tukey’s ninther :<br>\nMedian of the median of 3 samples, each of 3 entries.<br>\n・Approximates the median of 9.<br>\n・Uses at most 12 compares.</p>\n<p>Better partitioning than random shuffle and less costly.</p>\n<img src=\"/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-25 at 09.51.56.png\" alt=\"Screen Shot 2020-11-25 at 09.51.56\" style=\"zoom:50%;\">\n<h2 id=\"part.5-applications\">Part.5 Applications<a title=\"#part.5-applications\" href=\"#part.5-applications\"></a></h2>\n<p>Sorting algorithms are essential in a broad variety of applications:<br>\n(obvious applications)<br>\n・Sort a list of names.<br>\n・Organize an MP3 library.<br>\n・Display Google PageRank results.<br>\n・List RSS feed in reverse chronological order.</p>\n<p>(problems become easy once items are in sorted order)<br>\n・Find the median.<br>\n・Identify statistical outliers.<br>\n・Binary search in a database.<br>\n・Find duplicates in a mailing list.</p>\n<p>(non-obvious applications)<br>\n・Data compression.<br>\n・Computer graphics.<br>\n・Computational biology.<br>\n・Load balancing on a parallel computer.<br>\n. . .</p>\n<h3 id=\"ⅰ.-shuffle\">Ⅰ. Shuffle<a title=\"#ⅰ.-shuffle\" href=\"#ⅰ.-shuffle\"></a></h3>\n<p>Goal: rearrange array so that result is uniformly random permutation.</p>\n<ol>\n<li>Generate a random real number (uniformly at random) for each array entry and sort the array based on it.</li>\n<li>Knuth Shuffle: In iteration <code>i</code>, pick integer r between <code>0</code> and <code>i</code> uniformly at random and swap a[i] and a[r].</li>\n</ol>\n<h3 id=\"ⅱ.-convex-hull\">Ⅱ. Convex hull<a title=\"#ⅱ.-convex-hull\" href=\"#ⅱ.-convex-hull\"></a></h3>\n<p>Convex hull: a set of N points which is the smallest perimeter fence enclosing the points.<br>\nOutput: Sequence of vertices in counterclockwise order.</p>\n<img src=\"https://i.loli.net/2020/10/18/P5EMAqcuGdSRHU3.png\" alt=\"44\" style=\"zoom: 33%;\">\n<p>Geometric properties:</p>\n<img src=\"https://i.loli.net/2020/10/18/sGPg7WBV3NL4crA.png\" alt=\"33\" style=\"zoom: 40%;\">\n<ol>\n<li>Can traverse the convex hull by making only counterclockwise turns</li>\n<li>The vertices of convex hull appear in increasing order of polar angle with respect to point p with lowest y-coordinate.</li>\n</ol>\n<p>Graham scan:</p>\n<ol>\n<li>Choose point p with smallest y-coordinate.</li>\n<li>Sort points by polar angle with p.</li>\n<li>Consider points in order; discard unless it create a counterclockwise turn.</li>\n</ol>\n<p>Implement of determine whether it’s a counterclockwise turn:<br>\n$ 2 x Area(a,b,c) = (b_x - a_x)(c_y - a_y) - (b_y -  a_y)(c_x - a_x) $<br>\n(Based on: the area of a parallelogram is equal to the cross product of two vectors)<br>\n(v1: ($b_x - a_x$, $b_y -  a_y$), v2:($c_x - a_x$,$c_y - a_y$))</p>\n<img src=\"https://i.loli.net/2020/10/18/qlINrFnUkjJsEoc.png\" alt=\"67\" style=\"zoom:45%;\">\n<p>See more <a href=\"https://algs4.cs.princeton.edu/99hull/\" target=\"_blank\">here</a>.</p>\n<p>Application:</p>\n<ol>\n<li>Robot motion planning.<br>\nFind shortest path in the plane from s to t that avoids a polygonal obstacle.<br>\nShortest path is either straight line from s to t or it is one of two polygonal chains of convex hull.</li>\n<li>Farthest pair problem<br>\nGiven N points in the plane, find a pair of points with the largest Euclidean distance between them.<br>\nFarthest pair of points are extreme points on convex hull.</li>\n</ol>\n","prev":{"title":"Linear List","link":"2020/20200425-Linear-List"},"next":{"title":"Algorithm Basics","link":"2019/20191013-Algorithm-Basics"},"plink":"https://oreodu.github.io/2020/20200102-Sorting/","toc":[{"id":"sorting","title":"Sorting","index":"1","children":[{"id":"part.1-elementary-sort","title":"Part.1 Elementary Sort","index":"1.1"},{"id":"part.2-advanced-sort","title":"Part.2 Advanced Sort","index":"1.2"},{"id":"part.3-sorting-complexity","title":"Part.3 Sorting Complexity","index":"1.3"},{"id":"part.4-sort-in-java","title":"Part.4 Sort in Java","index":"1.4"},{"id":"part.5-applications","title":"Part.5 Applications","index":"1.5"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20200102-Sorting/\" title=\"Sorting\">https://oreodu.github.io/2020/20200102-Sorting/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}