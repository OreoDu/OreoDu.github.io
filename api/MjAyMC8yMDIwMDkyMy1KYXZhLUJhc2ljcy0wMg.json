{"title":"Java Basics 02","date":"2020-09-23T01:30:00.000Z","date_formatted":{"ll":"Sep 23, 2020","L":"09/23/2020","MM-DD":"09-23"},"link":"2020/20200923-Java-Basics-02","comments":true,"tags":["Java"],"categories":["Programming"],"updated":"2020-10-07T02:55:43.570Z","content":"<h1 id=\"java-basics-02\">Java Basics 02<a title=\"#java-basics-02\" href=\"#java-basics-02\"></a></h1>\n<p><strong>· materials:</strong></p>\n<p>· <a href=\"https://sp19.datastructur.es/\" target=\"_blank\">CS61B Spring 2019 at UCB</a></p>\n<p>· <a href=\"https://docs.oracle.com/javase/tutorial/\" target=\"_blank\">Java Tutorial</a></p>\n<p>· <a href=\"https://www.oracle.com/java/technologies/language-environment.html\" target=\"_blank\">The Java Language Environment</a> by <em>James Gosling</em> and <em>Henry McGilton</em></p>\n<p>· Wikipedia</p>\n<p>· <a href=\"https://google.github.io/styleguide/javaguide.html\" target=\"_blank\">Google Java Style Guide</a></p>\n<h1 id=\"part.1-interfaces\">Part.1 Interfaces<a title=\"#part.1-interfaces\" href=\"#part.1-interfaces\"></a></h1>\n<p>A collection of methods with no implementation is called an <em>interface</em>. Methods form the object’s <em>interface</em> with the outside world. The interface is a blueprint of a class and is a mechanism to achieve abstraction.</p>\n<h3 id=\"ⅰ.-defining-an-interface\">Ⅰ. Defining an interface<a title=\"#ⅰ.-defining-an-interface\" href=\"#ⅰ.-defining-an-interface\"></a></h3>\n<p>An <em>interface</em> is a reference type that can contain <em>only</em> constants, abstract methods, default methods, static methods, and nested types <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25.665ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 11050.1 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">note: not including fields</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3A\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"600\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1086\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1447\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3A\" x=\"2191\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2748\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"3348\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"3834\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"4195\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"4541\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"5141\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"5575\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"5873\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"6446\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"6969\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"7315\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"7915\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"8396\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"8946\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"9292\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"9758\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"10057\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"10580\" y=\"0\"/>\n</g>\n</svg>. Method bodies exist only for default methods and static methods.</p>\n<p>Empty interfaces<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16.679ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 7181 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">without methods</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"716\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1062\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"1423\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"2000\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"2485\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"3058\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"3419\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"4298\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"4764\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"5126\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"5702\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"6188\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"6711\" y=\"0\"/>\n</g>\n</svg> can be used as types and to mark classes without requiring any particular method implementations. For an example of a useful empty interface, see <code>java.io.Serializable.</code></p>\n<p>All abstract, default, and static methods in an interface are implicitly <code>public</code> and all constant values defined are implicitly <code>public</code>, <code>static</code>, and <code>final</code>. Interfaces cannot be instantiated—they can only be <em>implemented</em> by classes or <em>extended</em> by other interfaces and they can extend any number of other interfaces.</p>\n<p>Default method: defined in the interface with the keyword <code>defualt</code> and enable you to add new functionality with implementation to the interfaces and ensure binary compatibility with code written for older versions of those interfaces. Implementation class can override the default method.</p>\n<p>For more information about default method <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\" target=\"_blank\">here</a> or <a href=\"https://blog.codefx.org/java/everything-about-default-methods/\" target=\"_blank\">here</a>.</p>\n<p>Static method: defined in the interface with the keyword <code>static</code> and contain the complete definition of the function and cannot be overridden or changed in the implementation class.</p>\n<p>Abstract method: declared without an implementation.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestInterface</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// abstract method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">square</span> <span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// static method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showStatic</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Static Method Executed&quot;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// default method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">showDefault</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Default Method Executed&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">TestInterface</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Implementation of square abstract method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">square</span> <span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; </span><br><span class=\"line\">        System.out.println(a*a); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; </span><br><span class=\"line\">        TestClass d = <span class=\"keyword\">new</span> TestClass(); </span><br><span class=\"line\">        d.square(<span class=\"number\">4</span>);  <span class=\"comment\">// 16</span></span><br><span class=\"line\">        d.showDefault(); <span class=\"comment\">// Default Method Executed</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Static method executed </span></span><br><span class=\"line\">        TestInterface.showStatic(); <span class=\"comment\">// Static Method Executed</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ⅱ.-implementing-an-interface\">Ⅱ. Implementing an Interface<a title=\"#ⅱ.-implementing-an-interface\" href=\"#ⅱ.-implementing-an-interface\"></a></h3>\n<p>To declare a class that implements an interface, we should include an <code>implements</code> clause in the class declaration. The class can implement more than one interface. By convention, the <code>implements</code> clause follows the <code>extends</code> clause, if there is one.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Relatable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this (object calling isLargerThan) and other must be instances of </span></span><br><span class=\"line\">    <span class=\"comment\">// the same class returns 1, 0, -1 if this is greater than, </span></span><br><span class=\"line\">    <span class=\"comment\">// equal to, or less than other</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">isLargerThan</span><span class=\"params\">(Relatable other)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RectanglePlus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Relatable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Point origin;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectanglePlus</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">        origin = <span class=\"keyword\">new</span> Point(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        width = w;</span><br><span class=\"line\">        height = h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectanglePlus</span><span class=\"params\">(Point p, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">        origin = p;</span><br><span class=\"line\">        width = w;</span><br><span class=\"line\">        height = h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// a method for computing the area of the rectangle</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> width * height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// a method required to implement the Relatable interface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">isLargerThan</span><span class=\"params\">(Relatable other)</span> </span>&#123;</span><br><span class=\"line\">        RectanglePlus otherRect = (RectanglePlus)other;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getArea() &lt; otherRect.getArea())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getArea() &gt; otherRect.getArea())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;               </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If we want to be able to compare the size of similar objects instantiated from the class and there is some way to compare the relative “size” of them, the class that instantiates them should and can implement <code>Relatable</code> interface.</p>\n<h3 id=\"ⅲ.-using-an-interface-as-a-type\">Ⅲ. Using an Interface as a Type<a title=\"#ⅲ.-using-an-interface-as-a-type\" href=\"#ⅲ.-using-an-interface-as-a-type\"></a></h3>\n<p>Because interface is a reference data type so we can use the interface name as a data type, However if a reference variable whose type is an interface, any objects assigned to it should be an instance of the class that implements the interface and its value can reference any object that is instantiated from any class that implements the interface. This also means that an object can have multiple types: the type of its own class and the types of all the interfaces that the class implements.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Any objects that are instantiated from a class that implements Relatable.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">findLargest</span><span class=\"params\">(Object object1, Object object2)</span> </span>&#123;</span><br><span class=\"line\">   Relatable obj1 = (Relatable)object1;</span><br><span class=\"line\">   Relatable obj2 = (Relatable)object2;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((obj1).isLargerThan(obj2) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> object1;</span><br><span class=\"line\">   <span class=\"keyword\">else</span> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> object2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When the classes implement <code>Relatable</code>, objects instantiated from those classes can be of both their own class <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"13.009ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 5601 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">or superclass</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"485\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"937\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"1406\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"1979\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"2482\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"2949\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"3400\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"3834\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"4132\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"4662\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"5131\" y=\"0\"/>\n</g>\n</svg> type and a <code>Relatable</code> type. This gives them some of the advantages of multiple inheritance, where they can have behavior from both a superclass and an interface.</p>\n<h3 id=\"ⅳ.-evolving-interfaces\">Ⅳ. Evolving Interfaces<a title=\"#ⅳ.-evolving-interfaces\" href=\"#ⅳ.-evolving-interfaces\"></a></h3>\n<p>Normally, once we finished developing the interface we cannot modify it because all the classes that implemented the interface will break. So try to anticipate all uses for the interface and specify it completely from the beginning. However, you have several other options.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create a DoItPlus interface that extends DoIt</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoItPlus</span> <span class=\"keyword\">extends</span> <span class=\"title\">DoIt</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">didItWork</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> x, String s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// define new methods as default methods or static methods.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoIt</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> x)</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">doSomethingElse</span><span class=\"params\">(String s)</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">didItWork</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> x, String s)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// Method body </span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Users who have classes that implement interfaces enhanced with new default or static methods do not have to modify or recompile them to accommodate the additional methods.</p>\n<h3 id=\"ⅴ.-enhance-the-interface\">Ⅴ. Enhance the interface<a title=\"#ⅴ.-enhance-the-interface\" href=\"#ⅴ.-enhance-the-interface\"></a></h3>\n<p>Interface can be enhanced with default methods, static methods, lambda expressions, and method references to create more expressive library methods whose functionality programmers can quickly deduce by looking at how they are invoked. See more details <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\" target=\"_blank\">here</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StandardDeck</span> <span class=\"keyword\">implements</span> <span class=\"title\">Deck</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Card&gt; entireDeck;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparator&lt;Card&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(entireDeck, c);</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortByRankThenSuit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Card</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Card firstCard, Card secondCard)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> compVal =</span><br><span class=\"line\">            firstCard.getRank().value() - secondCard.getRank().value();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compVal != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> compVal;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> firstCard.getSuit().value() - secondCard.getSuit().value(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">StandardDeck myDeck = <span class=\"keyword\">new</span> StandardDeck();</span><br><span class=\"line\">myDeck.shuffle();</span><br><span class=\"line\">myDeck.sort(<span class=\"keyword\">new</span> SortByRankThenSuit());</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StandardDeck myDeck = <span class=\"keyword\">new</span> StandardDeck();</span><br><span class=\"line\">myDeck.shuffle();</span><br><span class=\"line\">myDeck.sort(</span><br><span class=\"line\">    (firstCard, secondCard) -&gt;</span><br><span class=\"line\">        firstCard.getRank().value() - secondCard.getRank().value()</span><br><span class=\"line\">); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// static method comparing in the Comparator interface</span></span><br><span class=\"line\"><span class=\"comment\">// compares any object that can return a numerical value from a method</span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(Comparator.comparing((card) -&gt; card.getRank()));  </span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(Comparator.comparing(Card::getRank));  </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StandardDeck myDeck = <span class=\"keyword\">new</span> StandardDeck();</span><br><span class=\"line\">myDeck.shuffle();</span><br><span class=\"line\">myDeck.sort(</span><br><span class=\"line\">    (firstCard, secondCard) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> compare =</span><br><span class=\"line\">            firstCard.getRank().value() - secondCard.getRank().value();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compare != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> compare;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> firstCard.getSuit().value() - secondCard.getSuit().value();</span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// the default method thenComparing</span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(</span></span><br><span class=\"line\"><span class=\"comment\">    Comparator</span></span><br><span class=\"line\"><span class=\"comment\">        .comparing(Card::getRank)</span></span><br><span class=\"line\"><span class=\"comment\">        .thenComparing(Comparator.comparing(Card::getSuit)));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">//  the default method reversed      </span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(</span></span><br><span class=\"line\"><span class=\"comment\">    Comparator.comparing(Card::getRank)</span></span><br><span class=\"line\"><span class=\"comment\">        .reversed()</span></span><br><span class=\"line\"><span class=\"comment\">        .thenComparing(Comparator.comparing(Card::getSuit)));</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"part.2-inheritance\">Part.2 Inheritance<a title=\"#part.2-inheritance\" href=\"#part.2-inheritance\"></a></h1>\n<p>Common behavior can be defined in a superclass and <em>inherited</em> into a subclass using the <code>extends</code> keyword. Every class has one and only one direct superclass <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"110.773ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 47693.6 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">[why single inheritance?](https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3A\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6A\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-76\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-49\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-5B\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"278\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"995\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"1571\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"2069\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"2538\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2884\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"3484\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"3965\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"4263\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"4730\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"5075\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"5676\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"6252\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"6719\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"7170\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"7516\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"7877\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"8407\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"9007\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"9441\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3F\" x=\"9907\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-5D\" x=\"10380\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"10658\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"11048\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"11624\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"11986\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"12347\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"12851\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3A\" x=\"13598\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"14154\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"14655\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"15155\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"15679\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"16164\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"16598\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2E\" x=\"17067\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"17512\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"17998\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"18449\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"18979\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"19412\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"19711\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2E\" x=\"20177\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"20622\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"21056\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"21541\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"22420\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6A\" x=\"22920\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"23333\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-76\" x=\"23862\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"24348\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"24877\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"25347\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"25813\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"26314\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"26675\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"27248\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"27609\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"28095\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"28546\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"28892\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"29421\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"29720\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6A\" x=\"30220\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"30633\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-76\" x=\"31162\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"31648\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"32177\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-49\" x=\"32678\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"33182\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"33712\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"34312\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-49\" x=\"34836\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"35340\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"35841\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"36719\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"37292\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"37590\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"37952\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"38297\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"38801\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"39099\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"39566\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"39911\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"40512\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"41088\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"41555\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"42006\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"42352\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"42713\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"43243\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"43843\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"44277\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2E\" x=\"44743\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"45189\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"45765\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"46127\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"47005\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"47304\" y=\"0\"/>\n</g>\n</svg>. In the absence of any other explicit superclass, every class is implicitly a subclass of <code>Object</code>, and each superclass has the potential for an unlimited number of <em>subclasses</em>.</p>\n<p><img src=\"https://i.loli.net/2020/09/24/WegZxS3bOYwk5R4.gif\" alt=\"classes-object\" class=\"φcx\"></p>\n<p><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"20.814ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 8961.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">From Java Tutorials</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-46\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4A\" d=\"M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-76\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-54\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-46\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"749\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"1201\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"1686\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4A\" x=\"2565\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"3198\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-76\" x=\"3728\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"4213\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-54\" x=\"4743\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"5447\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"6020\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"6381\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"6867\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"7318\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"7664\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"8193\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"8492\" y=\"0\"/>\n</g>\n</svg></p>\n<p>A subclass inherits all of the <em>public</em> and <em>protected</em> members<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"34.801ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 14983.8 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">fields, methods, and nested classes</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"550\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"896\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"1362\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"1661\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"2184\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"2654\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"3099\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"3977\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"4444\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"4805\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"5382\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"5867\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"6391\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"6860\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"7305\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"7835\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"8435\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"8959\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"9559\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"10026\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"10495\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"10857\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"11323\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"11847\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"12280\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"12579\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"13108\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"13578\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"14047\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"14514\" y=\"0\"/>\n</g>\n</svg> from its superclass, no matter what package the subclass is in. If the subclass is in the same package as its parent, it also inherits the <em>package-private</em> members of the parent. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.</p>\n<p>A subclass does not inherit the <code>private</code> members of its parent class. However, if the superclass has public or protected methods for accessing its private fields, these can also be used by the subclass. A nested class has access to all the private members of its enclosing class—both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass.</p>\n<h3 id=\"ⅰ.-multiple-inheritance-of-state,-implementation,-and-type\">Ⅰ. Multiple Inheritance of State, Implementation, and Type<a title=\"#ⅰ.-multiple-inheritance-of-state,-implementation,-and-type\" href=\"#ⅰ.-multiple-inheritance-of-state,-implementation,-and-type\"></a></h3>\n<p>Multiple Inheritance of State: the ability to inherit fields from multiple classes, which is not supported by Java because only single inheritance is allowed between and interface don’t have fields.</p>\n<p>Multiple Inheritance of Implementation: the ability to inherit method definitions from multiple classes. In Java, a class can implement more than one interface, which can contain default methods that have the same name. The Java compiler provides some rules to determine which default method a particular class uses.</p>\n<p>Multiple Inheritance of Type: the ability of a class to implement more than one interface. An object can have multiple types: the type of its own class and the types of all the interfaces that the class implements. This is more detailed in Part.1.Ⅲ.</p>\n<h3 id=\"ⅱ.-overriding-and-hiding-methods\">Ⅱ. Overriding and Hiding Methods<a title=\"#ⅱ.-overriding-and-hiding-methods\" href=\"#ⅱ.-overriding-and-hiding-methods\"></a></h3>\n<p>Inherited fields and methods can be used directly. Subclass can declare new fields and methods in the subclass that are not in the superclass.</p>\n<p>Within a class, a field that has the same name as a field in the superclass hides the superclass’s field, even if their types are different.</p>\n<h4 id=\"1）instance-methods\">1）Instance Methods<a title=\"#1）instance-methods\" href=\"#1）instance-methods\"></a></h4>\n<p>An instance method in a subclass with the same signature <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"50.575ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 21775.2 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">name, plus the number and the type of its parameters</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"600\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"1130\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"2008\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"2475\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"2920\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"3423\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"3722\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"4294\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"4764\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"5125\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"5702\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"6168\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"6769\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"7341\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"8220\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"8649\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"9116\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"9567\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"10097\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"10697\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"11221\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"11582\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"12159\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"12625\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"12987\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"13484\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"13988\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"14454\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"14940\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"15490\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"15836\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"16197\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"16667\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"17170\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"17700\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"18151\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"18681\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"19559\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"20026\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"20387\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"20854\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"21305\" y=\"0\"/>\n</g>\n</svg> and return type<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"43.658ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 18797 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">or the subclass of the return type in super class</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"485\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"937\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"1298\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1875\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"2341\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"2811\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"3383\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"3813\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"4246\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"4545\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"5074\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"5544\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"6013\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"6499\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"7049\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"7411\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"7987\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"8454\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"8905\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"9372\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"9733\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"10306\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"10757\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"11358\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"11719\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"12217\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"12720\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"13187\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"13532\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"14133\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"14602\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"15175\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"15678\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"16145\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"16596\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"17030\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"17328\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"17858\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"18327\" y=\"0\"/>\n</g>\n</svg> as an instance method in the superclass <em>overrides</em> the superclass’s method.</p>\n<h4 id=\"2)-static-methods\">2) Static Methods<a title=\"#2)-static-methods\" href=\"#2)-static-methods\"></a></h4>\n<p>If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass <em>hides</em> the one in the superclass.</p>\n<p>The distinction between hiding a static method and overriding an instance method has important implications:</p>\n<ul>\n<li>The version of the overridden instance method that gets invoked is the one in the subclass.</li>\n<li>The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testClassMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The static method in Animal&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInstanceMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The instance method in Animal&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testClassMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The static method in Cat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInstanceMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The instance method in Cat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cat myCat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        Animal myAnimal = myCat;</span><br><span class=\"line\">        Animal.testClassMethod();</span><br><span class=\"line\">        myAnimal.testInstanceMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The static method in Animal</span></span><br><span class=\"line\"><span class=\"comment\">// The instance method in Cat</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3)-interface-methods\">3) Interface Methods<a title=\"#3)-interface-methods\" href=\"#3)-interface-methods\"></a></h4>\n<p>Static methods in interfaces are never inherited.</p>\n<p>Default methods and abstract methods in interfaces are inherited like instance methods. However, when the supertypes of a class or interface provide multiple default methods with the same signature, the Java compiler follows inheritance rules to resolve the name conflict. These rules are driven by the following those principles:</p>\n<ul>\n<li>· If two or more independently defined default methods conflict, or a default method conflicts with an abstract method, then the Java compiler produces a compiler error and we must explicitly override the supertype methods. Instance methods are preferred over interface default methods.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OperateCar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startEngine</span><span class=\"params\">(EncryptedKey key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FlyCar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startEngine</span><span class=\"params\">(EncryptedKey key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyingCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperateCar</span>, <span class=\"title\">FlyCar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startEngine</span><span class=\"params\">(EncryptedKey key)</span> </span>&#123;</span><br><span class=\"line\">        FlyCar.<span class=\"keyword\">super</span>.startEngine(key);</span><br><span class=\"line\">        OperateCar.<span class=\"keyword\">super</span>.startEngine(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>· When supertypes share a common ancestor，methods that are already overridden by other candidates are ignored.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am an animal.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EggLayer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am able to lay eggs.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FireBreather</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dragon</span> <span class=\"keyword\">implements</span> <span class=\"title\">EggLayer</span>, <span class=\"title\">FireBreather</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        Dragon myApp = <span class=\"keyword\">new</span> Dragon();</span><br><span class=\"line\">        System.out.println(myApp.identifyMyself());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// I am able to lay eggs.</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>· Inherited instance methods from classes can override abstract interface methods.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mammal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am a horse.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mustang</span> <span class=\"keyword\">extends</span> <span class=\"title\">Horse</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mammal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        Mustang myApp = <span class=\"keyword\">new</span> Mustang();</span><br><span class=\"line\">        System.out.println(myApp.identifyMyself());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You will get a compile-time error if you attempt to change an instance method in the superclass to a static method in the subclass, and vice versa.</p>\n<p>We could use use the <code>@Override</code> annotation that instructs the compiler that you intend to override a method in the superclass.</p>\n<h3 id=\"ⅲ.-using-the-keyword-super\">Ⅲ. Using the Keyword super<a title=\"#ⅲ.-using-the-keyword-super\" href=\"#ⅲ.-using-the-keyword-super\"></a></h3>\n<h4 id=\"1)-accessing-superclass-members\">1) Accessing Superclass Members<a title=\"#1)-accessing-superclass-members\" href=\"#1)-accessing-superclass-members\"></a></h4>\n<p>We can use the key word <code>super</code> to access the members in the superclass, either a overridden method or hidden field.</p>\n<p><code>super.overriddenMethod();</code></p>\n<h4 id=\"2)-subclass-constructors\">2) Subclass Constructors<a title=\"#2)-subclass-constructors\" href=\"#2)-subclass-constructors\"></a></h4>\n<p>We can also use the <code>super</code> keyword to invoke a superclass’s constructor and invocation of a superclass constructor must be the first line in the subclass constructor.</p>\n<p><code>super(parameter list);</code></p>\n<p><em>Constructor chaining</em>: If a subclass constructor invokes a constructor of its superclass, there will be a whole chain of constructors called, all the way back to the constructor of <code>Object</code>.</p>\n<h3 id=\"ⅳ.-object-class\">Ⅳ. <code>Object</code> Class<a title=\"#ⅳ.-object-class\" href=\"#ⅳ.-object-class\"></a></h3>\n<p>The <code>Object</code> class, in the <code>java.lang</code> package, sits at the top of the class hierarchy tree. Every class is a descendant, direct or indirect, of the <code>Object</code> class. Every class you use or write inherits the instance methods of <code>Object</code>.</p>\n<p>Some methods inherited from <code>Object</code> :</p>\n<ul>\n<li>\n<p><code>protected Object clone() throws CloneNotSupportedException</code></p>\n<p>Creates and returns a copy of this object.</p>\n</li>\n<li>\n<p><code>public boolean equals(Object obj)</code></p>\n<p>Indicates whether some other object is “equal to” this one.</p>\n</li>\n<li>\n<p><code>protected void finalize() throws Throwable</code></p>\n<p>Called by the garbage collector on an object when garbage</p>\n<p>collection determines that there are no more references to the object</p>\n</li>\n<li>\n<p><code>public final Class getClass()</code></p>\n<p>Returns the runtime class of an object.</p>\n</li>\n<li>\n<p><code>public int hashCode()</code></p>\n<p>Returns a hash code value for the object.</p>\n</li>\n<li>\n<p><code>public String toString()</code></p>\n<p>Returns a string representation of the object.</p>\n</li>\n</ul>\n<p>The <code>notify</code>, <code>notifyAll</code>, and <code>wait</code> methods of <code>Object</code> all play a part in synchronizing the activities of independently running threads in a program. There are five of these methods:</p>\n<ul>\n<li>\n<p><code>public final void notify()</code></p>\n</li>\n<li>\n<p><code>public final void notifyAll()</code></p>\n</li>\n<li>\n<p><code>public final void wait()</code></p>\n</li>\n<li>\n<p><code>public final void wait(long timeout)</code></p>\n</li>\n<li>\n<p><code>public final void wait(long timeout, int nanos)</code></p>\n<p>See more details about the method <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\">here</a> .</p>\n</li>\n</ul>\n<h3 id=\"ⅴ.-final-and-abstract\">Ⅴ. <code>final</code> and <code>abstract</code><a title=\"#ⅴ.-final-and-abstract\" href=\"#ⅴ.-final-and-abstract\"></a></h3>\n<h4 id=\"1）final\">1）Final<a title=\"#1）final\" href=\"#1）final\"></a></h4>\n<p>If it has an implementation that should not be changed and it is critical to the consistent state of the object, we use the <code>final</code> keyword in a method declaration to indicate that the method cannot be overridden by subclasses.</p>\n<p>Methods called from constructors should generally be declared final. If a constructor calls a non-final method, a subclass may redefine that method with surprising or undesirable results.</p>\n<p>We can also declare an entire class final. A class that is declared final cannot be subclassed. This is particularly useful, for example, when creating an immutable class like the <code>String</code> class.</p>\n<h4 id=\"2)-abstract\">2) Abstract<a title=\"#2)-abstract\" href=\"#2)-abstract\"></a></h4>\n<p>An <em>abstract class</em> is a class that is declared <code>abstract</code>—it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed. When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared <code>abstract</code>.</p>\n<p>An <em>abstract method</em> is a method that is declared without an implementation <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"41.907ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 18043.2 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">without braces, and followed by a semicolon</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"716\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1062\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"1423\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"2000\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"2485\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"3058\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"3419\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"3849\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"4300\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"4830\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"5263\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"5730\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"6199\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"6644\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"7174\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"7774\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"8298\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"8848\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"9334\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"9632\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"9931\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"10416\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"11133\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"11599\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"12123\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"12552\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"13050\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"13579\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"14049\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"14515\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"15394\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"15739\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"16173\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"16658\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"16957\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"17442\" y=\"0\"/>\n</g>\n</svg>. If a class includes abstract methods, then the class itself <em>must</em> be declared <code>abstract</code>.</p>\n<p>Difference between the abstract class and interface: Abstract class can declare fields that are not static and final and define public, protected, and private concrete methods .But we can extend only one class. See more details <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html\" target=\"_blank\">here</a>.</p>\n<p>A class that implements an interface must implement <em>all</em> of the interface’s methods. It is possible, however, to define a class that does not implement all of the interface’s methods, provided that the class is declared to be <code>abstract</code>.</p>\n<h3 id=\"ⅵ.-casting-objects\">Ⅵ. Casting Objects<a title=\"#ⅵ.-casting-objects\" href=\"#ⅵ.-casting-objects\"></a></h3>\n<p>Normally, an object is of the data type of the class from which it was instantiated.</p>\n<p><em>Casting</em> shows the use of an object of one type in place of another type, among the objects permitted by inheritance and implementations.</p>\n<p>Implicit casting: <code>Object obj = new MountainBike();</code> Explicit casting: <code>MountainBike myBike = (MountainBike)obj;</code></p>\n<h1 id=\"part.3-annotation\">Part.3 Annotation<a title=\"#part.3-annotation\" href=\"#part.3-annotation\"></a></h1>\n<p><em>Annotations</em>, a form of metadata, provide data about a program that has no direct effect on the operation of the code they annotate. Annotations can be applied to any <em>type use</em>.</p>\n<p>The use of annotations: · Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings. · Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth. · Runtime processing — Some annotations are available to be examined at runtime.</p>\n<p>The annotation type can be one of the types that are defined in the <code>java.lang</code> or <code>java.lang.annotation</code> packages of the Java SE API or custom annotation types.</p>\n<p>See predefined annotation types and annotations that apply to other annotations <a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html\" target=\"_blank\">here</a>.</p>\n<h3 id=\"ⅰ.-declaring-an-annotation-type\">Ⅰ. Declaring an Annotation Type<a title=\"#ⅰ.-declaring-an-annotation-type\" href=\"#ⅰ.-declaring-an-annotation-type\"></a></h3>\n<p>Annotation types are a form of <em>interface</em>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> ClassPreamble &#123;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">author</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">date</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">currentRevision</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 1</span>;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">lastModified</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;N/A&quot;</span>;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">lastModifiedBy</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;N/A&quot;</span>;</span><br><span class=\"line\">   <span class=\"comment\">// Note use of array</span></span><br><span class=\"line\">   String[] reviewers();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// make the information in @ClassPreamble appear in Javadoc-generated documentation</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@ClassPreamble</span> (</span><br><span class=\"line\">   author = <span class=\"string\">&quot;John Doe&quot;</span>,</span><br><span class=\"line\">   date = <span class=\"string\">&quot;3/17/2002&quot;</span>,</span><br><span class=\"line\">   currentRevision = <span class=\"number\">6</span>,</span><br><span class=\"line\">   lastModified = <span class=\"string\">&quot;4/12/2004&quot;</span>,</span><br><span class=\"line\">   lastModifiedBy = <span class=\"string\">&quot;Jane Doe&quot;</span>,</span><br><span class=\"line\">   <span class=\"comment\">// Note array notation</span></span><br><span class=\"line\">   reviewers = &#123;<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Cindy&quot;</span>&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generation3List</span> <span class=\"keyword\">extends</span> <span class=\"title\">Generation2List</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class code goes here</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ⅱ.-apply-the-annotations\">Ⅱ. Apply the annotations<a title=\"#ⅱ.-apply-the-annotations\" href=\"#ⅱ.-apply-the-annotations\"></a></h3>\n<p>Annotations can be applied to declarations <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"67.824ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 29202 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">declarations of classes, fields, methods, and other program elements</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"523\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"990\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"1423\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"1722\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"2251\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"2703\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"3232\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"3594\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"3939\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"4425\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"5025\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"5495\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"5980\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"6531\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"6964\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"7263\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"7792\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"8262\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"8731\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"9198\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"9667\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"10112\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"10663\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"11008\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"11475\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"11773\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"12297\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"12766\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"13211\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"14090\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"14556\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"14918\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"15494\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"15980\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"16503\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"16973\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"17418\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"17948\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"18548\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"19072\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"19557\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"19919\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"20495\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"20962\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"21413\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"21917\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"22368\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"22854\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"23334\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"23786\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"24315\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"25194\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"25660\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"25959\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"26425\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"27304\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"27770\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"28371\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"28732\" y=\"0\"/>\n</g>\n</svg> and any <em>type use</em> <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"15.629ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 6729 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">type annotation</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"361\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"859\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1362\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"1829\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2358\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2959\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"3559\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"4045\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"4406\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"4936\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"5297\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"5643\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"6128\" y=\"0\"/>\n</g>\n</svg> as follows : · class instance creation expression ： <code>new @Interned MyObject();</code> · type cast： <code>myString = (@NonNull String) str;</code> · <code>implements</code> clause： <code>class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; &#123; ... &#125;</code> · thrown exception declaration： <code>void monitorTemperature() throws @Critical TemperatureException &#123; ... &#125;</code>). · …</p>\n<p>Type annotations were created to support improved analysis of Java programs way of ensuring stronger type checking. The Java SE 8 release does not provide a type checking framework, but it allows you to write <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"11.845ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 5100 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">or download</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"485\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"937\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"1460\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"1946\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2662\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"3263\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"3561\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"4047\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"4576\" y=\"0\"/>\n</g>\n</svg> a type checking framework that is implemented as one or more pluggable modules that are used in conjunction with the Java compiler.</p>\n<p>For more information about the framework provided by third parties, see the <a href=\"http://types.cs.washington.edu/checker-framework/\" target=\"_blank\">Checker Framework</a> created by the University of Washington.</p>\n<h3 id=\"ⅲ.-repeating-annotations\">Ⅲ. Repeating Annotations<a title=\"#ⅲ.-repeating-annotations\" href=\"#ⅲ.-repeating-annotations\"></a></h3>\n<p><em>Repeating annotations</em> enable you to apply the same annotation to a declaration or type use.</p>\n<p>For compatibility reasons, repeating annotations are stored in a <em>container annotation</em> that is automatically generated by the Java compiler.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Schedule(dayOfMonth=&quot;last&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Schedule(dayOfWeek=&quot;Fri&quot;, hour=&quot;23&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPeriodicCleanup</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1)-declare-a-repeatable-annotation\">1) Declare a Repeatable Annotation<a title=\"#1)-declare-a-repeatable-annotation\" href=\"#1)-declare-a-repeatable-annotation\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Repeatable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Repeatable(Schedules.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Schedule &#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">dayOfMonth</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;first&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">dayOfWeek</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;Mon&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hour</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 12</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The value of the <code>@Repeatable</code> meta-annotation, in parentheses, is the type of the container annotation that the Java compiler generates to store repeating annotations. In this example, the containing annotation type is <code>Schedules</code>, so repeating <code>@Schedule</code> annotations is stored in an <code>@Schedules</code> annotation.</p>\n<h4 id=\"2)-declare-the-containing-annotation-type\">2) Declare the Containing Annotation Type<a title=\"#2)-declare-the-containing-annotation-type\" href=\"#2)-declare-the-containing-annotation-type\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Schedules &#123;</span><br><span class=\"line\">    Schedule[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>See the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html\" target=\"_blank\">AnnotatedElement</a> class specification for information on all of the available methods to retrieve annotations.</p>\n<h1 id=\"part.4-numbers-and-strings\">Part.4 Numbers and Strings<a title=\"#part.4-numbers-and-strings\" href=\"#part.4-numbers-and-strings\"></a></h1>\n<h3 id=\"ⅰ.-numbers\">Ⅰ. Numbers<a title=\"#ⅰ.-numbers\" href=\"#ⅰ.-numbers\"></a></h3>\n<h4 id=\"1）numbers-classes\">1）Numbers classes<a title=\"#1）numbers-classes\" href=\"#1）numbers-classes\"></a></h4>\n<p>The Java platform provides <em>wrapper</em> classes for each of the primitive data types. The Java compiler automatically wraps <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.629ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 2423.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">boxes</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"429\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-78\" x=\"915\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1487\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"1954\" y=\"0\"/>\n</g>\n</svg> primitives for you when necessary and unboxes them, again when necessary. All of the numeric wrapper classes are subclasses of the abstract class <code>Number</code>:</p>\n<p><img src=\"https://i.loli.net/2020/09/26/aRLIWc4fjeoBviJ.png\" alt=\"11\" class=\"φcx\"></p>\n<p><code>BigDecimal</code> and <code>BigInteger</code> are used for high-precision calculations. <code>AtomicInteger</code> and <code>AtomicLong</code> are used for multi-threaded applications.</p>\n<p>There are three reasons that you might use a <code>Number</code> object rather than a primitive: <a href=\"http://1.As\">1.As</a> an argument of a method that expects an object <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"52.225ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 22485.5 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">often used when manipulating collections of numbers</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"485\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1036\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1397\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1864\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"2464\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"3037\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"3506\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"3973\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"4496\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"5213\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"5789\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"6256\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"6856\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"7735\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"8264\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"8865\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"9210\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"9714\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"10286\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"10585\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"11114\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"11476\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"11821\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"12422\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"12902\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"13336\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"13821\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"14120\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"14418\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"14885\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"15318\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"15680\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"16025\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"16511\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"17111\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"17581\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"18066\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"18617\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"19217\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"19790\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"20668\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"21098\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"21564\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"22016\" y=\"0\"/>\n</g>\n</svg>. <a href=\"http://2.To\">2.To</a> use constants defined by the class, such as <code>MIN_VALUE</code> and <code>MAX_VALUE</code>, that provide the upper and lower bounds of the data type. <a href=\"http://3.To\">3.To</a> use class methods for converting values to and from other primitive types, for converting to and from strings, and for converting between number systems <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"35.754ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 15394 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">decimal, octal, hexadecimal, binary</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"523\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"990\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"1423\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"1769\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"2647\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"3177\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"3475\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"3920\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"4406\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"4839\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"5201\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"5730\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"6029\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"6474\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"7050\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-78\" x=\"7517\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"8089\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"8619\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"9142\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"9609\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"10042\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"10388\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"11266\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"11796\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"12094\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"12539\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"12969\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"13314\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"13915\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"14444\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"14896\" y=\"0\"/>\n</g>\n</svg>.</p>\n<p>The instance methods that all the subclasses of the <code>Number</code> class implement: <a href=\"https://docs.oracle.com/javase/tutorial/java/data/numberclasses.html\" target=\"_blank\">here</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">byte</span> <span class=\"title\">byteValue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Byte anotherByte)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Return true if they have the same type and with the same numeric value)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">&#x27;12.1&#x27;</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">&#x27;13.2&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> a = (Float.valueOf(s1)).floatValue(); </span><br><span class=\"line\"><span class=\"keyword\">float</span> b = Float.parseFloat(s2);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;a + b =  &quot;</span> + (a + b));  <span class=\"comment\">// --&gt; 25.3</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">858.48</span>;</span><br><span class=\"line\">String s = Double.toString(d);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">String s1 = <span class=\"string\">&quot;&quot;</span> + i;</span><br><span class=\"line\">String s2 = String.valueOf(i);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2)-formatting-numeric-print-output\">2) Formatting Numeric Print Output<a title=\"#2)-formatting-numeric-print-output\" href=\"#2)-formatting-numeric-print-output\"></a></h4>\n<p><strong>· The printf and format Methods</strong></p>\n<p>The <code>java.io</code> package includes a <code>PrintStream</code> class that has two formatting methods <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"45.849ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 19740.7 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">`format` and `printf`, equivalent to one another</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2018\" d=\"M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-71\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-76\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"278\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"829\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"1314\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"1766\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"2644\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"3174\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"3535\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"3814\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"4343\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"4944\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"5467\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"5746\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"6249\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"6701\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"7046\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"7647\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"8008\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"8559\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"8837\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"9282\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-71\" x=\"9749\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"10209\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"10782\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-76\" x=\"11127\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"11613\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"12142\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"12441\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"12907\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"13508\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"13869\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"14231\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"14716\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"15202\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"15802\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"16269\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"16798\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"17399\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"17884\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"18246\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"18822\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"19289\" y=\"0\"/>\n</g>\n</svg> that you can use to replace <code>print</code> and <code>println</code>. The familiar <code>System.out</code> is a <code>PrintStream</code> object, so we can invoke <code>PrintStream</code> methods on <code>System.out</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFormat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">long</span> n = <span class=\"number\">461012</span>;</span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%08d%n&quot;</span>, n);    <span class=\"comment\">//  --&gt;  &quot;00461012&quot;</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%+,8d%n%n&quot;</span>, n); <span class=\"comment\">//  --&gt;  &quot;+461,012&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">double</span> pi = Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%f%n&quot;</span>, pi);       <span class=\"comment\">// --&gt;  &quot;3.141593&quot;</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%.3f%n&quot;</span>, pi);     <span class=\"comment\">// --&gt;  &quot;3.142&quot;</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%10.3f%n&quot;</span>, pi);   <span class=\"comment\">// --&gt;  &quot;     3.142&quot;</span></span><br><span class=\"line\">      System.out.format(Locale.FRANCE,</span><br><span class=\"line\">                        <span class=\"string\">&quot;%-10.4f%n%n&quot;</span>, pi); <span class=\"comment\">// --&gt;  &quot;3,1416&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Calendar c = Calendar.getInstance();</span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%tB %te, %tY%n&quot;</span>, c, c, c); <span class=\"comment\">// --&gt;  &quot;May 29, 2006&quot;</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%tl:%tM %tp%n&quot;</span>, c, c, c);  <span class=\"comment\">// --&gt;  &quot;2:34 am&quot;</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">&quot;%tD%n&quot;</span>, c);    <span class=\"comment\">// --&gt;  &quot;05/29/06&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Format specifiers begin with a percent sign <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"0\" height=\"0.343ex\" style=\"vertical-align: -0.171ex;\" viewbox=\"0 -73.8 0 147.5\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">%</title>\n<defs aria-hidden=\"true\"/>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\"/>\n</svg> and end with a <em>converter</em>. The converter is a character indicating the type of argument to be formatted. In between the percent sign <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"0\" height=\"0.343ex\" style=\"vertical-align: -0.171ex;\" viewbox=\"0 -73.8 0 147.5\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">%</title>\n<defs aria-hidden=\"true\"/>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\"/>\n</svg> and the converter you can have optional flags and specifiers. There are many converters, flags, and specifiers, which are documented in <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html\" target=\"_blank\">java.util.Formatter</a> or <a href=\"https://docs.oracle.com/javase/tutorial/java/data/numberformat.html\" target=\"_blank\">here</a>.</p>\n<p><strong>· The DecimalFormat Class</strong></p>\n<p>You can use the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html\" target=\"_blank\">java.text.DecimalFormat</a> class to control the display of leading and trailing zeros, prefixes and suffixes, grouping <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.657ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 4588.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">thousands</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"361\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"938\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"1423\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"1996\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"2465\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2995\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"3595\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"4119\" y=\"0\"/>\n</g>\n</svg> separators, and the decimal separator.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecimalFormatDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customFormat</span><span class=\"params\">(String pattern, <span class=\"keyword\">double</span> value )</span> </span>&#123;</span><br><span class=\"line\">      DecimalFormat myFormatter = <span class=\"keyword\">new</span> DecimalFormat(pattern);</span><br><span class=\"line\">      String output = myFormatter.format(value);</span><br><span class=\"line\">      System.out.println(value + <span class=\"string\">&quot;  &quot;</span> + pattern + <span class=\"string\">&quot;  &quot;</span> + output);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      customFormat(<span class=\"string\">&quot;000000.000&quot;</span>, <span class=\"number\">123.78</span>);</span><br><span class=\"line\">      customFormat(<span class=\"string\">&quot;$###,###.##&quot;</span>, <span class=\"number\">1212345.679</span>);  <span class=\"comment\">// 1212345.679 $###,###.## $1212,345.67</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3)-beyond-basic-arithmetic\">3) Beyond Basic Arithmetic<a title=\"#3)-beyond-basic-arithmetic\" href=\"#3)-beyond-basic-arithmetic\"></a></h4>\n<p>The <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html\" target=\"_blank\">Math</a> class in the <code>java.lang</code> package provides methods and constants for doing more advanced mathematical computation. The methods in the <code>Math</code> class are all static, so you call them directly from the class.</p>\n<p>· Constants and Basic Methods</p>\n<p><code>Math.E</code>, <code>Math.PI</code></p>\n<p><code>type abs(type t)</code>, <code>type ceil(type t)</code>, <code>type floor(type t)</code>, <code>type rint(type t)</code>, <code>int round(float t)</code>, <code>type min(type t1, type t2)</code>, <code>type max(type t1, type t2)</code>,</p>\n<p>· Exponential and Logarithmic Methods</p>\n<p><code>double exp(double d)</code>, <code>double log(double d)</code>, <code>double pow(double base, double exponent)</code>, <code>double sqrt(double d)</code>,</p>\n<p>· Trigonometric Methods</p>\n<p><code>double sin(double d)</code>, …</p>\n<p>· Random Numbers</p>\n<p>The <code>random()</code> method returns a pseudo-randomly selected number \\(0.0 &lt;= Math.random\\(\\) &lt; 1.0).</p>\n<p>Using <code>Math.random</code> works well when you need to generate a single random number. If you need to generate a series of random numbers, you should create an instance of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Random.html\" target=\"_blank\"><code>java.util.Random</code></a> and invoke methods on that object to generate numbers.</p>\n<h3 id=\"ⅱ.-characters\">Ⅱ. Characters<a title=\"#ⅱ.-characters\" href=\"#ⅱ.-characters\"></a></h3>\n<p>When we use a char as an object—for example, as a method argument where an object is expected. The Java programming language provides a <em>wrapper</em> class that “wraps” the <code>char</code> in a <code>Character</code> object.</p>\n<p><code>Character ch = new Character('a');</code></p>\n<p>For the methods in this class, refer to the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html\" target=\"_blank\">java.lang.Character</a> API specification.</p>\n<p><code>boolean isLetter(char ch)</code>, <code>boolean isDigit(char ch)</code>, <code>boolean isUpperCase(char ch)</code>, …</p>\n<p>· Escape Sequences</p>\n<p>A character preceded by a backslash () is an <em>escape sequence</em> and has special meaning to the compiler.</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">Escape Sequence</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>\\t</code></td>\n<td style=\"text-align:left\">Insert a tab in the text at this point.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>\\b</code></td>\n<td style=\"text-align:left\">Insert a backspace in the text at this point.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>\\n</code></td>\n<td style=\"text-align:left\">Insert a newline in the text at this point.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>\\f</code></td>\n<td style=\"text-align:left\">Insert a formfeed in the text at this point.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>\\\\</code></td>\n<td style=\"text-align:left\">Insert a backslash character in the text at this point.</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"ⅲ.-string\">Ⅲ. String<a title=\"#ⅲ.-string\" href=\"#ⅲ.-string\"></a></h3>\n<p>Strings are a sequence of characters. The Java platform provides the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\" target=\"_blank\">String</a> class to create and manipulate strings. Whenever it encounters a string literal in your code, the compiler creates a <code>String</code> object with its value. The <code>String</code> class is immutable, so that once it is created a <code>String</code> object cannot be changed.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String greeting = <span class=\"string\">&quot;Hello world!&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span>[] helloArray = &#123; <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span> &#125;;</span><br><span class=\"line\">String helloString = <span class=\"keyword\">new</span> String(helloArray);</span><br></pre></td></tr></table></figure>\n<p>The <code>String</code> class has a number of methods:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String palindrome = <span class=\"string\">&quot;Dot saw I was Tod&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = palindrome.length(); <span class=\"comment\">// --&gt; 17</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c = palindrome.charAt(<span class=\"number\">2</span>); <span class=\"comment\">// --&gt; &#x27;t&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// convert a string, or a portion of a string, into an array of characters </span></span><br><span class=\"line\"><span class=\"keyword\">char</span>[] ca = palindrome.getChars(<span class=\"number\">0</span>, len, tempCharArray, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">String s = <span class=\"string\">&quot;My name is &quot;</span>.concat(<span class=\"string\">&quot;Rumplestiltskin&quot;</span>); <span class=\"comment\">// My name is Rumplestiltskin</span></span><br><span class=\"line\"><span class=\"comment\">// Breaking strings between lines using the + concatenation operator</span></span><br><span class=\"line\">String quote = </span><br><span class=\"line\">    <span class=\"string\">&quot;Now is the time for all good &quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;men to come to the aid of their country.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String fs;</span><br><span class=\"line\"><span class=\"comment\">// return a String object</span></span><br><span class=\"line\">fs = String.format(<span class=\"string\">&quot;The value of the float variable is %f&quot;</span>,floatVar);</span><br><span class=\"line\">System.out.println(fs);</span><br><span class=\"line\"><span class=\"comment\">// return a PrintStream object</span></span><br><span class=\"line\">System.out.printf(<span class=\"string\">&quot;The value of the float variable is %f&quot;</span>,floatVar);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1)-manipulating-characters-in-a-string\">1) Manipulating Characters in a String<a title=\"#1)-manipulating-characters-in-a-string\" href=\"#1)-manipulating-characters-in-a-string\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the elemment in the string</span></span><br><span class=\"line\">String anotherPalindrome = <span class=\"string\">&quot;Niagara. O roar again!&quot;</span>; </span><br><span class=\"line\"><span class=\"keyword\">char</span> aChar = anotherPalindrome.charAt(<span class=\"number\">9</span>);  <span class=\"comment\">// O</span></span><br><span class=\"line\">String roar = anotherPalindrome.substring(<span class=\"number\">11</span>, <span class=\"number\">15</span>)  <span class=\"comment\">// roar</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Searches for a match as specified by the string argument and splits this string into an array of strings accordingly.</span></span><br><span class=\"line\">String[] split(String regex, <span class=\"keyword\">int</span> limit)</span><br><span class=\"line\"><span class=\"comment\">// Returns a new character sequence</span></span><br><span class=\"line\"><span class=\"function\">CharSequence <span class=\"title\">subSequence</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex, <span class=\"keyword\">int</span> endIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Returns a copy of this string with leading and trailing white space removed.</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">trim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">toLowerCase</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">toUpperCase</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Search forward from the begainning</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"keyword\">int</span> ch, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Search backward form the ending </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"keyword\">int</span> ch, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// CharSequence is an interface that is implemented by the String class.   </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Therefore, we can use a string as an argument for the contains() method.</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(CharSequence s)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2)-comparing-strings-and-portions-of-strings\">2) Comparing Strings and Portions of Strings<a title=\"#2)-comparing-strings-and-portions-of-strings\" href=\"#2)-comparing-strings-and-portions-of-strings\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix, <span class=\"keyword\">int</span> offset)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">endsWith</span><span class=\"params\">(String suffix)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"keyword\">int</span> compareToIgnoreCase(String str)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Returns true if and only if the argument is a String object </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// that represents the same sequence of characters</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equalsIgnoreCase</span><span class=\"params\">(String anotherString)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">regionMatches</span><span class=\"params\">(<span class=\"keyword\">int</span> toffset, String other, <span class=\"keyword\">int</span> ooffset, <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">regionMatches</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ignoreCase, <span class=\"keyword\">int</span> toffset, String other, <span class=\"keyword\">int</span> ooffset, <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3)-the-stringbuilder-class\">3) The <code>StringBuilder</code> Class<a title=\"#3)-the-stringbuilder-class\" href=\"#3)-the-stringbuilder-class\"></a></h4>\n<p><code>StringBuilder</code> objects are like String objects, except that they can be modified. We hardly use it unless it has the advantages over the String objects, like when we concatenate a large number of strings.</p>\n<p>For more details <a href=\"https://docs.oracle.com/javase/tutorial/java/data/buffers.html\" target=\"_blank\">here</a>.</p>\n<p>There is also a <code>StringBuffer</code> class that is <em>exactly</em> the same as the <code>StringBuilder</code> class, except that it is thread-safe by virtue of having its methods synchronized.</p>\n<h3 id=\"ⅳ.-autoboxing-and-unboxing\">Ⅳ. Autoboxing and Unboxing<a title=\"#ⅳ.-autoboxing-and-unboxing\" href=\"#ⅳ.-autoboxing-and-unboxing\"></a></h3>\n<p><em>Autoboxing</em> is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. If the conversion goes the other way, this is called <em>unboxing</em>.</p>\n<p>The Java compiler applies autoboxing when a primitive value is:</p>\n<ul>\n<li>Passed as a parameter to a method that expects an object of the corresponding wrapper class.</li>\n<li>Assigned to a variable of the corresponding wrapper class.</li>\n</ul>\n<p>The Java compiler applies unboxing when an object of a wrapper class is:</p>\n<ul>\n<li>Passed as a parameter to a method that expects a value of the corresponding primitive type.</li>\n<li>Assigned to a variable of the corresponding primitive type.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; s = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">s.push(<span class=\"number\">17</span>); <span class=\"comment\">// s.push(Integer.valueOf(17));</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = s.pop(); <span class=\"comment\">// int a = s.pop().intValue();</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"part.5-generics\">Part.5 Generics<a title=\"#part.5-generics\" href=\"#part.5-generics\"></a></h1>\n<p>Generics enable <em>types</em> to be parameters when defining classes, interfaces and methods. Type parameters provide a way for you to re-use the same code with different inputs.</p>\n<p>The benefits of code that use generics: · Stronger type checks at compile time. · Elimination of casts · Enabling programmers to implement generic algorithms.</p>\n<h3 id=\"ⅰ.-generic-types\">Ⅰ. Generic Types<a title=\"#ⅰ.-generic-types\" href=\"#ⅰ.-generic-types\"></a></h3>\n<p>A <em>generic type</em> is a generic class or interface that is parameterized over types.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A generic sclass</span></span><br><span class=\"line\"><span class=\"comment\">// angle brackets (&lt;&gt;) specifies the type parameters (also called type variables) </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span>&lt;<span class=\"title\">T1</span>, <span class=\"title\">T2</span>, ..., <span class=\"title\">Tn</span>&gt; </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>A type variable can be any <strong>non-primitive</strong> type you specify: any class type, any interface type, any array type, or even another type variable.</p>\n<h4 id=\"1)-type-parameter-naming-conventions\">1) Type Parameter Naming Conventions<a title=\"#1)-type-parameter-naming-conventions\" href=\"#1)-type-parameter-naming-conventions\"></a></h4>\n<p>By convention, type parameter names are single, uppercase letters. The most commonly used type parameter names are: · E - Element <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"50.697ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 21828 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">used extensively by the Java Collections Framework</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-76\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4A\" d=\"M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-43\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-46\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"572\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1042\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"1508\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"2032\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-78\" x=\"2498\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"3071\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"3432\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"3899\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"4499\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"4969\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-76\" x=\"5314\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"5800\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"6266\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"6565\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"7062\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"7492\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"7989\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"8351\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"8927\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4A\" x=\"9394\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"10027\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-76\" x=\"10557\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"11042\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"11572\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"12332\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"12818\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"13116\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"13415\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"13881\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"14315\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"14676\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"15022\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"15507\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"16108\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-46\" x=\"16577\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"17327\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"17778\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"18308\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"19186\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"19653\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"20369\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"20855\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6B\" x=\"21306\" y=\"0\"/>\n</g>\n</svg> · K - Key · N - Number · T - Type · V - Value · S,U,V etc. - 2nd, 3rd, 4th types</p>\n<h4 id=\"2)-invoking-and-instantiating-a-generic-type\">2) Invoking and Instantiating a Generic Type<a title=\"#2)-invoking-and-instantiating-a-generic-type\" href=\"#2)-invoking-and-instantiating-a-generic-type\"></a></h4>\n<p>To reference the generic class we must perform a <em>generic type invocation</em>, which replaces <code>T</code> with some concrete value(use reference type), such as <code>Integer</code>. To instantiate this class, use the <code>new</code> keyword.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T is the type parameter and Integer is the type arguement.</span></span><br><span class=\"line\">Name&lt;Integer&gt; integerClass = <span class=\"keyword\">new</span> Name&lt;Integer&gt;();</span><br><span class=\"line\">Name&lt;Integer&gt; integerClass = <span class=\"keyword\">new</span> Name&lt;&gt;();</span><br><span class=\"line\">Name&lt;String, Integer&gt; pairClass = <span class=\"keyword\">new</span> Name&lt;&gt;(<span class=\"string\">&quot;Even&quot;</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">//substitute a type parameter with a parameterized type (i.e., List&lt;String&gt;)</span></span><br><span class=\"line\">Name&lt;String, List&lt;String&gt;&gt; p = <span class=\"keyword\">new</span> Name&lt;&gt;(<span class=\"string\">&quot;primes&quot;</span>, <span class=\"keyword\">new</span> List&lt;String&gt;(...));</span><br></pre></td></tr></table></figure>\n<p>One provides type arguments in order to create a parameterized type.</p>\n<h4 id=\"3)-raw-types\">3) Raw Types<a title=\"#3)-raw-types\" href=\"#3)-raw-types\"></a></h4>\n<p>A <em>raw type</em> is the name of a generic class or interface without any type arguments. Assigning a parameterized type to its raw type is allowed, but assigning a raw type to a parameterized type or using a raw type to invoke generic method will get warning. The warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, it’s better avoiding using raw types.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a parameterized type of Name&lt;T&gt; with arguement.</span></span><br><span class=\"line\">Name&lt;Integer&gt; integerClass = <span class=\"keyword\">new</span> Name&lt;Integer&gt;();</span><br><span class=\"line\"><span class=\"comment\">// a raw type without actual arguements</span></span><br><span class=\"line\">Name rawName = <span class=\"keyword\">new</span> Name();</span><br></pre></td></tr></table></figure>\n<h4 id=\"4)-generic-methods\">4) Generic Methods<a title=\"#4)-generic-methods\" href=\"#4)-generic-methods\"></a></h4>\n<p><em>Generic methods</em> are methods that introduce their own type parameters. This is similar to declaring a generic type, but the type parameter’s scope is limited to the method where it is declared. Static and non-static generic methods are allowed, as well as generic class constructors.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;K, V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">compare</span><span class=\"params\">(Pair&lt;K, V&gt; p1, Pair&lt;K, V&gt; p2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp;</span><br><span class=\"line\">               p1.getValue().equals(p2.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pair&lt;Integer, String&gt; p1 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">1</span>, <span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">Pair&lt;Integer, String&gt; p2 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">2</span>, <span class=\"string\">&quot;pear&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> same = Util.&lt;Integer, String&gt;compare(p1, p2);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5)-bounded-type-parameters\">5) Bounded Type Parameters<a title=\"#5)-bounded-type-parameters\" href=\"#5)-bounded-type-parameters\"></a></h4>\n<p>When we want to restrict the types that can be used as type arguments in a parameterized type, we can use <em>bounded type parameters</em>. To declare a bounded type parameter, list the type parameter’s name, followed by the <code>extends</code> keyword, followed by its <em>upper bound</em>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countGreaterThan</span><span class=\"params\">(T[] anArray, T elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T e : anArray)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.compareTo(elem) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In addition to limiting the types you can use to instantiate a generic type, bounded type parameters allow you to invoke methods defined in the bounds.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NaturalNumber</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NaturalNumber</span><span class=\"params\">(T n)</span>  </span>&#123; <span class=\"keyword\">this</span>.n = n; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEven</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n.intValue() % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A type parameter can have <em>multiple bounds</em>. A type variable with multiple bounds is a subtype of all the types listed in the bound. If one of the bounds is a class, it must be specified first.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> &lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> &amp; <span class=\"title\">B</span> &amp; <span class=\"title\">C</span>&gt; </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6)-inheritance-and-subtypes\">6) Inheritance and Subtypes<a title=\"#6)-inheritance-and-subtypes\" href=\"#6)-inheritance-and-subtypes\"></a></h4>\n<p><code>Name&lt;A&gt;</code> has no relationship to <code>Name&lt;B&gt;</code> even when class A is the parents of class B. The common parent of <code>Name&lt;A&gt;</code> and <code>Name&lt;B&gt;</code> is <code>Object</code>.</p>\n<p>We can subtype a generic class or interface by extending or implementing it. The relationship between the type parameters of one class or interface and the type parameters of another are determined by the <code>extends</code> and <code>implements</code> clauses.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PayloadList</span>&lt;<span class=\"title\">E</span>,<span class=\"title\">P</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPayload</span><span class=\"params\">(<span class=\"keyword\">int</span> index, P val)</span></span>;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The following parameterizations of <code>PayloadList</code> are subtypes of <code>List&lt;String&gt;</code>: <code>PayloadList&lt;String,String&gt;</code>, <code>PayloadList&lt;String,Integer&gt;</code>, <code>PayloadList&lt;String,Exception&gt;</code></p>\n<h4 id=\"7)-type-inference\">7) Type Inference<a title=\"#7)-type-inference\" href=\"#7)-type-inference\"></a></h4>\n<p><em>Type inference</em> is a Java compiler’s ability to look at each method invocation and corresponding declaration to determine the types of the arguments and, if available, the type that the result is being assigned, or returned.</p>\n<p>Type inference enables us to invoke a generic method without specifying a type between angle brackets. Java compiler can infer the type parameters of a generic method call.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBox</span><span class=\"params\">(U u, java.util.List&lt;Box&lt;U&gt;&gt; boxes)</span> </span>&#123;</span><br><span class=\"line\">    Box&lt;U&gt; box = <span class=\"keyword\">new</span> Box&lt;&gt;();</span><br><span class=\"line\">    box.set(u);</span><br><span class=\"line\">    boxes.add(box);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">java.util.ArrayList&lt;Box&lt;Integer&gt;&gt; listOfIntegerBoxes = <span class=\"keyword\">new</span> java.util.ArrayList&lt;&gt;();</span><br><span class=\"line\">BoxDemo.&lt;Integer&gt;addBox(Integer.valueOf(<span class=\"number\">10</span>), listOfIntegerBoxes);</span><br><span class=\"line\">BoxDemo.addBox(Integer.valueOf(<span class=\"number\">20</span>), listOfIntegerBoxes);</span><br></pre></td></tr></table></figure>\n<p>We can replace the type arguments required to invoke the constructor of a generic class with an empty set of type parameters <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.91ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 2114 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">`&lt;&gt;`</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2018\" d=\"M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"0\" y=\"0\"/>\n<g transform=\"translate(278,0)\">\n <use xlink:href=\"#E1-MJMAIN-3C\"/>\n <use xlink:href=\"#E1-MJMAIN-3E\" x=\"778\" y=\"0\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"1835\" y=\"0\"/>\n</g>\n</svg> as long as the compiler can infer the type arguments from the context.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>Constructors can be generic in both generic and non-generic classes. The compiler infers the type <code>Integer</code> for the formal type parameter, <code>X</code>, of the generic class <code>MyClass&lt;X&gt;</code>. It infers the type <code>String</code> for the formal type parameter, <code>T</code>, of the constructor of this generic class.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>&lt;<span class=\"title\">X</span>&gt; </span>&#123;</span><br><span class=\"line\">  &lt;T&gt; MyClass(T t) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass&lt;Integer&gt; myObject = <span class=\"keyword\">new</span> MyClass&lt;&gt;(<span class=\"string\">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>The <em>target type</em> of an expression is the data type that the Java compiler expects depending on where the expression appears.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">emptyList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// Expect an instance of List&lt;String&gt;, so this data type is the target type.</span></span><br><span class=\"line\">List&lt;String&gt; listOne = Collections.emptyList();</span><br><span class=\"line\"><span class=\"comment\">// Or use a type witness and specify the value of T.</span></span><br><span class=\"line\">List&lt;String&gt; listOne = Collections.&lt;String&gt;emptyList();</span><br></pre></td></tr></table></figure>\n<p>Inference algorithm uses only invocation arguments, target types, and possibly an obvious expected return type to infer types.</p>\n<h3 id=\"ⅱ.-wildcards\">Ⅱ. Wildcards<a title=\"#ⅱ.-wildcards\" href=\"#ⅱ.-wildcards\"></a></h3>\n<p>In generic code, the question mark <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.391ex\" height=\"2.009ex\" style=\"vertical-align: -0.171ex;\" viewbox=\"0 -791.3 1029.5 865.1\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">`?`</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2018\" d=\"M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3F\" x=\"278\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"751\" y=\"0\"/>\n</g>\n</svg>, called the <em>wildcard</em>, represents an unknown type. The wildcard can be used in a variety of situations: as the type of a parameter, field, or local variable; sometimes as a return type. The wildcard is never used as a type argument for a generic method invocation, a generic class instance creation, or a supertype.</p>\n<h4 id=\"1)-bounded-wildcards\">1) Bounded Wildcards<a title=\"#1)-bounded-wildcards\" href=\"#1)-bounded-wildcards\"></a></h4>\n<p>You can use an upper bounded wildcard to relax the restrictions on a variable.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// matches a list of type Number or any of its subclasses.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">sumOfList</span><span class=\"params\">(List&lt;? extends Number&gt; list)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> s = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Number n : list)</span><br><span class=\"line\">        s += n.doubleValue();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;Double&gt; ld = Arrays.asList(<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">3.5</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;sum = &quot;</span> + sumOfList(ld)); <span class=\"comment\">// 7.0</span></span><br></pre></td></tr></table></figure>\n","prev":{"title":"Strings","link":"2020/20200924-Strings"},"next":{"title":"Java Basics 01","link":"2020/20200917-Java-Basics-01"},"plink":"https://oreodu.github.io/2020/20200923-Java-Basics-02/","toc":[{"id":"java-basics-02","title":"Java Basics 02","index":"1"},{"id":"part.1-interfaces","title":"Part.1 Interfaces","index":"2"},{"id":"part.2-inheritance","title":"Part.2 Inheritance","index":"3"},{"id":"part.3-annotation","title":"Part.3 Annotation","index":"4"},{"id":"part.4-numbers-and-strings","title":"Part.4 Numbers and Strings","index":"5"},{"id":"part.5-generics","title":"Part.5 Generics","index":"6"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20200923-Java-Basics-02/\" title=\"Java Basics 02\">https://oreodu.github.io/2020/20200923-Java-Basics-02/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}