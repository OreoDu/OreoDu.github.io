{"title":"Associative array","date":"2020-12-02T15:29:25.000Z","date_formatted":{"ll":"Dec 2, 2020","L":"12/02/2020","MM-DD":"12-02"},"link":"2020/20201202-Associative-arrays","comments":true,"tags":["Data Structure","binary search tree"],"categories":["Data Structure"],"updated":"2020-12-12T06:11:44.320Z","content":"<h1 id=\"associative-array\">Associative array<a title=\"#associative-array\" href=\"#associative-array\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>\n· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>\n· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>\n· <a href=\"https://sp19.datastructur.es/\" target=\"_blank\">CS61B Spring 2019 at UCB</a><br>\n· <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\">Algorithms, Part I,Ⅱ by Princeton University</a><br>\n· Wikipedia</p>\n<p>In many applications, we have to associative a value with a key.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gljwlvpo2yj30ui0c8tem.jpg\" alt=\"Screen Shot 2020-12-11 at 14.33.22\" style=\"zoom: 50%;\">\n<p>The associative array (map, symbol table, or dictionary) is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. The client can insert key-value pairs into the symbol table and search for the value associated with a given key later.</p>\n<h2 id=\"part.1-api\">Part.1 API<a title=\"#part.1-api\" href=\"#part.1-api\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SymbolTable</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">SymbolTable</span>()                // <span class=\"title\">create</span> <span class=\"title\">a</span> <span class=\"title\">symbol</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">put</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>, <span class=\"title\">Value</span> <span class=\"title\">val</span>) // <span class=\"title\">put</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pair</span> <span class=\"title\">into</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">delete</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)         // <span class=\"title\">remove</span> <span class=\"title\">key</span>(<span class=\"title\">and</span> <span class=\"title\">its</span> <span class=\"title\">value</span>) <span class=\"title\">from</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">get</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)            // <span class=\"title\">get</span> <span class=\"title\">the</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span> (<span class=\"title\">null</span> <span class=\"title\">if</span> <span class=\"title\">key</span> <span class=\"title\">is</span> <span class=\"title\">absent</span>)</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">contains</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)    // <span class=\"title\">whether</span> <span class=\"title\">it</span> <span class=\"title\">contains</span> <span class=\"title\">a</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">isEmpty</span>()            // <span class=\"title\">whether</span> <span class=\"title\">table</span> <span class=\"title\">is</span> <span class=\"title\">empty</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">int</span> <span class=\"title\">size</span>()                   // <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pairs</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Iterable</span>&lt;<span class=\"title\">key</span>&gt; <span class=\"title\">keys</span>()         // <span class=\"title\">all</span> <span class=\"title\">the</span> <span class=\"title\">keys</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br></pre></td></tr></table></figure>\n<p>As for ordered symbol tables where keys are <code>Comparable</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SymbolTable</span>&lt;<span class=\"title\">Key</span>&lt;<span class=\"keyword\">extends</span> <span class=\"title\">COmparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt;, <span class=\"title\">Value</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">SymbolTable</span>()                // <span class=\"title\">create</span> <span class=\"title\">a</span> <span class=\"title\">symbol</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">put</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>, <span class=\"title\">Value</span> <span class=\"title\">val</span>) // <span class=\"title\">put</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pair</span> <span class=\"title\">into</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">delete</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)         // <span class=\"title\">remove</span> <span class=\"title\">key</span>(<span class=\"title\">and</span> <span class=\"title\">its</span> <span class=\"title\">value</span>) <span class=\"title\">from</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">get</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)            // <span class=\"title\">get</span> <span class=\"title\">the</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span> (<span class=\"title\">null</span> <span class=\"title\">if</span> <span class=\"title\">key</span> <span class=\"title\">is</span> <span class=\"title\">absent</span>)</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">contains</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)    // <span class=\"title\">whether</span> <span class=\"title\">it</span> <span class=\"title\">contains</span> <span class=\"title\">a</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">isEmpty</span>()            // <span class=\"title\">whether</span> <span class=\"title\">table</span> <span class=\"title\">is</span> <span class=\"title\">empty</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">int</span> <span class=\"title\">size</span>()                   // <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pairs</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">min</span>()                    // <span class=\"title\">smallest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">max</span>()                    // <span class=\"title\">largest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">floor</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)           // <span class=\"title\">the</span> <span class=\"title\">largest</span> <span class=\"title\">key</span> <span class=\"title\">which</span> <span class=\"title\">is</span> <span class=\"title\">smaller</span> <span class=\"title\">than</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">ceiling</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)         // <span class=\"title\">the</span> <span class=\"title\">smallest</span> <span class=\"title\">key</span> <span class=\"title\">which</span> <span class=\"title\">is</span> <span class=\"title\">gretaer</span> <span class=\"title\">than</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">int</span> <span class=\"title\">rank</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)            // <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">keys</span> <span class=\"title\">that</span> <span class=\"title\">is</span> <span class=\"title\">less</span> <span class=\"title\">than</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">select</span>(<span class=\"title\">int</span> <span class=\"title\">k</span>)            // <span class=\"title\">key</span> <span class=\"title\">of</span> <span class=\"title\">rank</span> <span class=\"title\">k</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">deleteMin</span>()             // <span class=\"title\">delete</span> <span class=\"title\">the</span> <span class=\"title\">smallest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">deleteMax</span>()             // <span class=\"title\">delete</span> <span class=\"title\">the</span> <span class=\"title\">largest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\">  int size(Key lo, Key hi)     // number of keys in[lo...hi]</span><br><span class=\"line\">  <span class=\"function\">Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span>  <span class=\"comment\">// keys in [lo...hi] with sorted order</span></span></span><br><span class=\"line\"><span class=\"function\">  Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span>         <span class=\"comment\">// all keys in the table with sorted order</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Client example</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrequencyCounter</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FrequencyCounter</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> distinct = <span class=\"number\">0</span>, words = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minlen = Integer.parseInt(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        ST&lt;String, Integer&gt; st = <span class=\"keyword\">new</span> ST&lt;String, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// compute frequency counts</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class=\"line\">            String key = StdIn.readString();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.length() &lt; minlen) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            words++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st.contains(key)) &#123;</span><br><span class=\"line\">                st.put(key, st.get(key) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                st.put(key, <span class=\"number\">1</span>);</span><br><span class=\"line\">                distinct++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// find a key with the highest frequency count</span></span><br><span class=\"line\">        String max = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        st.put(max, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String word : st.keys()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st.get(word) &gt; st.get(max))</span><br><span class=\"line\">                max = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        StdOut.println(max + <span class=\"string\">&quot; &quot;</span> + st.get(max));</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">&quot;distinct = &quot;</span> + distinct);</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">&quot;words    = &quot;</span> + words);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"part.2-implementations\">Part.2 Implementations<a title=\"#part.2-implementations\" href=\"#part.2-implementations\"></a></h2>\n<h3 id=\"sequential-search-in-an-unordered-linked-list.\">Sequential search in an unordered linked list.<a title=\"#sequential-search-in-an-unordered-linked-list.\" href=\"#sequential-search-in-an-unordered-linked-list.\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"part.3-applications\">Part.3 Applications<a title=\"#part.3-applications\" href=\"#part.3-applications\"></a></h2>\n","prev":{"title":"Heap","link":"2020/2020-12-09-Heap"},"next":{"title":"Priority Queue","link":"2020/20201202-Priority-Queues"},"plink":"https://oreodu.github.io/2020/20201202-Associative-arrays/","toc":[{"id":"associative-array","title":"Associative array","index":"1","children":[{"id":"part.1-api","title":"Part.1 API","index":"1.1"},{"id":"part.2-implementations","title":"Part.2 Implementations","index":"1.2"},{"id":"part.3-applications","title":"Part.3 Applications","index":"1.3"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201202-Associative-arrays/\" title=\"Associative array\">https://oreodu.github.io/2020/20201202-Associative-arrays/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}