{"title":"Associative array","date":"2020-12-02T15:29:25.000Z","date_formatted":{"ll":"Dec 2, 2020","L":"12/02/2020","MM-DD":"12-02"},"link":"2020/20201202-Associative-arrays","comments":true,"tags":["Data Structure","binary search tree"],"categories":["Data Structure"],"updated":"2020-12-23T10:26:26.049Z","content":"<h1 id=\"associative-array\">Associative array<a title=\"#associative-array\" href=\"#associative-array\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>\n· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>\n· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>\n· <a href=\"https://sp19.datastructur.es/\" target=\"_blank\">CS61B Spring 2019 at UCB</a><br>\n· <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\">Algorithms, Part I,Ⅱ by Princeton University</a><br>\n· Wikipedia</p>\n<p>In many applications, we have to associative a value with a key.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gljwlvpo2yj30ui0c8tem.jpg\" alt=\"Screen Shot 2020-12-11 at 14.33.22\" style=\"zoom: 50%;\">\n<p>The associative array (map, symbol table, or dictionary) is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. The client can insert key-value pairs into the symbol table and search for the value associated with a given key later.</p>\n<h2 id=\"part.1-api\">Part.1 API<a title=\"#part.1-api\" href=\"#part.1-api\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SymbolTable</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">SymbolTable</span>()                // <span class=\"title\">create</span> <span class=\"title\">a</span> <span class=\"title\">symbol</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">put</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>, <span class=\"title\">Value</span> <span class=\"title\">val</span>) // <span class=\"title\">put</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pair</span> <span class=\"title\">into</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">delete</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)         // <span class=\"title\">remove</span> <span class=\"title\">key</span>(<span class=\"title\">and</span> <span class=\"title\">its</span> <span class=\"title\">value</span>) <span class=\"title\">from</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">get</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)            // <span class=\"title\">get</span> <span class=\"title\">the</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span> (<span class=\"title\">null</span> <span class=\"title\">if</span> <span class=\"title\">key</span> <span class=\"title\">is</span> <span class=\"title\">absent</span>)</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">contains</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)    // <span class=\"title\">whether</span> <span class=\"title\">it</span> <span class=\"title\">contains</span> <span class=\"title\">a</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">isEmpty</span>()            // <span class=\"title\">whether</span> <span class=\"title\">table</span> <span class=\"title\">is</span> <span class=\"title\">empty</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">int</span> <span class=\"title\">size</span>()                   // <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pairs</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Iterable</span>&lt;<span class=\"title\">key</span>&gt; <span class=\"title\">keys</span>()         // <span class=\"title\">all</span> <span class=\"title\">the</span> <span class=\"title\">keys</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br></pre></td></tr></table></figure>\n<p>As for ordered symbol tables where keys are <code>Comparable</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SymbolTable</span>&lt;<span class=\"title\">Key</span>&lt;<span class=\"keyword\">extends</span> <span class=\"title\">COmparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt;, <span class=\"title\">Value</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">SymbolTable</span>()                // <span class=\"title\">create</span> <span class=\"title\">a</span> <span class=\"title\">symbol</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">put</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>, <span class=\"title\">Value</span> <span class=\"title\">val</span>) // <span class=\"title\">put</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pair</span> <span class=\"title\">into</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">delete</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)         // <span class=\"title\">remove</span> <span class=\"title\">key</span>(<span class=\"title\">and</span> <span class=\"title\">its</span> <span class=\"title\">value</span>) <span class=\"title\">from</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">get</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)            // <span class=\"title\">get</span> <span class=\"title\">the</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span> (<span class=\"title\">null</span> <span class=\"title\">if</span> <span class=\"title\">key</span> <span class=\"title\">is</span> <span class=\"title\">absent</span>)</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">contains</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)    // <span class=\"title\">whether</span> <span class=\"title\">it</span> <span class=\"title\">contains</span> <span class=\"title\">a</span> <span class=\"title\">value</span> <span class=\"title\">paired</span> <span class=\"title\">with</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">boolean</span> <span class=\"title\">isEmpty</span>()            // <span class=\"title\">whether</span> <span class=\"title\">table</span> <span class=\"title\">is</span> <span class=\"title\">empty</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">int</span> <span class=\"title\">size</span>()                   // <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">key</span>-<span class=\"title\">value</span> <span class=\"title\">pairs</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">min</span>()                    // <span class=\"title\">smallest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">max</span>()                    // <span class=\"title\">largest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">floor</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)           // <span class=\"title\">the</span> <span class=\"title\">largest</span> <span class=\"title\">key</span> <span class=\"title\">which</span> <span class=\"title\">is</span> <span class=\"title\">smaller</span> <span class=\"title\">than</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">ceiling</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)         // <span class=\"title\">the</span> <span class=\"title\">smallest</span> <span class=\"title\">key</span> <span class=\"title\">which</span> <span class=\"title\">is</span> <span class=\"title\">gretaer</span> <span class=\"title\">than</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">int</span> <span class=\"title\">rank</span>(<span class=\"title\">Key</span> <span class=\"title\">key</span>)            // <span class=\"title\">number</span> <span class=\"title\">of</span> <span class=\"title\">keys</span> <span class=\"title\">that</span> <span class=\"title\">is</span> <span class=\"title\">strictly</span> <span class=\"title\">less</span> <span class=\"title\">than</span> <span class=\"title\">the</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Key</span> <span class=\"title\">select</span>(<span class=\"title\">int</span> <span class=\"title\">k</span>)            // <span class=\"title\">key</span> <span class=\"title\">of</span> <span class=\"title\">rank</span> <span class=\"title\">k</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">deleteMin</span>()             // <span class=\"title\">delete</span> <span class=\"title\">the</span> <span class=\"title\">smallest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">void</span> <span class=\"title\">deleteMax</span>()             // <span class=\"title\">delete</span> <span class=\"title\">the</span> <span class=\"title\">largest</span> <span class=\"title\">key</span></span></span><br><span class=\"line\">  int size(Key lo, Key hi)     // number of keys in[lo...hi]</span><br><span class=\"line\">  <span class=\"function\">Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span>  <span class=\"comment\">// keys in [lo...hi] with sorted order</span></span></span><br><span class=\"line\"><span class=\"function\">  Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span>         <span class=\"comment\">// all keys in the table with sorted order</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Client example</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrequencyCounter</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FrequencyCounter</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> distinct = <span class=\"number\">0</span>, words = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minlen = Integer.parseInt(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        ST&lt;String, Integer&gt; st = <span class=\"keyword\">new</span> ST&lt;String, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// compute frequency counts</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class=\"line\">            String key = StdIn.readString();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.length() &lt; minlen) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            words++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st.contains(key)) &#123;</span><br><span class=\"line\">                st.put(key, st.get(key) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                st.put(key, <span class=\"number\">1</span>);</span><br><span class=\"line\">                distinct++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// find a key with the highest frequency count</span></span><br><span class=\"line\">        String max = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        st.put(max, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String word : st.keys()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st.get(word) &gt; st.get(max))</span><br><span class=\"line\">                max = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        StdOut.println(max + <span class=\"string\">&quot; &quot;</span> + st.get(max));</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">&quot;distinct = &quot;</span> + distinct);</span><br><span class=\"line\">        StdOut.println(<span class=\"string\">&quot;words    = &quot;</span> + words);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"part.2-implementations\">Part.2 Implementations<a title=\"#part.2-implementations\" href=\"#part.2-implementations\"></a></h2>\n<h3 id=\"sequential-search-in-an-unordered-linked-list.\">Sequential search in an unordered linked list.<a title=\"#sequential-search-in-an-unordered-linked-list.\" href=\"#sequential-search-in-an-unordered-linked-list.\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequentialSearchST</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node first;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Key key;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value val;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value val, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SequentialSearchST</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;arguement to contains() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to get() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.equals(x.key)) <span class=\"keyword\">return</span> x.val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to put() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            delete(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.equals(x.key)) &#123;</span><br><span class=\"line\">                x.val = val;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        first = <span class=\"keyword\">new</span> Node(key, val, first);</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Arguement to delete() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key.equals(first.key)) first = first.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node x = first; x.next != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.equals(x.next.key)) &#123;</span><br><span class=\"line\">                x.next = x.next.next;</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; queue = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node x = first; x != <span class=\"keyword\">null</span>; x = x.next)</span><br><span class=\"line\">            queue.add(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SequentialSearchST&lt;String, Integer&gt; st = <span class=\"keyword\">new</span> SequentialSearchST&lt;String, Integer&gt;();</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;w&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;e&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        st.delete(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        System.out.println(st.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : st.keys()) &#123;</span><br><span class=\"line\">            System.out.println(s + <span class=\"string\">&quot; &quot;</span> + st.get(s));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Unsuccessful search and insert in an (unordered) linked-list symbol table both use N compares, and successful search uses N compares in the worst case.</p>\n<p>In particular, inserting N keys into an initially empty linked-list symbol table uses ~N^2/2 compares.</p>\n<h3 id=\"binary-search-in-an-ordered-array\">Binary search in an ordered array<a title=\"#binary-search-in-an-ordered-array\" href=\"#binary-search-in-an-ordered-array\"></a></h3>\n<p>The underlying data structure is two parallel array, with the keys kept in order.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearchST</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INIT_CAPACITY = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Key[] keys;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Value[] vals;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinarySearchST</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(INIT_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinarySearchST</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        keys = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity];</span><br><span class=\"line\">        vals = (Value[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> capacity &gt;= n;</span><br><span class=\"line\">        Key[] tempk = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity];</span><br><span class=\"line\">        Value[] tempv = (Value[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            tempk[i] = keys[i];</span><br><span class=\"line\">            tempv[i] = vals[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vals = tempv;</span><br><span class=\"line\">        keys = tempk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to contains() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to get() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; n &amp;&amp; keys[i].compareTo(key) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> vals[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to rank() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>, hi = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lo &lt;= hi) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid  = (lo + hi) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) hi = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to put() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            delete(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; n &amp;&amp; keys[i].compareTo(key) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            vals[i] = val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == keys.length) resize(<span class=\"number\">2</span> * keys.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n; j &gt; i; j--) &#123;</span><br><span class=\"line\">            keys[j] = keys[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            vals[j] = vals[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        keys[i] = key;</span><br><span class=\"line\">        vals[i] = val;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to delete is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == n || keys[i].compareTo(key) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            keys[j] = keys[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            vals[j] = vals[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        n--;</span><br><span class=\"line\">        keys[n] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        keys[n] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span> &amp;&amp; n == keys.length / <span class=\"number\">4</span>) resize(keys.length / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;Symbol table underflow error&quot;</span>);</span><br><span class=\"line\">        delete(min());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;Symbol table underflow error&quot;</span>);</span><br><span class=\"line\">        delete(max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     *  Ordered symbol table methods.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;called max() with empty symbol table&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;called min() with empty symbol table&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span> || k &gt;= size()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;called select() with invalid argument: &quot;</span> + k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys[k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to floor() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> keys[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> keys[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = rank(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == n) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> keys[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to size() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;decond argument to size() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo.compareTo(hi) &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contains(hi)) <span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> rank(hi) - rank(lo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys(min(), max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to keys() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;second argument to keys() is null&quot;</span>);</span><br><span class=\"line\">        Queue&lt;Key&gt; queue = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo.compareTo(hi) &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = rank(lo); i &lt; rank(hi); i++) queue.add(keys[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contains(hi)) queue.add(keys[rank(hi)]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     *  Check internal invariants.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSorted() &amp;&amp; rankCheck();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSorted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; size(); i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keys[i].compareTo(keys[i-<span class=\"number\">1</span>]) &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">rankCheck</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != rank(select(i))) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keys[i].compareTo(select(rank(keys[i]))) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BinarySearchST&lt;String, Integer&gt; st = <span class=\"keyword\">new</span> BinarySearchST&lt;&gt;();</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;w&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;e&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;y&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;q&quot;</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;o&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;k&quot;</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;p&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;rank: &quot;</span> + st.rank(<span class=\"string\">&quot;h&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;select: &quot;</span> + st.select(<span class=\"number\">2</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;floor: &quot;</span> + st.floor(<span class=\"string\">&quot;m&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Ceiling: &quot;</span> + st.ceiling(<span class=\"string\">&quot;k&quot;</span>));</span><br><span class=\"line\">        st.delete(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">        st.deleteMin();</span><br><span class=\"line\">        st.deleteMax();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s: st.keys(<span class=\"string\">&quot;i&quot;</span>,<span class=\"string\">&quot;z&quot;</span>)) &#123;</span><br><span class=\"line\">            System.out.println(s + <span class=\"string\">&quot; &quot;</span> + st.get(s));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Inserting a new key into an ordered array uses ~ 2N array accesses in the worst case, so inserting N keys into an initially empty table uses ~ N^2 array accesses in the worst case.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gls6tyaqnlj30hm0iyq48.jpg\" alt=\"Screen Shot 2020-12-18 at 18.28.25\" style=\"zoom:50%;\">\n<h3 id=\"binary-search-trees\">Binary search trees<a title=\"#binary-search-trees\" href=\"#binary-search-trees\"></a></h3>\n<p>See more details about binary search tree <a href=\"https://oreodu.github.io/2020/20201005-Tree\" target=\"_blank\">here</a>.</p>\n<p>We implement the symbol-table in  a way that combines the flexibility of insertion in linked lists with the efficiency of search in an ordered array.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> DataStructure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BST</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Key key;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value val;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node left, right;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">// number of nodes in subtree</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value val, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BST</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to contains() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;calls get() with a null key&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;calls to put() with a null key&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            delete(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root = put(root, key, val);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, val, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) x.left = put(x.left, key, val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) x.right = put(x.right, key, val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  x.val = val;</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.left) + size(x.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;BST unberflow&quot;</span>);</span><br><span class=\"line\">        root = deleteMin(root);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">        x.left = deleteMin(x.left);</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.left) + size(x.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;BST underflow&quot;</span>);</span><br><span class=\"line\">        root = deleteMax(root);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">        x.right = deleteMax(x.right);</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.left) + size(x.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;calls delete() with a null key&quot;</span>);</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) x.right = delete(x.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) x.left = delete(x.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            Node t = x;</span><br><span class=\"line\">            x = min(t.right);</span><br><span class=\"line\">            x.right = deleteMin(t.right);</span><br><span class=\"line\">            x.left = t.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.right) + size(x.left);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls min() with empty BST&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls max() with empty BTS&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to floor is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls to floor with empty BST&quot;</span>);</span><br><span class=\"line\">        Node x = floor(root, key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;argument to floor() is too small&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x,Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> floor(x.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node t = floor(x.right, key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor2</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        Key x = floor2(root, key, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;argument to floor() is too small&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor2</span><span class=\"params\">(Node x, Key key, Key best)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> best;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> floor2(x.left, key, best);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> floor2(x.right, key, x.key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls to ceiling() with empty BTS&quot;</span>);</span><br><span class=\"line\">        Node x = ceiling(root, key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;argument to floor() is too large&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ceiling(x.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node t = ceiling(x.left, key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> rank)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rank &lt; <span class=\"number\">0</span> || rank &gt;= size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to select() is invaild: &quot;</span> + rank);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> select(root, rank);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Key <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> rank)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftsize = size(x.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftsize &gt; rank) <span class=\"keyword\">return</span> select(x.left, rank);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (leftsize &lt; rank) <span class=\"keyword\">return</span> select(x.right, rank - leftsize - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to rank() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rank(key, root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key, Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> rank(key, x.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> + size(x.left) + rank(key, x.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> size(x.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;Key&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys(min(), max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to keys() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;second argument to keys() is null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Queue&lt;Key&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        keys(root, queue, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span><span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmplo = lo.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmphi = hi.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmplo &lt; <span class=\"number\">0</span>) keys(x.left, queue, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmplo &lt;= <span class=\"number\">0</span> &amp;&amp; cmphi &gt;= <span class=\"number\">0</span>) queue.add(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmphi &gt; <span class=\"number\">0</span>) keys(x.right, queue, lo, hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to size() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;second argument to size() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo.compareTo(hi) &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contains(hi)) <span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> rank(hi) - rank(lo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> height(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + Math.max(height(x.left), height(x.right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">levelorder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> LinkedList&lt;Key&gt;();</span><br><span class=\"line\">        Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;Node&gt;();</span><br><span class=\"line\">        queue.offer(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty()) &#123;</span><br><span class=\"line\">            Node x = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            keys.offer(x.key);</span><br><span class=\"line\">            queue.offer(x.left);</span><br><span class=\"line\">            queue.offer(x.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isBST()) System.out.println(<span class=\"string\">&quot;Not in symmetric order!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSizeConsistent()) System.out.println(<span class=\"string\">&quot;Subtree counts not consistent!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRankConsistent()) System.out.println(<span class=\"string\">&quot;Ranks not consistent&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isBST() &amp;&amp; isSizeConsistent() &amp;&amp; isRankConsistent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBST</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> isBST(root, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBST</span><span class=\"params\">(Node x, Key min, Key max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min != <span class=\"keyword\">null</span> &amp;&amp; x.key.compareTo(min) &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max != <span class=\"keyword\">null</span> &amp;&amp; x.key.compareTo(max) &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isBST(x.left, min, x.key) &amp;&amp; isBST(x.right, x.key, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSizeConsistent</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> isSizeConsistent(root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSizeConsistent</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.size != size(x.left) + size(x.right) + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSizeConsistent(x.left) &amp;&amp; isSizeConsistent(x.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRankConsistent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != rank(select(i))) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Key key : keys())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.compareTo(select(rank(key))) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BST&lt;String, Integer&gt; st = <span class=\"keyword\">new</span> BST&lt;&gt;();</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;J&quot;</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;S&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;K&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;L&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;Q&quot;</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;M&quot;</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The height of the tree is :&quot;</span> + st.height());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The Ceiling of the key C is :&quot;</span> + st.ceiling(<span class=\"string\">&quot;C&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The floor of the key N is :&quot;</span> + st.floor(<span class=\"string\">&quot;N&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The rank of the key J is :&quot;</span> + st.rank(<span class=\"string\">&quot;J&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Select :&quot;</span> + st.select(<span class=\"number\">4</span>));</span><br><span class=\"line\">        st.deleteMax();</span><br><span class=\"line\">        st.deleteMin();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s: st.keys()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Key:&quot;</span> + s + <span class=\"string\">&quot;, Value&quot;</span> + st.get(s));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s: st.levelorder()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Key:&quot;</span> + s + <span class=\"string\">&quot;, Value&quot;</span> + st.get(s));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"part.3-applications\">Part.3 Applications<a title=\"#part.3-applications\" href=\"#part.3-applications\"></a></h2>\n","prev":{"title":"Heap","link":"2020/2020-12-09-Heap"},"next":{"title":"Priority Queue","link":"2020/20201202-Priority-Queues"},"plink":"https://oreodu.github.io/2020/20201202-Associative-arrays/","toc":[{"id":"associative-array","title":"Associative array","index":"1","children":[{"id":"part.1-api","title":"Part.1 API","index":"1.1"},{"id":"part.2-implementations","title":"Part.2 Implementations","index":"1.2"},{"id":"part.3-applications","title":"Part.3 Applications","index":"1.3"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201202-Associative-arrays/\" title=\"Associative array\">https://oreodu.github.io/2020/20201202-Associative-arrays/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}