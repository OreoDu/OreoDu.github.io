{"title":"SQL Basics","date":"2020-09-16T07:42:00.000Z","thumbnail":"https://i.loli.net/2020/09/09/y7JDtRIKMCnAuzq.jpg","slug":"20200916-SQL-Basics","comments":true,"tags":["SQL"],"categories":["Programming"],"updated":"2020-09-23T06:37:40.566Z","content":"<h1 id=\"SQL-Basics\">SQL Basics<a href=\"post/20200916-SQL-Basics#SQL-Basics\"></a></h1><h3 id=\"Overview\">Overview<a href=\"post/20200916-SQL-Basics#Overview\"></a></h3><p>(概略图)</p>\n<p><strong>· materials:</strong><br> · <a href=\"https://inst.eecs.berkeley.edu/~cs61a/su19/\" target=\"_blank\" rel=\"noopener\"><u>CS61A Summer 2019 at UCB</u></a></p>\n<p>SQL is an example of a (declarative) language with interacts with a  database management system (DBMS) in order to make data processing easier and faster</p>\n<h3 id=\"Part-1-Create-the-Table\">Part.1 Create the Table<a href=\"post/20200916-SQL-Basics#Part-1-Create-the-Table\"></a></h3><p><strong>· Make a table</strong></p>\n<p>A CREATE TABLE statement gives a global name to a table.</p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">CREATE TABLE [name]([columns]); # create empty table\n\nCREATE TABLE dogs(name, fur, phrase DEFAULT 'woof'); # using default values</code></pre>\n<p><strong>· Create rows of data</strong></p>\n<p><code>CREATE TABLE [name] AS ...;</code></p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT [expr] AS [name], [expr] AS [name], ... UNION\nSELECT [expr] AS [name], [expr] AS [name], ... UNION\nSELECT [expr] AS [name], [expr] AS [name], ...;\n\n\nCREATE TABLE cities AS\n  SELECT 38 AS latitude, 122 AS longitude, \"Berkeley\" AS name   UNION\n  SELECT 42,                71,                 \"Cambridge\"        UNION\n  SELECT 45,                93,                 \"Minneapolis\";</code></pre>\n<p><strong>· Create rows of data from existing tables</strong></p>\n<p>A <code>SELECT</code> statement can specify an input table using a <code>FROM</code> clause. A subset of the rows of the input table can be selected using a <code>WHERE</code> clause. Can declare the order of the remaining rows using an <code>ORDER BY</code> clause. Otherwise, no order. Column descriptions determine how each input row is projected to a result row.</p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT [columns] FROM [table] WHERE [condition] \nORDER BY [order] [ASC/DESC] LIMIT [number];\n\nSELECT \"west coast\" AS region, name FROM cities WHERE longitude >= 115 UNION\nSELECT \"other\",                  name FROM cities WHERE longitude < 115;</code></pre>\n<p><strong>· Arithmetic in SELECT Statements</strong></p>\n<p>In a SELECT expression, column names evaluate to row values.Arithmetic expressions can combine row values and constants.</p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT single + 2 * couple AS total FROM restaurant;</code></pre>\n<p><strong>· Join the Table</strong></p>\n<p>When we join two tables, we get a new table with one row for each combination of rows from the original tables.</p>\n<p><code>SELECT * FROM table1, table2;</code></p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT * FROM parents, dogs;\nSELECT parent FROM parents, dogs WHERE child = name AND fur = \"curly\";</code></pre>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT s.name, s.artist \n      FROM songs AS s, artists AS ar, albums AS al\n      WHERE album = al.name AND s.artist = ar.name\n            AND release_year = 2010\n            ORDER BY first_year_active;</code></pre>\n<p><strong>· Aliasing</strong></p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT a.child AS first, b.child AS second FROM parents AS a, parents AS b WHERE a.parent = b.parent AND a.child < b.child;</code></pre>\n<p><strong>· String Expression</strong></p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">sql> SELECT name || \" dog\" FROM dogs;\nabraham dog\nbarack dog\nclinton dog</code></pre>\n<h3 id=\"Part-2-Aggregation\">Part.2 Aggregation<a href=\"post/20200916-SQL-Basics#Part-2-Aggregation\"></a></h3><p><strong>Aggregation</strong> is the process of doing operations on <em>groups of rows</em> instead of just a single row. SQL provides aggregate functions whose return values can be used as entries in a column.</p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT AVG(age) AS avg_age FROM dogs;\nSELECT COUNT(*) AS count FROM dogs;\nSELECT SUM(age) AS sum_age FROM dogs;\nSELECT MIN(name) AS min_name FROM dogs;</code></pre>\n<p><strong>· Group</strong></p>\n<p>By default, aggregation is performed over all the rows of the table. We can <code>GROUP BY</code> any valid SQL expression, which includes using multiple column names and operators. We can specify  a single group consists of all rows for which [expression] evaluates to the same value. The output table will have <strong>one row</strong> per group. </p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT [columns] FROM [table] WHERE [condition] \n       GROUP BY [expression]\n       ORDER BY [order] [ASC/DESC]\n       LIMIT [number];\n\nSELECT fur, AVG(age) AS avg_age FROM dogs GROUP BY fur;</code></pre>\n<p><strong>· Filtering Groups</strong></p>\n<p>We know how to filter individual rows using the <code>WHERE</code> clause.To filter groups, use the <code>HAVING [condition]</code> clause.</p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">SELECT fur, AVG(age) AS avg_age\n       FROM dogs GROUP BY fur\n       HAVING COUNT(*) > 1;</code></pre>\n<h3 id=\"Part-3-Mutating-Tables\">Part.3 Mutating Tables<a href=\"post/20200916-SQL-Basics#Part-3-Mutating-Tables\"></a></h3><p><strong>· Remove Table</strong></p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">DROP TABLE [IF EXISTS] [name];\nDROP TABLE IF EXISTS parents;</code></pre>\n<p><strong>· Inserting Records</strong></p>\n<pre class=\" language-Mysql\"><code class=\"language-Mysql\">INSERT INTO [table]([columns]) VALUES([values]), ([values]);\n\nINSERT INTO dogs(name, fur) VALUES('fillmore', 'curly');\nINSERT INTO dogs VALUES('delano', 'long', 'hi!');</code></pre>\n<p><strong>· Updating Records</strong></p>\n<pre class=\" language-mysql\"><code class=\"language-mysql\">UPDATE [table] SET [column] = [expression] WHERE [condition];\nDELETE FROM [table] WHERE [condition];\n\nUPDATE dogs SET phrase = 'WOOF' WHERE fur = 'curly';\nDELETE FROM dogs WHERE fur = 'curly' and phrase = 'WOOF';</code></pre>\n","prev":{"title":"Java Basics 01","slug":"20200917-Java-Basics-01"},"next":{"title":"Scheme Basics","slug":"20200915-Scheme-Basics"},"link":"https://oreodu.github.io/post/20200916-SQL-Basics/","toc":[{"title":"SQL Basics","id":"SQL-Basics","index":"1"}],"reward":true,"copyright":{"author":null,"link":"<a href=\"https://oreodu.github.io/post/20200916-SQL-Basics/\" title=\"SQL Basics\">https://oreodu.github.io/post/20200916-SQL-Basics/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}