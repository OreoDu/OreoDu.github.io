{"title":"0008. String to Integer (atoi)","date":"2020-10-23T11:35:17.453Z","date_formatted":{"ll":"Oct 23, 2020","L":"10/23/2020","MM-DD":"10-23"},"updated":"2020-10-10T07:48:53.000Z","content":"<p>English ｜ <a href=\"leetcode/0008\">简体中文</a></p>\n<h2 id=\"q\">Q<a title=\"#q\" href=\"#q\"></a></h2>\n<p>Implement <code>atoi</code> which converts a string to an integer.</p>\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a zero value is returned.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Only the space character ’ ’ is considered as whitespace character.</li>\n<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. If the numerical value is out of the range of representable values, INT_MAX (2^31 − 1) or INT_MIN (−2^31) is returned.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “42”<br>\n<strong>Output:</strong> 42</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> &quot;   -42&quot;<br>\n<strong>Output:</strong> -42<br>\n<strong>Explanation:</strong> The first non-whitespace character is ‘-’, which is the minus sign.<br>\nThen take as many numerical digits as possible, which gets 42.</p>\n</blockquote>\n<p><strong>Example 3:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “4193 with words”<br>\n<strong>Output:</strong> 4193<br>\n<strong>Explanation:</strong> Conversion stops at digit ‘3’ as the next character is not a numerical digit.</p>\n</blockquote>\n<p><strong>Example 4:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “words and 987”<br>\n<strong>Output:</strong> 0<br>\n<strong>Explanation:</strong> The first non-whitespace character is ‘w’, which is not a numerical<br>\ndigit or a +/- sign. Therefore no valid conversion could be performed.</p>\n</blockquote>\n<p><strong>Example 5:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> “-91283472332”<br>\n<strong>Output:</strong> -2147483648<br>\n<strong>Explanation:</strong> The number “-91283472332” is out of the range of a 32-bit signed integer.<br>\nThefore INT_MIN (−2^31) is returned.</p>\n</blockquote>\n<h2 id=\"a\">A<a title=\"#a\" href=\"#a\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myAtoi</span><span class=\"params\">(<span class=\"number\">_</span> str: String)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sign : <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> iStr : <span class=\"type\">String</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> realFirst = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i, <span class=\"built_in\">c</span>) <span class=\"keyword\">in</span> str.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">c</span> == <span class=\"string\">&quot; &quot;</span> &amp;&amp; sign == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                realFirst = i + <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == realFirst &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">c</span> == <span class=\"string\">&quot;+&quot;</span> || <span class=\"built_in\">c</span> == <span class=\"string\">&quot;-&quot;</span> &#123;</span><br><span class=\"line\">                    sign = <span class=\"built_in\">c</span> == <span class=\"string\">&quot;-&quot;</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">c</span> &gt;= <span class=\"string\">&quot;0&quot;</span> &amp;&amp; <span class=\"built_in\">c</span> &lt;= <span class=\"string\">&quot;9&quot;</span> &#123;</span><br><span class=\"line\">                    sign = <span class=\"number\">1</span></span><br><span class=\"line\">                    iStr.append(<span class=\"built_in\">c</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">c</span> &gt;= <span class=\"string\">&quot;0&quot;</span> &amp;&amp; <span class=\"built_in\">c</span> &lt;= <span class=\"string\">&quot;9&quot;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> iStr.<span class=\"built_in\">count</span> &gt;= <span class=\"number\">9</span> &amp;&amp; (<span class=\"type\">Int</span>(iStr)! &gt; <span class=\"type\">Int</span>(<span class=\"type\">INT32_MAX</span>) / <span class=\"number\">10</span> || (<span class=\"type\">Int</span>(iStr)! == <span class=\"type\">Int</span>(<span class=\"type\">INT32_MAX</span>) / <span class=\"number\">10</span> &amp;&amp; (sign &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">c</span> &gt; <span class=\"string\">&quot;7&quot;</span> : <span class=\"built_in\">c</span> &gt; <span class=\"string\">&quot;8&quot;</span>))) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> sign &gt; <span class=\"number\">0</span> ? <span class=\"type\">Int</span>(<span class=\"type\">INT32_MAX</span>) : -<span class=\"type\">Int</span>(<span class=\"type\">INT32_MAX</span>) - <span class=\"number\">1</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    iStr.append(<span class=\"built_in\">c</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sign * (<span class=\"type\">Int</span>(iStr) ?? <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","link":"leetcode/0008-en","comments":true,"plink":"https://oreodu.github.io/leetcode/0008-en/","toc":[{"id":"q","title":"Q","index":"1"},{"id":"a","title":"A","index":"2"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/leetcode/0008-en/\" title=\"0008. String to Integer (atoi)\">https://oreodu.github.io/leetcode/0008-en/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}