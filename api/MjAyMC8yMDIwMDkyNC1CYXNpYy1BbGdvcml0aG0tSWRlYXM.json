{"title":"Basic Algorithm Ideas","date":"2020-09-24T06:29:25.000Z","date_formatted":{"ll":"Sep 24, 2020","L":"09/24/2020","MM-DD":"09-24"},"link":"2020/20200924-Basic-Algorithm-Ideas","comments":true,"tags":["Basic Algorithm Ideas"],"categories":["Algorithms"],"updated":"2020-10-04T03:06:29.268Z","content":"<h2 id=\"basic-algorithm-ideas\">Basic Algorithm Ideas<a title=\"#basic-algorithm-ideas\" href=\"#basic-algorithm-ideas\"></a></h2>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>\n· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>\n· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>\n· <a href=\"https://sp19.datastructur.es/\" target=\"_blank\"><u>CS61B Spring 2019 at UCB</u></a><br>\n· <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>\n· Wikipedia</p>\n<h3 id=\"part.1-greedy-algorithms\">Part.1 Greedy Algorithms<a title=\"#part.1-greedy-algorithms\" href=\"#part.1-greedy-algorithms\"></a></h3>\n<p>left to complete</p>\n<h3 id=\"part.2-divide-and-conquer\">Part.2 Divide and Conquer<a title=\"#part.2-divide-and-conquer\" href=\"#part.2-divide-and-conquer\"></a></h3>\n<p>left to complete</p>\n<h3 id=\"part.3-recursion\">Part.3 Recursion<a title=\"#part.3-recursion\" href=\"#part.3-recursion\"></a></h3>\n<p>Recursion is useful for solving problems with a naturally repeating structure - they are defined in terms of themselves.</p>\n<p>It requires you to find patterns of smaller problems, and to define the smallest problem possible</p>\n<p>Structure of a Recursive Function:</p>\n<p>1.One or more <strong>base cases</strong>, usually the smallest input.<br>\n2.One or more ways of <strong>reducing the problem</strong>, and then <strong>solving the smaller problem using recursion</strong>.<br>\n3.One or more ways of <strong>using the solution to each smaller problem</strong> to solve our larger problem.</p>\n<p><strong>Recursion</strong> has three main components<br>\n<strong>Base case/s</strong>: The simplest form of the problem<br>\n<strong>Recursive call/s</strong>: Smaller version of the problem<br>\nUse the solution to the smaller version of the problem to arrive at the solution to the original problem</p>\n<p><strong>Functional abstraction</strong>: When working with recursion, use <em>functional abstraction</em>: assume the recursive call gives the correct result.</p>\n<p>List out all the cases.<br>\nIdentify <strong>patterns</strong> between each case.<br>\nSimplify repeated code with <strong>recursive calls</strong>.</p>\n<p><strong>Verifying the correctness of recursive functions</strong>:</p>\n<p>Verify that the base cases work as expected.</p>\n<p>For each larger case, verify that it works by <strong>assuming the smaller recursive calls are correct</strong>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cascade</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    print(n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        cascade(n // <span class=\"number\">10</span>)</span><br><span class=\"line\">        print(n)</span><br></pre></td></tr></table></figure>\n<h3 id=\"part.4-back-tracking\">Part.4 Back Tracking<a title=\"#part.4-back-tracking\" href=\"#part.4-back-tracking\"></a></h3>\n<h3 id=\"part.5-dynamic-programing\">Part.5 Dynamic Programing<a title=\"#part.5-dynamic-programing\" href=\"#part.5-dynamic-programing\"></a></h3>\n<h3 id=\"part.6-enumeration-algorithm\">Part.6 Enumeration algorithm<a title=\"#part.6-enumeration-algorithm\" href=\"#part.6-enumeration-algorithm\"></a></h3>\n","prev":{"title":"Other Algorithms","link":"2020/20200924-Other-Algorithms"},"next":{"title":"Graphs","link":"2020/20200924-Graphs"},"plink":"https://oreodu.github.io/2020/20200924-Basic-Algorithm-Ideas/","toc":[{"id":"basic-algorithm-ideas","title":"Basic Algorithm Ideas","index":"1"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20200924-Basic-Algorithm-Ideas/\" title=\"Basic Algorithm Ideas\">https://oreodu.github.io/2020/20200924-Basic-Algorithm-Ideas/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}