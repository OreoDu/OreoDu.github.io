{"title":"Linux Basics","date":"2020-10-23T04:43:00.000Z","date_formatted":{"ll":"Oct 23, 2020","L":"10/23/2020","MM-DD":"10-23"},"link":"2020/20201023-Linux-Basics","comments":true,"tags":["Operating System"],"categories":["Linux","Operating System"],"updated":"2020-10-23T13:39:55.893Z","content":"<h1 id=\"linux-basics\">Linux Basics<a title=\"#linux-basics\" href=\"#linux-basics\"></a></h1>\n<h2 id=\"history:\">History:<a title=\"#history:\" href=\"#history:\"></a></h2>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gjyai1ptkcj30q60j0tc5.jpg\" alt=\"截屏2020-10-22 下午5.10.17\" style=\"zoom: 67%;\">\n<p>​            (From Advanced Operating Systems in The University of Tokyo)</p>\n<p>Unix:</p>\n<p>Unix is very popular and ported to multiple architectures due to its simple design and ease of use.</p>\n<p>Simplicity:</p>\n<p>➢ Small number of system calls with clearly defined design</p>\n<p>➢ Everything is a file</p>\n<p>➢ Written in C for portability</p>\n<p>➢ Easy and fast process creation (fork())</p>\n<p>➢ Simple and efficient Inter-Process Communication mechanisms (IPC)</p>\n<h2 id=\"linux-open-source-model:\">Linux open source model:<a title=\"#linux-open-source-model:\" href=\"#linux-open-source-model:\"></a></h2>\n<p>Benefits of open source vs closed development:</p>\n<p>➢ Security, stability: Given enough eyeballs, all bugs are shallow</p>\n<p>➢ Code quality</p>\n<p>➢ Freely modifiable by anyone having an interest to do so</p>\n<p>➢ Education, research:  We can PEEK at the code to understand how it works and we can POKE it to experiment and build new systems</p>\n<h2 id=\"linux-kernel:\">Linux Kernel:<a title=\"#linux-kernel:\" href=\"#linux-kernel:\"></a></h2>\n<p>Sources are freely <a href=\"https://www.kernel.org/\" target=\"_blank\">available</a>.</p>\n<p>Manages the hardware and provides <strong>interfaces</strong> or user space processes to access the hardware and perform privileged operations.</p>\n<p>Monolithic Model: Opposed to the <em>microkernel</em> model, Linux is monolithic. All the OS services run in kernel, privileged mode. System calls are the one and only way an application can enter the kernel to request OS services and privileged operations such as accessing the hardware.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gjybtotr4sj30vu0mqaib.jpg\" alt=\"截屏2020-10-22 下午7.17.10\" style=\"zoom: 50%;\">\n<p>​      \t\t\t\t\t\t\t\t      (From Advanced Operating Systems in The University of Tokyo)</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwly1gjyfieodezj30ys0hsk0q.jpg\" alt=\"Screen Shot 2020-10-22 at 21.24.39\" style=\"zoom: 55%;\">\n<p>​        \t\t\t\t\t\t\t       (From Advanced Operating Systems in The University of Tokyo)</p>\n<p>Syscalls can be classified into groups:</p>\n<p>➢ <strong>Process management/scheduling:</strong> fork, exit, execve, nice,{<em>get|set</em>}priority,{get|set}pid, etc.</p>\n<p>➢ <strong>Memory management:</strong> brk, mmap, swap{on|of}, etc.</p>\n<p>➢ <strong>File system</strong>: open, read, write, lseek, stat, etc.</p>\n<p>➢ <strong>Inter-Process Communication</strong>: pipe, shmget, semget, etc.</p>\n<p>➢ <strong>Time management</strong>: {get|set}timeofday, time, timer create, etc.</p>\n<p>➢ Others: *{<em>get|set</em>}*uid, syslog, connect, etc.</p>\n<p>System calls table syscall identifier.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 common read sys_read</span><br><span class=\"line\">1 common write sys_write</span><br><span class=\"line\">2 common open sys_open</span><br><span class=\"line\">3 common close sys_close</span><br><span class=\"line\"># ...</span><br></pre></td></tr></table></figure>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gjz28nljggj30xi06uabg.jpg\" alt=\"Screen Shot 2020-10-23 at 10.30.07\" style=\"zoom:50%;\">\n<p>​\t\t\t\t\t\t\t\t\t\t   (From Advanced Operating Systems in The University of Tokyo)</p>\n<p>Syscalls are rarely invoked directly. Most of them are wrapped by the C library. The programmer uses the C library Application Programming Interface (API)</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gjz2kopy4lj30zo04oabx.jpg\" alt=\"Screen Shot 2020-10-23 at 10.42.38\" class=\"φcx\"></p>\n<p>​\t\t\t\t\t\t\t\t \t\t (From Advanced Operating Systems in The University of Tokyo)</p>\n<p>Kernel vs user level programming:</p>\n<p>➢ No C library mostly because of speed and size. However, the kernel implements lots of usefull functions from the C library.</p>\n<p>➢ 2% assembly, the rest in GNU C (GCC extensions)</p>\n<p>➢ No memory protection</p>\n<p>➢ Highly concurrent: Preemption, interrupts, running on SMP (Symmetric Multiprocessor System). Race conditions without proper synchronization.</p>\n<p>Virtual machine:</p>\n<blockquote>\n<p>I would classify virtual machine technologies into three categories (not all products fit clearly into one category):</p>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Full_virtualization\" target=\"_blank\">Full virtualization</a>, i.e., complete hardware emulation. Examples: <a href=\"http://en.wikipedia.org/wiki/QEMU\" target=\"_blank\">Qemu</a>, <a href=\"http://en.wikipedia.org/wiki/DOSBox\" target=\"_blank\">Dosbox</a>. Pro: you can potentially emulate any architecture on any hardware. Con: it’s the slowest way to do it.</li>\n<li>Hardware-assisted virtualization, where you can emulate machine X on machine X. This can be a lot faster than full virtualization, because most instructions are executed natively, but you lose the ability to run a foreign architecture. There are two sub-categories:</li>\n<li>Hypervisor-based VMs: you run several OSes alongside each other. The bottom layer, called the hypervisor, is a special-purpose OS that runs the VMs and nothing else. Examples: <a href=\"http://en.wikipedia.org/wiki/Xen\" target=\"_blank\">Xen</a>, <a href=\"http://en.wikipedia.org/wiki/VMware_ESX\" target=\"_blank\">VMware ESX</a>.</li>\n<li>Hosted VMs: there is a main OS, the VM is an application on this main OS. Examples: <a href=\"http://en.wikipedia.org/wiki/VirtualBox\" target=\"_blank\">VirtualBox</a>, <a href=\"http://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine\" target=\"_blank\">KVM</a>.</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Operating_system-level_virtualization\" target=\"_blank\">OS-level virtualization</a>: you run several instances of the same OS. This can be in turn a lot more lightweight than hardware virutalization, but you lose some isolation and of course the ability to run different OSes. Examples: <a href=\"http://en.wikipedia.org/wiki/OpenVZ\" target=\"_blank\">OpenVZ</a>, <a href=\"http://en.wikipedia.org/wiki/FreeBSD_jail\" target=\"_blank\">FreeBSD jails</a>.</li>\n</ul>\n<p>(From <a href=\"https://unix.stackexchange.com/questions/5741/what-are-the-differences-between-various-vm-software\" target=\"_blank\">here</a>.)</p>\n</blockquote>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1gjyzldca2dj30b40bsgmh.jpg\" alt=\"image1\" style=\"zoom:80%;\">\n<p>​                                      \t\t\t\t           (KVM + Qemu. From <a href=\"https://www.packetflow.co.uk/what-is-the-difference-between-qemu-and-kvm/\" target=\"_blank\">here</a>)</p>\n<p>GDB server: more details from <a href=\"https://www.gnu.org/software/gdb/\" target=\"_blank\">here</a>.</p>\n","next":{"title":"Exercises in Lad","link":"2020/20201014-Exercises-in-Lad"},"plink":"https://oreodu.github.io/2020/20201023-Linux-Basics/","toc":[{"id":"linux-basics","title":"Linux Basics","index":"1","children":[{"id":"history:","title":"History:","index":"1.1"},{"id":"linux-open-source-model:","title":"Linux open source model:","index":"1.2"},{"id":"linux-kernel:","title":"Linux Kernel:","index":"1.3"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201023-Linux-Basics/\" title=\"Linux Basics\">https://oreodu.github.io/2020/20201023-Linux-Basics/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}