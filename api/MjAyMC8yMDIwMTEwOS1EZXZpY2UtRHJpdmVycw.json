{"title":"Device Drivers","date":"2020-11-09T01:25:00.000Z","date_formatted":{"ll":"Nov 9, 2020","L":"11/09/2020","MM-DD":"11-09"},"link":"2020/20201109-Device-Drivers","comments":true,"tags":["Operating System"],"categories":["Linux","Operating System"],"updated":"2020-11-09T12:01:18.959Z","content":"<h1 id=\"device-drivers\">Device Drivers<a title=\"#device-drivers\" href=\"#device-drivers\"></a></h1>\n<p>Abstracting Devices – Modules and Interrupts</p>\n<h2 id=\"part.1-kernel-modules:-presentation\">Part.1 Kernel modules: presentation<a title=\"#part.1-kernel-modules:-presentation\" href=\"#part.1-kernel-modules:-presentation\"></a></h2>\n<p>Modules are pieces of kernel code that can be dynamically loaded and unloaded at runtime.</p>\n<h3 id=\"modules-benefits:\">Modules benefits:<a title=\"#modules-benefits:\" href=\"#modules-benefits:\"></a></h3>\n<p>· No reboot</p>\n<p>Saves a lot of time when developing/debugging</p>\n<p>· No need to compile the entire kernel</p>\n<p>· Saves memory and CPU time by running on-demand</p>\n<p>· No performance difference between module and built-in kernel code</p>\n<p>· Help identifying buggy code</p>\n<p>Ex: identifying a buggy driver compiled as a module by selectively running them.</p>\n<h2 id=\"part.2-writing-a-kernel-module\">Part.2 Writing a kernel module<a title=\"#part.2-writing-a-kernel-module\" href=\"#part.2-writing-a-kernel-module\"></a></h2>\n<p>The module is linked against the entire kernel, it is visible on all of the kernel global variables. To avoid  namespace pollution and involuntary reuse of variable names, we can use a well defined naming convention and use <code>static</code> as much as possible.</p>\n<p>Kernel symbols list is generally present in <code>/proc/kallsys</code> .</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Create a C file anywhere on the filesystem. (No need to be inside the kernel sources).  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt; /* Needed by all modules */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kernel.h&gt; /* KERN_INFO */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt; /* init and exit macros */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> answer initdata = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> init <span class=\"title\">lkp_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  printk(KERN_INFO<span class=\"string\">&quot;Moduele loaded ...¥n&quot;</span>);</span><br><span class=\"line\">  printk(KERN_INFO<span class=\"string\">&quot;The answer is %d...¥n&quot;</span>, answer);</span><br><span class=\"line\">  <span class=\"comment\">/* Return 0 on success, something else on error */</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">staticvoid <span class=\"built_in\">exit</span> <span class=\"title\">lkp_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  printk(KERN_INFO<span class=\"string\">&quot;Module exiting...¥n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* `init. &amp; exit` functions launched at the load /unload time.  */</span></span><br><span class=\"line\">module_init(lkp_init);</span><br><span class=\"line\">module_exit(lkp_exit);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* `MODULE_* macros`:  General info about the module. */</span></span><br><span class=\"line\">MODULE_LICENCE(<span class=\"string\">&quot;GPL&quot;</span>);</span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">&quot;PierreOlivier&lt;polivier@vt.edu&gt;&quot;</span>);</span><br><span class=\"line\">MODULE_DESCRIPTION(<span class=\"string\">&quot;Sample kernel module&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"part.3-compiling-a-kernel-module\">Part.3 Compiling a kernel module<a title=\"#part.3-compiling-a-kernel-module\" href=\"#part.3-compiling-a-kernel-module\"></a></h2>\n<p>Create a <code>Makeflie</code> in the same directory as the module source fie. After the compilation, the complied module is the file with <code>.ko</code>. extension.</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># `KERNELRELEASE` is defined in the top-level makefile in the linux kernel source code.</span></span><br><span class=\"line\"><span class=\"keyword\">ifneq</span>  (<span class=\"variable\">$(KERNELRELEASE)</span>,)</span><br><span class=\"line\">obj-m := hello.o</span><br><span class=\"line\"><span class=\"comment\"># multiple source files. </span></span><br><span class=\"line\"><span class=\"comment\"># obj-m += file1.c</span></span><br><span class=\"line\"><span class=\"comment\"># obj-m += file2.c</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">KDIR := /lib/modules/<span class=\"variable\">$(<span class=\"built_in\">shell</span> uname -r)</span>/build  <span class=\"comment\"># path to kernel sources root directory</span></span><br><span class=\"line\">PWD:= <span class=\"variable\">$(<span class=\"built_in\">shell</span> pwd)</span></span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">    make -C <span class=\"variable\">$(KDIR)</span> M=<span class=\"variable\">$(PWD)</span> modules</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    make -C <span class=\"variable\">$(KDIR)</span> M=<span class=\"variable\">$(PWD)</span> clean</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br></pre></td></tr></table></figure>\n<p><code>shell pwd</code>: Get the path of current working directory.</p>\n<p><code>shell uname -r</code>: Get the version of the current kernel.</p>\n<p><code>KDIR</code>: The source code directory of the current kernel.<br>\n(<code>/lib/modules/$(shell uname -r)/build</code> or <code>/usr/src/linux-header-$(shell uname -r)/</code>)</p>\n<p><code>make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modules</code>:</p>\n<p>First change the directory to the location specified by the <code>-C</code> option ( kernel source code directory), where the top-level makefile of the kernel is stored. Then, the <code>M=</code> option makes the makefile return to the module source code directory before constructing the modules target and the modules target points to the module set in the <code>obj-m</code> variable(<code>hello.o</code>).</p>\n<h2 id=\"part.4-launching-a-kernel-module\">Part.4 Launching a kernel module<a title=\"#part.4-launching-a-kernel-module\" href=\"#part.4-launching-a-kernel-module\"></a></h2>\n<p>When we launch a kernel module, we need administrator privileges(root).</p>\n<h3 id=\"insmod/rnmode\"><code>insmod/rnmode</code><a title=\"#insmod/rnmode\" href=\"#insmod/rnmode\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo insmod file.ko <span class=\"comment\">/* the module is loaded and init function is executed. */</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rmmod file.ko <span class=\"comment\">/* remove the module and exit function is called. */</span></span><br></pre></td></tr></table></figure>\n<p>Note that a module is compiled against a specific kernel version and will not load on the another kernel.</p>\n<h3 id=\"modprobe\"><code>modprobe</code><a title=\"#modprobe\" href=\"#modprobe\"></a></h3>\n<p><code>make modules_install</code> from the kernel sources install the modules in a standard location on the filesystem.(Generally <code>/lib/modules/&lt;kernel version&gt;</code>) and those modules can be inserted through <code>modprobe</code>. Such installed modules can be loaded automatically at boot time by editing <code>/etc/modules</code> or the files in <code>/ets/modprobe.d</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe &lt;<span class=\"keyword\">module</span> name&gt;</span><br></pre></td></tr></table></figure>\n<p><code>Insmod</code> handles modules dependencies. (Dependency list generated in <code>/lib/modules/&lt;kernel version/modules.dep&gt;</code>)</p>\n<h2 id=\"part.5-modules:-miscellaneous-information\">Part.5 Modules: miscellaneous information<a title=\"#part.5-modules:-miscellaneous-information\" href=\"#part.5-modules:-miscellaneous-information\"></a></h2>\n<p>Modules parameters can be entered from the command line at the launch time.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt; /* ... */</span></span></span><br><span class=\"line\">staticint int_param = <span class=\"number\">42</span>;</span><br><span class=\"line\">staticchar *string_param =<span class=\"string\">&quot;defaultvalue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">module_param(int_param, <span class=\"keyword\">int</span>, <span class=\"number\">0</span>); </span><br><span class=\"line\">MODULE_PARM_DESC(int_param,<span class=\"string\">&quot;Asampleintegerkernelmoduleparameter&quot;</span>);</span><br><span class=\"line\">module_param(string_param, charp, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH); MODULE_PARM_DESC(string_param,<span class=\"string\">&quot;Anotherparameter,astring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">staticint init <span class=\"title\">lkp_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  printk(KERN_INFO<span class=\"string\">&quot;Intparam:%d¥n&quot;</span>, int_param);</span><br><span class=\"line\">  printk(KERN_INFO<span class=\"string\">&quot;Stringparam:%s¥n&quot;</span>, string_param); <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo insmod lkp.ko int_param&#x3D;12 string_param&#x3D;&quot;hello&quot;</span><br></pre></td></tr></table></figure>\n<p><code>modinfo</code>: info about a kernel module.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modinfo my_module.ko</span><br><span class=\"line\">filename:        /tmp/test/my_module.ko</span><br><span class=\"line\">description:     Sample kernel <span class=\"keyword\">module</span></span><br><span class=\"line\">author:  \t\t\t\t Pierre Olivier &lt;polivier@vt.edu GPL</span><br><span class=\"line\">license: \t\t\t\t A5ADE92B1C81DCC4F774A37</span><br><span class=\"line\">srcversion: </span><br><span class=\"line\">depends: </span><br><span class=\"line\">vermagic: \t\t\t<span class=\"number\">4.8</span><span class=\"number\">.0</span><span class=\"number\">-34</span>-generic SMP mod_unload modversions</span><br><span class=\"line\">parm:\t\t\t\t\t\tint_param:<span class=\"function\">A sample integer kernel <span class=\"keyword\">module</span> <span class=\"title\">parameter</span> <span class=\"params\">(<span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">parm:\t\t\t\t\t\t string_param:Another parameter, a string (charp)</span><br></pre></td></tr></table></figure>\n<p><code>lsmod</code>: list currently running modules. (Can also look in <code>/proc/modules</code>)</p>\n<h2 id=\"part.6-memory-allocation\">Part.6 Memory allocation<a title=\"#part.6-memory-allocation\" href=\"#part.6-memory-allocation\"></a></h2>\n<h3 id=\"kmalloc\"><code>kmalloc</code><a title=\"#kmalloc\" href=\"#kmalloc\"></a></h3>\n<p>Allocate memory that is virtually and physically contiguous. (Maximum allocated size : 4MB on x86 (architecture dependent)).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/slab.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *my_string = (<span class=\"keyword\">char</span> *)kmalloc(<span class=\"number\">128</span>, GFP_KERNEL);</span><br><span class=\"line\">my_struct my_struct_ptr = (my_struct *)kmalloc(<span class=\"keyword\">sizeof</span>(my_struct), GFP_KERNEL);</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\">kfree(my_string); kfree(my_struct_ptr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"vmalloc\"><code>vmalloc</code><a title=\"#vmalloc\" href=\"#vmalloc\"></a></h3>\n<p>Allocate memory that is virtually contiguous, but not physically contiguous. No size limit other than the amount of free RAM (at least on 64 bit architectures.  Might sleep.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/vmalloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *my_string = (<span class=\"keyword\">char</span> *)vmalloc(<span class=\"number\">128</span>);</span><br><span class=\"line\">my_struct my_struct_ptr = (my_struct *)vmalloc(<span class=\"keyword\">sizeof</span>(my_struct)); <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">vfree(my_string); </span><br><span class=\"line\">vfree(my_struct_ptr);</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Interrupts","link":"2020/20201109-Interrupts"},"next":{"title":"Process Scheduling","link":"2020/20201026-Process-Scheduling"},"plink":"https://oreodu.github.io/2020/20201109-Device-Drivers/","toc":[{"id":"device-drivers","title":"Device Drivers","index":"1","children":[{"id":"part.1-kernel-modules:-presentation","title":"Part.1 Kernel modules: presentation","index":"1.1"},{"id":"part.2-writing-a-kernel-module","title":"Part.2 Writing a kernel module","index":"1.2"},{"id":"part.3-compiling-a-kernel-module","title":"Part.3 Compiling a kernel module","index":"1.3"},{"id":"part.4-launching-a-kernel-module","title":"Part.4 Launching a kernel module","index":"1.4"},{"id":"part.5-modules:-miscellaneous-information","title":"Part.5 Modules: miscellaneous information","index":"1.5"},{"id":"part.6-memory-allocation","title":"Part.6 Memory allocation","index":"1.6"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201109-Device-Drivers/\" title=\"Device Drivers\">https://oreodu.github.io/2020/20201109-Device-Drivers/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}