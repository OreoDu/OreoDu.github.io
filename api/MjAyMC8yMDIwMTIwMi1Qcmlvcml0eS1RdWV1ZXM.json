{"title":"Priority Queue","date":"2020-12-02T15:29:25.000Z","date_formatted":{"ll":"Dec 2, 2020","L":"12/02/2020","MM-DD":"12-02"},"link":"2020/20201202-Priority-Queues","comments":true,"tags":["Heapsort","binary heap"],"categories":["Data Structure"],"updated":"2020-12-11T07:14:59.976Z","content":"<h1 id=\"priority-queue\">Priority Queue<a title=\"#priority-queue\" href=\"#priority-queue\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>\n· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>\n· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>\n· <a href=\"https://sp19.datastructur.es/\" target=\"_blank\">CS61B Spring 2019 at UCB</a><br>\n· <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\">Algorithms, Part I,Ⅱ by Princeton University</a><br>\n· Wikipedia</p>\n<p>Often, we collect a set of items, then process the one with the largest key, then perhaps collect more items, then process the one with the current largest key, and so forth. We don’t need to have all keys in full sorted order. Two important operations during the process are insert and remove the maximum.</p>\n<p>As for many abstract data structure they have limited operations so that they can maintain some features of the data that stored in it and provide some required results more efficiently. So does priority queue. Different from the stack(remove the item most recently added) or queue(remove the item least recently added), priority queue can remove the element based on the priority (Max: the largest item, Min: the smallest item) and also insert items in a very efficient way.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glhfo4e6igj30v00hiwgf.jpg\" alt=\"Screen Shot 2020-12-09 at 11.16.08\" style=\"zoom:33%;\">\n<h2 id=\"part.1-api-for-priority-queue\">Part.1 API for priority queue<a title=\"#part.1-api-for-priority-queue\" href=\"#part.1-api-for-priority-queue\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the key in the priority queue must be Comparable and immutable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxPQ</span>&lt;<span class=\"title\">key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">MaxPQ</span>()                   // <span class=\"title\">create</span> <span class=\"title\">an</span> <span class=\"title\">empty</span> <span class=\"title\">priority</span> <span class=\"title\">queue</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">MaxPQ</span>(<span class=\"title\">Comparator</span>&lt;<span class=\"title\">Key</span>&gt; <span class=\"title\">comparator</span>) </span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">MaxPQ</span>(<span class=\"title\">int</span> <span class=\"title\">capacity</span>)       // <span class=\"title\">create</span> <span class=\"title\">a</span> <span class=\"title\">priority</span> <span class=\"title\">of</span> <span class=\"title\">initial</span> <span class=\"title\">capacity</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">MaxPQ</span>(<span class=\"title\">int</span> <span class=\"title\">capacity</span>, <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Key</span>&gt; <span class=\"title\">comparator</span>)</span></span><br><span class=\"line\">  MaxPQ(Key[] a)            // create a priority with given keys</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(key v)</span>        <span class=\"comment\">// insert a key into the priority queue</span></span></span><br><span class=\"line\"><span class=\"function\">  Key <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>         <span class=\"comment\">// delete the arbitary value in the pq with index i </span></span></span><br><span class=\"line\"><span class=\"function\">  Key <span class=\"title\">delMax</span><span class=\"params\">()</span>              <span class=\"comment\">// return and remove the largest key</span></span></span><br><span class=\"line\"><span class=\"function\">  Key <span class=\"title\">max</span><span class=\"params\">()</span>                 <span class=\"comment\">// return the largest key</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>         <span class=\"comment\">// is the priority quque empty</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>                <span class=\"comment\">// number of entries in the priority queue</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Client</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  MinPQ&lt;Transaction&gt; pq = <span class=\"keyword\">new</span> MinPQ&lt;Transaction&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (StdIn.hasNextLine()) &#123;</span><br><span class=\"line\">    String line = StdIn.readLine();</span><br><span class=\"line\">    Transaction item = <span class=\"keyword\">new</span> Transaction(line);</span><br><span class=\"line\">    pq.insert(item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pq.size() &gt; M)</span><br><span class=\"line\">      pq.delMin();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"part.2-implementations\">Part.2 Implementations<a title=\"#part.2-implementations\" href=\"#part.2-implementations\"></a></h2>\n<p>Attention: The key in the priority queue should be immutable!</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glhqc3jpzwj30v20n20v3.jpg\" alt=\"Screen Shot 2020-12-09 at 17.25.11\" style=\"zoom: 40%;\">\n<h3 id=\"1.-unordered-or-ordered-array-implementation\">1. Unordered or ordered array implementation<a title=\"#1.-unordered-or-ordered-array-implementation\" href=\"#1.-unordered-or-ordered-array-implementation\"></a></h3>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glhez1hlqoj31180gw0w7.jpg\" alt=\"Screen Shot 2020-12-09 at 10.52.03\" style=\"zoom: 40%;\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnorderedMaxPQ</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Key[] pq;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;     <span class=\"comment\">// number of the pq</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnorderedMaxPQ</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">    pq = (Key[] <span class=\"keyword\">new</span> Comparable[capacity];)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Key x)</span> </span>&#123;</span><br><span class=\"line\">    pq[N++] = x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (less(max,i)) max = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exch(max, N - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pq[--N];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>See ordered max priority queue code <a href=\"https://algs4.cs.princeton.edu/24pq/OrderedArrayMaxPQ.java.html\" target=\"_blank\">here</a>.</p>\n<p>Except array, we can also use linked list(unordered and reverse-ordered) to store the data.</p>\n<p>All of the elementary implementations just discussed have the property that <em>either</em> the <em>insert</em> or the <em>remove the maximum</em> operation takes linear time in the worst case.</p>\n<h3 id=\"2.-binary-heap\">2. Binary heap<a title=\"#2.-binary-heap\" href=\"#2.-binary-heap\"></a></h3>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glhm2c13loj30n60maacz.jpg\" alt=\"Screen Shot 2020-12-09 at 14.57.27\" style=\"zoom:33%;\">\n<p>We can see the implementations of binary heap and more details <a href=\"https://oreodu.github.io/2020/20201005-Tree\" target=\"_blank\">here</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> DataStructure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxPQ</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Key</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Key[] pq;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REFACTOR = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Comparator&lt;Key&gt; comparator;  <span class=\"comment\">// optional comparator</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">(Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1</span>, comparator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        pq = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity, Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.comparator = comparator;</span><br><span class=\"line\">        pq = (Key[]) <span class=\"keyword\">new</span> Object[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPQ</span><span class=\"params\">(Key[] a)</span> </span>&#123;</span><br><span class=\"line\">        N = a.length;</span><br><span class=\"line\">        pq = (Key[]) <span class=\"keyword\">new</span> Comparable[N + <span class=\"number\">1</span>];</span><br><span class=\"line\">        System.arraycopy(a,<span class=\"number\">0</span>, pq, <span class=\"number\">1</span>, N);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = N/<span class=\"number\">2</span>; k &gt;= <span class=\"number\">1</span>; k--) &#123;</span><br><span class=\"line\">            sink(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isMaxPQ</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;The heap is underflow!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pq[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Key x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* pq maintains the smallest N items</span></span><br><span class=\"line\"><span class=\"comment\">        if (N == pq.length) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if (x.compareTo(max()) &lt; 0) delete(1);</span></span><br><span class=\"line\"><span class=\"comment\">            else return;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;The key can&#x27;t be null!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == pq.length - <span class=\"number\">1</span>) resize(REFACTOR * pq.length);</span><br><span class=\"line\">        pq[++N] = x;</span><br><span class=\"line\">        swim(N);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isMaxPQ</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> delete(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;Priority queue underflow&quot;</span>);</span><br><span class=\"line\">        Key max = pq[i];</span><br><span class=\"line\">        exch(i, N--);</span><br><span class=\"line\">        sink(i);</span><br><span class=\"line\">        pq[N + <span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;  <span class=\"comment\">// prevent loitering</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isMaxPQ</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> capacity &gt; N;</span><br><span class=\"line\">        Key[] newArray = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity];</span><br><span class=\"line\">        System.arraycopy(pq,<span class=\"number\">0</span>, newArray, <span class=\"number\">0</span>, N + <span class=\"number\">1</span>);</span><br><span class=\"line\">        pq = newArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * Helper functions to restore the heap invariant.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k)) &#123;</span><br><span class=\"line\">            exch(k, k/<span class=\"number\">2</span>);</span><br><span class=\"line\">            k = k / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">2</span>*k &lt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &lt; N &amp;&amp; less(j, j+<span class=\"number\">1</span>)) j++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!less(k, j)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            exch(k, j);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * Helper functions for compares and swaps.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (comparator == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((Comparable&lt;Key&gt;) pq[i]).compareTo(pq[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> comparator.compare(pq[i], pq[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Key tmp = pq[i];</span><br><span class=\"line\">        pq[i] = pq[j];</span><br><span class=\"line\">        pq[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// is heap[1..n] a max heap?</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMaxPQ</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pq[i] == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = N+<span class=\"number\">1</span>; i &lt; pq.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pq[i] != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pq[<span class=\"number\">0</span>] != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMaxPQOrdered(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// is subtree of heap[1..n] rooted at k a max heap?</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMaxPQOrdered</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt; N) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">2</span>*k;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">2</span>*k + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left  &lt;= N &amp;&amp; less(k, left))  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt;= N &amp;&amp; less(k, right)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMaxPQOrdered(left) &amp;&amp; isMaxPQOrdered(right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * Iterator.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;Key&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HeapIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">Key</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> BinaryMaxHeap&lt;Key&gt; copy;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeapIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (comparator == <span class=\"keyword\">null</span>) copy = <span class=\"keyword\">new</span> BinaryMaxHeap&lt;&gt;(size());</span><br><span class=\"line\">            <span class=\"keyword\">else</span> copy = <span class=\"keyword\">new</span> BinaryMaxHeap&lt;&gt;(size(), comparator);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)</span><br><span class=\"line\">                copy.insert(pq[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> !copy.isEmpty(); &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasNext()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> copy.delMax();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer[] a = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        BinaryMaxHeap&lt;Integer&gt; bh = <span class=\"keyword\">new</span> BinaryMaxHeap&lt;&gt;(a);</span><br><span class=\"line\">        System.out.println(bh.max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>See the implementation of MinPQ <a href=\"https://algs4.cs.princeton.edu/24pq/MinPQ.java.html\" target=\"_blank\">here</a>.</p>\n<p>See more different priority queue: <a href=\"IndexMaxPQ\">IndexMaxPQ</a>, <a href=\"https://algs4.cs.princeton.edu/24pq/IndexMinPQ.java.html\" target=\"_blank\">IndexMinPQ</a>, <a href=\"https://algs4.cs.princeton.edu/24pq/Multiway.java.html\" target=\"_blank\">Multiway</a>.</p>\n<h2 id=\"part.3-applications\">Part.3 Applications<a title=\"#part.3-applications\" href=\"#part.3-applications\"></a></h2>\n<p><strong>·</strong> <strong>Event-driven simulation (customers in a line, colliding particles)</strong><br>\n<strong>·</strong> Numerical computation (reducing roundoff error)<br>\n<strong>·</strong> Data compression (Huffman codes)<br>\n<strong>·</strong> Graph searching (Dijkstra’s algorithm, Prim’s algorithm)<br>\n<strong>·</strong> Number theory (sum of powers)<br>\n<strong>·</strong> Artificial intelligence (A* search)<br>\n<strong>·</strong> Statistics (maintain largest M values in a sequence)<br>\n<strong>·</strong> Operating systems (loading balancing, interrupt handling)<br>\n<strong>·</strong> Discrete optimization (bin packing, scheduling)<br>\n<strong>·</strong> Spam filtering (Bayesian spam filter)</p>\n<h3 id=\"example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)\">Example : Molecular dynamics simulation of hard discs (Event-driven simulation)<a title=\"#example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)\" href=\"#example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)\"></a></h3>\n<p>Goal: Simulate the motion of N moving particles that behave according to the laws of elastic collision.</p>\n<p>Hard disc model<br>\n・Moving particles interact via elastic collisions with each other and walls.<br>\n・Each particle is a disc with known position, velocity, mass, and radius.<br>\n・No other forces.</p>\n<p>Event-driven simulation (Change state only when something happens.)<br>\n・Between collisions, particles move in straight-line trajectories.<br>\n・Focus only on times when collisions occur.<br>\n・Collision prediction.<br>\n・Maintain PQ of collision events, prioritized by time.<br>\n・Collision resolution.<br>\n・Remove the min = get next collision.</p>\n<p>See more details <a href=\"https://algs4.cs.princeton.edu/61event/\" target=\"_blank\">here</a>.</p>\n","prev":{"title":"Associative array","link":"2020/20201202-Associative-arrays"},"next":{"title":"File Systems","link":"2020/20201118-File-Systems"},"plink":"https://oreodu.github.io/2020/20201202-Priority-Queues/","toc":[{"id":"priority-queue","title":"Priority Queue","index":"1","children":[{"id":"part.1-api-for-priority-queue","title":"Part.1 API for priority queue","index":"1.1"},{"id":"part.2-implementations","title":"Part.2 Implementations","index":"1.2"},{"id":"part.3-applications","title":"Part.3 Applications","index":"1.3"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201202-Priority-Queues/\" title=\"Priority Queue\">https://oreodu.github.io/2020/20201202-Priority-Queues/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}