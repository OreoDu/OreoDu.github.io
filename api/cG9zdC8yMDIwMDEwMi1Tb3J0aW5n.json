{"title":"Sorting","date":"2020-01-02T01:29:25.000Z","slug":"20200102-Sorting","comments":true,"tags":["Classical Algorithms"],"categories":["Algorithms"],"updated":"2020-10-18T08:53:53.444Z","content":"<h1 id=\"Sorting\">Sorting<a href=\"post/20200102-Sorting#Sorting\"></a></h1><h3 id=\"Overview\">Overview<a href=\"post/20200102-Sorting#Overview\"></a></h3><p>(概略图)</p>\n<p><strong>· materials:</strong><br>  · <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>  · <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>  · <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>  · <a href=\"https://sp19.datastructur.es/\" target=\"_blank\" rel=\"noopener\"><u>CS61B Spring 2019 at UCB</u></a><br>  · <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\" rel=\"noopener\"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>  · Wikipedia</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Comparisons</th>\n<th>Exchanges</th>\n<th>Stability</th>\n<th>Time complexity</th>\n<th>Space Complexity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Bubble Sort</td>\n<td>(n-1)+…+2+1 = n(n-1) / 2</td>\n<td>n(n-1) / 2</td>\n<td>Stable</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Selection Sort</td>\n<td>(n-1)+…+2+1 = n(n-1) / 2</td>\n<td>n -1</td>\n<td>No</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Insertion Sort</td>\n<td>1+2+…(n-1) = n(n-1) / 2</td>\n<td>n(n-1) / 2</td>\n<td>Stable</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Shell Sort</td>\n<td>depend on the increment sequence</td>\n<td>-</td>\n<td>No</td>\n<td>-</td>\n<td>O(1)</td>\n</tr>\n</tbody></table></div></div>\n<p>(Worst case)</p>\n<h2 id=\"Part-1-Elementary-Sort\">Part.1 Elementary Sort<a href=\"post/20200102-Sorting#Part-1-Elementary-Sort\"></a></h2><h3 id=\"Ⅰ-Selection-Sort-amp-Bubble-Sort\">Ⅰ.  Selection Sort &amp;  Bubble Sort<a href=\"post/20200102-Sorting#Ⅰ-Selection-Sort-amp-Bubble-Sort\"></a></h3><p>Unlike the basic sort method inserting elements into the sorted subarray, we can select the <code>i-th</code> largest element  and put the value into the <code>a[i]</code>. We can select the element from the front portion and put it in the back or  we can select the element from the back portion and put it in the front.</p>\n<p>There are two ways to select element. The first method is bubble sort. It operates by repeatedly swapping the adjacent elements if they are in the wrong order which result in that the <code>i-th</code> largest element is moved to <code>a[i]</code>.</p>\n<img src=\"https://i.loli.net/2020/10/17/DjUukWQXEGFqBln.png\" alt=\"22\" style=\"zoom:20%;\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n-i-<span class=\"number\">1</span>; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] &gt; a[j+<span class=\"number\">1</span>]) exch(a, j, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The second method called selection sort. It sorts an array by repeatedly finding the index <code>min</code> of smallest remaining element from the unsorted part and swap <code>a[i]</code> and <code>a[min]</code>.</p>\n<img src=\"https://i.loli.net/2020/10/17/29Xv3rjCIUksJxD.jpg\" alt=\"22\" style=\"zoom:25%;\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        min = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] &lt; a[min]) min = j;</span><br><span class=\"line\">        exch(a, i, min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Selection sort is more efficient and faster than the bubble sort because of less exchanges.</p>\n<h3 id=\"Ⅱ-Insertion-Sort\">Ⅱ.  Insertion Sort<a href=\"post/20200102-Sorting#Ⅱ-Insertion-Sort\"></a></h3><p>Find the proper position for <code>a[i]</code> in <code>0-th</code> ~  <code>(i-1)-th</code> sorted subarray by swapping <code>a[i]</code> with each larger element to its left.</p>\n<img src=\"https://i.loli.net/2020/10/17/WdkRHFXYelstmpq.png\" alt=\"11\" style=\"zoom: 20%;\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] &lt; a[j-<span class=\"number\">1</span>]) exch(a, j, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅲ-Shell-Sort\">Ⅲ. Shell Sort<a href=\"post/20200102-Sorting#Ⅲ-Shell-Sort\"></a></h3><p>Shell Sort is mainly a variation of Insertion Sort. In insertion sort, we move elements only one position ahead. The idea of Shell Sort is to allow exchange of far items. </p>\n<p>In Shell Sort, we make the array h-sorted for a large value of h. We keep reducing the value of h until it becomes 1. An array is said to be h-sorted if all sub-lists of every <code>h-th</code> element is sorted.</p>\n<p>After the previous h-sort, the array is partially sorted so the insertion will be fast (a g-sorted array remains g-sorted after h-sorting. See  the proof below or <a href=\"https://cs.stackexchange.com/questions/47096/why-does-decreasing-the-gap-size-in-shell-sort-never-undo-previous-sorts\" target=\"_blank\" rel=\"noopener\">here</a>).</p>\n<img src=\"https://i.loli.net/2020/10/18/AzZPorRqkJcVM9p.jpg\" alt=\"11\" style=\"zoom: 30%;\">\n\n<p>Increment sequence that we can use:<br><strong>Power of two minus one</strong>: 1,3,7,…<br><strong>3x+1</strong>: 1,4,13,40,…<br><strong>Sedgewick</strong>: 1,5,19,41,109,…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</span><br><span class=\"line\">    <span class=\"comment\">// while (h &lt; n/3) h = h*3 + 1;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = n/<span class=\"number\">3</span>; h &gt;= <span class=\"number\">1</span>; h = h/<span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; n ; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h &amp;&amp; a[j] &lt; a[j-h]; j -= h)</span><br><span class=\"line\">                exch(a,j,j-h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part-1-Advanced-Search\">Part.1 Advanced Search<a href=\"post/20200102-Sorting#Part-1-Advanced-Search\"></a></h2><h3 id=\"Ⅰ-Quick-Sort\">Ⅰ. Quick Sort<a href=\"post/20200102-Sorting#Ⅰ-Quick-Sort\"></a></h3><h3 id=\"Ⅱ-Heap-Sort\">Ⅱ. Heap Sort<a href=\"post/20200102-Sorting#Ⅱ-Heap-Sort\"></a></h3><h3 id=\"Ⅲ-Marge-sort\">Ⅲ. Marge sort<a href=\"post/20200102-Sorting#Ⅲ-Marge-sort\"></a></h3><h3 id=\"Ⅳ-Bucket-sort\">Ⅳ.  Bucket sort<a href=\"post/20200102-Sorting#Ⅳ-Bucket-sort\"></a></h3><h3 id=\"Ⅴ-Radix-sort\">Ⅴ. Radix sort<a href=\"post/20200102-Sorting#Ⅴ-Radix-sort\"></a></h3><h2 id=\"Part-3-Sort-in-Java\">Part.3 Sort in Java<a href=\"post/20200102-Sorting#Part-3-Sort-in-Java\"></a></h2><p>If we want to sort any type of data,we can use interface to simplify the process.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Client</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXSorter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        X[] x = &#123;x1,x2,x3&#125;;</span><br><span class=\"line\">        x.sort();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Comparable interface (Built in java)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Item</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Item i)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object Implementation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">X</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(X x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sort Implementaion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = x.length();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j&gt;<span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x[j].compareTo(x[j-<span class=\"number\">1</span>])&lt;<span class=\"number\">0</span>) exch(x, j, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part-4-Applications\">Part.4 Applications<a href=\"post/20200102-Sorting#Part-4-Applications\"></a></h2><h3 id=\"Ⅰ-Shuffle\">Ⅰ. Shuffle<a href=\"post/20200102-Sorting#Ⅰ-Shuffle\"></a></h3><p>Goal: rearrange array so that result is uniformly random permutation.</p>\n<ol>\n<li>Generate a random real number (uniformly at random) for each array entry and sort the array based on it.</li>\n<li>Knuth Shuffle: In iteration <code>i</code>, pick integer r between <code>0</code> and <code>i</code> uniformly at random and swap a[i] and a[r].</li>\n</ol>\n<h3 id=\"Ⅱ-Convex-hull\">Ⅱ. Convex hull<a href=\"post/20200102-Sorting#Ⅱ-Convex-hull\"></a></h3><p>Convex hull: a set of N points which is the smallest perimeter fence enclosing the points.<br>Output: Sequence of vertices in counterclockwise order.</p>\n<img src=\"https://i.loli.net/2020/10/18/P5EMAqcuGdSRHU3.png\" alt=\"44\" style=\"zoom: 33%;\">\n\n<p>Geometric properties: </p>\n<img src=\"https://i.loli.net/2020/10/18/sGPg7WBV3NL4crA.png\" alt=\"33\" style=\"zoom: 40%;\">\n\n<ol>\n<li>Can traverse the convex hull by making only counterclockwise turns</li>\n<li>The vertices of convex hull appear in increasing order of polar angle with respect to point p with lowest y-coordinate.</li>\n</ol>\n<p>Graham scan:</p>\n<ol>\n<li>Choose point p with smallest y-coordinate.</li>\n<li>Sort points by polar angle with p.</li>\n<li>Consider points in order; discard unless it create a counterclockwise turn.</li>\n</ol>\n<p>Implement of determine whether it’s a counterclockwise turn:<br><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"57.061ex\" height=\"3.009ex\" style=\"vertical-align: -1.005ex;\" viewbox=\"0 -863.1 24568 1295.7\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\"> 2 x Area(a,b,c) = (b_x - a_x)(c_y - a_y) - (b_y -  a_y)(c_x - a_x) </title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-32\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-78\" x=\"500\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"1073\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"1823\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"2275\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"2741\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"3271\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"3660\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"4190\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"4635\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"5064\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"5509\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"5943\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"6610\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"7666\" y=\"0\"/>\n<g transform=\"translate(8056,0)\">\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"607\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"9212\" y=\"0\"/>\n<g transform=\"translate(10213,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"748\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"11247\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"11637\" y=\"0\"/>\n<g transform=\"translate(12026,0)\">\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"613\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"13134\" y=\"0\"/>\n<g transform=\"translate(14135,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"748\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"15116\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"15728\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"16728\" y=\"0\"/>\n<g transform=\"translate(17118,0)\">\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"607\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"18221\" y=\"0\"/>\n<g transform=\"translate(19222,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"748\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"20203\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"20593\" y=\"0\"/>\n<g transform=\"translate(20982,0)\">\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"613\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"22143\" y=\"0\"/>\n<g transform=\"translate(23144,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"748\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"24178\" y=\"0\"/>\n</g>\n</svg><br>(Based on: the area of a parallelogram is equal to the cross product of two vectors)<br>(v1: (<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.413ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 3191.6 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">b_x - a_x</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"607\" y=\"-213\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"1156\" y=\"0\"/>\n<g transform=\"translate(2157,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"748\" y=\"-213\"/>\n</g>\n</g>\n</svg>, <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.166ex\" height=\"2.843ex\" style=\"vertical-align: -1.005ex;\" viewbox=\"0 -791.3 3085.5 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">b_y -  a_y</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"607\" y=\"-213\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"1103\" y=\"0\"/>\n<g transform=\"translate(2104,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"748\" y=\"-213\"/>\n</g>\n</g>\n</svg>), v2:(<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.422ex\" height=\"2.343ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -719.6 3195.6 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">c_x - a_x</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"613\" y=\"-213\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"1160\" y=\"0\"/>\n<g transform=\"translate(2161,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"748\" y=\"-213\"/>\n</g>\n</g>\n</svg>,<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.176ex\" height=\"2.676ex\" style=\"vertical-align: -1.005ex;\" viewbox=\"0 -719.6 3089.5 1152.1\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">c_y - a_y</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"613\" y=\"-213\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"1107\" y=\"0\"/>\n<g transform=\"translate(2108,0)\">\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-79\" x=\"748\" y=\"-213\"/>\n</g>\n</g>\n</svg>))</p>\n<img src=\"https://i.loli.net/2020/10/18/qlINrFnUkjJsEoc.png\" alt=\"67\" style=\"zoom:45%;\">\n\n<p>See more <a href=\"https://algs4.cs.princeton.edu/99hull/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>Application: </p>\n<ol>\n<li>Robot motion planning.<br>Find shortest path in the plane from s to t that avoids a polygonal obstacle.<br>Shortest path is either straight line from s to t or it is one of two polygonal chains of convex hull.</li>\n<li>Farthest pair problem<br>Given N points in the plane, find a pair of points with the largest Euclidean distance between them.<br>Farthest pair of points are extreme points on convex hull.</li>\n</ol>\n","prev":{"title":"Linear List","slug":"20200425-Linear-List"},"next":{"title":"Algorithm Basics","slug":"20191013-Algorithm-Basics"},"link":"https://oreodu.github.io/post/20200102-Sorting/","toc":[{"title":"Sorting","id":"Sorting","index":"1","children":[{"title":"Part.1 Elementary Sort","id":"Part-1-Elementary-Sort","index":"1.1"},{"title":"Part.3 Sort in Java","id":"Part-3-Sort-in-Java","index":"1.2"},{"title":"Part.4 Applications","id":"Part-4-Applications","index":"1.3"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/post/20200102-Sorting/\" title=\"Sorting\">https://oreodu.github.io/post/20200102-Sorting/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}