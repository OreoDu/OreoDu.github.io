{"title":"Python Basis 02","date":"2020-09-06T07:48:00.000Z","date_formatted":{"ll":"Sep 6, 2020","L":"09/06/2020","MM-DD":"09-06"},"link":"2020/20200906-Python-Basics-02","comments":true,"tags":["Python"],"categories":["Programming"],"updated":"2020-10-03T18:16:02.960Z","content":"<h1 id=\"python-basis-02\">Python Basis 02<a title=\"#python-basis-02\" href=\"#python-basis-02\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<img src=\"https://i.loli.net/2020/09/08/Oz3UJF4QW1m2yos.png\" alt=\"11\" style=\"zoom:50%;\">\n<p><strong>· materials:</strong><br>\n· <a href=\"https://www.py4e.com/\" target=\"_blank\"><u><i>Python for Everybody (Exploring Data Using Python 3)</i></u></a>  by Charles R. Severance<br>\n· <i>Learn Python 3 the Hard Way</i> by Zed A. Shaw<br>\n· <u><a href=\"https://github.com/jackfrued/Python-100-Days\" target=\"_blank\">Python-100-Days</a></u> by jackfrued<br>\n· <u><a href=\"https://docs.python.org/3/tutorial/index.html\" target=\"_blank\">Python Tutorial</a></u><br>\n· <a href=\"https://google.github.io/styleguide/pyguide.html\" target=\"_blank\"><u>Google Python Style Guide</u></a></p>\n<h3 id=\"part.1-input-and-output\">Part.1 Input and Output<a title=\"#part.1-input-and-output\" href=\"#part.1-input-and-output\"></a></h3>\n<p>Usually, we have several ways to get the data we need from the outside. There are two main ways.</p>\n<p>We can simply use <code>input()</code> to get the data from the input devices like keyboards.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;Enter the data:&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Another way is to read the files from our computers or different database.</p>\n<p><strong>Ⅰ. File</strong><br>\nOpen the file.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(filename, mode=<span class=\"string\">&#x27;r&#x27;</span>, buffering=<span class=\"number\">-1</span>, encoding=<span class=\"literal\">None</span>, errors=<span class=\"literal\">None</span>, newline=<span class=\"literal\">None</span>, closefd=<span class=\"literal\">True</span>, opener=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># mode can be &#x27;w&#x27;,&#x27;r&#x27;,&#x27;a&#x27;... (describing the way in which the file will be used)</span></span><br></pre></td></tr></table></figure>\n<img src=\"https://i.loli.net/2020/09/06/3LOGRnblwHTKBDJ.png\" alt=\"11\" style=\"zoom: 50%;\">\n<p>(from <a href=\"https://www.runoob.com/python/python-files-io.html\" target=\"_blank\"><u>here</u></a>)</p>\n<p>It is better to use the <code>with</code> keyword when dealing with file objects. The advantage is that the file is properly closed after all the operations have finished, even if an exception is raised at some point. Otherwise,  you should call <code>f.close()</code> to close the file and immediately free up any system resources used by it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;workfile&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    read_data = f.read()</span><br></pre></td></tr></table></figure>\n<p>The <code>open()</code> method returns a file object and it has lots of built-in methods to deal with the data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Reads some quantity of data and returns it as a string (in text mode)</span></span><br><span class=\"line\">f.read(size)</span><br><span class=\"line\"><span class=\"comment\"># Read a single line from the file,a newline character (\\n) is left.</span></span><br><span class=\"line\">f.readline()</span><br><span class=\"line\"><span class=\"comment\"># Read lines from a file, you can loop over the file object. </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">     print(line, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Read all the lines of a file in a list or use readlines().</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>(f)</span><br><span class=\"line\">f.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Write the contents of string to the file, returning the number of characters written.</span></span><br><span class=\"line\"><span class=\"comment\"># Other types of objects need to be converted before writing to the file.</span></span><br><span class=\"line\">f.write(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Returns an integer giving the file object’s current position.</span></span><br><span class=\"line\">f.tell()</span><br><span class=\"line\"><span class=\"comment\"># Change the file object’s position</span></span><br><span class=\"line\"><span class=\"comment\"># whence: 0-begining,1-current,2-end</span></span><br><span class=\"line\">f.seek(offset, whence)</span><br></pre></td></tr></table></figure>\n<p><strong>Ⅱ. Output Formatting</strong></p>\n<p>There are several ways to present the output of a program : <em>expression statements</em> and the <code>print() </code> function. (A third way is using the <code>write()</code> method of file objects;)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a  = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span> (<span class=\"string\">&#x27;a = &#x27;</span>)) <span class=\"comment\"># 123.4</span></span><br><span class=\"line\">b  = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span> (<span class=\"string\">&#x27;a = &#x27;</span>)) <span class=\"comment\"># 123.3</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;%d +%d = %d&#x27;</span> % (a, b,a + b)) <span class=\"comment\"># 123 + 123 = 246</span></span><br><span class=\"line\">print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;a&#125;</span>+<span class=\"subst\">&#123;b&#125;</span> = <span class=\"subst\">&#123;a+b&#125;</span>&#x27;</span>) <span class=\"comment\"># 123 + 123 = 246</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;&#123;0&#125;+&#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(a, b, a + b)) <span class=\"comment\"># 123 + 123 = 246</span></span><br></pre></td></tr></table></figure>\n<p>( <code>%</code> is  format operator.  <code>%x</code> is a placeholder. <code>%d</code> is for the integer.  <code>%f</code> is for the decimal.<code>%%</code> is for the percent sign. The strings after the <code>%</code> will replace the placeholder and output to the terminal )</p>\n<p>When you don’t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the <code>repr()</code> or <code>str()</code> functions.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">&#x27;Hello, world.&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span>(s)</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello, world.&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>(s)</span><br><span class=\"line\"><span class=\"string\">&quot;&#x27;Hello, world.&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"part.2--scopes-and-namespaces\">Part.2  Scopes and Namespaces<a title=\"#part.2--scopes-and-namespaces\" href=\"#part.2--scopes-and-namespaces\"></a></h3>\n<p><strong>Ⅰ. Namespaces</strong></p>\n<p>A <em>namespace</em> is a mapping from names to objects. Most namespaces are currently implemented as Python dictionaries.</p>\n<p>Examples of namespaces are:<br>\n<strong>·</strong> the set of built-in names (containing functions such as <code>abs()</code>, and built-in exception names);<br>\n<strong>·</strong> the global names in a module;<br>\n<strong>·</strong> the local names in a function invocation.</p>\n<p>There is absolutely no relation between names in different namespaces. Users of the modules must prefix the  items, which are the same name, with the module name.</p>\n<p>Namespaces are created at different moments and have different lifetimes.<br>\nThe namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.<br>\nThe global namespace for a module is created when the module definition is read in. Normally, module namespaces also last until the interpreter quits.<br>\nThe local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function.</p>\n<p><strong>Ⅱ. Scope</strong></p>\n<p>A <em>scope</em> is a textual region of a Python program where an unqualified reference to a name attempts to find the name in the namespace.</p>\n<p>Although scopes are determined statically, they are used dynamically. At any time during execution, there are 3 or 4 nested scopes whose namespaces are directly accessible:</p>\n<ul>\n<li><strong>·</strong> the innermost scope, which is searched first, contains the local names</li>\n<li><strong>·</strong> the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names</li>\n<li><strong>·</strong> the next-to-last scope contains the current module’s global names</li>\n<li><strong>·</strong> the outermost scope (searched last) is the namespace containing built-in names</li>\n</ul>\n<p>The <code>global</code> statement can be used to indicate that particular variables live in the global scope and should be rebound there;<br>\nThe <code>nonlocal</code> statement is used to rebind variables found outside of the innermost scope and indicates that particular variables live in an enclosing scope.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scope_test</span>():</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_local</span>():</span></span><br><span class=\"line\">        spam = <span class=\"string\">&quot;local spam&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_nonlocal</span>():</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> spam</span><br><span class=\"line\">        spam = <span class=\"string\">&quot;nonlocal spam&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_global</span>():</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> spam</span><br><span class=\"line\">        spam = <span class=\"string\">&quot;global spam&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    spam = <span class=\"string\">&quot;test spam&quot;</span></span><br><span class=\"line\">    do_local()</span><br><span class=\"line\">    print(<span class=\"string\">&quot;After local assignment:&quot;</span>, spam) <span class=\"comment\"># After local assignment: test spam</span></span><br><span class=\"line\">    do_nonlocal()</span><br><span class=\"line\">    print(<span class=\"string\">&quot;After nonlocal assignment:&quot;</span>, spam) <span class=\"comment\"># After nonlocal assignment: nonlocal spam</span></span><br><span class=\"line\">    do_global()</span><br><span class=\"line\">    print(<span class=\"string\">&quot;After global assignment:&quot;</span>, spam) <span class=\"comment\"># After global assignment: nonlocal spam</span></span><br><span class=\"line\"></span><br><span class=\"line\">scope_test()</span><br><span class=\"line\">print(<span class=\"string\">&quot;In global scope:&quot;</span>, spam) <span class=\"comment\"># In global scope: global spam</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"part.3--class\">Part.3  Class<a title=\"#part.3--class\" href=\"#part.3--class\"></a></h3>\n<p><strong>Ⅰ. Object-oriented programming (OOP)</strong></p>\n<p>Python is  an object-oriented programing language and almost <strong>every operational item in python is an object</strong>. OOP is a computer programming model that organizes software design around objects, rather than functions and logic.  An object can be defined as a data field that has unique attributes and behavior.</p>\n<p>Object-oriented programming is based on the following principles:</p>\n<ol>\n<li>\n<p>Encapsulation: The implementation and state of each object are privately held inside a defined  class and require all interaction to be performed through an object’s methods.</p>\n</li>\n<li>\n<p>Abstraction:  Objects only reveal internal mechanisms that are relevant for the use of other objects, hiding any unnecessary implementation code.</p>\n</li>\n<li>\n<p>Inheritance: Relationships and subclasses between objects can be assigned, allowing developers to reuse a common logic while still maintaining a unique hierarchy.</p>\n</li>\n<li>\n<p>Polymorphism: It is the provision of a single interface to entities of different types or the use of a single symbol to represent multiple different types.</p>\n</li>\n</ol>\n<p>Python is multi-paradigm with OOP support and is class-based. Classes provide a means of bundling data and functionality together. Each class instance can have attributes attached to it for maintaining its state(the set of values of the attributes of a particular instance) and methods (defined by its class) for modifying its state.</p>\n<p><strong>Ⅱ. Create a class</strong></p>\n<p>Some concepts:</p>\n<p><strong>·</strong> Class: Used to describe a collection of objects with the same properties and methods. It defines the attributes and methods common to each object in the collection. A class serves as a blueprint for its instances</p>\n<p><strong>·</strong> Method: The function defined in the class.</p>\n<p><strong>·</strong> Class variable: Class Variables are variables that are shared by all instances of a class and are defined in the class and outside the function body. Class variables are usually not used as instance variables.</p>\n<p><strong>·</strong> Instance variable: Instance variables are variables used for data that is unique to a particular instance and an instance variable is a variable modified with <code>self</code>.</p>\n<p><strong>·</strong> Data members: Class variables or instance variables which are used to process data related to the class and its instance objects.</p>\n<p><strong>·</strong> Instantiation: Create an instance of a class, the concrete object of the class.</p>\n<p><strong>·</strong> Class method: A class method receives the class as implicit first argument  which is bound to the class and not the instance of the class. They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance. It can modify a class state that would apply across all the instances of the class. For example it can modify a class variable that will be applicable to all the instances.</p>\n<p><strong>·</strong> Static method: A static method does not receive an implicit first argument. A static method is also a method which is bound to the class and not the instance of the class. It can’t access or modify class state. It is present in a class because it makes sense for the method to be present in class.</p>\n<p><strong>·</strong> Abstract method: An abstract method represents a method of the base class, which is not implemented, so the base class cannot be instantiated. And the subclass can only be instantiated if the abstract method is implemented.</p>\n<p><strong>·</strong> Bound method: Methods that are accessed through an instance will be bound methods. They couple together a function and the object on which that method will be invoked. This means that when we invoke bound methods, the instance is automatically passed in as the first argument (<code>self</code>).</p>\n<p>Class objects support two kinds of operations: attribute references and instantiation.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># define the basic attribute</span></span><br><span class=\"line\">    kind = <span class=\"string\">&#x27;mammalia&#x27;</span> <span class=\"comment\"># class variable shared by all instances</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># define the construction method with &#x27;__init__()&#x27;.</span></span><br><span class=\"line\">    <span class=\"comment\"># the instantiation operation of the class will automatically call this method.</span></span><br><span class=\"line\">    <span class=\"comment\"># The method must contain the parameter &#x27;self&#x27; in the first.</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;Self&#x27; represents an instance of the class.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w</span>):</span></span><br><span class=\"line\">        self.name = n   <span class=\"comment\"># instance variable unique to each instance</span></span><br><span class=\"line\">        self.age = a</span><br><span class=\"line\">        <span class=\"comment\"># define private attributes which cannot be accessed directly outside the class</span></span><br><span class=\"line\">        <span class=\"comment\"># starting with two underscores &#x27;__&#x27;.</span></span><br><span class=\"line\">        <span class=\"comment\"># It can be accessed by getter and modified by setter.</span></span><br><span class=\"line\">        self.__weight = w</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">    @property # Accessor-getter method</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">weight</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__weight</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @weight.setter # Modifier-setter method</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">weight</span>(<span class=\"params\">self, weight</span>):</span></span><br><span class=\"line\">        self.__weight = weight</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># define private method</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__foo</span>(<span class=\"params\">self</span>):</span>          </span><br><span class=\"line\">        print(<span class=\"string\">&#x27;This is a private method.&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        print(<span class=\"string\">&quot;%s said: I am %d years old.&quot;</span> %(self.name,self.age))</span><br><span class=\"line\">        self.__foo()</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">staticm</span>():</span></span><br><span class=\"line\">        print(<span class=\"string\">&#x27;static&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classm</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">        print(<span class=\"string\">&#x27;class&#x27;</span>,cls）</span><br><span class=\"line\">              </span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">abstractm</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Instance objects can only understand attribute references operations. </span></span><br><span class=\"line\"><span class=\"comment\"># There are two kinds of valid attribute names: data attributes and methods.</span></span><br><span class=\"line\"><span class=\"comment\"># The instantiation operation of the class</span></span><br><span class=\"line\">p = people(<span class=\"string\">&#x27;Oreo&#x27;</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>)</span><br><span class=\"line\">p.speak() <span class=\"comment\"># Oreo said: I am 10 years old. This is a private method. </span></span><br><span class=\"line\"><span class=\"comment\"># This is equal to people.speak(p)</span></span><br></pre></td></tr></table></figure>\n<p>When a class definition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace. In particular, function definitions bind the name of the new function here. Binding an object to a new name using assignment does not create a new object(only created when the class is called). Every object that is an instance of a user-defined class has a unique identity.</p>\n<p>Python allows you to define a special <code>__slots__</code> variable when defining a class to limit the attributes that can be added to the class instance.</p>\n<p>The <code>dir()</code> method can return a list of valid attributes and methods of the object.</p>\n<p>There are built-in functions that can help us access attributes.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">getattr</span>(p, <span class=\"string\">&#x27;name&#x27;</span>) <span class=\"comment\"># which is the same as p.name</span></span><br><span class=\"line\"><span class=\"built_in\">getattr</span>(people, <span class=\"string\">&#x27;kind&#x27;</span>) <span class=\"comment\"># which is the same as people.kind</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">hasattr</span>(p, <span class=\"string\">&#x27;balance&#x27;</span>) <span class=\"comment\"># returns False</span></span><br><span class=\"line\"><span class=\"built_in\">hasattr</span>(people, <span class=\"string\">&#x27;kind&#x27;</span>) <span class=\"comment\"># returns True</span></span><br></pre></td></tr></table></figure>\n<p>**The evaluation of dot expression: **</p>\n<p>We can access class or instance attributes with dot notation. To evaluate a dot expression:</p>\n<p>1.Evaluate <code>&lt;expression&gt;</code>, which yields an object.<br>\n2.<code>&lt;name&gt;</code> is matched against the instance attributes of that object; if an attribute with that name exists, its value is returned.<br>\n3.If not, the name is looked up in the class, which yields a class attribute value. If it is not found in the class, look in any superclasses.<br>\n4.That value is returned unless it is a function, in which case a bound method is returned instead.</p>\n<p><strong>Ⅲ. Features</strong></p>\n<p><strong>· Inheritance</strong></p>\n<p>This allows classes to be arranged in a hierarchy that represents “is-a-type-of” relationships and allows easy re-use of the same procedures and data definitions.</p>\n<p><strong>· Method override</strong></p>\n<p>Subclasses can override the methods defined by superclass.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Single inheritance</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span>(<span class=\"params\">people</span>):</span></span><br><span class=\"line\">    grade = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w,g</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># Call the constructor of the parent class</span></span><br><span class=\"line\">        people.__init__(self,n,a,w)</span><br><span class=\"line\">        self.grade = g </span><br><span class=\"line\">    <span class=\"comment\"># Override the method of the parent class</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        print(<span class=\"string\">&quot;%s said: I am %d years old and is %d grade.&quot;</span>%(self.name,self.age,self.grade))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">speaker</span>():</span></span><br><span class=\"line\">    topic = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,t</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.topic = t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        print(<span class=\"string\">&quot;My name is %s，I am a speaker and the topic of my speech is %s.&quot;</span>%(self.name,self.topic))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Multiple inheritance</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sample</span>(<span class=\"params\">speaker,student</span>):</span></span><br><span class=\"line\">    a =<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w,g,t</span>):</span></span><br><span class=\"line\">        student.__init__(self,n,a,w,g)</span><br><span class=\"line\">        speaker.__init__(self,n,t)</span><br><span class=\"line\"> </span><br><span class=\"line\">test = sample(<span class=\"string\">&quot;Oreo&quot;</span>,<span class=\"number\">25</span>,<span class=\"number\">80</span>,<span class=\"number\">4</span>,<span class=\"string\">&quot;Python&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If the method names are the same, </span></span><br><span class=\"line\"><span class=\"comment\"># the method of the parent class in front of the brackets is called by default.</span></span><br><span class=\"line\">test.speak()   <span class=\"comment\"># My name is Oreo，I am a speaker and the topic of my speech is Python.</span></span><br><span class=\"line\"><span class=\"comment\"># test.speak() is a method object and can be stored away and called at a later time.</span></span><br></pre></td></tr></table></figure>\n<p>The <code>super()</code> function is a method used to call the parent class. <code>super(student,test).speak()</code></p>\n<p><strong>· Operator overloading</strong></p>\n<p>It is a specific case of polymorphism, where different operators have different implementations depending on their arguments.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, a, b</span>):</span></span><br><span class=\"line\">      self.a = a</span><br><span class=\"line\">      self.b = b</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self,other</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class=\"line\"> </span><br><span class=\"line\">v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">v2 = Vector(<span class=\"number\">5</span>,<span class=\"number\">-2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (v1 + v2)</span><br></pre></td></tr></table></figure>\n<p><strong>· Special method</strong></p>\n<p>They are a variety of instance methods that are reserved by Python, which affect an object’s high level behavior and its interactions with operators.</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Method</th>\n<th>Signature</th>\n<th>Explanation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Returns string for a printable representation of object</td>\n<td><code>__repr__(self)</code></td>\n<td><code>repr(x)</code> invokes <code>x.__repr__()</code>,this is also invoked when an object is returned by a console.</td>\n</tr>\n<tr>\n<td>Returns string representation of an object</td>\n<td><code>__str__(self)</code></td>\n<td><code>str(x)</code> invokes <code>x.__str__()</code></td>\n</tr>\n<tr>\n<td>Add</td>\n<td><code>__add__(self, other)</code></td>\n<td><code>x + y</code> invokes <code>x.__add__(y)</code></td>\n</tr>\n<tr>\n<td>Subtract</td>\n<td><code>__sub__(self, other)</code></td>\n<td><code>x - y</code> invokes <code>x.__sub__(y)</code></td>\n</tr>\n<tr>\n<td>Multiply</td>\n<td><code>__mul__(self, other)</code></td>\n<td><code>x * y</code> invokes <code>x.__mul__(y)</code></td>\n</tr>\n<tr>\n<td>Divide</td>\n<td><code>__truediv__(self, other)</code></td>\n<td><code>x / y</code> invokes <code>x.__truediv__(y)</code></td>\n</tr>\n<tr>\n<td>Power</td>\n<td><code>__pow__(self, other)</code></td>\n<td><code>x ** y</code> invokes <code>x.__pow__(y)</code></td>\n</tr>\n<tr>\n<td>Length</td>\n<td><code>__len__(self)</code></td>\n<td><code>len(x)</code> invokes <code>x.__len__()</code></td>\n</tr>\n<tr>\n<td>Get Item</td>\n<td><code>__getitem__(self, key)</code></td>\n<td><code>x[key]</code> invokes <code>x.__getitem__(key)</code></td>\n</tr>\n<tr>\n<td>Set Item</td>\n<td><code>__setitem__(self, key, item)</code></td>\n<td><code>x[key] = item</code> invokes <code>x.__setitem__(key, item)</code></td>\n</tr>\n<tr>\n<td>Contains</td>\n<td><code>__contains__(self, item)</code></td>\n<td><code>item in x</code> invokes <code>x.__contains__(item)</code></td>\n</tr>\n<tr>\n<td>Iterator</td>\n<td><code>__iter__(self)</code></td>\n<td><code>iter(x)</code> invokes <code>x.__iter__()</code></td>\n</tr>\n<tr>\n<td>Next</td>\n<td><code>__next__(self)</code></td>\n<td><code>next(x)</code> invokes <code>x.__next__()</code></td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"part.4-iterators-and-generators\">Part.4 Iterators and Generators<a title=\"#part.4-iterators-and-generators\" href=\"#part.4-iterators-and-generators\"></a></h3>\n<p>In python, iterators and generators allowed for lazy evaluation. (delays evaluation of an expression until its value is needed.)</p>\n<p><strong>Ⅰ. Iterators</strong></p>\n<p>Iterators are used to represent infinite sequences.</p>\n<p>Iterable - An object capable of returning its members one at a time. Examples include all sequences (lists, strings, tuples) and some non-sequence types (dictionaries).</p>\n<p>An iterator is an object that can remember the position of the traversal. It accesses the first element of the collection(any container object) until all the elements are accessed and it can only go forward.</p>\n<p>All iterators are iterables. Not all iterables are iterators. Iterables are books &amp; Iterators are bookmarks.</p>\n<p>There are two basic methods for iterators: <code>iter(iterable)</code> and <code>next(iterator)</code>. String, list or tuple objects can all be used to create iterators.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span>=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(<span class=\"built_in\">list</span>)    <span class=\"comment\"># Create iterator object (Turn iterables into iterators)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"built_in\">next</span>(it))   <span class=\"comment\"># Output the next element of the iterator # 1</span></span><br></pre></td></tr></table></figure>\n<p>Using a class as an iterator requires implementing two methods in the class <code>__iter__()</code> and <code>__next__()</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    self.a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">      x = self.a</span><br><span class=\"line\">      self.a += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> StopIteration </span><br><span class=\"line\">    <span class=\"comment\"># be triggered to end the iteration after completing the specified number of loops.</span></span><br><span class=\"line\"> </span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = <span class=\"built_in\">iter</span>(myclass)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> myiter:</span><br><span class=\"line\">  print(x)</span><br></pre></td></tr></table></figure>\n<p>The <code>__iter__()</code> method returns a special iterator object, which implements the <code>__next__()</code> method that returns the next iterator object and accesses elements in the container one at a time. When there are no more elements, <code>__next__()</code> raises a  <code>StopIteration</code> exception  to identify the completion of the iteration.</p>\n<p><strong>Ⅱ.  Generators</strong></p>\n<p>In Python, a function that uses <code>yield</code> is called a generator.</p>\n<p>Generators are a simple and powerful tool for creating iterators. They are written like regular functions but use the <code>yield</code> statement whenever they want to return data. Each time <code>next()</code> is called on it, the generator goes into the function and evaluates to the first yield statement. The next time we call next on it, it  resumes where it left off (it remembers all the data values and which statement was last executed). Once the generator hits a return statement, it raises a StopIteration.</p>\n<p>When a generator function is called, it returns a generator <strong>instead of</strong> going into the body of the function. The only way to go into the body of a generator function is by calling next on the returned generator.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f is an iterator and return by the generator function(fibonacci).</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"built_in\">next</span>(f), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n<p>A <code>yield from</code> statement yields all values from an iterable.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countdown</span>(<span class=\"params\">k</span>):</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> k == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"string\">&#x27;Blast off&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> k</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> countdown(k<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"part.5-regular-expressions\">Part.5 Regular Expressions<a title=\"#part.5-regular-expressions\" href=\"#part.5-regular-expressions\"></a></h3>\n<p><strong>Ⅰ. Basic concept</strong></p>\n<p>Regular expression is a sequence of characters that define a search pattern. It can be used to check whether a string contains a certain substring, replace the matched substring, or extract it.</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Oreoisa*irl <span class=\"comment\"># &#x27;*&#x27; means the preceding character can appear 0 or 1 or more times.</span></span><br><span class=\"line\">Oreoisa+irl <span class=\"comment\"># &#x27;+&#x27; means the preceding character must appear at least once.</span></span><br><span class=\"line\">Oreoisa?irl <span class=\"comment\"># &#x27;?&#x27; means the preceding character can appear only 0 or 1 time.</span></span><br></pre></td></tr></table></figure>\n<p>Regular expressions are text patterns composed of ordinary characters (such as characters a to z) and special characters (called “metacharacters”). The components of a regular expression can be a single or a set of characters, the range of characters, a selection between characters, or any combination of all these components.</p>\n<p><strong>· ordinary character</strong></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>character</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[ABC]</code></td>\n<td>match all the characters in the […]</td>\n</tr>\n<tr>\n<td><code>[^ABC]</code></td>\n<td>match any character except the ones in the […]</td>\n</tr>\n<tr>\n<td><code>[A-Z]</code></td>\n<td>match all the characters range from the first character in the […] to the last one.</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>matches any single character except the newline character (\\n, \\r), which is equivalent to <code>[^\\n\\r]</code>.</td>\n</tr>\n<tr>\n<td><code>[\\s\\S]</code></td>\n<td>match all the characters. <code>\\s</code> matches all whitespace characters, including newlines, <code>\\S </code> matches non-whitespace characters, including newlines.</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>match letters, numbers, and underscores. Equivalent to [A-Za-z0-9_]</td>\n</tr>\n<tr>\n<td>…</td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><p><strong>· Non-printing characters</strong></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>character</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\f</code></td>\n<td>Matches a form feed character. Equivalent to \\x0c and \\cL.</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>Match a newline character. Equivalent to \\x0a and \\cJ.</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>Matches a carriage return character. Equivalent to \\x0d and \\cM.</td>\n</tr>\n<tr>\n<td>…</td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><p><strong>· Special characters</strong></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>character</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$</code></td>\n<td>Match the end position of the input string. To match the $ character itself, use <code>\\$</code>.</td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>Mark the beginning and end of a sub-expression. The sub-expression can be retrieved for later use. To match these characters, use <code><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.134ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 2210.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">` and `</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2018\" d=\"M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"278\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"808\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"1408\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"1932\" y=\"0\"/>\n</g>\n</svg></code>.</td>\n</tr>\n<tr>\n<td><code>*</code>,<code>+</code>,<code>?</code></td>\n<td>See details above. To match the <code>*,+,?</code> character itself, use <code>\\*</code>,<code>\\+</code>,<code>\\?</code></td>\n</tr>\n<tr>\n<td><code>|</code></td>\n<td>Specify a choice between the two. To match <code>\\|</code>, use <code>\\|</code></td>\n</tr>\n<tr>\n<td>…</td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><p><strong>· Qualifier</strong></p>\n<p>The qualifier is used to specify how many times a given component of the regular expression must appear to satisfy the match. There are 6 kinds of <code>*</code> or <code>+</code> or <code>?</code> or <code>&#123;n&#125; </code> or <code>&#123;n,&#125;</code> or  <code>&#123;n,m&#125;</code>.</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>character</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>n is a non-negative integer. Matches certain character n times.</td>\n</tr>\n<tr>\n<td><code>&#123;n,&#125;</code></td>\n<td>n is a non-negative integer. Matches certain character at least n times.</td>\n</tr>\n<tr>\n<td><code>&#123;n,m&#125;</code></td>\n<td>Both m and n are non-negative integers, where n &lt;= m. Matches certain character at least n times and at most m times.</td>\n</tr>\n</tbody>\n</table></div></div><p>The repeat character(<code>*</code> or <code>+</code> ) push outward in both directions(greedy matching) to match the largest possible string. However, if we add a <code>?</code> , <code>*</code> or <code>+</code>  chill out a bit.</p>\n<p><strong>· Locator</strong></p>\n<p>The locator allows you to fix the regular expression to the beginning or end of a line. Or used to describe the boundary of a string or word.</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>character</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>Matches the position at the beginning of the input string.</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>Matches the position at the end of the input string.</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>Match a word boundary, that is, the position between a word and a space.</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>Match any character except a word boundary.</td>\n</tr>\n</tbody>\n</table></div></div><p><strong>· Selection</strong></p>\n<p><code>() </code> means the capture group, <code>()</code> will save the matching value in each group, multiple matching values can be viewed by the number n (n is a number, representing the content of the nth capture group).</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/([<span class=\"number\">0</span>-<span class=\"number\">9</span>])([a-z]+)  \\<span class=\"number\">1</span> /g  <span class=\"comment\"># \\1 specifies the first submatch.</span></span><br><span class=\"line\"><span class=\"comment\"># Capture all strings that start with a number and end with multiple letters</span></span><br></pre></td></tr></table></figure>\n<p>Parentheses tell where to start and stop what string to extract.</p>\n<p><strong>· Non-capturing element</strong></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>character</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>?=</code></td>\n<td>exp1(?=exp2) : Find exp1 before exp2</td>\n</tr>\n<tr>\n<td><code>?&lt;=</code></td>\n<td>(?&lt;=exp2)exp1 : Find exp1 after exp2</td>\n</tr>\n<tr>\n<td><code>?!</code></td>\n<td>exp1(?!exp2) : Find exp1 that does not follow exp2.</td>\n</tr>\n<tr>\n<td><code>?&lt;!</code></td>\n<td>(?&lt;!=exp2)exp1 : Find exp1 that is not preceding exp2.</td>\n</tr>\n</tbody>\n</table></div></div><p><strong>· Modifier (tag)</strong></p>\n<p>Tags are used to specify additional matching strategies and are written outside the expression.</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>character</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>i</code></td>\n<td>ignore : not case sensitive</td>\n</tr>\n<tr>\n<td><code>g</code></td>\n<td>global : Global match</td>\n</tr>\n<tr>\n<td><code>m</code></td>\n<td>more : Multi-line matching</td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td>Make the special character dot contains the newline character <code>\\n</code></td>\n</tr>\n</tbody>\n</table></div></div><p><strong>· Operator precedence</strong></p>\n<p><code>\\</code>, <code>(), (?:), (?=), []</code>, <code>*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;</code>, <code>^, $, \\any character、any character</code>, <code>|</code></p>\n<p><strong>Ⅱ. re — Regular expression operation</strong></p>\n<p><a href=\"https://docs.python.org/3/library/re.html\" target=\"_blank\"><u>More details</u></a></p>\n<p><strong>· re.match and re.search</strong><br>\n<code>re.match</code> only matches the beginning of the string. If the string does not match the regular expression at the beginning, the match fails, the function returns None, and <code>re.search</code> matches the entire string until a match is found.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># re.match(pattern, string, flags=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"> </span><br><span class=\"line\">line = <span class=\"string\">&quot;Cats are smarter than dogs&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">matchObj = re.match( <span class=\"string\">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class=\"line\"><span class=\"keyword\">if</span> matchObj:</span><br><span class=\"line\">   <span class=\"built_in\">print</span> (<span class=\"string\">&quot;match --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"built_in\">print</span> (<span class=\"string\">&quot;No match!!&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">matchObj = re.search( <span class=\"string\">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class=\"line\"><span class=\"keyword\">if</span> matchObj:</span><br><span class=\"line\">   <span class=\"built_in\">print</span> (<span class=\"string\">&quot;search --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"built_in\">print</span> (<span class=\"string\">&quot;No match!!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">No match!!</span></span><br><span class=\"line\"><span class=\"string\">search --&gt; matchObj.group() :  dogs</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>· re.sub</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># re.sub(pattern, repl, string, count=0, flags=0)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Multiply the matched number by 2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">double</span>(<span class=\"params\">matched</span>):</span></span><br><span class=\"line\">    value = <span class=\"built_in\">int</span>(matched.group(<span class=\"string\">&#x27;value&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(value * <span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">s = <span class=\"string\">&#x27;A23G4HFD567&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># ?P&lt;value&gt; means to name a group as value to match the rule to match the following /d+</span></span><br><span class=\"line\">print(re.sub(<span class=\"string\">&#x27;(?P&lt;value&gt;\\d+)&#x27;</span>, double, s)) <span class=\"comment\"># A46G8HFD1134</span></span><br></pre></td></tr></table></figure>\n<p><strong>· re.compile</strong></p>\n<p>The compile function is used to compile regular expressions and generate a regular expression (Pattern) object for use by the match() and search() functions.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;\\d+&#x27;</span>)                    <span class=\"comment\"># Match at least one digit</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = pattern.match(<span class=\"string\">&#x27;one12twothree34four&#x27;</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>) <span class=\"comment\"># Match from the position of &#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print( m )                                        <span class=\"comment\"># Returns a Match object</span></span><br><span class=\"line\">&lt;_sre.SRE_Match <span class=\"built_in\">object</span> at <span class=\"number\">0x10a42aac0</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">0</span>)   </span><br><span class=\"line\"><span class=\"string\">&#x27;12&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.start(<span class=\"number\">0</span>)   </span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.end(<span class=\"number\">0</span>)     </span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.span(<span class=\"number\">0</span>)    </span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>· findall</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"> </span><br><span class=\"line\">pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;\\d+&#x27;</span>)   <span class=\"comment\"># find number</span></span><br><span class=\"line\">result1 = pattern.findall(<span class=\"string\">&#x27;runoob 123 google 456&#x27;</span>)</span><br><span class=\"line\">result2 = pattern.findall(<span class=\"string\">&#x27;run88oob123google456&#x27;</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">print(result1) <span class=\"comment\"># [&#x27;123&#x27;, &#x27;456&#x27;]</span></span><br><span class=\"line\">print(result2) <span class=\"comment\"># [&#x27;88&#x27;, &#x27;12&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"part.5-test\">Part.5 Test<a title=\"#part.5-test\" href=\"#part.5-test\"></a></h3>\n<p><strong>Ⅰ. doctest — Test interactive Python examples</strong></p>\n<p>The <code>doctest</code> module searches for pieces of text that look like interactive Python sessions, and then executes those sessions to verify that they work exactly as shown.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; multiply(4, 3)</span></span><br><span class=\"line\"><span class=\"string\">    12</span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; multiply(&#x27;a&#x27;, 3)</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> doctest</span><br><span class=\"line\">    doctest.testmod(verbose=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>Ⅱ. unittest — Unit testing framework</strong></p>\n<p>The unittest unit testing framework was originally inspired by JUnit and has a similar flavor as major unit testing frameworks in other languages. It supports test automation, sharing of setup and shutdown code for tests, aggregation of tests into collections, and independence of the tests from the reporting framework.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStringMethods</span>(<span class=\"params\">unittest.TestCase</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_upper</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.assertEqual(<span class=\"string\">&#x27;foo&#x27;</span>.upper(), <span class=\"string\">&#x27;FOO&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_isupper</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.assertTrue(<span class=\"string\">&#x27;FOO&#x27;</span>.isupper())</span><br><span class=\"line\">        self.assertFalse(<span class=\"string\">&#x27;Foo&#x27;</span>.isupper())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_split</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        s = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\">        self.assertEqual(s.split(), [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>])</span><br><span class=\"line\">        <span class=\"comment\"># check that s.split fails when the separator is not a string</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(TypeError):</span><br><span class=\"line\">            s.split(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"part.6-errors-and-exceptions\">Part.6 Errors and Exceptions<a title=\"#part.6-errors-and-exceptions\" href=\"#part.6-errors-and-exceptions\"></a></h3>\n<p>Program should be written precisely otherwise the deviations and mistakes in your code will cause the Python to stop and can’t work out the final result. There are three main types of errors that you may encounter during.</p>\n<p><strong>·</strong> Syntax errors:</p>\n<p>A syntax error means that you have violated the “grammar” rules of Python.</p>\n<p><strong>·</strong> Logic errors:</p>\n<p>A mistake in the order of the statements or in how the statements relate to one another.</p>\n<p><strong>·</strong> Semantic errors:</p>\n<p>The program is perfectly correct but it does not do what you intended for it to do.</p>\n<p><strong>· Exceptions</strong></p>\n<p>Errors detected during execution are called <em>exceptions</em> and are not unconditionally fatal. Most exceptions are not handled by programs, however, and result in error messages. Exceptions come in different types, and the type is printed as part of the message.</p>\n<p><a href=\"https://docs.python.org/3/library/exceptions.html#bltin-exceptions\" target=\"_blank\">Built-in Exceptions</a>  lists the built-in exceptions and their meanings.</p>\n<p><strong>· Handling Exceptions</strong></p>\n<p>It is possible to write programs that handle selected exceptions. A user-generated interruption is signaled by raising different types of exception.</p>\n<p><strong>try/except :</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;myfile.txt&#x27;</span>)</span><br><span class=\"line\">    s = f.readline()</span><br><span class=\"line\">    i = <span class=\"built_in\">int</span>(s.strip())</span><br><span class=\"line\"><span class=\"keyword\">except</span> OSError <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;OS error: &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(err))</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Could not convert data to an integer.&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">raise</span></span><br></pre></td></tr></table></figure>\n<p><strong>try/except … else :</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> sys.argv[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        f = <span class=\"built_in\">open</span>(arg, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;cannot open&#x27;</span>, arg)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Excute when there is no error happen</span></span><br><span class=\"line\">        print(arg, <span class=\"string\">&#x27;has&#x27;</span>, <span class=\"built_in\">len</span>(f.readlines()), <span class=\"string\">&#x27;lines&#x27;</span>) </span><br><span class=\"line\">        f.close()</span><br></pre></td></tr></table></figure>\n<p><strong>try-finally :</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    function()</span><br><span class=\"line\"><span class=\"keyword\">except</span> AssertionError <span class=\"keyword\">as</span> error:</span><br><span class=\"line\">    print(error)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;file.log&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            read_data = file.read()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError <span class=\"keyword\">as</span> fnf_error:</span><br><span class=\"line\">        print(fnf_error)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;This line will be executed regardless of whether an exception occurs.&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>· Raising Exceptions</strong></p>\n<p>The sole argument to <code>raise</code> indicates the exception to be raised. This must be either an exception instance or an exception class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&#x27;x can not be greater than 5。x : &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(x))</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">     print(<span class=\"string\">&#x27;An exception flew by!&#x27;</span>)</span><br><span class=\"line\">     <span class=\"keyword\">raise</span></span><br></pre></td></tr></table></figure>\n<p><strong>· User-defined Exceptions</strong></p>\n<p>Programs may name their own exceptions by creating a new exception class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span>(<span class=\"params\">Exception</span>):</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">            self.value = value</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">repr</span>(self.value)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> MyError(<span class=\"number\">2</span>*<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> MyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;My exception occurred, value:&#x27;</span>, e.value) <span class=\"comment\"># My exception occurred, value: 4</span></span><br></pre></td></tr></table></figure>\n<p><strong>· Assert (prevent bugs)</strong></p>\n<p>The <code>assert</code> keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">assert</span> (<span class=\"string\">&#x27;linux&#x27;</span> <span class=\"keyword\">in</span> sys.platform), <span class=\"string\">&quot;This code can only be excuted in Linux.&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"part.7-standard-library\">Part.7 Standard Library<a title=\"#part.7-standard-library\" href=\"#part.7-standard-library\"></a></h3>\n<p><a href=\"https://docs.python.org/3/library/index.html\" target=\"_blank\"><u>For details</u></a></p>\n<h3 id=\"part.-exercise\">Part. Exercise<a title=\"#part.-exercise\" href=\"#part.-exercise\"></a></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Card</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;One card&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, suite, face</span>):</span></span><br><span class=\"line\">        self._suite = suite</span><br><span class=\"line\">        self._face = face</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">face</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._face</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._suite</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._face == <span class=\"number\">1</span>:</span><br><span class=\"line\">            face_str = <span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self._face == <span class=\"number\">11</span>:</span><br><span class=\"line\">            face_str = <span class=\"string\">&#x27;J&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self._face == <span class=\"number\">12</span>:</span><br><span class=\"line\">            face_str = <span class=\"string\">&#x27;Q&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self._face == <span class=\"number\">13</span>:</span><br><span class=\"line\">            face_str = <span class=\"string\">&#x27;K&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            face_str = <span class=\"built_in\">str</span>(self._face)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;%s%s&#x27;</span> % (self._suite, face_str)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__str__()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Poker</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;A deck of cards&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self._cards = [Card(suite, face) </span><br><span class=\"line\">                       <span class=\"keyword\">for</span> suite <span class=\"keyword\">in</span> <span class=\"string\">&#x27;♠♥♣♦&#x27;</span></span><br><span class=\"line\">                       <span class=\"keyword\">for</span> face <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">14</span>)]</span><br><span class=\"line\">        self._current = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cards</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._cards</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shuffle</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Shuffle (random out of order)&quot;&quot;&quot;</span></span><br><span class=\"line\">        self._current = <span class=\"number\">0</span></span><br><span class=\"line\">        random.shuffle(self._cards)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Deal a card&quot;&quot;&quot;</span></span><br><span class=\"line\">        card = self._cards[self._current]</span><br><span class=\"line\">        self._current += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> card</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_next</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;have card or not&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._current &lt; <span class=\"built_in\">len</span>(self._cards)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Player&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._cards_on_hand = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cards_on_hand</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._cards_on_hand</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, card</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Draw a card&quot;&quot;&quot;</span></span><br><span class=\"line\">        self._cards_on_hand.append(card)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">arrange</span>(<span class=\"params\">self, card_key</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Arrange the cards in his hand&quot;&quot;&quot;</span></span><br><span class=\"line\">        self._cards_on_hand.sort(key=card_key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Sorting rules-sort by suit and then by points</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_key</span>(<span class=\"params\">card</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (card.suite, card.face)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    p = Poker()</span><br><span class=\"line\">    p.shuffle()</span><br><span class=\"line\">    players = [Player(<span class=\"string\">&#x27;1&#x27;</span>), Player(<span class=\"string\">&#x27;2&#x27;</span>), Player(<span class=\"string\">&#x27;3&#x27;</span>), Player(<span class=\"string\">&#x27;4&#x27;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">13</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> player <span class=\"keyword\">in</span> players:</span><br><span class=\"line\">            player.get(p.<span class=\"built_in\">next</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> player <span class=\"keyword\">in</span> players:</span><br><span class=\"line\">        print(player.name + <span class=\"string\">&#x27;:&#x27;</span>, end=<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        player.arrange(get_key)</span><br><span class=\"line\">        print(player.cards_on_hand)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Python Basis 03","link":"2020/20200908-Python-Basics-03"},"next":{"title":"Feature Engineering","link":"2020/20200716-Feature-Engineering"},"plink":"https://oreodu.github.io/2020/20200906-Python-Basics-02/","toc":[{"id":"python-basis-02","title":"Python Basis 02","index":"1"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20200906-Python-Basics-02/\" title=\"Python Basis 02\">https://oreodu.github.io/2020/20200906-Python-Basics-02/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}