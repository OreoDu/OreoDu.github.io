{"title":"Java Basics 01","date":"2020-09-17T09:30:00.000Z","thumbnail":"https://i.loli.net/2020/09/09/r8vytkAuwUETsJZ.jpg","slug":"20200917-Java-Basics-01","tags":["Java"],"categories":["Programming"],"updated":"2020-09-29T08:13:15.156Z","content":"<h1 id=\"Java-Basics-01\">Java Basics 01<a href=\"post/20200917-Java-Basics-01#Java-Basics-01\"></a></h1><h3 id=\"Overview\">Overview<a href=\"post/20200917-Java-Basics-01#Overview\"></a></h3><p>(概略图)</p>\n<p><strong>· materials:</strong><br>   · <a href=\"https://sp19.datastructur.es/\" target=\"_blank\" rel=\"noopener\"><u>CS61B Spring 2019 at UCB</u></a><br>   · <a href=\"https://docs.oracle.com/javase/tutorial/\" target=\"_blank\" rel=\"noopener\"><u>Java Tutorial</u></a><br>   · <a href=\"https://www.oracle.com/java/technologies/language-environment.html\" target=\"_blank\" rel=\"noopener\"><u>The Java Language Environment</u></a> by <em>James Gosling</em> and <em>Henry McGilton</em><br>   · Wikipedia<br>   · <a href=\"https://google.github.io/styleguide/javaguide.html\" target=\"_blank\" rel=\"noopener\"><u>Google Java Style Guide</u></a></p>\n<h3 id=\"Part-1-General-View\">Part.1 General View<a href=\"post/20200917-Java-Basics-01#Part-1-General-View\"></a></h3><p>Java is the general term for Java object-oriented programming language and Java platform launched by Sun Microsystems in May 1995.</p>\n<p>Java is divided into three systems:<br>· JavaSE (Java2 Platform Standard Edition)<br>· JavaEE (Java 2 Platform, Enterprise Edition)<br>· JavaME (Java 2 Platform Micro Edition).</p>\n<p><strong>Java Platform：</strong><br>A platform is the hardware or software environment in which a program runs but Java platform is a software-only platform that runs on top of other hardware-based platforms. As a platform-independent environment, the Java platform can be a bit slower than native code. However, advances in compiler and virtual machine technologies are bringing performance close to that of native code without threatening portability.</p>\n<p>The Java platform has two components:<br><strong>· The Java Virtual Machine</strong><br>A Java virtual machine (JVM) is a virtual machine that enables a computer to run Java programs as well as programs written in other languages that are also compiled to Java bytecode.</p>\n<p><strong>· The Java Application Programming Interface (API)</strong><br>The API is a large collection of ready-made software components that provide many useful capabilities. It is grouped into libraries of related classes and interfaces; these libraries are known as <em>packages</em>.</p>\n<h4 id=\"Ⅰ-Main-Features\">Ⅰ. Main Features<a href=\"post/20200917-Java-Basics-01#Ⅰ-Main-Features\"></a></h4><p><a href=\"https://www.oracle.com/java/technologies/language-environment.html\" target=\"_blank\" rel=\"noopener\"><u>See more details here</u></a></p>\n<p><strong>· Simple</strong></p>\n<p>Easy to learn and use from the very beginning.</p>\n<p><strong>· Object Oriented</strong></p>\n<p>Java language is a pure object-oriented programming language and provides object-oriented features such as classes, interfaces, and inheritance. It only supports single inheritance between classes, but supports multiple inheritance between interfaces, and supports the implementation mechanism between classes and interfaces.</p>\n<p><strong>· Portable and Architecture Neutral</strong></p>\n<p>Java technology is designed to support applications that will be deployed into heterogeneous network environments which requires that applications must be capable of executing on a variety of hardware architectures. The Java Compiler generates <em>bytecodes</em> – an <em>architecture neutral</em> intermediate format designed to transport code efficiently to multiple hardware and software platforms. The architecture-neutral and portable language platform of Java technology is known as the <em>Java virtual machine</em>.</p>\n<p>Also being strict in its definition of the basic language (specifies the sizes of its basic data types and the behavior of its arithmetic operators) makes the programs the same on every platform–there are no data type incompatibilities across hardware and software architectures.</p>\n<p> <strong>· Interpreted, Dynamic and Multithreaded</strong></p>\n<p>The <em>Java interpreter</em> can execute Java bytecodes directly on any machine to which the interpreter and run-time system have been ported. The classes required by the Java program can be <em>dynamically</em> loaded into the run-time system, and the required classes can also be loaded through the network. While the Java Compiler is strict in its compile-time static checking, the language and run-time system are dynamic in their linking stages. Classes are linked only as needed.</p>\n<p>The Java platform supports multithreading at the language level with the addition of sophisticated synchronization primitives: the language library provides the Thread class, and the run-time system provides monitor and condition lock primitives. </p>\n<p><strong>· Distributed</strong></p>\n<p>Java supports the development of Internet applications. There is a network application programming interface (java net) in the basic Java application programming interface, which provides a class library for network application programming, including URL,etc. Java’s RMI (Remote Method Activation) mechanism is also an important means of developing distributed applications.</p>\n<p><strong>· Robust and Secure</strong></p>\n<p>Java provides extensive compile-time checking, followed by a second level of run-time checking. Also there are no explicit programmer-defined pointer data types, no pointer arithmetic, and automatic garbage collection. </p>\n<p>Java is designed to operate in distributed environments,  which means that applications written in the Java programming language are secure from intrusion by unauthorized code attempting to get behind the scenes and create viruses or invade file systems.</p>\n<p><strong>· High performance</strong></p>\n<p>The Java platform achieves superior performance by adopting a scheme by which the interpreter can run at full speed without needing to check the run-time environment. The automatic garbage collector runs as a low-priority background thread, ensuring a high probability that memory is available when required, leading to better performance. </p>\n<h4 id=\"Ⅱ-A-Simple-Example\">Ⅱ. A Simple Example<a href=\"post/20200917-Java-Basics-01#Ⅱ-A-Simple-Example\"></a></h4><h5 id=\"1-To-write-a-java-program-you’ll-need\">1) To write a java program, you’ll need:<a href=\"post/20200917-Java-Basics-01#1-To-write-a-java-program-you’ll-need\"></a></h5><p><strong>· The JDK</strong></p>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">Download the Windows version now</a>. (Make sure you download the <strong>JDK</strong>, <em>not</em> the JRE.)<br>Consult the <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html\" target=\"_blank\" rel=\"noopener\">installation instructions</a>.</p>\n<p>JDK: (Java Development Kit) It is an implementation of either one of the Java Platform and is the core of the entire Java development.The JDK integrates a private JVM and a few other resources(such as javac…) to finish the development of a Java application.</p>\n<p>JRE: (Java Runtime Environment) It mainly contains two parts, the standard implementation of JVM and some basic Java libraries.</p>\n<p><strong>· A text editor</strong> </p>\n<h5 id=\"2-To-create-a-program-you-will\">2) To create a program, you will:<a href=\"post/20200917-Java-Basics-01#2-To-create-a-program-you-will\"></a></h5><ul>\n<li><p>· Create a source file</p>\n<p>A source file contains code, written in the Java programming language. You can use any text editor to create and edit source files.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * The HelloWorldApp class implements an application that\n * simply prints \"Hello World!\" to standard output.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldApp</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Display the string.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>· Compile the source file into a .class file</p>\n<p>The Java programming language <em>compiler</em> (<code>javac</code>) takes your source file and translates its text into instructions that the Java virtual machine can understand. The instructions contained within this file are known as <em>bytecodes</em>.</p>\n</li>\n<li><p>· Run the program</p>\n<p>The Java application <em>launcher tool</em> uses the Java virtual machine to run your application.</p>\n</li>\n</ul>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/17/Qdf4O7nWcZ2BsXu.gif\" alt=\"getStarted-compiler\" data-zoomable></p></div>\n<p>​                                                                              (from Java tutorial)</p>\n<h5 id=\"3-Content-in-the-source-file\">3) Content in the source file<a href=\"post/20200917-Java-Basics-01#3-Content-in-the-source-file\"></a></h5><p>· Comment<br>Comments are ignored by the compiler but are useful to other programmers.<br><code>/* text */</code><br><code>/** documentation */</code><br>This indicates a documentation comment (<em>doc comment</em>, for short). The <code>javadoc</code> tool uses doc comments when preparing automatically generated documentation. For more information on <code>javadoc</code>, see the <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/index.html\" target=\"_blank\" rel=\"noopener\">Javadoc™ tool documentation</a> .<br><code>// text</code></p>\n<p>· Class definition<br>The file name must be consistent with the class name.</p>\n<p>· The <code>main</code> method<br>In the Java programming language, every application must contain a <code>main</code> method whose signature is:</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></code></pre>\n<p>The <code>main</code> method accepts a single argument: an array of elements of type <code>String</code>. This array is the mechanism through which the runtime system passes information to your application. </p>\n<h3 id=\"Part-2-Language-Basics\">Part.2 Language Basics<a href=\"post/20200917-Java-Basics-01#Part-2-Language-Basics\"></a></h3><h4 id=\"Ⅰ-Variables\">Ⅰ. Variables<a href=\"post/20200917-Java-Basics-01#Ⅰ-Variables\"></a></h4><h5 id=\"·-Different-kinds-of-variables\">· Different kinds of variables<a href=\"post/20200917-Java-Basics-01#·-Different-kinds-of-variables\"></a></h5><p>1) Instance Variables (Non-Static Fields)<br>Objects store their individual states in non-static fields. The values of instance variables are unique to each <em>instance</em> of a class.</p>\n<p>2) Class Variables (Static Fields)<br>Any field declared with the <code>static</code> modifier is a class variable. It is  a common variable that applies to all instances.</p>\n<p>3) Local Variables<br>Methods store their temporary states in local variables. Local variables are only visible to the methods in which they are declared and they are not accessible from the rest of the class.</p>\n<p>4) Parameters</p>\n<p>Variables in method declarations.</p>\n<h5 id=\"·-Naming\">· Naming<a href=\"post/20200917-Java-Basics-01#·-Naming\"></a></h5><p>1) Case-sensitive<br>2) Subsequent characters may be letters, digits, dollar signs, or underscore characters.<br>3) Not a <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html\" target=\"_blank\" rel=\"noopener\"><u>keyword or reserved word</u></a>.</p>\n<p>The convention is to always begin your variable names with a letter and use full words instead of cryptic abbreviations. If the name consists of only one word, spell that word in all lowercase letters. If it consists of more than one word, capitalize the first letter of each subsequent word. ( e.g. <code>gearRatio</code> )</p>\n<h5 id=\"·-Primitive-Data-Types\">· Primitive Data Types<a href=\"post/20200917-Java-Basics-01#·-Primitive-Data-Types\"></a></h5><p>The Java programming language is statically-typed, which means that all variables must first be declared before they can be used. This involves stating the variable’s type and name. A variable’s data type determines the values it may contain, plus the operations that may be performed on it.</p>\n<p>Primitive types are special data types built into the language; they are not objects created from a class.</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Range</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>8-bit signed two’s complement integer, -128 ~ 127 (inclusive)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16-bit signed two’s complement integer, -32,768 ~ 32,767 (inclusive)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32-bit signed two’s complement integer, -2e31 ~ 2e31 - 1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64-bit signed two’s complement integer, -2e63 ~ 2e63-1</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>single-precision 32-bit IEEE 754 floating point</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>double</td>\n<td>double-precision 64-bit IEEE 754 floating point</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>8-bit, <code>true</code> and <code>false</code></td>\n<td>‘\\u0000’</td>\n</tr>\n<tr>\n<td>char</td>\n<td>single 16-bit Unicode character, <code>&#39;\\u0000&#39;</code> (or 0) ~ <code>&#39;\\uffff&#39;</code> (or 65,535 inclusive).</td>\n<td>false</td>\n</tr>\n</tbody></table></div></div>\n<p>Fields that are declared but not initialized will be set to a reasonable default by the compiler. The compiler never assigns a default value to an uninitialized local variable. If you cannot initialize your local variable where it is declared, make sure to assign it a value before you attempt to use it. Accessing an uninitialized local variable will result in a compile-time error.</p>\n<h5 id=\"·-Literal\">· Literal<a href=\"post/20200917-Java-Basics-01#·-Literal\"></a></h5><p>The value assigned to a primitive data type is called a literal.<br>Literals of types <code>byte</code>, <code>short</code>, <code>int</code> and <code>long</code>  can be expressed by these number systems: Decimal(26), Hexadecimal(0x1a), Binary(0b11010).</p>\n<p>A floating-point literal is of type <code>float</code> if it ends with the letter <code>F</code> or <code>f</code>; otherwise its type is <code>double</code> and it can optionally end with the letter <code>D</code> or <code>d</code>. Also it can use E or e (for scientific notation).</p>\n<p>Literals of types <code>char</code> and <code>String</code> may contain any Unicode (UTF-16) characters or you can use a “Unicode escape” such as <code>&#39;\\u0108&#39;</code> (capital C with circumflex). Always use ‘single quotes’ for <code>char</code> literals and “double quotes” for <code>String</code> literals.</p>\n<p>A special <code>null</code> literal that can be used as a value for any reference type. <code>null</code> may be assigned to any variable, except variables of primitive types. </p>\n<p>The Java programming language also supports a few special escape sequences for <code>char</code> and <code>String</code> literals: <code>\\b</code> (backspace), <code>\\t</code> (tab), <code>\\n</code> (line feed), <code>\\f</code> (form feed), <code>\\r</code> (carriage return), <code>\\&quot;</code> (double quote), <code>\\&#39;</code> (single quote), and <code>\\\\</code> (backslash).</p>\n<h5 id=\"·-Reference-Data-Type\">· Reference Data Type<a href=\"post/20200917-Java-Basics-01#·-Reference-Data-Type\"></a></h5><p>Reference datatypes in java are those which contains reference/address(8 bytes) of dynamically created objects. These are not predefined like primitive data types. Default value of any reference variable is null. A reference variable can be used to refer any object of the declared type or any compatible type.</p>\n<p>Following are the reference types in Java.</p>\n<ul>\n<li>class types<br>This reference type points to an object of a class. See Number and String class <a href=\"https://oreodu.github.io/2020/09/23/20200923-Java-Basics-02/\"><u>here</u></a>.</li>\n<li>interface types<br>This reference type points to an object of a class which implements an interface. See interface <a href=\"https://oreodu.github.io/2020/09/23/20200923-Java-Basics-02/\"><u>here</u></a>.</li>\n<li>array types − This reference type points to an array.<br>An <em>array</em> is a container object (24 bytes + memory for each array entry) that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed. </li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// declares an array of integers</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> anArray<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// create an array of integers</span>\nanArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// initialize first element</span>\nanArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Create a multidimensional array</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">\"Mr. \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mrs. \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ms. \"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jones\"</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>anArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 10</span></code></pre>\n<p>For your convenience, Java SE provides several methods for performing array manipulations (common tasks, such as copying, sorting and searching arrays) in the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html\" target=\"_blank\" rel=\"noopener\"><u>java.util.Arrays</u></a> class. </p>\n<h5 id=\"·-Enum-Types\">· Enum Types<a href=\"post/20200917-Java-Basics-01#·-Enum-Types\"></a></h5><p>An <em>enum type</em> is a special data type that enables for a variable to be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it. </p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> Planet <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">MERCURY</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3.303e+23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.4397e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">VENUS</span>   <span class=\"token punctuation\">(</span><span class=\"token number\">4.869e+24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0518e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">EARTH</span>   <span class=\"token punctuation\">(</span><span class=\"token number\">5.976e+24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.37814e6</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// in kilograms</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// in meters</span>\n    <span class=\"token function\">Planet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mass <span class=\"token operator\">=</span> mass<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token function\">mass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> mass<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token function\">radius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> radius<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// universal gravitational constant  (m3 kg-1 s-2)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> G <span class=\"token operator\">=</span> <span class=\"token number\">6.67300E-11</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">surfaceGravity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> G <span class=\"token operator\">*</span> mass <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">surfaceWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> otherMass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> otherMass <span class=\"token operator\">*</span> <span class=\"token function\">surfaceGravity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: java Planet &lt;earth_weight>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">double</span> earthWeight <span class=\"token operator\">=</span> Double<span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> mass <span class=\"token operator\">=</span> earthWeight<span class=\"token operator\">/</span>EARTH<span class=\"token punctuation\">.</span><span class=\"token function\">surfaceGravity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Planet p <span class=\"token operator\">:</span> Planet<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your weight on %s is %f%n\"</span><span class=\"token punctuation\">,</span>\n                             p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">surfaceWeight</span><span class=\"token punctuation\">(</span>mass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"Ⅱ-Operators\">Ⅱ. Operators<a href=\"post/20200917-Java-Basics-01#Ⅱ-Operators\"></a></h4><p>Operators are special symbols that perform specific operations on one, two, or three <em>operands</em>, and then return a result.</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Operators</th>\n<th>Precedence</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>postfix</td>\n<td><code>expr++</code> <code>expr--</code></td>\n</tr>\n<tr>\n<td>unary</td>\n<td><code>++expr</code> <code>--expr</code> <code>+expr</code> <code>-expr</code> <code>~</code> <code>!</code></td>\n</tr>\n<tr>\n<td>multiplicative</td>\n<td><code>* / %</code></td>\n</tr>\n<tr>\n<td>additive</td>\n<td><code>+ -</code></td>\n</tr>\n<tr>\n<td>shift</td>\n<td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>\n</tr>\n<tr>\n<td>relational</td>\n<td><code>&lt; &gt; &lt;= &gt;= instanceof</code></td>\n</tr>\n<tr>\n<td>equality</td>\n<td><code>== !=</code></td>\n</tr>\n<tr>\n<td>bitwise AND</td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>bitwise exclusive OR</td>\n<td><code>^</code></td>\n</tr>\n<tr>\n<td>bitwise inclusive OR</td>\n<td>`</td>\n</tr>\n<tr>\n<td>logical AND</td>\n<td><code>&amp;&amp;</code></td>\n</tr>\n<tr>\n<td>logical OR</td>\n<td>`</td>\n</tr>\n<tr>\n<td>ternary</td>\n<td><code>? :</code></td>\n</tr>\n<tr>\n<td>assignment</td>\n<td>`= += -= *= /= %= &amp;= ^=</td>\n</tr>\n</tbody></table></div></div>\n<p>The operators in the table above are listed according to precedence order. Operators with higher precedence are evaluated before operators with relatively lower precedence. </p>\n<p>Operators on the same line have equal precedence. When operators of equal precedence appear in the same expression, a rule must govern which is evaluated first. </p>\n<p>All binary operators except for the assignment operators are evaluated from left to right; assignment operators are evaluated right to left.</p>\n<h4 id=\"Ⅲ-Expressions-Statements-and-Blocks\">Ⅲ. Expressions, Statements, and Blocks<a href=\"post/20200917-Java-Basics-01#Ⅲ-Expressions-Statements-and-Blocks\"></a></h4><h5 id=\"1-Expressions\">1) Expressions<a href=\"post/20200917-Java-Basics-01#1-Expressions\"></a></h5><p>An <em>expression</em> is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value. The data type of the value returned by an expression depends on the elements used in the expression.</p>\n<h5 id=\"2-Statements\">2) Statements<a href=\"post/20200917-Java-Basics-01#2-Statements\"></a></h5><p>A <em>statement</em> forms a complete unit of execution. The following types of expressions can be made into a statement by terminating the expression with a semicolon (<code>;</code>).</p>\n<ul>\n<li>Assignment expressions</li>\n<li>Any use of <code>++</code> or <code>--</code></li>\n<li>Method invocations</li>\n<li>Object creation expressions</li>\n<li>Declaration statements</li>\n<li>Control flow statements</li>\n</ul>\n<h5 id=\"3-Blocks\">3) Blocks<a href=\"post/20200917-Java-Basics-01#3-Blocks\"></a></h5><p>A <em>block</em> is a group of zero or more statements between balanced braces and can be used anywhere a single statement is allowed. </p>\n<h4 id=\"Ⅳ-Control-Flow-Statements\">Ⅳ. Control Flow Statements<a href=\"post/20200917-Java-Basics-01#Ⅳ-Control-Flow-Statements\"></a></h4><p>This section describes the decision-making statements (<code>if-then</code>, <code>if-then-else</code>, <code>switch</code>), the looping statements (<code>for</code>, <code>while</code>, <code>do-while</code>), and the branching statements (<code>break</code>, <code>continue</code>, <code>return</code>)</p>\n<h5 id=\"1-The-if-then-else-Statement\">1) The <code>if-then-else</code> Statement<a href=\"post/20200917-Java-Basics-01#1-The-if-then-else-Statement\"></a></h5><p>It tells your program to execute a certain section of code <em>only if</em> a particular test evaluates to <code>true</code>.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">applyBrakes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMoving<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentSpeed<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The bicycle has already stopped!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> </code></pre>\n<h5 id=\"2-The-switch-Statement\">2) The <code>switch</code> Statement<a href=\"post/20200917-Java-Basics-01#2-The-switch-Statement\"></a></h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SwitchDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        String monthString<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>  monthString <span class=\"token operator\">=</span> <span class=\"token string\">\"January\"</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>  monthString <span class=\"token operator\">=</span> <span class=\"token string\">\"February\"</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>  monthString <span class=\"token operator\">=</span> <span class=\"token string\">\"March\"</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>monthString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>An <code>if-then-else</code> statement can test expressions based on ranges of values or conditions, whereas a <code>switch</code> statement tests expressions based only on a single integer, enumerated value, or <code>String</code> object.</p>\n<h5 id=\"3-The-while-and-do-while-Statements\">3) The while and do-while Statements<a href=\"post/20200917-Java-Basics-01#3-The-while-and-do-while-Statements\"></a></h5><p>The <code>while</code> statement evaluates <em>expression</em>, which must return a <code>boolean</code> value.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WhileDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count is: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DoWhileDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count is: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"4-The-for-Statement\">4) The for Statement<a href=\"post/20200917-Java-Basics-01#4-The-for-Statement\"></a></h5><p>The <code>for</code> statement provides a compact way to iterate over a range of values.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ForDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count is: \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The <code>for</code> statement also has another form designed for iteration through <a href=\"https://docs.oracle.com/javase/tutorial/collections/index.html\" target=\"_blank\" rel=\"noopener\">Collections</a> and <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html\" target=\"_blank\" rel=\"noopener\">arrays</a> .</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EnhancedForDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> \n             <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count is: \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"5-Branching-Statements\">5) Branching Statements<a href=\"post/20200917-Java-Basics-01#5-Branching-Statements\"></a></h5><p><code>break</code> : An unlabeled <code>break</code> statement terminates the innermost <code>switch</code>, <code>for</code>, <code>while</code>, or <code>do-while</code> statement, but a labeled <code>break</code> terminates an outer statement. </p>\n<p><code>continue</code>: The <code>continue</code> statement skips the current iteration of a <code>for</code>, <code>while</code> , or <code>do-while</code> loop. The unlabeled form skips to the end of the innermost loop’s body and evaluates the <code>boolean</code> expression that controls the loop. A labeled <code>continue</code> statement skips the current iteration of an outer loop marked with the given label.</p>\n<p><code>return</code>: The <code>return</code> statement exits from the current method, and control flow returns to where the method was invoked.</p>\n<h3 id=\"Part-3-Object-Oriented-Programming\">Part.3 Object-Oriented Programming<a href=\"post/20200917-Java-Basics-01#Part-3-Object-Oriented-Programming\"></a></h3><p>The principles of OOP can be found in the article <a href=\"https://oreodu.github.io/2020/09/06/20200906-Python-Basics-02/\"><u>Python Basics 02</u></a> .</p>\n<h4 id=\"Ⅰ-Class-and-Object\">Ⅰ. Class and Object<a href=\"post/20200917-Java-Basics-01#Ⅰ-Class-and-Object\"></a></h4><p><em>Objects</em> consist of state and related behavior. An object stores its state in <em>fields</em> and exposes its behavior through <em>methods</em>. Methods operate on an object’s internal state and serve as the primary mechanism for object-to-object communication. Typical memory usage for objects in java: Object overhead(16 bytes),  memory for each instance variable, pointer to enclosing class(8 bytes) and padding(each objects uses a multiple of 8 bytes).</p>\n<p>A <em>class</em> is the blueprint  or prototype from which individual objects are created and includes fields (class variables, constants, instance variables), nested classes and methods (class methods, abstract method…).</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * The class body contains all the code that provides\n * for the life cycle of the objects created from the class.\n */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// The class name, with the initial letter capitalized by convention.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bicycle</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// declarations for the fields that provide the state of the class and its objects</span>\n    <span class=\"token comment\" spellcheck=\"true\">// public modifier—the field is accessible from all classes.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> cadence<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> speed<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// private modifier—the field is accessible only within its own class.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> numberOfBicycles <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">// constructors with or without arguments for initializing new objects</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cadence <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> startCadence<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startSpeed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cadence <span class=\"token operator\">=</span> startCadence<span class=\"token punctuation\">;</span>\n        speed <span class=\"token operator\">=</span> startSpeed<span class=\"token punctuation\">;</span>\n        id <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>numberOfBicycles<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// methods to implement the behavior of the class and its objects.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// the first (or only) word in a method name should be a verb.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCadence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cadence <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// use a construct called varargs to pass an arbitrary number of values to a method</span>\n    <span class=\"token comment\" spellcheck=\"true\">// The method can be called either with an array or with a sequence of arguments.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// The code in the method body will treat the parameter as an array in either case.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speedUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> increments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> increment<span class=\"token operator\">:</span>increments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            speed <span class=\"token operator\">+=</span> increment<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// static method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumberOfBicycles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> numberOfBicycles<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// access private fields indirectly by adding public methods that obtain them.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> ClassDemo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        Bicycle myBike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// invokes the no-argument constructor and create a new object called yourBike</span>\n        Bicycle yourBike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n        yourBike<span class=\"token punctuation\">.</span><span class=\"token function\">speedUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"1-Provide-a-constructor\">1) Provide a constructor<a href=\"post/20200917-Java-Basics-01#1-Provide-a-constructor\"></a></h5><p>A class contains constructors that are invoked to create objects from the class blueprint. Constructor declarations look like method declarations—except that they use the name of the class and have no return type.</p>\n<p>As with methods, the Java platform differentiates constructors on the basis of the number of arguments in the list and their types. We can create two different constructor with different arguments.</p>\n<p>All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument constructor, called the <em>default constructor</em>. This default constructor calls the class parent’s no-argument constructor, or the <code>Object</code> constructor if the class has no other parent. If the parent has no constructor (<code>Object</code> does have one), the compiler will reject the program.</p>\n<p>There are two alternatives to using a constructor to initialize instance variables: initializer blocks and final methods.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// initializer blocks</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// whatever code is needed for initialization goes here</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p> This approach can be used to share a block of code between multiple constructors.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// final method</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Whatever</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> varType myVar <span class=\"token operator\">=</span> <span class=\"token function\">initializeInstanceVariable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> varType <span class=\"token function\">initializeInstanceVariable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// initialization code goes here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A <em>final method</em> cannot be overridden in a subclass. This is useful if subclasses might want to reuse the initialization method. The method is final because calling non-final methods during instance initialization can cause problems.</p>\n<h5 id=\"2-Use-the-this-Keyword\">2) Use the <code>this</code> Keyword<a href=\"post/20200917-Java-Basics-01#2-Use-the-this-Keyword\"></a></h5><p>Within an instance method or a constructor, <code>this</code> is a reference to the <em>current object</em> — the object whose method or constructor is being called. </p>\n<p>Using this with a Field: The most common reason for using the <code>this</code> keyword is because a field is shadowed(with the same name) by a method or constructor parameter.</p>\n<p>Using this with a Constructor: From within a constructor, you can also use the this keyword to call another constructor in the same class which is called <em>explicit constructor invocation</em>.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"3-Overloading-Methods\">3) Overloading Methods<a href=\"post/20200917-Java-Basics-01#3-Overloading-Methods\"></a></h5><p>When we create a method  that need various types of data (strings, integers, and so on) in different situations, we can create methods with the same name but different parameter list. This can be supported by <em>overloading</em> methods in Java. They are differentiated by the number and the type of the arguments passed into the method.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataArtist</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"4-Covariant-return-type\">4) Covariant return type<a href=\"post/20200917-Java-Basics-01#4-Covariant-return-type\"></a></h5><p>A method returns to the code that invoked it when it completes all the statements in the method, reaches a return statement, or throws an exception. Any method declared <code>void</code> doesn’t return a value but we can use <code>return;</code> branch out of a control flow block and exit the method. The data type of the return value must match the method’s declared return type in the method that is not declared <code>void</code> .</p>\n<p>When a method uses a class name as its return type, the class of the type of the returned object must be either a subclass of, or the exact class of, the return type. We can also override a method and define it to return a subclass of the original method. This technique, called <em>covariant return type</em>, means that the return type is allowed to vary in the same direction as the subclass.</p>\n<h5 id=\"5-Pass-a-information-to-the-constructor-or-the-method\">5) Pass a information to the constructor or the method<a href=\"post/20200917-Java-Basics-01#5-Pass-a-information-to-the-constructor-or-the-method\"></a></h5><p>When we declare a parameter to a method or a constructor, we provide a name for that parameter. This name is used within the method body to refer to the passed-in argument. If the name is the same with the field in the class, we can use <code>this</code> to access the field.</p>\n<p>Primitive arguments, such as an <code>int</code> or a <code>double</code>, are passed into methods <em>by value</em>. This means that any changes to the values of the parameters exist only within the scope of the method. When the method returns, the parameters are gone and any changes to them are lost. </p>\n<p>Reference data type parameters, such as objects, are also passed into methods <em>by value</em>. This means that when the method returns, the passed-in reference still references the same object as before.  <em>However</em>, the values of the object’s fields <em>can</em> be changed in the method, if they have the proper access level.</p>\n<p>If we want to pass a method into a method, then use a <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\" target=\"_blank\" rel=\"noopener\">lambda expression</a> or a <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\" target=\"_blank\" rel=\"noopener\">method reference</a>.</p>\n<p>When invoke a method, the arguments used must match the declaration’s parameters in type and order.</p>\n<h5 id=\"6-Creating-Objects\">6) Creating Objects<a href=\"post/20200917-Java-Basics-01#6-Creating-Objects\"></a></h5><p>· Declaring a Variable to Refer to an Object. </p>\n<p><code>type name;</code> notifies the compiler that you will use <em>name</em> to refer to data whose type is <em>type</em>. With a primitive variable, this declaration also reserves the proper amount of memory for the variable.</p>\n<p>· Instantiating a Class. Initializing an Object.</p>\n<p>The <code>new</code> operator instantiates a class by allocating memory for a new object and returning a reference to that memory. The <code>new</code> operator also invokes the object constructor so it requires a single, postfix argument: a call to a constructor. The name of the constructor provides the name of the class to instantiate. </p>\n<p>Objects of the same type have their own copy of the same instance fields. So if we want to access the fields or methods outside the class we have to use them in such way: <code>objectReference.fieldName</code> and <code>objectReference.methodName(argumentList)</code></p>\n<p>The Java runtime environment deletes objects when there are no more references to that object. This process is called <em>garbage collection</em>.</p>\n<h5 id=\"7-Controlling-Access-to-Members-of-a-Class\">7) Controlling Access to Members of a Class<a href=\"post/20200917-Java-Basics-01#7-Controlling-Access-to-Members-of-a-Class\"></a></h5><p>Access level modifiers determine whether other classes can use a particular field or invoke a particular method.</p>\n<p><strong>Access Levels</strong></p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Modifier</th>\n<th>Class</th>\n<th>Package</th>\n<th>Subclass</th>\n<th>World</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>public</code></td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>no modifier(package-private)</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody></table></div></div>\n<h5 id=\"8-static-keyword\">8)  <code>static</code> keyword<a href=\"post/20200917-Java-Basics-01#8-static-keyword\"></a></h5><p>Fields that have the <code>static</code> modifier in their declaration are called <em>static fields</em> or <em>class variables</em>. They are associated with the class, rather than with any object. Every instance of the class shares a class variable, which is in one fixed location in memory. Any object can change the value of a class variable, but class variables can also be manipulated without creating an instance of the class. Class variables are referenced by the class name itself: <code>ClassName.fieldName</code></p>\n<p>Complicated initialization of instance variables can be done through constructors, to provide the same capability for class variables, the Java programming language includes <em>static initialization blocks</em> or <em>private static method</em>. The advantage of private static methods is that they can be reused later if you need to reinitialize the class variable.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// static initialization block</span>\n<span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// whatever code is needed for initialization goes here</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Whatever</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> varType myVar <span class=\"token operator\">=</span> <span class=\"token function\">initializeClassVariable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> varType <span class=\"token function\">initializeClassVariable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// initialization code goes here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><em>Static methods</em>, which have the <code>static</code> modifier in their declarations, should be invoked with the class name, without the need for creating an instance of the class. (<code>ClassName.methodName(args)</code>). A common use for static methods is to access static fields. Class methods <strong>cannot</strong> access instance variables or instance methods directly—they must use an object reference. Also, class methods cannot use the <code>this</code> keyword as there is no instance for <code>this</code> to refer to.</p>\n<p>The <code>static</code> modifier, in combination with the <code>final</code> modifier, is also used to define constants. The <code>final</code> modifier indicates that the value of this field cannot change. By convention, the names of constant values are spelled in uppercase letters. If the name is composed of more than one word, the words are separated by an underscore (_).</p>\n<p>(If a primitive type or a string is defined as a constant and the value is known at compile time, the compiler replaces the constant name everywhere in the code with its value. This is called a <em>compile-time constant</em>. )</p>\n<h4 id=\"Ⅱ-More-about-class\">Ⅱ. More about class<a href=\"post/20200917-Java-Basics-01#Ⅱ-More-about-class\"></a></h4><h5 id=\"1-Nested-Class\">1)  Nested Class<a href=\"post/20200917-Java-Basics-01#1-Nested-Class\"></a></h5><p>Nested classes are divided into two categories: static and non-static. </p>\n<p>Nested classes that are declared <code>static</code> are called <em>static nested classes</em>. As with class methods and variables, a static nested class is associated with its outer class so they do not have access to other members of the enclosing class. It can use them only through an object reference.<br>To create an object for the static nested class:<br><code>OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();</code></p>\n<p>Non-static nested classes are called <em>inner classes</em>. As with instance methods and variables, an inner class is associated with an instance of its enclosing class so they have access to other members of the enclosing class, even if they are declared private and it cannot define any static members itself. An instance of <code>InnerClass</code> can exist only within an instance of <code>OuterClass</code>. There are two special kinds of inner classes: local classes and anonymous classes.<br>To instantiate an inner class:<br><code>OuterClass.InnerClass innerObject = outerObject.new InnerClass();</code></p>\n<p>Nested class is a way of logically grouping classes that are only used in one place and increases encapsulation. </p>\n<h5 id=\"2-Local-Class\">2) Local Class<a href=\"post/20200917-Java-Basics-01#2-Local-Class\"></a></h5><p>Local classes are classes that are defined in a <em>block</em>, which is a group of zero or more statements between balanced braces. For example, you can define a local class in a method body, a <code>for</code> loop, or an <code>if</code> clause.  </p>\n<p>Local classes has access to the members of its enclosing class. However, Local classes in static methods can only refer to static members of the enclosing class. </p>\n<p>Because they have access to instance members of the enclosing block. Consequently, they cannot contain most kinds of static declarations. However, they can have static members provided that they are constant variables. (A <em>constant variable</em> is a variable of primitive type or type <code>String</code> that is declared final and initialized with a compile-time constant expression.)</p>\n<p>They also can access local variables of the enclosing block that are final or <em>effectively final</em> (never changed after it is initialized) and can access the method’s parameters.</p>\n<p>We cannot declare an interface inside a block; interfaces are inherently static. </p>\n<pre class=\" language-java\"><code class=\"language-java\">   <span class=\"token comment\" spellcheck=\"true\">// inside a method</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayGoodbyeInEnglish</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnglishGoodbye</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String farewell <span class=\"token operator\">=</span> <span class=\"token string\">\"Bye bye\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayGoodbye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> farewell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        EnglishGoodbye myEnglishGoodbye <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnglishGoodbye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myEnglishGoodbye<span class=\"token punctuation\">.</span><span class=\"token function\">sayGoodbye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"3-Anonymous-classes\">3) Anonymous classes<a href=\"post/20200917-Java-Basics-01#3-Anonymous-classes\"></a></h5><p>Anonymous classes enable us to declare and instantiate a class at the same time. They are like local classes except that they do not have a name. Use them if you need to use a local class only once.</p>\n<p>An anonymous class has access to the members of its enclosing class and cannot access local variables in its enclosing scope that are not declared as <code>final</code> or effectively final. We cannot declare static initializers, member interfaces or <strong>constructors</strong> in an anonymous class but an anonymous class can have static members provided that they are constant variables.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldAnonymousClasses</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span>String someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// local class</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnglishGreeting</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n            String name <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span>String someone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                name <span class=\"token operator\">=</span> someone<span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        HelloWorld englishGreeting <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnglishGreeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// anonymous class</span>\n        <span class=\"token comment\" spellcheck=\"true\">// an interface to implement or a class to extend</span>\n        HelloWorld frenchGreeting <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            String name <span class=\"token operator\">=</span> <span class=\"token string\">\"tout le monde\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tout le monde\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span>String someone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                name <span class=\"token operator\">=</span> someone<span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Salut \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        englishGreeting<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        frenchGreeting<span class=\"token punctuation\">.</span><span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        HelloWorldAnonymousClasses myApp <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorldAnonymousClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myApp<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>            \n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"4-Lambda-expressions\">4) Lambda expressions<a href=\"post/20200917-Java-Basics-01#4-Lambda-expressions\"></a></h5><p>Lambda expressions enable us to treat functionality as method argument, or code as data and express instances of single-method classes more compactly.</p>\n<p>Lambda expressions are lexically scoped. This means that they do not inherit any names from a supertype or introduce a new level of scoping. Declarations in a lambda expression are interpreted just as they are in the enclosing environment. Consequently, you can directly access fields, methods, and local variables of the enclosing scope. Local variables referenced from a lambda expression must be final or effectively final.</p>\n<p>To determine the type of a lambda expression, the Java compiler uses the target type(the data type that these methods expect) of the context or situation in which the lambda expression was found. It follows that you can only use lambda expressions in situations in which the Java compiler can determine a target type: Variable declarations, Assignments, Return statements, Array initializers, Method or constructor arguments, Lambda expression bodies, Conditional expressions, <code>?:</code>, Cast expressions.</p>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\" target=\"_blank\" rel=\"noopener\"><u>See more details.</u></a></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CheckPerson</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>Person p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// Specify Search Criteria Code in an Anonymous Class</span>\n<span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>\n    roster<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CheckPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>Person p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">.</span>Sex<span class=\"token punctuation\">.</span>MALE\n                <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n                <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Specify Search Criteria Code with a Lambda Expression</span>\n<span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>\n    roster<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>Person p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">.</span>Sex<span class=\"token punctuation\">.</span>MALE\n        <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n        <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// Use Standard Functional Interfaces with Lambda Expressions</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Predicate</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printPersonsWithPredicate</span><span class=\"token punctuation\">(</span>\n    roster<span class=\"token punctuation\">,</span>\n    p <span class=\"token operator\">-</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">.</span>Sex<span class=\"token punctuation\">.</span>MALE\n        <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n        <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use Aggregate Operations That Accept Lambda Expressions as Parameters</span>\nroster\n    <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n        p <span class=\"token operator\">-</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">.</span>Sex<span class=\"token punctuation\">.</span>MALE\n            <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n            <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">-</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getEmailAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>email <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>For more aggregate operations, see the <a href=\"https://docs.oracle.com/javase/tutorial/collections/streams/index.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// Method References: refer to the existing method by name</span>\nPerson<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rosterAsArray <span class=\"token operator\">=</span> roster<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">[</span>roster<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonAgeComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>Person a<span class=\"token punctuation\">,</span> Person b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nArrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rosterAsArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PersonAgeComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -> {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n\nArrays.sort(rosterAsArray,\n    (a, b) -> Person.compareByAge(a, b)\n);\n\nArrays.sort(rosterAsArray, Person::compareByAge);\n*/</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntegerMath</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">operateBinary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> IntegerMath op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> op<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        Calculator myApp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        IntegerMath addition <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        IntegerMath subtraction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"40 + 2 = \"</span> <span class=\"token operator\">+</span>\n            myApp<span class=\"token punctuation\">.</span><span class=\"token function\">operateBinary</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> addition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20 - 10 = \"</span> <span class=\"token operator\">+</span>\n            myApp<span class=\"token punctuation\">.</span><span class=\"token function\">operateBinary</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> subtraction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>When to Use Nested Classes, Local Classes, Anonymous Classes, and Lambda Expressions, <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/whentouse.html\" target=\"_blank\" rel=\"noopener\"><u>see more from here</u></a>.</p>\n<p>A namespace that organizes classes and interfaces by functionality is called a <em>package</em>. And the Java platform provides an enormous class library (a set of packages) suitable for use in applications. Application Programming Interface (API) provided by the Java platform:  <a href=\"https://docs.oracle.com/javase/8/docs/api/index.html\" target=\"_blank\" rel=\"noopener\"><u>Java Platform API Specification</u></a> .</p>\n<h3 id=\"Part-6\">Part.6<a href=\"post/20200917-Java-Basics-01#Part-6\"></a></h3><p>数据结构（ArrayList,LinkedList,HashSet,HashMap）</p>\n<p>集合框架</p>\n<p>各种类（Number,math,string,character,sccanner）</p>\n<p>正则式，日期，方法，io stream file, 异常处理，iterator</p>\n<p>泛型，序列化，网络编程，多线程，sql数据库连接</p>\n","prev":{"title":"Java Basics 02","slug":"20200923-Java-Basics-02"},"next":{"title":"SQL Basics","slug":"20200916-SQL-Basics"},"link":"https://oreodu.github.io/post/20200917-Java-Basics-01/","toc":[{"title":"Java Basics 01","id":"Java-Basics-01","index":"1"}],"reward":true,"copyright":{"author":null,"link":"<a href=\"https://oreodu.github.io/post/20200917-Java-Basics-01/\" title=\"Java Basics 01\">https://oreodu.github.io/post/20200917-Java-Basics-01/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}