{"title":"Python Basics 01","date":"2019-10-09T23:07:00.000Z","thumbnail":"https://i.loli.net/2020/09/09/hpqrHXILJGxeSbO.jpg","slug":"20191010-Python-Basics-01","tags":["Python"],"categories":["Programming"],"updated":"2020-09-25T14:19:05.563Z","content":"<h1 id=\"Python-Basics-01\">Python Basics 01<a href=\"post/20191010-Python-Basics-01#Python-Basics-01\"></a></h1><h3 id=\"Overview\">Overview<a href=\"post/20191010-Python-Basics-01#Overview\"></a></h3><p>Programming is a method that we use computers to do the complicated calculations and repetitive tasks which human are not very good at in order to solve the difficult problem.</p>\n<blockquote>\n<p>Python is a high-level language intended to be relatively straightforward for humans to read and write and for computers to read and process.  (from <i>Python for Everybody</i>)</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/09/06/ohHcd45Qz6wTumq.png\" alt=\"11\"><br><strong>· materials:</strong><br>  · <a href=\"https://www.py4e.com/\" target=\"_blank\" rel=\"noopener\"><i>Python for Everybody (Exploring Data Using Python 3)</i></a>  by Charles R. Severance<br>  · <i>Learn Python 3 the Hard Way</i> by Zed A. Shaw<br>  · <u><a href=\"https://github.com/jackfrued/Python-100-Days\" target=\"_blank\" rel=\"noopener\">Python-100-Days</a></u> by jackfrued<br>  · <u><a href=\"https://docs.python.org/3/tutorial/index.html\" target=\"_blank\" rel=\"noopener\">Python Tutorial</a></u><br>  · <a href=\"https://google.github.io/styleguide/pyguide.html\" target=\"_blank\" rel=\"noopener\"><u>Google Python Style Guide</u></a></p>\n<h4 id=\"Part-1-Installing-Python-3-On-Windows-10\">Part.1 Installing Python 3 On Windows 10<a href=\"post/20191010-Python-Basics-01#Part-1-Installing-Python-3-On-Windows-10\"></a></h4><p>Download and install Python 3.x.x from <u><a href=\"https://www.python.org/download/\" target=\"_blank\" rel=\"noopener\">here</a></u>. (When you’re installing Python you should make sure that you have chosen “Add Python 3.x.x  to PATH” or you can do this by yourself later.)</p>\n<p>Download and install the text editor. (I installed <u><a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">Atom</a></u>.)</p>\n<p>Two ways that you run your code：<br> <strong>·</strong> Write the script  in the text editor and execute it in the command window or type commands into the Python interpreter.</p>\n<pre class=\" language-python\"><code class=\"language-python\">  python xxx<span class=\"token punctuation\">.</span>py arg1 arg2 arg3</code></pre>\n<p><strong>·</strong> Write and run the code in a interactive programming tool (such as IPython).</p>\n<h4 id=\"Part-2-How-do-the-programs-work-inside-the-computer\">Part.2 How do the programs work inside the computer?<a href=\"post/20191010-Python-Basics-01#Part-2-How-do-the-programs-work-inside-the-computer\"></a></h4><p>First, let’s have a quick look at the simplified computer structure.</p>\n<img src=\"https://i.loli.net/2020/09/06/a8eSX7ofZg4IVNp.png\" alt=\"com-stru\" style=\"zoom:50%;\">\n\n<p>(from <i>Python for Everybody</i>)</p>\n<p>When we finish our code and store it in the <i>secondary memory</i>, the Python interpreter(CPython、IPython、Jython、PyPy ) will parses the source code and interprets the instructions and the complier will translate the high-level source code into machine language and put the resulting machine language into a file for later execution.</p>\n<p>Then when we execute the program, it will be stored in the <i>main memory</i> temporarily. The computer will retrieve the data form the <i>input devices</i> or the <i>network</i>, get the instructions form the <i>main memory</i> and do the computations in the <i>center processing unit(CPU)</i> with a high speed(billion times per second). In the end, the computer will send the results to the <i>output devices</i>.</p>\n<h4 id=\"Part-3-Language-element\">Part.3 Language element<a href=\"post/20191010-Python-Basics-01#Part-3-Language-element\"></a></h4><p>A language must have its own vocabulary and grammar. In the vocabulary of Python, basically, we have <i>Reserved words (keywords)</i>, <i>variable</i>, <i>constant</i> and <i>operators</i>.</p>\n<p><strong>Ⅰ. Reserved words</strong> (keywords):<br>Special identifiers with specific meanings and functions in python that can’t be used by programmer.</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/06/hJebFXYLdgN3wGx.png\" alt=\"reserved-w\" data-zoomable></p></div>\n<p>(from <i>Python for Everybody</i>)</p>\n<p><strong>Ⅱ. Variable</strong>:</p>\n<p>In python, variables don’t have types(only the objects have types) and they are <strong>all</strong> bind a reference of an object (a pointer) to the variable names. The size of the pointer’s memory space has nothing to do with the type, and its memory space just saves the memory address of the pointed data. You can use id() to view the address value of the current variable.</p>\n<p><strong>· Types</strong>  : </p>\n<ul>\n<li><strong>numbers</strong>: <ul>\n<li>integer (can use different radixes: 0b100,0o100,100,0x100)</li>\n<li>float (sometimes use scientific notation: 1.234e2)</li>\n<li>complex number (ex: 3+2j)</li>\n</ul>\n</li>\n<li><strong>Boolean</strong>: True, False</li>\n<li><strong>Text Sequence</strong>: string (be enclosed in single or double quotation marks)</li>\n<li><strong>Built-in data structures</strong>: list, tuple, set, dictionary</li>\n</ul>\n<p><strong>· Immutable and mutable</strong><br>1.Immutable objects: numbers, bool, strings, tuples. (value type)<br>The value at the address referenced by the variable cannot be changed. The re-assignment of a variable which point to an immutable object is equivalent to creating a new object in memory instead of the previous object. The advantage of the immutable data type is that no matter how many references there are in the memory, the same object only occupies a piece of memory and all the references will point to it.</p>\n<p>2.Mutable objects: list, set, dictionary. (reference type)<br>When operating on mutable objects, their values are mutable and the change of the value will not create  new objects, that is, the address will not change, but the content in the address has changed or the address has been expanded. Different from immutable objects, for mutable objects, multiple objects with the same value are stored in memory with different address values.</p>\n<p>We can use <code>type()</code> function to get the type of the variables.</p>\n<pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1.234e6</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#&lt;class 'float'></span></code></pre>\n<p>The type of the objects can be converted using functions built in Python.</p>\n<ul>\n<li><p>· <code>int()</code>: Convert a number or string to an integer and specify a radix.</p>\n</li>\n<li><p>· <code>float()</code>: Convert a number or strings to a floating point number.</p>\n</li>\n<li><p>· <code>str()</code>: Convert the specified object to a string and specifies the encoding.</p>\n</li>\n<li><p>· <code>chr()</code>: Convert the corresponding encoding (integer) to the string (a character).</p>\n</li>\n<li><p>· <code>ord()</code>: Convert a string (a character) to the corresponding encoding (integer).</p>\n</li>\n<li><p>·  …</p>\n</li>\n</ul>\n<p><strong>· Name rules</strong> : (usually use a mnemonic name)<br>    1.Combination of numbers, letters, underscore (can not start with a number)<br>    2.Case sensitive<br>    3.Can not use reserved words<br>    4.PEP 8 <a href=\"https://www.python.org/dev/peps/pep-0008/\" target=\"_blank\" rel=\"noopener\">(<u> Style Guide for Python Code</u> )</a></p>\n<p> <strong>· How do we use variables?</strong><br>1.Use variables to save data and perform arithmetic operations</p>\n<pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1.234</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">2.345</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 3.579</span>\n\nfruit <span class=\"token operator\">=</span> <span class=\"token string\">'banana'</span>\nletter <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\"># extracts the character at index position 1 from the fruit variable</span>\nletter1 <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">,</span>letter1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># r t</span></code></pre>\n<p>2.The use of backslash <code>\\</code><br>We can use <code>\\</code> in a string to indicate escaping, which means that the character after <code>\\</code> is no longer its original meaning.<br><code>\\n</code> means a new line<br><code>\\t</code> means tab<br><code>\\141</code>(octal) or <code>\\x61</code>(hexadecimal )  means  lowercase letter <code>a</code><br><code>\\u9a86</code>(Unicode ) means ‘骆’ in Chinese</p>\n<p>If we do not want to escape characters after the <code>\\</code> or you want to print <code>\\</code> , you can use <code>r</code> before the string.</p>\n<pre class=\" language-python\"><code class=\"language-python\">s1 <span class=\"token operator\">=</span>  r<span class=\"token string\">' \\' hello, world! \\' '</span>  <span class=\"token comment\" spellcheck=\"true\"># print: \\' hello, world! \\'</span>\ns2 <span class=\"token operator\">=</span> <span class=\"token string\">' \\'hello, world!\\\\ \\n '</span> <span class=\"token comment\" spellcheck=\"true\"># print: 'hello, world!\\</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">' '</span> <span class=\"token punctuation\">)</span></code></pre>\n<p>3.The object string has some built-in methods to process itself.<br>We can use <code>dir</code> function to show the available methods. (<u><a href=\"https://docs.python.org/3.5/library/stdtypes.html#string-methods\" target=\"_blank\" rel=\"noopener\">more methods</a></u>)</p>\n<pre class=\" language-python\"><code class=\"language-python\">str1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello,World!'</span> \n<span class=\"token comment\" spellcheck=\"true\"># calculate the length</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>len <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 13</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># obtain capitalized string copy </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>capitalize <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#Hello, world! </span>\n<span class=\"token comment\" spellcheck=\"true\"># obtain the first character of each word capitalized copy </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># Hello, World! </span>\n<span class=\"token comment\" spellcheck=\"true\"># obtain an each character capitalized copy  </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>upper <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># HELLO, WORLD! </span>\n<span class=\"token comment\" spellcheck=\"true\">#replace the specific substring with another one</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># helle,werld</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#Find the location of the substring</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 7 </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'shit '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># -1 </span>\n<span class=\"token comment\" spellcheck=\"true\"># check whether the string starts with the specified string</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>startswith <span class=\"token punctuation\">(</span><span class=\"token string\">'He'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># False </span>\n<span class=\"token comment\" spellcheck=\"true\"># checks whether the string ends with the specified string </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>endswith <span class=\"token punctuation\">(</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># True </span>\n\n<span class=\"token comment\" spellcheck=\"true\"># Center the string at the specified width and fill with the specified characters </span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nstr2 <span class=\"token operator\">=</span>  <span class=\"token string\">' abc123456 '</span> \n<span class=\"token comment\" spellcheck=\"true\"># check whether the character string configured by numbers</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\"># False </span>\n<span class=\"token comment\" spellcheck=\"true\"># check whether the character string configured by letters</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\"># False </span>\n<span class=\"token comment\" spellcheck=\"true\"># check whether the character string configured by numbers and letters</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\"># True </span>\n<span class=\"token comment\" spellcheck=\"true\">#print without space </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span>maketrans<span class=\"token punctuation\">(</span><span class=\"token string\">',!'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'  '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># hello World </span></code></pre>\n<p><strong>Ⅲ. Operators</strong>:<br>The values the operators is applied to are called <i>operands</i> and an expression is a combination of operands and operators.</p>\n<p><strong>· For number and Boolean</strong></p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Operator</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>+</code> <code>-</code></td>\n<td align=\"left\">unary plus and minus</td>\n</tr>\n<tr>\n<td><code>**</code> <code>*</code> <code>/</code> <code>%</code> <code>//</code> <code>+</code> <code>-</code></td>\n<td align=\"left\">power, multiply, division, mold, integer division(round down), add, subtract,</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>\n<td align=\"left\">shift right, left shift</td>\n</tr>\n<tr>\n<td><code>~</code> <code>&amp;</code>  <code>^</code></td>\n<td align=\"left\">bitwise negation, bitwise and, bitwise XOR</td>\n</tr>\n<tr>\n<td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td>\n<td align=\"left\">Less than or equal to, less than, greater than, greater than or equal to</td>\n</tr>\n<tr>\n<td><code>==</code> <code>!=</code></td>\n<td align=\"left\">Equal to, not equal to</td>\n</tr>\n<tr>\n<td><code>=</code> <code>%=</code> <code>/=</code> <code>//=</code> <code>*=</code></td>\n<td align=\"left\"><code>**=</code> <code>+=</code> <code>-=</code> <code>&amp;=</code> <code>^=</code> <code>&gt;&gt;=</code> <code>&lt;&lt;=</code></td>\n</tr>\n<tr>\n<td><code>:=</code></td>\n<td align=\"left\">walrus operator</td>\n</tr>\n<tr>\n<td><code>is</code> <code>is not</code></td>\n<td align=\"left\">Identity operator</td>\n</tr>\n<tr>\n<td><code>in</code> <code>not in</code></td>\n<td align=\"left\">Member operator</td>\n</tr>\n<tr>\n<td><code>not</code> <code>or</code> <code>and</code></td>\n<td align=\"left\">Logical Operators</td>\n</tr>\n</tbody></table></div></div>\n<p>1.The priority of the operators: </p>\n<p><code>**</code>, <code>~ + -</code>, <code>* / % //</code>, <code>+ -</code>, <code>&gt;&gt; &lt;&lt;</code>, <code>&amp;</code>, <code>^ |</code>, <code>&lt;= &lt; &gt; &gt;=</code>, <code>== !=</code>, <code>= %= /= //= -= += *= **=</code></p>\n<p>Parentheses <code>()</code> have the highest precedence and can be used to force an expression to evaluate in the order we want. </p>\n<pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\na <span class=\"token operator\">*=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\" spellcheck=\"true\"># equivalent to: a=a*(b+2)=50</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\">flag1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>\nflag2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span>\nflag3 <span class=\"token operator\">=</span> flag1 <span class=\"token operator\">and</span> flag2\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag3 <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag2 <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#True</span></code></pre>\n<p>2.Short-circuit evaluation of logical expressions:<br>The evaluation stops when the overall value is already know. <code>y!=0</code> acts as a guard to insure that we only execute <code>(x/y)</code> if y is non-zero.</p>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token operator\">and</span> y<span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span></code></pre>\n<p>3.Built-in functions</p>\n<p><code>add(num1,num2)</code>; <code>max(num1,num2)</code>; <code>abs(num)</code>……</p>\n<p>Evaluate the operator subexpression, evaluate each operand subexpression, apply the value of the operator subexpression to the values of the operand subexpression.</p>\n<p><a href=\"https://docs.python.org/3/library/math.html\" target=\"_blank\" rel=\"noopener\"><u>For more details</u></a></p>\n<p><strong>· For strings</strong><br><code>+</code> : connect the strings<br><code>*</code> : repeat the contents of a string<br><code>in</code> <code>not in</code> : determine whether a string contains another character<br><code>[]</code>and <code>[:]</code> : get some substrings from the string (<strong>including the first but excluding the last</strong>)</p>\n<pre class=\" language-python\"><code class=\"language-python\">s1 <span class=\"token operator\">=</span>  <span class=\"token string\">' hello'</span>  <span class=\"token operator\">*</span>  <span class=\"token number\">3</span> \n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># hello hello hello</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span> <span class=\"token keyword\">in</span> s1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># True</span>\ns2 <span class=\"token operator\">=</span>  <span class=\"token string\">' world '</span> \ns1 <span class=\"token operator\">+=</span> s2\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># hello hello hello world </span>\n\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello,world'</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#l</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#ll</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#lowrd</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#dlrow,olleh</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#or</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#dlr</span></code></pre>\n<p><strong>Ⅳ. Constant</strong>:<br>There are some <u><a href=\"https://docs.python.org/3.5/library/constants.html\" target=\"_blank\" rel=\"noopener\">built-in constants</a></u> in python.</p>\n<h4 id=\"Part-4-Built-in-Data-Structures\">Part.4  Built-in Data Structures<a href=\"post/20191010-Python-Basics-01#Part-4-Built-in-Data-Structures\"></a></h4><ul>\n<li><strong>·</strong> Allow us to store related values together<ul>\n<li>Can process the values one-by-one or in aggregate</li>\n<li>Allows us to form compound values through data abstraction</li>\n</ul>\n</li>\n<li><strong>·</strong> Give rise to a number of ways of storing values<ul>\n<li>Lists store values in order, associated with an index</li>\n<li>Dictionaries have no order but associate values with any sort of key</li>\n<li>Trees allow for a hierarchical representation of data</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ⅰ. Sequence Type</strong></p>\n<p><strong>· list</strong><br>Numeric types(<code>int</code> <code>float</code> …) are scalar types, which means that objects have no internal structure to access. However, string type is a structured, non-scalar type, so it has a range of properties and methods. List is the same as the string. However, list is mutable.</p>\n<p>List is an ordered sequence of values, each of which can be identified by an index, placed in the <code>[]</code> and separated by <code>,</code>. The values can be any type.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># create a list</span>\nlist0 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlist0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span>  \nlist1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> \n<span class=\"token comment\" spellcheck=\"true\"># or [&lt;expr> for &lt;name> in &lt;seq> if &lt;cond>]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  \n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>list2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['Hello','Hello','Hello'] [0,1,2,3]</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>list0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#5 </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>list0<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 1 </span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>list0<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 5 </span>\n\n<span class=\"token comment\" spellcheck=\"true\"># split and join</span>\nlist3 <span class=\"token operator\">=</span> <span class=\"token string\">'list'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['l','i','s','t']</span>\nlist4 <span class=\"token operator\">=</span> <span class=\"token string\">'here-it-is'</span>\ndelimiter <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span>\n<span class=\"token comment\" spellcheck=\"true\"># split the string based on the delimiter. The string will be split based on the space when there is no argument. </span>\nt <span class=\"token operator\">=</span> list4<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['here','it','is']</span>\ndelimiter <span class=\"token operator\">=</span> <span class=\"token string\">' '</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># here it is</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># Traverse element in the list</span>\n<span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> elem <span class=\"token keyword\">in</span> list1<span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span>elem <span class=\"token keyword\">in</span> enumerate <span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">,</span>list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> reversed<span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># Add and remove elements</span>\n<span class=\"token comment\" spellcheck=\"true\"># append,insert,extend,remove and pop only change the original list.</span>\n<span class=\"token comment\" spellcheck=\"true\"># Slicing,Shallow copying,Concatenating,List constructor create a new list.</span>\nlist0<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># insert 400 at index 1.</span>\nlist0<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\nlist0<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nlist0 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2000</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list0<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000] </span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># [1]+[2]+[3]+[] = [1,2,3]</span>\n\n<span class=\"token keyword\">if</span>  <span class=\"token number\">3</span>  <span class=\"token keyword\">in</span> list0<span class=\"token punctuation\">:</span>\n    list0<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># delete and return the 0th element</span>\nlist0<span class=\"token punctuation\">.</span>pop <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># delete and return the last element</span>\nl <span class=\"token operator\">=</span> list0<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">del</span> list0<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># [100, 200, 1000] 2000</span>\nlist1<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># Slice the list</span>\nfruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'waxberry'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['apple', 'strawberry']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['waxberry', 'strawberry', 'apple', 'grape']</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># Sort the list</span>\nlist1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zoo'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blueberry'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted <span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['apple', 'blueberry', 'orange', 'zoo']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted <span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['zoo', 'orange', 'blueberry', 'apple']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>key <span class=\"token operator\">=</span> len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['zoo', 'apple', 'orange', 'blueberry']</span>\nlist1<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span> reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['zoo', 'orange', 'blueberry', 'apple']</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># Generator </span>\nf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> y <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token string\">'ABC'</span> <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token string\">'12'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']</span>\n<span class=\"token comment\" spellcheck=\"true\"># Generator objects don't take extra space to store data </span>\nf1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> range <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#120</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># &lt;generator object &lt;genexpr> at 0x000001C05E2952C8></span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># objects and values</span>\na <span class=\"token operator\">=</span> <span class=\"token string\">'banana'</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'banana'</span>\n<span class=\"token comment\" spellcheck=\"true\"># identical</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># True</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># equivalent but not identical</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># False</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a\n<span class=\"token comment\" spellcheck=\"true\"># aliased but refer to the same object</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># True</span></code></pre>\n<p>It is important to keep track of when variables are identical versus just equal, since mutating one variable will mutate all other identical variables.</p>\n<p>The methods and operators that lists share with other sequences (like strings) are documented <u><a href=\"https://docs.python.org/2/library/stdtypes.html#string-methods\" target=\"_blank\" rel=\"noopener\">here</a></u>.</p>\n<p>List is mutable so we can change the elements inside the list. The methods and operators that only apply to mutable sequences are documented <u><a href=\"https://docs.python.org/2/library/stdtypes.html#mutable-sequence-types\" target=\"_blank\" rel=\"noopener\">here</a></u>.</p>\n<p><strong>· Tuple</strong><br>Tuple in Python is similar to the list and most list operator also work on tuples, however, it can not be modified and it is comparable and hashable.</p>\n<pre class=\" language-python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'tuple'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.1</span> <span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nw<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z <span class=\"token operator\">=</span> t <span class=\"token comment\" spellcheck=\"true\"># (w,x,y,z) = t</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># tuple</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 'tuple'  100  12.1  True</span>\nw<span class=\"token punctuation\">,</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span>w\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 100 'tuple'</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># To creat a single element, you have to include the final comma.</span>\nt1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'single'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\nt2 <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">(</span><span class=\"token string\">'single'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ('s','i','n','g','l','e')</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#Traverse elements in the list</span>\n<span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> t<span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># t[0] = 'change' # TypeError # It can not be modified.</span>\n<span class=\"token comment\" spellcheck=\"true\"># The variable t refers to a new tuple and the old one is recycled.</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.1</span> <span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># convert the tuple into a list </span>\nl <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\nl<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'tuple'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># tuple 100 12.1 True</span>\n<span class=\"token comment\" spellcheck=\"true\"># convert the list into a tuple</span>\nt <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#Comparing tuples</span>\ntxt <span class=\"token operator\">=</span> <span class=\"token string\">'but soft what light in yonder window breaks'</span> \nwords <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \nt <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n    t<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># [(6, 'yonder'), (6, 'window'), (6, 'breaks'), (5, 'light'), (4, 'what'), (4, 'soft'), (3, 'but'), (2, 'in')]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># be used in dictionary</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#[(6,'c'),(3,'a'),(2,'b')]</span></code></pre>\n<p>1.There are two main advantages of the tuple listed as follows, meanwhile, they are also the reasons why we sometimes use tuple rather than list.</p>\n<p>1) In fact, we may prefer to use the invariant objects in the project, especially in the multi-threaded environment because a constant object is much easier to maintain than a variable object and also can be easily shared and accessed.  So if we don’t need to add, delete, or modify elements, we can consider using tuples.<br>2) Tuples are better than lists in both creation time and occupied space.<br>3) There are a few cases where you might prefer tuples:<br>  · in a return statement<br>  · use a sequence as a dictionary key<br>  · pass a sequence as an argument to a function</p>\n<p>2.Sequence Aggregation<br><code>sum(iterable[, start]) -&gt; value</code>, <code>max(iterable[, key=func]) -&gt; value OR max(a, b, c, ...[, key=func]) -&gt; value</code>, <code>bool(any_value) -&gt; bool</code>, <code>all(iterable) -&gt; bool</code>, <code>any(iterable) -&gt; bool</code></p>\n<p><strong>Ⅱ. Set Type</strong><br>The set in python is consistent with the mathematical set. It can not contain repetitive element.</p>\n<pre class=\" language-python\"><code class=\"language-python\">set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\"># {1, 2, 3}</span>\nset2 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {1, 2, 3, 4, 5, 6, 7, 8, 9}</span>\nset3 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#{1, 2, 3}</span>\nset4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>num <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> num <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\">set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nset1<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nset1<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {1, 2, 3, 4, 11, 12}</span>\nset1<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token number\">4</span> <span class=\"token keyword\">in</span> set1<span class=\"token punctuation\">:</span>\n    set1<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {2, 3, 11, 12}</span>\n<span class=\"token comment\" spellcheck=\"true\"># delete and return the first element</span>\nset1<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {3, 11, 12} # It's different from the list.</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\">set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nset2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1 <span class=\"token operator\">&amp;</span> set2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {3, 4}</span>\n<span class=\"token comment\" spellcheck=\"true\"># print(set1.intersection(set2))</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1 <span class=\"token operator\">|</span> set2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {1, 2, 3, 4, 5, 6}</span>\n<span class=\"token comment\" spellcheck=\"true\"># print(set1.union(set2))</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1 <span class=\"token operator\">-</span> set2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {1, 2}</span>\n<span class=\"token comment\" spellcheck=\"true\"># print(set1.difference(set2))</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1 <span class=\"token operator\">^</span> set2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># {1, 2, 5, 6}</span>\n<span class=\"token comment\" spellcheck=\"true\"># print(set1.symmetric_difference(set2))</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set2 <span class=\"token operator\">&lt;=</span> set1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># False</span>\n<span class=\"token comment\" spellcheck=\"true\"># print(set2.issubset(set1))</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1 <span class=\"token operator\">>=</span> set2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># False</span>\n<span class=\"token comment\" spellcheck=\"true\"># print(set1.issuperset(set2))</span></code></pre>\n<p><strong>Ⅲ. Mapping Type:  dictionary</strong></p>\n<p>A mapping object maps hashtable values to arbitrary objects. Mappings are mutable objects. But the key of the dictionary must be immutable variable.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># create the dictionarys</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Oreo'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">82</span><span class=\"token punctuation\">}</span>\nitems1 <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">(</span>one<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> two<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> three<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> four<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nitems2 <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">(</span>zip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nitems3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">:</span> num <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\nscores<span class=\"token punctuation\">[</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">89</span>\nscores<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>John<span class=\"token operator\">=</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span> Marry<span class=\"token operator\">=</span><span class=\"token number\">85</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\"># scores.keys() scores.values() scores.items() </span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">'{key}: {scores[key]}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token string\">'John'</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">[</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Oreo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 82</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Jonny'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 60</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>popitem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ('Marry', 85)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 95</span>\n\nvals <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># ['Peter', 'Oreo', 'John']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>scores<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>scores<span class=\"token punctuation\">,</span>items<span class=\"token punctuation\">)</span> \n<span class=\"token comment\" spellcheck=\"true\"># dict_values([89, 82, 67]) dict_keys(['Peter', 'Oreo', 'John']) dict_items([('Peter', 89), ('Oreo', 82), ('John', 67)])</span>\nscores<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"Part-5-Language-structure\">Part. 5 Language structure<a href=\"post/20191010-Python-Basics-01#Part-5-Language-structure\"></a></h4><p>We put these language elements together to form different expressions (primitive expression: numbers <code>2</code>, strings<code>&#39;hello&#39;</code>,  names <code>add, x...</code>; arithmetic expression: <code>15//3</code>; call expression: <code>max(add(2,3),6)</code> ) . </p>\n<p>And different expressions form statements or instructions so that computers can get orders and do the certain operations. The way we organize the statements can be divided into different types of structures in order to make our program more effective. Generally, there are three types: <i>sequential structure, conditional structure</i> and <i>iteration</i>.</p>\n<p>Python uses <strong>indentation</strong> to set the hierarchy of different compound statements instead of using<code>{}</code>.  If the continuous statements maintains the same indentation then they belong to the same code block, which is equivalent to one specific function.</p>\n<p><strong>Ⅰ. Conditional structure</strong><br>Sometimes, we have to separate our solutions into different <strong>branches</strong> and change the actions of the program according to some conditions. In python, we use <code>if</code> statement(use the keywords <code>if</code>, <code>else</code>, <code>elif</code>) to implement it.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>conditional expression<span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>suite of statements<span class=\"token operator\">></span>\n<span class=\"token keyword\">elif</span> <span class=\"token operator\">&lt;</span>conditional expression<span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>suite of statements<span class=\"token operator\">></span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>suite of statements<span class=\"token operator\">></span></code></pre>\n<p><strong>· Chained conditionals</strong> : (two branches or more)</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># calculate the payment</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    fh <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'Enter the hour: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fr <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">'Enter the rate: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> fh<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pleae enter the right number'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> fh<span class=\"token operator\">>=</span><span class=\"token number\">40</span> <span class=\"token punctuation\">:</span>\n        pay <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fh<span class=\"token number\">-40</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>fr<span class=\"token operator\">*</span><span class=\"token number\">1.5</span><span class=\"token operator\">+</span><span class=\"token number\">40</span><span class=\"token operator\">*</span>fr\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n        pay <span class=\"token operator\">=</span> fh<span class=\"token operator\">*</span>fr\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pay: '</span><span class=\"token punctuation\">,</span> pay<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pease enter numeric input!'</span><span class=\"token punctuation\">)</span></code></pre>\n<p><code>elif</code>: one of the conditions, <code>else</code>: catch the exceptions<br>(If more than one condition is true, only the first true branch executes.)</p>\n<p><strong>· Nested conditionals</strong> : </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> fh<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pleae enter the right number'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> fh<span class=\"token operator\">>=</span><span class=\"token number\">40</span> <span class=\"token punctuation\">:</span>\n           pay <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fh<span class=\"token number\">-40</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>fr<span class=\"token operator\">*</span><span class=\"token number\">1.5</span><span class=\"token operator\">+</span><span class=\"token number\">40</span><span class=\"token operator\">*</span>fr\n       <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n           pay <span class=\"token operator\">=</span> fh<span class=\"token operator\">*</span>fr</code></pre>\n<p>Usually, we use chained conditionals rather than nested conditionals or simplify it with operators. “Flat is better than nested”. Because the nested structure will have a serious impact on the readability of code.</p>\n<p>In the <code>if</code>  statement, we have to execute the subsequent steps through the result of the <strong>if</strong> conditional expression (usually is a boolean expression: True or False). <code>True</code> and <code>False</code> are specific attributes of each object in python. Examples of <code>True</code> and <code>False</code> values of objects in python:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token string\">\"spam\"</span>   <span class=\"token comment\" spellcheck=\"true\"># True</span>\n<span class=\"token string\">\"\"</span>       <span class=\"token comment\" spellcheck=\"true\"># False</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\" spellcheck=\"true\"># False</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>       <span class=\"token comment\" spellcheck=\"true\"># False</span>\n<span class=\"token number\">1</span>        <span class=\"token comment\" spellcheck=\"true\"># True</span>\n<span class=\"token operator\">-</span><span class=\"token number\">1</span>       <span class=\"token comment\" spellcheck=\"true\"># False</span>\n<span class=\"token number\">0.0</span>      <span class=\"token comment\" spellcheck=\"true\"># False </span>\nNone     <span class=\"token comment\" spellcheck=\"true\"># False</span></code></pre>\n<p>And also the result of some logical expressions.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token number\">1</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span>      <span class=\"token comment\" spellcheck=\"true\"># False</span>\na <span class=\"token operator\">==</span> b   <span class=\"token comment\" spellcheck=\"true\"># True</span>\na <span class=\"token keyword\">is</span> b   <span class=\"token comment\" spellcheck=\"true\"># False</span>\nele <span class=\"token keyword\">in</span> list1 <span class=\"token comment\" spellcheck=\"true\"># True</span></code></pre>\n<p><strong>Ⅱ. Iteration</strong><br>Repetitive tasks are the main work for computers. Python provides the <code>while</code> statement and <code>for</code> statement  to  let  the computers do the tasks in a more efficient way.</p>\n<p><strong>· <code>while</code> statement</strong>   (indefinite loops):</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># output the max and min</span>\nsmallest <span class=\"token operator\">=</span> None\nlargest <span class=\"token operator\">=</span> None\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token string\">'Enter the num: '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token string\">'Done'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        num <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid input!'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">if</span> smallest <span class=\"token keyword\">is</span> None <span class=\"token operator\">or</span> num<span class=\"token operator\">&lt;</span>smallest<span class=\"token punctuation\">:</span>\n        smallest <span class=\"token operator\">=</span> num\n    <span class=\"token keyword\">if</span> largest <span class=\"token keyword\">is</span> None <span class=\"token operator\">or</span> num<span class=\"token operator\">></span>largest<span class=\"token punctuation\">:</span>\n        largest <span class=\"token operator\">=</span> num\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The smallest:'</span><span class=\"token punctuation\">,</span>smallest<span class=\"token punctuation\">,</span><span class=\"token string\">'The largest:'</span><span class=\"token punctuation\">,</span>largest<span class=\"token punctuation\">)</span></code></pre>\n<p><code>break</code>:  If the condition is met, the program will jump out of the loop.</p>\n<p><code>continue</code>:  Skip to the next iteration without finishing the body of the loop for the current iteration.</p>\n<p><strong>·  <code>for</code> statement</strong>  (definite loops)</p>\n<p>When we want to loop through a set of words, the lines in a file, a list of numbers and so on, we can construct a definite loop using a <code>for</code> statement. </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># Multiplication table</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d*%d=%d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><code>range(&lt;start&gt;, &lt;end&gt;, &lt;skip&gt;)</code>: Creates a range object from <code>&lt;start&gt;</code> (inclusive) to <code>&lt;end&gt;</code> (exclusive), skipping every <code>&lt;skip&gt;</code> element.<br><code>range(1, 100, 2)</code>An odd sequence of 1 to 99 can be generated and 2 is the the increment of the sequence of values (step size).</p>\n<pre class=\" language-python\"><code class=\"language-python\">friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'oreo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sermantha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Damon'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> friend <span class=\"token keyword\">in</span> friends<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Happy New Year!'</span><span class=\"token punctuation\">,</span>friend<span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Ⅲ. Function, Module and Package</strong></p>\n<p><strong>· Function</strong></p>\n<p>In order to  write high-quality code, we should eliminate the repetitive code which is doing the same type of  operations. We can encapsulate those repetitive codes into a function module called “function”  so that we “call” the “function” when we need it. </p>\n<p> Generally, function is a named (bind the name to the function value in current scope) and reusable sequence of statements that takes arguments as input, performs a computation and maps arguments  to a return value. (The naming rules of function are consistent with the naming rules of variables. )</p>\n<p>A function that does not explicitly return a value will return <strong>None</strong>.</p>\n<p>A side effect is anything that happens as a consequence of calling a function.</p>\n<p>Procedure for calling/applying user-defined functions: </p>\n<ul>\n<li>Bind the function’s parameters to its arguments in the new scope .</li>\n<li>Execute the body of the function in the new scope.</li>\n</ul>\n<p>Only call expressions create new local scope and every call expression have their own scope no matter it is the same function that was called again. The parent scope is where the function is defined.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># define a function</span>\n<span class=\"token comment\" spellcheck=\"true\"># A def statement creates a function object with certain parameters and a body and binds it to a name in the current scope. </span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span>  <span class=\"token number\">1</span> \n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> range <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">*=</span> n\n    <span class=\"token keyword\">return</span> result</code></pre>\n<p>1.Arguements</p>\n<p>In Python, function parameters can have default values and also support for variable parameters which is quite different from other languages.</p>\n<p>When the arguments passed by a function is an object of an immutable or mutable type, what is passed is not the actual value but a reference to the object.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">roll_dice</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\"># The default value is 2.</span>\n    Total <span class=\"token operator\">=</span>  <span class=\"token number\">0</span> \n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Total <span class=\"token operator\">+=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Total\n\n<span class=\"token comment\" spellcheck=\"true\"># '*' and '**' indicate that args is a variable parameter. </span>\n<span class=\"token comment\" spellcheck=\"true\"># tu_args will be passed to the function as a tuple and dic_args will be  a dictionary.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>tu_args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>dic_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    Total <span class=\"token operator\">=</span>  <span class=\"token number\">0</span> \n    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> dic_args<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> val <span class=\"token keyword\">in</span> tu_args<span class=\"token punctuation\">:</span>\n        Total <span class=\"token operator\">+=</span> val\n    <span class=\"token keyword\">return</span> Total\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>roll_dice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\" spellcheck=\"true\"># 8</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>roll_dice<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\" spellcheck=\"true\"># 24</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\"># a 24 b 44 47</span></code></pre>\n<p>Python looks for a variable in the order of “local scope”, “nested scope” or the parent scope, “global scope” and “built-in scope”. </p>\n<p>Some identifiers like <code>input</code>,<code>print</code> and <code>int</code>  are built  inside the python which belong to built-in scope. The local variables can only be used inside the function it belongs to, but we can access the global variables anywhere we want to.</p>\n<p>However, if we want to modify the value of the global variables inside a specific function, we should add <code>global</code>  before the variables. Or we want to modify variables in an enclosing scope( the first non-local frame of the current environment), we can add <code>nonlocal</code> before the variable as a nonlocal assignment. Names listed in a nonlocal statement must refer to pre-existing bindings in an enclosing scope and also must not collide with pre-existing bindings in the local scope. Nonlocal allows you to modify a binding in a parent frame, instead of just looking it up.</p>\n<p>Mutable values can be changed <strong>without</strong> a nonlocal statement.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span>  <span class=\"token string\">'Hello'</span> <span class=\"token comment\" spellcheck=\"true\"># b belongs to nested scope</span>\n    <span class=\"token keyword\">global</span> a\n    a <span class=\"token operator\">=</span>  <span class=\"token number\">200</span> \n    <span class=\"token keyword\">def</span> bar <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        nonlocal d\n        c <span class=\"token operator\">=</span>  <span class=\"token string\">'You'</span> <span class=\"token comment\" spellcheck=\"true\"># c belongs to local scope as a local variable</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c\n    <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span>  __name__  <span class=\"token operator\">==</span>  <span class=\"token string\">' __main__ '</span> <span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span>  <span class=\"token number\">100</span>  <span class=\"token comment\" spellcheck=\"true\"># a belongs to global scope as a global variable</span>\n    foo<span class=\"token punctuation\">(</span><span class=\"token string\">'hey'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 200</span></code></pre>\n<p>Python pre-computes which frame contains each name before executing the body of a function. Within the body of a function, all instances of a name must refer to the same frame.</p>\n<p>In the actual development process, we should reduce the use of global variables due to its wide scope.  Unexpected modifications may occur and also the memory occupied by variables are unable to be recycled. </p>\n<p>2.Docstring</p>\n<p>We can write documentation strings (or docstrings) to provide a convenient way of associating documentation with Python modules, functions, classes, and methods. The docstring should describe what the function does, not how.</p>\n<p>The rules of writing docstrings:</p>\n<ul>\n<li>· The doc string line should begin with a capital letter and end with a period.</li>\n<li>· The first line should be a short description.</li>\n<li>· If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description.</li>\n<li>· The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.</li>\n</ul>\n<p>The way of declaring docstrings:<br>Using ”’triple single quotes”’  just below the class, method or function declaration. </p>\n<p>The way of accessing docstrings:<br>Using the  _<em>doc_</em> method of the object or using the help function.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">my_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token triple-quoted-string string\">'''Demonstrates triple double quotes \n\n    docstrings and does nothing really.'''</span>\n\n    <span class=\"token keyword\">return</span> None\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using __doc__:\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_function<span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using help:\"</span><span class=\"token punctuation\">)</span> \nhelp<span class=\"token punctuation\">(</span>my_function<span class=\"token punctuation\">)</span> </code></pre>\n<pre><code>Using __doc__:\nDemonstrates triple double quotes\n    docstrings and does nothing really.\nUsing help:\nHelp on function my_function in module __main__:\n\nmy_function()\n    Demonstrates triple double quotes\n    docstrings and does nothing really.</code></pre><p>3.Built-in functions</p>\n<p>Actually, factorial function is a built-in function in python, we can use such kind of functions directly without defining them. <u><a href=\"https://docs.python.org/3.5/library/functions.html\" target=\"_blank\" rel=\"noopener\">More built-in functions in python.</a></u></p>\n<p>4.Anonymous functions</p>\n<p>Python uses lambda to create anonymous functions. The so-called anonymous means that a function is no longer defined in a standard form such as the def statement.</p>\n<pre><code>lambda [arg1 [,arg2,.....argn]]:expression</code></pre><p>The body of the function is an expression, which can only encapsulate limited logic in it. And the lambda function has its own namespace and cannot access parameters outside of its parameter list or in the global namespace.</p>\n<p>5.Higher Order Function: a function that either takes in functions as an argument and/or returns a function as a return value.</p>\n<p>Usually we can give each function exactly one job, but make it apply to many related situations. We can generalize patterns with arguments and computational processs to make the function applied to a series of situations.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x\n<span class=\"token keyword\">def</span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">summation</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    total<span class=\"token punctuation\">,</span>k <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> k<span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n        total<span class=\"token punctuation\">,</span>k <span class=\"token operator\">=</span> total<span class=\"token operator\">+</span>term<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> total\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sum_naturals</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> summation<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>identity<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">sum_cubes</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> summation<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>cube<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_adder</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> k <span class=\"token operator\">+</span> n\n    <span class=\"token keyword\">return</span> adder\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> h\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>compose<span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span>make_adder<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># Equal to square(make_adder(3)(3))</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_sums</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">next_sum</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> print_sums<span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> next_sum\n\nprint_sums<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nested functions can access variables in outer function (adder) as well as the outer function itself (print_sums).</p>\n<p>Don’t conflate: function name vs. function call.</p>\n<p><strong>· Module</strong><br>If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Or sometimes, you are faced with naming conflicts of different functions in one file. Or as your program gets longer, you may want to split it into several files for easier maintenance. Or you may also want to use a handy function that you’ve written in several programs without copying its definition into each program. At such moments, python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. In Python, every file represents a module. </p>\n<p>We can use the <code>import</code>  to import the specified module to distinguish different functions. </p>\n<p>The variable <code>sys.path</code> is a list of strings that determines the interpreter’s search path for modules. It is initialized to a default path taken from the environment variable <code>PYTHONPATH</code>, or from a built-in default if <code>PYTHONPATH</code> is not set. You can modify it using standard list operations: sys.path.append(‘/lib/python’).</p>\n<p><code>module1.py</code></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello, world!'</span> <span class=\"token punctuation\">)</span></code></pre>\n<p><code>module2.py</code></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'goodbye, world!'</span><span class=\"token punctuation\">)</span></code></pre>\n<p><code>test.py</code></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> module1 <span class=\"token keyword\">as</span> m1\n<span class=\"token keyword\">import</span> module2 <span class=\"token keyword\">as</span> m2\nm1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#hello, world!</span>\nm2<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#goodbye, world!</span></code></pre>\n<p>Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module.</p>\n<p>However, besides the functions defined in the module we import, if there are some other executable codes, it’d be better to put those codes into the condition shown below so that the python interpreter will only execute them when the module is run directly and will not execute them when we import the module into other files.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'goodbye, world!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># __name__ is an implicit variable in Python that represents the name of the module.</span>\n<span class=\"token keyword\">if</span>  __name__ <span class=\"token operator\">==</span> <span class=\"token string\">' __main__ '</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello, world!'</span><span class=\"token punctuation\">)</span>\n    foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>· Package</strong></p>\n<p>Sometimes you may need to create and maintain a growing collection of modules for dealing with difficult problems in an actual project. Packages are a way to achieve this and also structure Python’s module namespace by using “dotted module names”. </p>\n<pre><code>sound/                          Top-level package\n      __init__.py               Initialize the sound package\n      formats/                  Subpackage for file format conversions\n              __init__.py\n              wavread.py\n              ...\n      effects/                  Subpackage for sound effects\n              __init__.py\n              echo.py\n              ...\n      filters/                  Subpackage for filters\n              __init__.py\n              equalizer.py\n              ...</code></pre><p>When importing the package, Python searches through the directories on <code>sys.path</code> looking for the package subdirectory. The <code>__init__.py</code> files are required to make Python treat directories containing the file as packages. </p>\n<p>We can use leading dots to indicate the current and parent packages involved in the relative import.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sound<span class=\"token punctuation\">.</span>effects<span class=\"token punctuation\">.</span>echo\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> echo\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> formats\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>filters <span class=\"token keyword\">import</span> equalizer</code></pre>\n<h4 id=\"Part-Exercise\">Part. Exercise<a href=\"post/20191010-Python-Basics-01#Part-Exercise\"></a></h4><p><strong>Ex.1</strong>: Enter the year to determine if it is a <strong>leap year</strong>.</p>\n<pre class=\" language-python\"><code class=\"language-python\">year <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token string\">' Please enter the year: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nis_leap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> \\\n          year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>is_leap<span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Ex.2</strong>: Enter two positive integers and calculate their greatest common divisor and least common multiple.</p>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span>  int <span class=\"token punctuation\">(</span> input <span class=\"token punctuation\">(</span> <span class=\"token string\">' x = '</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span>  int <span class=\"token punctuation\">(</span> input <span class=\"token punctuation\">(</span> <span class=\"token string\">' y = '</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> y<span class=\"token punctuation\">:</span>\n     <span class=\"token comment\" spellcheck=\"true\"># swap the values of x and y</span>\n    x <span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> x\n<span class=\"token keyword\">for</span> factor <span class=\"token keyword\">in</span>  range <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> factor <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> y <span class=\"token operator\">%</span> factor <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span>\n         <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'The greatest common divisor of %d and %d  is %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'The least common multiple of %d and %d is %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">*</span> y <span class=\"token operator\">//</span> factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">break</span></code></pre>\n<p><strong>Ex.3</strong>:  Look for the <strong>Narcissistic number</strong>.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span>  range <span class=\"token punctuation\">(</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    low <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span>  <span class=\"token number\">10</span> \n    mid <span class=\"token operator\">=</span> num <span class=\"token operator\">//</span> <span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> \n    high <span class=\"token operator\">=</span> num <span class=\"token operator\">//</span> <span class=\"token number\">100</span> \n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> low <span class=\"token operator\">**</span> <span class=\"token number\">3</span>  <span class=\"token operator\">+</span> mid <span class=\"token operator\">**</span> <span class=\"token number\">3</span>  <span class=\"token operator\">+</span> high <span class=\"token operator\">**</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">:</span>\n         <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Ex.4</strong>:  Generate the first 20 numbers of the <strong>Fibonacci sequence</strong> </p>\n<pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Ex.5</strong>:   Find the <strong>perfect number</strong> within 10,000  </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> factor <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> factor <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> factor\n            <span class=\"token keyword\">if</span> factor <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> num <span class=\"token operator\">//</span> factor <span class=\"token operator\">!=</span> factor<span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">+=</span> num <span class=\"token operator\">//</span> factor\n    <span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> num<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Ex.6</strong>:   Output <strong>all prime numbers</strong> within 100</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    is_prime <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">for</span> factor <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> factor <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            is_prime <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">if</span> is_prime<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Ex.7</strong>: Write a program to find all the palindrome prime within 10000.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">prime</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    is_prime <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>int<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> arg <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span>\n            is_prime <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">return</span> is_prime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">palindrome</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    number <span class=\"token operator\">=</span> arg\n    <span class=\"token keyword\">while</span> arg <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> arg <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> result<span class=\"token operator\">*</span><span class=\"token number\">10</span>\n        arg <span class=\"token operator\">//=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">==</span> number\n\nexist <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> prime<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> palindrome<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d is a palindrome prime!'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        exist <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">if</span> exist <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There is no palindrome prime!'</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Ex.8</strong>: Make a histogram of  the domain name in a mail log and find  the name  that appears the most.</p>\n<pre class=\" language-python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter file:\"</span><span class=\"token punctuation\">)</span>\nfd <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\ncount  <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fd<span class=\"token punctuation\">:</span>\n    line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    words <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> len<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">if</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'From'</span><span class=\"token punctuation\">:</span>\n        word <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        pos <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span>\n        word <span class=\"token operator\">=</span> word<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        count<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n\nbigkey <span class=\"token operator\">=</span> None\nbigvalue <span class=\"token operator\">=</span> None\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>val <span class=\"token keyword\">in</span> count<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> bigvalue <span class=\"token keyword\">is</span> None <span class=\"token operator\">or</span> bigvalue <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">:</span>\n        bigkey <span class=\"token operator\">=</span> key\n        bigvalue <span class=\"token operator\">=</span> val\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bigkey<span class=\"token punctuation\">,</span>bigvalue<span class=\"token punctuation\">)</span></code></pre>\n<p>The file is <u><a href=\"http://www.py4e.com/code3/mbox-short.txt\" target=\"_blank\" rel=\"noopener\">here</a></u>.</p>\n","prev":{"title":"Algorithm Basics","slug":"20191013-Algorithm-Basics"},"next":{"title":"Start with me","slug":"20191009-Start-with-me"},"link":"https://oreodu.github.io/post/20191010-Python-Basics-01/","toc":[{"title":"Python Basics 01","id":"Python-Basics-01","index":"1"}]}