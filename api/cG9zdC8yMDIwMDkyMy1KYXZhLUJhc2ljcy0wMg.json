{"title":"Java Basics 02","date":"2020-09-23T01:30:00.000Z","thumbnail":"https://i.loli.net/2020/09/23/o32ab8AFYjJT9sf.jpg","slug":"20200923-Java-Basics-02","tags":["Java"],"categories":["Programming"],"updated":"2020-09-30T05:54:27.030Z","content":"<h1 id=\"Java-Basics-02\">Java Basics 02<a href=\"post/20200923-Java-Basics-02#Java-Basics-02\"></a></h1><h3 id=\"Overview\">Overview<a href=\"post/20200923-Java-Basics-02#Overview\"></a></h3><p>(概略图)</p>\n<p><strong>· materials:</strong><br>   · <a href=\"https://sp19.datastructur.es/\" target=\"_blank\" rel=\"noopener\"><u>CS61B Spring 2019 at UCB</u></a><br>   · <a href=\"https://docs.oracle.com/javase/tutorial/\" target=\"_blank\" rel=\"noopener\"><u>Java Tutorial</u></a><br>   · <a href=\"https://www.oracle.com/java/technologies/language-environment.html\" target=\"_blank\" rel=\"noopener\"><u>The Java Language Environment</u></a> by <em>James Gosling</em> and <em>Henry McGilton</em><br>   · Wikipedia<br>   · <a href=\"https://google.github.io/styleguide/javaguide.html\" target=\"_blank\" rel=\"noopener\"><u>Google Java Style Guide</u></a></p>\n<h3 id=\"Part-1-Interfaces\">Part.1 Interfaces<a href=\"post/20200923-Java-Basics-02#Part-1-Interfaces\"></a></h3><p>A collection of methods with no implementation is called an <em>interface</em>. Methods form the object’s <em>interface</em> with the outside world. The interface is a blueprint of a class and is a mechanism to achieve abstraction.</p>\n<h4 id=\"Ⅰ-Defining-an-interface\">Ⅰ. Defining an interface<a href=\"post/20200923-Java-Basics-02#Ⅰ-Defining-an-interface\"></a></h4><p>An <em>interface</em> is a reference type that can contain <em>only</em> constants,  abstract methods, default methods, static methods, and nested types (note: not including fields). Method bodies exist only for default methods and static methods. </p>\n<p>Empty interfaces(without methods) can be used as types and to mark classes without requiring any particular method implementations. For an example of a useful empty interface, see <code>java.io.Serializable.</code></p>\n<p>All abstract, default, and static methods in an interface are implicitly <code>public</code> and all constant values defined are implicitly <code>public</code>, <code>static</code>, and <code>final</code>. Interfaces cannot be instantiated—they can only be <em>implemented</em> by classes or <em>extended</em> by other interfaces and they can extend any number of other interfaces.</p>\n<p>Default method:  defined in the interface with the keyword <code>defualt</code> and enable you to add new functionality with implementation to the interfaces and ensure binary compatibility with code written for older versions of those interfaces. Implementation class can override the default method.</p>\n<p>For more information about default method <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a> or <a href=\"https://blog.codefx.org/java/everything-about-default-methods/\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<p>Static method: defined in the interface with the keyword <code>static</code> and contain the complete definition of the function and cannot be overridden or changed in the implementation class.</p>\n<p>Abstract method: declared without an implementation.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestInterface</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// abstract method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">square</span> <span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// static method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showStatic</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Static Method Executed\"</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// default method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">showDefault</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Default Method Executed\"</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">TestInterface</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Implementation of square abstract method </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">square</span> <span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; </span><br><span class=\"line\">        System.out.println(a*a); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; </span><br><span class=\"line\">        TestClass d = <span class=\"keyword\">new</span> TestClass(); </span><br><span class=\"line\">        d.square(<span class=\"number\">4</span>);  <span class=\"comment\">// 16</span></span><br><span class=\"line\">        d.showDefault(); <span class=\"comment\">// Default Method Executed</span></span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// Static method executed </span></span><br><span class=\"line\">        TestInterface.showStatic(); <span class=\"comment\">// Static Method Executed</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Ⅱ-Implementing-an-Interface\">Ⅱ. Implementing an Interface<a href=\"post/20200923-Java-Basics-02#Ⅱ-Implementing-an-Interface\"></a></h4><p>To declare a class that implements an interface, we should include an <code>implements</code> clause in the class declaration. The class can implement more than one interface. By convention, the <code>implements</code> clause follows the <code>extends</code> clause, if there is one.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Relatable</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// this (object calling isLargerThan) and other must be instances of </span></span><br><span class=\"line\">    <span class=\"comment\">// the same class returns 1, 0, -1 if this is greater than, </span></span><br><span class=\"line\">    <span class=\"comment\">// equal to, or less than other</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">isLargerThan</span><span class=\"params\">(Relatable other)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RectanglePlus</span> <span class=\"keyword\">implements</span> <span class=\"title\">Relatable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> height = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Point origin;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectanglePlus</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">        origin = <span class=\"keyword\">new</span> Point(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        width = w;</span><br><span class=\"line\">        height = h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RectanglePlus</span><span class=\"params\">(Point p, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">        origin = p;</span><br><span class=\"line\">        width = w;</span><br><span class=\"line\">        height = h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// a method for computing the area of the rectangle</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> width * height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// a method required to implement the Relatable interface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">isLargerThan</span><span class=\"params\">(Relatable other)</span> </span>&#123;</span><br><span class=\"line\">        RectanglePlus otherRect = (RectanglePlus)other;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getArea() &lt; otherRect.getArea())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getArea() &gt; otherRect.getArea())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;               </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we want to be able to compare the size of similar objects instantiated from the class and there is some way to compare the relative “size” of them, the class that instantiates them should and can implement <code>Relatable</code> interface.</p>\n<h4 id=\"Ⅲ-Using-an-Interface-as-a-Type\">Ⅲ. Using an Interface as a Type<a href=\"post/20200923-Java-Basics-02#Ⅲ-Using-an-Interface-as-a-Type\"></a></h4><p>Because interface is a reference data type so we can use the interface name as a data type, However if a reference variable whose type is an interface, any objects assigned to it should be an instance of the class that implements the interface and its value can reference any object that is instantiated from any class that implements the interface. This also means that an object can have multiple types: the type of its own class and the types of all the interfaces that the class implements. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Any objects that are instantiated from a class that implements Relatable.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">findLargest</span><span class=\"params\">(Object object1, Object object2)</span> </span>&#123;</span><br><span class=\"line\">   Relatable obj1 = (Relatable)object1;</span><br><span class=\"line\">   Relatable obj2 = (Relatable)object2;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((obj1).isLargerThan(obj2) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> object1;</span><br><span class=\"line\">   <span class=\"keyword\">else</span> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> object2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When the classes implement <code>Relatable</code>, objects instantiated from those classes can be of both their own class (or superclass) type and a <code>Relatable</code> type. This gives them some of the advantages of multiple inheritance, where they can have behavior from both a superclass and an interface.</p>\n<h4 id=\"Ⅳ-Evolving-Interfaces\">Ⅳ. Evolving Interfaces<a href=\"post/20200923-Java-Basics-02#Ⅳ-Evolving-Interfaces\"></a></h4><p>Normally, once we finished developing the interface we cannot modify it because all the classes that implemented the interface will break. So try to anticipate all uses for the interface and specify it completely from the beginning. However, you have several other options.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create a DoItPlus interface that extends DoIt</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoItPlus</span> <span class=\"keyword\">extends</span> <span class=\"title\">DoIt</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">didItWork</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> x, String s)</span></span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// define new methods as default methods or static methods.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoIt</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> x)</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">doSomethingElse</span><span class=\"params\">(String s)</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">didItWork</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> x, String s)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// Method body </span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Users who have classes that implement interfaces enhanced with new default or static methods do not have to modify or recompile them to accommodate the additional methods.</p>\n<h4 id=\"Ⅴ-Enhance-the-interface\">Ⅴ. Enhance the interface<a href=\"post/20200923-Java-Basics-02#Ⅴ-Enhance-the-interface\"></a></h4><p> Interface can be enhanced with default methods, static methods, lambda expressions, and method references to create more expressive library methods whose functionality programmers can quickly deduce by looking at how they are invoked.  See more details <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StandardDeck</span> <span class=\"keyword\">implements</span> <span class=\"title\">Deck</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Card&gt; entireDeck;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparator&lt;Card&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    Collections.sort(entireDeck, c);</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortByRankThenSuit</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Card</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Card firstCard, Card secondCard)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> compVal =</span><br><span class=\"line\">            firstCard.getRank().value() - secondCard.getRank().value();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compVal != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> compVal;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> firstCard.getSuit().value() - secondCard.getSuit().value(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">StandardDeck myDeck = <span class=\"keyword\">new</span> StandardDeck();</span><br><span class=\"line\">myDeck.shuffle();</span><br><span class=\"line\">myDeck.sort(<span class=\"keyword\">new</span> SortByRankThenSuit());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StandardDeck myDeck = <span class=\"keyword\">new</span> StandardDeck();</span><br><span class=\"line\">myDeck.shuffle();</span><br><span class=\"line\">myDeck.sort(</span><br><span class=\"line\">    (firstCard, secondCard) -&gt;</span><br><span class=\"line\">        firstCard.getRank().value() - secondCard.getRank().value()</span><br><span class=\"line\">); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// static method comparing in the Comparator interface</span></span><br><span class=\"line\"><span class=\"comment\">// compares any object that can return a numerical value from a method</span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(Comparator.comparing((card) -&gt; card.getRank()));  </span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(Comparator.comparing(Card::getRank));  </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StandardDeck myDeck = <span class=\"keyword\">new</span> StandardDeck();</span><br><span class=\"line\">myDeck.shuffle();</span><br><span class=\"line\">myDeck.sort(</span><br><span class=\"line\">    (firstCard, secondCard) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> compare =</span><br><span class=\"line\">            firstCard.getRank().value() - secondCard.getRank().value();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compare != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> compare;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> firstCard.getSuit().value() - secondCard.getSuit().value();</span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// the default method thenComparing</span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(</span></span><br><span class=\"line\"><span class=\"comment\">    Comparator</span></span><br><span class=\"line\"><span class=\"comment\">        .comparing(Card::getRank)</span></span><br><span class=\"line\"><span class=\"comment\">        .thenComparing(Comparator.comparing(Card::getSuit)));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">//  the default method reversed      </span></span><br><span class=\"line\"><span class=\"comment\">myDeck.sort(</span></span><br><span class=\"line\"><span class=\"comment\">    Comparator.comparing(Card::getRank)</span></span><br><span class=\"line\"><span class=\"comment\">        .reversed()</span></span><br><span class=\"line\"><span class=\"comment\">        .thenComparing(Comparator.comparing(Card::getSuit)));</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part-2-Inheritance\">Part.2 Inheritance<a href=\"post/20200923-Java-Basics-02#Part-2-Inheritance\"></a></h3><p>Common behavior can be defined in a superclass and <em>inherited</em> into a subclass using the <code>extends</code> keyword. Every class has one and only one direct superclass (<a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html\" target=\"_blank\" rel=\"noopener\"><u>why single inheritance?</u></a>). In the absence of any other explicit superclass, every class is implicitly a subclass of <code>Object</code>, and each superclass has the potential for an unlimited number of <em>subclasses</em>.</p>\n<img src=\"https://i.loli.net/2020/09/24/WegZxS3bOYwk5R4.gif\" alt=\"classes-object\" style=\"zoom: 80%;\">\n\n<p>​                                                                        (From Java Tutorials)</p>\n<p>A subclass inherits all of the <em>public</em> and <em>protected</em> members(fields, methods, and nested classes) from its superclass, no matter what package the subclass is in. If the subclass is in the same package as its parent, it also inherits the <em>package-private</em> members of the parent. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.</p>\n<p>A subclass does not inherit the <code>private</code> members of its parent class. However, if the superclass has public or protected methods for accessing its private fields, these can also be used by the subclass. A nested class has access to all the private members of its enclosing class—both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass.</p>\n<h4 id=\"Ⅰ-Multiple-Inheritance-of-State-Implementation-and-Type\">Ⅰ. Multiple Inheritance of State, Implementation, and Type<a href=\"post/20200923-Java-Basics-02#Ⅰ-Multiple-Inheritance-of-State-Implementation-and-Type\"></a></h4><p>Multiple Inheritance of State:  the ability to inherit fields from multiple classes, which is not supported by Java because only single inheritance is allowed between and interface don’t have fields.</p>\n<p>Multiple Inheritance of Implementation: the ability to inherit method definitions from multiple classes. In Java, a class can implement more than one interface, which can contain default methods that have the same name. The Java compiler provides some rules to determine which default method a particular class uses.</p>\n<p>Multiple Inheritance of Type:  the ability of a class to implement more than one interface. An object can have multiple types: the type of its own class and the types of all the interfaces that the class implements. This is more detailed in Part.1.Ⅲ.</p>\n<h4 id=\"Ⅱ-Overriding-and-Hiding-Methods\">Ⅱ. Overriding and Hiding Methods<a href=\"post/20200923-Java-Basics-02#Ⅱ-Overriding-and-Hiding-Methods\"></a></h4><p>Inherited fields and methods can be used directly. Subclass can declare new fields and methods in the subclass that are not in the superclass. </p>\n<p>Within a class, a field that has the same name as a field in the superclass hides the superclass’s field, even if their types are different. </p>\n<h5 id=\"1）Instance-Methods\">1）Instance Methods<a href=\"post/20200923-Java-Basics-02#1）Instance-Methods\"></a></h5><p>An instance method in a subclass with the same signature (name, plus the number and the type of its parameters) and return type(or the subclass of the return type in super class) as an instance method in the superclass <em>overrides</em> the superclass’s method.</p>\n<h5 id=\"2-Static-Methods\">2) Static Methods<a href=\"post/20200923-Java-Basics-02#2-Static-Methods\"></a></h5><p>If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass <em>hides</em> the one in the superclass.</p>\n<p>The distinction between hiding a static method and overriding an instance method has important implications:</p>\n<ul>\n<li>The version of the overridden instance method that gets invoked is the one in the subclass.</li>\n<li>The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testClassMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"The static method in Animal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInstanceMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"The instance method in Animal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testClassMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"The static method in Cat\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInstanceMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"The instance method in Cat\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cat myCat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        Animal myAnimal = myCat;</span><br><span class=\"line\">        Animal.testClassMethod();</span><br><span class=\"line\">        myAnimal.testInstanceMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The static method in Animal</span></span><br><span class=\"line\"><span class=\"comment\">// The instance method in Cat</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Interface-Methods\">3) Interface Methods<a href=\"post/20200923-Java-Basics-02#3-Interface-Methods\"></a></h5><p>Static methods in interfaces are never inherited.</p>\n<p>Default methods and abstract methods in interfaces are inherited like instance methods. However, when the supertypes of a class or interface provide multiple default methods with the same signature, the Java compiler follows inheritance rules to resolve the name conflict. These rules are driven by the following those principles:</p>\n<ul>\n<li>· If two or more independently defined default methods conflict, or a default method conflicts with an abstract method, then the Java compiler produces a compiler error and we must explicitly override the supertype methods. Instance methods are preferred over interface default methods.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OperateCar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startEngine</span><span class=\"params\">(EncryptedKey key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FlyCar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startEngine</span><span class=\"params\">(EncryptedKey key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyingCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperateCar</span>, <span class=\"title\">FlyCar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startEngine</span><span class=\"params\">(EncryptedKey key)</span> </span>&#123;</span><br><span class=\"line\">        FlyCar.<span class=\"keyword\">super</span>.startEngine(key);</span><br><span class=\"line\">        OperateCar.<span class=\"keyword\">super</span>.startEngine(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>· When supertypes share a common ancestor，methods that are already overridden by other candidates are ignored. </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"I am an animal.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EggLayer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"I am able to lay eggs.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FireBreather</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dragon</span> <span class=\"keyword\">implements</span> <span class=\"title\">EggLayer</span>, <span class=\"title\">FireBreather</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        Dragon myApp = <span class=\"keyword\">new</span> Dragon();</span><br><span class=\"line\">        System.out.println(myApp.identifyMyself());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// I am able to lay eggs.</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>· Inherited instance methods from classes can override abstract interface methods.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mammal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">identifyMyself</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"I am a horse.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mustang</span> <span class=\"keyword\">extends</span> <span class=\"title\">Horse</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mammal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        Mustang myApp = <span class=\"keyword\">new</span> Mustang();</span><br><span class=\"line\">        System.out.println(myApp.identifyMyself());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will get a compile-time error if you attempt to change an instance method in the superclass to a static method in the subclass, and vice versa.</p>\n<p>We could use use the <code>@Override</code> annotation that instructs the compiler that you intend to override a method in the superclass.</p>\n<h4 id=\"Ⅲ-Using-the-Keyword-super\">Ⅲ. Using the Keyword super<a href=\"post/20200923-Java-Basics-02#Ⅲ-Using-the-Keyword-super\"></a></h4><h5 id=\"1-Accessing-Superclass-Members\">1) Accessing Superclass Members<a href=\"post/20200923-Java-Basics-02#1-Accessing-Superclass-Members\"></a></h5><p>We can use the key word <code>super</code> to access the members in the superclass, either a overridden method or hidden field.</p>\n<p><code>super.overriddenMethod();</code></p>\n<h5 id=\"2-Subclass-Constructors\">2) Subclass Constructors<a href=\"post/20200923-Java-Basics-02#2-Subclass-Constructors\"></a></h5><p>We can also use the <code>super</code> keyword to invoke a superclass’s constructor and invocation of a superclass constructor must be the first line in the subclass constructor.</p>\n<p><code>super(parameter list);</code></p>\n<p><em>Constructor chaining</em>: If a subclass constructor invokes a constructor of its superclass, there will be a whole chain of constructors called, all the way back to the constructor of <code>Object</code>.</p>\n<h4 id=\"Ⅳ-Object-Class\">Ⅳ. <code>Object</code> Class<a href=\"post/20200923-Java-Basics-02#Ⅳ-Object-Class\"></a></h4><p>The <code>Object</code> class, in the <code>java.lang</code> package, sits at the top of the class hierarchy tree. Every class is a descendant, direct or indirect, of the <code>Object</code> class. Every class you use or write inherits the instance methods of <code>Object</code>.</p>\n<p>Some methods inherited from <code>Object</code> :</p>\n<ul>\n<li><code>protected Object clone() throws CloneNotSupportedException</code><br>   Creates and returns a copy of this object.</li>\n<li><code>public boolean equals(Object obj)</code><br>   Indicates whether some other object is “equal to” this one.</li>\n<li><code>protected void finalize() throws Throwable</code><br>   Called by the garbage collector on an object when garbage<br>   collection determines that there are no more references to the object</li>\n<li><code>public final Class getClass()</code><br>   Returns the runtime class of an object.</li>\n<li><code>public int hashCode()</code><br>   Returns a hash code value for the object.</li>\n<li><code>public String toString()</code><br>   Returns a string representation of the object.</li>\n</ul>\n<p>The <code>notify</code>, <code>notifyAll</code>, and <code>wait</code> methods of <code>Object</code> all play a part in synchronizing the activities of independently running threads in a program. There are five of these methods:</p>\n<ul>\n<li><p><code>public final void notify()</code></p>\n</li>\n<li><p><code>public final void notifyAll()</code></p>\n</li>\n<li><p><code>public final void wait()</code></p>\n</li>\n<li><p><code>public final void wait(long timeout)</code></p>\n</li>\n<li><p><code>public final void wait(long timeout, int nanos)</code></p>\n<p>See more details about the method <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a> .</p>\n</li>\n</ul>\n<h4 id=\"Ⅴ-final-and-abstract\">Ⅴ. <code>final</code> and <code>abstract</code><a href=\"post/20200923-Java-Basics-02#Ⅴ-final-and-abstract\"></a></h4><h5 id=\"1）Final\">1）Final<a href=\"post/20200923-Java-Basics-02#1）Final\"></a></h5><p>If it has an implementation that should not be changed and it is critical to the consistent state of the object, we use the <code>final</code> keyword in a method declaration to indicate that the method cannot be overridden by subclasses.</p>\n<p>Methods called from constructors should generally be declared final. If a constructor calls a non-final method, a subclass may redefine that method with surprising or undesirable results.</p>\n<p>We can also declare an entire class final. A class that is declared final cannot be subclassed. This is particularly useful, for example, when creating an immutable class like the <code>String</code> class.</p>\n<h5 id=\"2-Abstract\">2) Abstract<a href=\"post/20200923-Java-Basics-02#2-Abstract\"></a></h5><p>An <em>abstract class</em> is a class that is declared <code>abstract</code>—it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed. When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared <code>abstract</code>.</p>\n<p>An <em>abstract method</em> is a method that is declared without an implementation (without braces, and followed by a semicolon). If a class includes abstract methods, then the class itself <em>must</em> be declared <code>abstract</code>.</p>\n<p>Difference between the abstract class and interface:  Abstract class can declare fields that are not static and final and define public, protected, and private concrete methods .But we can extend only one class. See more details <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<p>A class that implements an interface must implement <em>all</em> of the interface’s methods. It is possible, however, to define a class that does not implement all of the interface’s methods, provided that the class is declared to be <code>abstract</code>.</p>\n<h4 id=\"Ⅵ-Casting-Objects\">Ⅵ. Casting Objects<a href=\"post/20200923-Java-Basics-02#Ⅵ-Casting-Objects\"></a></h4><p>Normally, an object is of the data type of the class from which it was instantiated.</p>\n<p><em>Casting</em> shows the use of an object of one type in place of another type, among the objects permitted by inheritance and implementations.</p>\n<p>Implicit casting: <code>Object obj = new MountainBike();</code><br>Explicit casting: <code>MountainBike myBike = (MountainBike)obj;</code></p>\n<h3 id=\"Part-3-Annotation\">Part.3 Annotation<a href=\"post/20200923-Java-Basics-02#Part-3-Annotation\"></a></h3><p><em>Annotations</em>, a form of metadata, provide data about a program that has no direct effect on the operation of the code they annotate. Annotations can be applied to any <em>type use</em>.</p>\n<p>The use of annotations:<br>·  Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings.<br>· Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth.<br>· Runtime processing — Some annotations are available to be examined at runtime.</p>\n<p>The annotation type can be one of the types that are defined in the <code>java.lang</code> or <code>java.lang.annotation</code> packages of the Java SE API or custom annotation types.</p>\n<p>See predefined annotation types and annotations that apply to other annotations <a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<h4 id=\"Ⅰ-Declaring-an-Annotation-Type\">Ⅰ. Declaring an Annotation Type<a href=\"post/20200923-Java-Basics-02#Ⅰ-Declaring-an-Annotation-Type\"></a></h4><p>Annotation types are a form of <em>interface</em>. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> ClassPreamble &#123;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">author</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">date</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">currentRevision</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 1</span>;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">lastModified</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"N/A\"</span>;</span><br><span class=\"line\">   <span class=\"function\">String <span class=\"title\">lastModifiedBy</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"N/A\"</span>;</span><br><span class=\"line\">   <span class=\"comment\">// Note use of array</span></span><br><span class=\"line\">   String[] reviewers();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// make the information in @ClassPreamble appear in Javadoc-generated documentation</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@ClassPreamble</span> (</span><br><span class=\"line\">   author = <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">   date = <span class=\"string\">\"3/17/2002\"</span>,</span><br><span class=\"line\">   currentRevision = <span class=\"number\">6</span>,</span><br><span class=\"line\">   lastModified = <span class=\"string\">\"4/12/2004\"</span>,</span><br><span class=\"line\">   lastModifiedBy = <span class=\"string\">\"Jane Doe\"</span>,</span><br><span class=\"line\">   <span class=\"comment\">// Note array notation</span></span><br><span class=\"line\">   reviewers = &#123;<span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Cindy\"</span>&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generation3List</span> <span class=\"keyword\">extends</span> <span class=\"title\">Generation2List</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class code goes here</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Ⅱ-Apply-the-annotations\">Ⅱ. Apply the annotations<a href=\"post/20200923-Java-Basics-02#Ⅱ-Apply-the-annotations\"></a></h4><p>Annotations can be applied to declarations (declarations of classes, fields, methods, and other program elements) and any <em>type use</em> (type annotation) as follows :<br>· class instance creation expression ： <code>new @Interned MyObject();</code><br>· type cast： <code>myString = (@NonNull String) str;</code><br>· <code>implements</code> clause： <code>class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; { ... }</code><br>· thrown exception declaration： <code>void monitorTemperature() throws @Critical TemperatureException { ... }</code>).<br>· …</p>\n<p>Type annotations were created to support improved analysis of Java programs way of ensuring stronger type checking. The Java SE 8 release does not provide a type checking framework, but it allows you to write (or download) a type checking framework that is implemented as one or more pluggable modules that are used in conjunction with the Java compiler.</p>\n<p>For more information about the framework provided by third parties, see the <a href=\"http://types.cs.washington.edu/checker-framework/\" target=\"_blank\" rel=\"noopener\"><u>Checker Framework</u></a> created by the University of Washington.</p>\n<h4 id=\"Ⅲ-Repeating-Annotations\">Ⅲ. Repeating Annotations<a href=\"post/20200923-Java-Basics-02#Ⅲ-Repeating-Annotations\"></a></h4><p><em>Repeating annotations</em> enable you to apply the same annotation to a declaration or type use.</p>\n<p>For compatibility reasons, repeating annotations are stored in a <em>container annotation</em> that is automatically generated by the Java compiler.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Schedule</span>(dayOfMonth=<span class=\"string\">\"last\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Schedule</span>(dayOfWeek=<span class=\"string\">\"Fri\"</span>, hour=<span class=\"string\">\"23\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPeriodicCleanup</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-Declare-a-Repeatable-Annotation\">1) Declare a Repeatable Annotation<a href=\"post/20200923-Java-Basics-02#1-Declare-a-Repeatable-Annotation\"></a></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Repeatable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Repeatable</span>(Schedules.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Schedule &#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">dayOfMonth</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"first\"</span>;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">dayOfWeek</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"Mon\"</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hour</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 12</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  The value of the <code>@Repeatable</code> meta-annotation, in parentheses, is the type of the container annotation that the Java compiler generates to store repeating annotations. In this example, the containing annotation type is <code>Schedules</code>, so repeating <code>@Schedule</code> annotations is stored in an <code>@Schedules</code> annotation.</p>\n<h5 id=\"2-Declare-the-Containing-Annotation-Type\">2) Declare the Containing Annotation Type<a href=\"post/20200923-Java-Basics-02#2-Declare-the-Containing-Annotation-Type\"></a></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Schedules &#123;</span><br><span class=\"line\">    Schedule[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>See the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html\" target=\"_blank\" rel=\"noopener\"><u>AnnotatedElement</u></a> class specification for information on all of the available methods to retrieve annotations.</p>\n<h3 id=\"Part-4-Numbers-and-Strings\">Part.4 Numbers and Strings<a href=\"post/20200923-Java-Basics-02#Part-4-Numbers-and-Strings\"></a></h3><h4 id=\"Ⅰ-Numbers\">Ⅰ. Numbers<a href=\"post/20200923-Java-Basics-02#Ⅰ-Numbers\"></a></h4><h5 id=\"1）Numbers-classes\">1）Numbers classes<a href=\"post/20200923-Java-Basics-02#1）Numbers-classes\"></a></h5><p>The Java platform provides <em>wrapper</em> classes for each of the primitive data types. The Java compiler automatically wraps (boxes) primitives for you when necessary and unboxes them, again when necessary. All of the numeric wrapper classes are subclasses of the abstract class <code>Number</code>:</p>\n<img src=\"https://i.loli.net/2020/09/26/aRLIWc4fjeoBviJ.png\" alt=\"11\" style=\"zoom:50%;\">\n\n<p><code>BigDecimal</code> and <code>BigInteger</code> are used for high-precision calculations. <code>AtomicInteger</code> and <code>AtomicLong</code> are used for multi-threaded applications.</p>\n<p>There are three reasons that you might use a <code>Number</code> object rather than a primitive:<br>1.As an argument of a method that expects an object (often used when manipulating collections of numbers).<br>2.To use constants defined by the class, such as <code>MIN_VALUE</code> and <code>MAX_VALUE</code>, that provide the upper and lower bounds of the data type.<br>3.To use class methods for converting values to and from other primitive types, for converting to and from strings, and for converting between number systems (decimal, octal, hexadecimal, binary).</p>\n<p>The instance methods that all the subclasses of the <code>Number</code> class implement: <a href=\"https://docs.oracle.com/javase/tutorial/java/data/numberclasses.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">byte</span> <span class=\"title\">byteValue</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Byte anotherByte)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Return true if they have the same type and with the same numeric value)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">'12.1'</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">'13.2'</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> a = (Float.valueOf(s1)).floatValue(); </span><br><span class=\"line\"><span class=\"keyword\">float</span> b = Float.parseFloat(s2);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a + b =  \"</span> + (a + b));  <span class=\"comment\">// --&gt; 25.3</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">858.48</span>;</span><br><span class=\"line\">String s = Double.toString(d);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">String s1 = <span class=\"string\">\"\"</span> + i;</span><br><span class=\"line\">String s2 = String.valueOf(i);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-Formatting-Numeric-Print-Output\">2) Formatting Numeric Print Output<a href=\"post/20200923-Java-Basics-02#2-Formatting-Numeric-Print-Output\"></a></h5><p><strong>· The printf and format Methods</strong></p>\n<p>The <code>java.io</code> package includes a <code>PrintStream</code> class that has two formatting methods (<code>format</code> and <code>printf</code>,  equivalent to one another) that you can use to replace <code>print</code> and <code>println</code>. The familiar <code>System.out</code> is a <code>PrintStream</code> object, so we can invoke <code>PrintStream</code> methods on <code>System.out</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFormat</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">long</span> n = <span class=\"number\">461012</span>;</span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%08d%n\"</span>, n);    <span class=\"comment\">//  --&gt;  \"00461012\"</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%+,8d%n%n\"</span>, n); <span class=\"comment\">//  --&gt;  \"+461,012\"</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">double</span> pi = Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%f%n\"</span>, pi);       <span class=\"comment\">// --&gt;  \"3.141593\"</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%.3f%n\"</span>, pi);     <span class=\"comment\">// --&gt;  \"3.142\"</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%10.3f%n\"</span>, pi);   <span class=\"comment\">// --&gt;  \"     3.142\"</span></span><br><span class=\"line\">      System.out.format(Locale.FRANCE,</span><br><span class=\"line\">                        <span class=\"string\">\"%-10.4f%n%n\"</span>, pi); <span class=\"comment\">// --&gt;  \"3,1416\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">      Calendar c = Calendar.getInstance();</span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%tB %te, %tY%n\"</span>, c, c, c); <span class=\"comment\">// --&gt;  \"May 29, 2006\"</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%tl:%tM %tp%n\"</span>, c, c, c);  <span class=\"comment\">// --&gt;  \"2:34 am\"</span></span><br><span class=\"line\">      System.out.format(<span class=\"string\">\"%tD%n\"</span>, c);    <span class=\"comment\">// --&gt;  \"05/29/06\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Format specifiers begin with a percent sign (%) and end with a <em>converter</em>. The converter is a character indicating the type of argument to be formatted. In between the percent sign (%) and the converter you can have optional flags and specifiers. There are many converters, flags, and specifiers, which are documented in <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html\" target=\"_blank\" rel=\"noopener\">java.util.Formatter</a> or <a href=\"https://docs.oracle.com/javase/tutorial/java/data/numberformat.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<p><strong>· The DecimalFormat Class</strong></p>\n<p>You can use the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html\" target=\"_blank\" rel=\"noopener\"><u>java.text.DecimalFormat</u></a> class to control the display of leading and trailing zeros, prefixes and suffixes, grouping (thousands) separators, and the decimal separator.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecimalFormatDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customFormat</span><span class=\"params\">(String pattern, <span class=\"keyword\">double</span> value )</span> </span>&#123;</span><br><span class=\"line\">      DecimalFormat myFormatter = <span class=\"keyword\">new</span> DecimalFormat(pattern);</span><br><span class=\"line\">      String output = myFormatter.format(value);</span><br><span class=\"line\">      System.out.println(value + <span class=\"string\">\"  \"</span> + pattern + <span class=\"string\">\"  \"</span> + output);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      customFormat(<span class=\"string\">\"000000.000\"</span>, <span class=\"number\">123.78</span>);</span><br><span class=\"line\">      customFormat(<span class=\"string\">\"$###,###.##\", 1212345.679);  // 1212345.679 $###,###.## $1212,345.67</span></span><br><span class=\"line\"><span class=\"string\">   &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Beyond-Basic-Arithmetic\">3) Beyond Basic Arithmetic<a href=\"post/20200923-Java-Basics-02#3-Beyond-Basic-Arithmetic\"></a></h5><p>The <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html\" target=\"_blank\" rel=\"noopener\"><u>Math</u></a> class in the <code>java.lang</code> package provides methods and constants for doing more advanced mathematical computation. The methods in the <code>Math</code> class are all static, so you call them directly from the class.</p>\n<p>· Constants and Basic Methods</p>\n<p><code>Math.E</code>, <code>Math.PI</code></p>\n<p><code>type abs(type t)</code>, <code>type ceil(type t)</code>, <code>type floor(type t)</code>,  <code>type rint(type t)</code>,  <code>int round(float t)</code>, <code>type min(type t1, type t2)</code>,  <code>type max(type t1, type t2)</code>, </p>\n<p>· Exponential and Logarithmic Methods</p>\n<p><code>double exp(double d)</code>, <code>double log(double d)</code>, <code>double pow(double base, double exponent)</code>, <code>double sqrt(double d)</code>,</p>\n<p>· Trigonometric Methods</p>\n<p><code>double sin(double d)</code>, ….</p>\n<p>· Random Numbers</p>\n<p>The <code>random()</code> method returns a pseudo-randomly selected number (0.0 &lt;= Math.random() &lt; 1.0).</p>\n<p>Using <code>Math.random</code> works well when you need to generate a single random number. If you need to generate a series of random numbers, you should create an instance of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Random.html\" target=\"_blank\" rel=\"noopener\"><u><code>java.util.Random</code></u></a> and invoke methods on that object to generate numbers.</p>\n<h4 id=\"Ⅱ-Characters\">Ⅱ. Characters<a href=\"post/20200923-Java-Basics-02#Ⅱ-Characters\"></a></h4><p>When  we use a char as an object—for example, as a method argument where an object is expected. The Java programming language provides a <em>wrapper</em> class that “wraps” the <code>char</code> in a <code>Character</code> object.</p>\n<p><code>Character ch = new Character(&#39;a&#39;);</code></p>\n<p>For  the methods in this class, refer to the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html\" target=\"_blank\" rel=\"noopener\"><u>java.lang.Character</u></a> API specification.</p>\n<p><code>boolean isLetter(char ch)</code>, <code>boolean isDigit(char ch)</code>, <code>boolean isUpperCase(char ch)</code>, …</p>\n<p>· Escape Sequences</p>\n<p>A character preceded by a backslash () is an <em>escape sequence</em> and has special meaning to the compiler.</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Escape Sequence</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\t</code></td>\n<td>Insert a tab in the text at this point.</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>Insert a backspace in the text at this point.</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>Insert a newline in the text at this point.</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>Insert a formfeed in the text at this point.</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>Insert a backslash character in the text at this point.</td>\n</tr>\n</tbody></table></div></div>\n<h4 id=\"Ⅲ-String\">Ⅲ. String<a href=\"post/20200923-Java-Basics-02#Ⅲ-String\"></a></h4><p>Strings are a sequence of characters. The Java platform provides the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\" target=\"_blank\" rel=\"noopener\"><u>String</u></a> class to create and manipulate strings. Whenever it encounters a string literal in your code, the compiler creates a <code>String</code> object with its value. The <code>String</code> class is immutable, so that once it is created a <code>String</code> object cannot be changed. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String greeting = <span class=\"string\">\"Hello world!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span>[] helloArray = &#123; <span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'.'</span> &#125;;</span><br><span class=\"line\">String helloString = <span class=\"keyword\">new</span> String(helloArray);</span><br></pre></td></tr></table></figure>\n\n<p>The <code>String</code> class has a number of methods:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String palindrome = <span class=\"string\">\"Dot saw I was Tod\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = palindrome.length(); <span class=\"comment\">// --&gt; 17</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c = palindrome.charAt(<span class=\"number\">2</span>); <span class=\"comment\">// --&gt; 't'</span></span><br><span class=\"line\"><span class=\"comment\">// convert a string, or a portion of a string, into an array of characters </span></span><br><span class=\"line\"><span class=\"keyword\">char</span>[] ca = palindrome.getChars(<span class=\"number\">0</span>, len, tempCharArray, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">String s = <span class=\"string\">\"My name is \"</span>.concat(<span class=\"string\">\"Rumplestiltskin\"</span>); <span class=\"comment\">// My name is Rumplestiltskin</span></span><br><span class=\"line\"><span class=\"comment\">// Breaking strings between lines using the + concatenation operator</span></span><br><span class=\"line\">String quote = </span><br><span class=\"line\">    <span class=\"string\">\"Now is the time for all good \"</span> +</span><br><span class=\"line\">    <span class=\"string\">\"men to come to the aid of their country.\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String fs;</span><br><span class=\"line\"><span class=\"comment\">// return a String object</span></span><br><span class=\"line\">fs = String.format(<span class=\"string\">\"The value of the float variable is %f\"</span>,floatVar);</span><br><span class=\"line\">System.out.println(fs);</span><br><span class=\"line\"><span class=\"comment\">// return a PrintStream object</span></span><br><span class=\"line\">System.out.printf(<span class=\"string\">\"The value of the float variable is %f\"</span>,floatVar);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-Manipulating-Characters-in-a-String\">1) Manipulating Characters in a String<a href=\"post/20200923-Java-Basics-02#1-Manipulating-Characters-in-a-String\"></a></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the elemment in the string</span></span><br><span class=\"line\">String anotherPalindrome = <span class=\"string\">\"Niagara. O roar again!\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">char</span> aChar = anotherPalindrome.charAt(<span class=\"number\">9</span>);  <span class=\"comment\">// O</span></span><br><span class=\"line\">String roar = anotherPalindrome.substring(<span class=\"number\">11</span>, <span class=\"number\">15</span>)  <span class=\"comment\">// roar</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Searches for a match as specified by the string argument and splits this string into an array of strings accordingly.</span></span><br><span class=\"line\">String[] split(String regex, <span class=\"keyword\">int</span> limit)</span><br><span class=\"line\"><span class=\"comment\">// Returns a new character sequence</span></span><br><span class=\"line\"><span class=\"function\">CharSequence <span class=\"title\">subSequence</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex, <span class=\"keyword\">int</span> endIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Returns a copy of this string with leading and trailing white space removed.</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">trim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">toLowerCase</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">toUpperCase</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Search forward from the begainning</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"keyword\">int</span> ch, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Search backward form the ending </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"keyword\">int</span> ch, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> fromIndex)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// CharSequence is an interface that is implemented by the String class.   </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Therefore, we can use a string as an argument for the contains() method.</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(CharSequence s)</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-Comparing-Strings-and-Portions-of-Strings\">2) Comparing Strings and Portions of Strings<a href=\"post/20200923-Java-Basics-02#2-Comparing-Strings-and-Portions-of-Strings\"></a></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix, <span class=\"keyword\">int</span> offset)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">endsWith</span><span class=\"params\">(String suffix)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"keyword\">int</span> compareToIgnoreCase(String str)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// Returns true if and only if the argument is a String object </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// that represents the same sequence of characters</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equalsIgnoreCase</span><span class=\"params\">(String anotherString)</span></span></span><br><span class=\"line\"><span class=\"function\">              </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">regionMatches</span><span class=\"params\">(<span class=\"keyword\">int</span> toffset, String other, <span class=\"keyword\">int</span> ooffset, <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">regionMatches</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ignoreCase, <span class=\"keyword\">int</span> toffset, String other, <span class=\"keyword\">int</span> ooffset, <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-The-StringBuilder-Class\">3) The <code>StringBuilder</code> Class<a href=\"post/20200923-Java-Basics-02#3-The-StringBuilder-Class\"></a></h5><p><code>StringBuilder</code> objects are like String objects, except that they can be modified. We hardly use it unless it has the advantages over the String objects, like when we concatenate a large number of strings.</p>\n<p>For more details <a href=\"https://docs.oracle.com/javase/tutorial/java/data/buffers.html\" target=\"_blank\" rel=\"noopener\"><u>here</u></a>.</p>\n<p>There is also a <code>StringBuffer</code> class that is <em>exactly</em> the same as the <code>StringBuilder</code> class, except that it is thread-safe by virtue of having its methods synchronized.</p>\n<h4 id=\"Ⅳ-Autoboxing-and-Unboxing\">Ⅳ. Autoboxing and Unboxing<a href=\"post/20200923-Java-Basics-02#Ⅳ-Autoboxing-and-Unboxing\"></a></h4><p><em>Autoboxing</em> is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. If the conversion goes the other way, this is called <em>unboxing</em>.</p>\n<p>The Java compiler applies autoboxing when a primitive value is:</p>\n<ul>\n<li>Passed as a parameter to a method that expects an object of the corresponding wrapper class.</li>\n<li>Assigned to a variable of the corresponding wrapper class.</li>\n</ul>\n<p>The Java compiler applies unboxing when an object of a wrapper class is:</p>\n<ul>\n<li>Passed as a parameter to a method that expects a value of the corresponding primitive type.</li>\n<li>Assigned to a variable of the corresponding primitive type.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; s = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">s.push(<span class=\"number\">17</span>); <span class=\"comment\">// s.push(Integer.valueOf(17));</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = s.pop(); <span class=\"comment\">// int a = s.pop().intValue();</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part-5-Generics\">Part.5 Generics<a href=\"post/20200923-Java-Basics-02#Part-5-Generics\"></a></h3><p>Generics enable <em>types</em> (classes and interfaces) to be parameters when defining classes, interfaces and methods. Type parameters provide a way for you to re-use the same code with different inputs.</p>\n<p>The benefits of code that use generics:<br>· Stronger type checks at compile time.<br>· Elimination of casts<br>· Enabling programmers to implement generic algorithms.</p>\n<h4 id=\"Ⅰ-Generic-Types\">Ⅰ. Generic Types<a href=\"post/20200923-Java-Basics-02#Ⅰ-Generic-Types\"></a></h4><p>A <em>generic type</em> is a generic class or interface that is parameterized over types.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A generic class</span></span><br><span class=\"line\"><span class=\"comment\">// angle brackets (&lt;&gt;) specifies the type parameters (also called type variables) </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span>&lt;<span class=\"title\">T1</span>, <span class=\"title\">T2</span>, ..., <span class=\"title\">Tn</span>&gt; </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>A type variable can be any <strong>non-primitive</strong> type you specify: any class type, any interface type, any array type, or even another type variable.</p>\n<h5 id=\"1-Type-Parameter-Naming-Conventions\">1) Type Parameter Naming Conventions<a href=\"post/20200923-Java-Basics-02#1-Type-Parameter-Naming-Conventions\"></a></h5><p>By convention, type parameter names are single, uppercase letters.<br>The most commonly used type parameter names are:<br>· E - Element (used extensively by the Java Collections Framework)<br>· K - Key<br>· N - Number<br>· T - Type<br>· V - Value<br>· S,U,V etc. - 2nd, 3rd, 4th types</p>\n<h5 id=\"2-Invoking-and-Instantiating-a-Generic-Type\">2) Invoking and Instantiating a Generic Type<a href=\"post/20200923-Java-Basics-02#2-Invoking-and-Instantiating-a-Generic-Type\"></a></h5><p>To reference the generic class we must perform a <em>generic type invocation</em>, which replaces <code>T</code> with some concrete value, such as <code>Integer</code>. To instantiate this class, use the <code>new</code> keyword.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T is the type parameter and Integer is the type arguement.</span></span><br><span class=\"line\">Name&lt;Integer&gt; integerClass = <span class=\"keyword\">new</span> Name&lt;Integer&gt;();</span><br><span class=\"line\">Name&lt;Integer&gt; integerClass = <span class=\"keyword\">new</span> Name&lt;&gt;();</span><br><span class=\"line\">Name&lt;String, Integer&gt; pairClass = <span class=\"keyword\">new</span> Name&lt;&gt;(<span class=\"string\">\"Even\"</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">//substitute a type parameter with a parameterized type (i.e., List&lt;String&gt;)</span></span><br><span class=\"line\">Name&lt;String, List&lt;String&gt;&gt; p = <span class=\"keyword\">new</span> Name&lt;&gt;(<span class=\"string\">\"primes\"</span>, <span class=\"keyword\">new</span> List&lt;String&gt;(...));</span><br></pre></td></tr></table></figure>\n\n<p>One provides type arguments in order to create a parameterized type.</p>\n<h5 id=\"3-Raw-Types\">3) Raw Types<a href=\"post/20200923-Java-Basics-02#3-Raw-Types\"></a></h5><p>A <em>raw type</em> is the name of a generic class or interface without any type arguments. Assigning a parameterized type to its raw type is allowed, but assigning a raw type to a parameterized type or using a raw type to invoke generic method will get warning. The warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, it’s better avoiding using raw types.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a parameterized type of Name&lt;T&gt; with arguement.</span></span><br><span class=\"line\">Name&lt;Integer&gt; integerClass = <span class=\"keyword\">new</span> Name&lt;Integer&gt;();</span><br><span class=\"line\"><span class=\"comment\">// a raw type without actual arguements</span></span><br><span class=\"line\">Name rawName = <span class=\"keyword\">new</span> Name();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-Generic-Methods\">4) Generic Methods<a href=\"post/20200923-Java-Basics-02#4-Generic-Methods\"></a></h5><p><em>Generic methods</em> are methods that introduce their own type parameters. This is similar to declaring a generic type, but the type parameter’s scope is limited to the method where it is declared. Static and non-static generic methods are allowed, as well as generic class constructors.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;K, V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">compare</span><span class=\"params\">(Pair&lt;K, V&gt; p1, Pair&lt;K, V&gt; p2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp;</span><br><span class=\"line\">               p1.getValue().equals(p2.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pair&lt;Integer, String&gt; p1 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">1</span>, <span class=\"string\">\"apple\"</span>);</span><br><span class=\"line\">Pair&lt;Integer, String&gt; p2 = <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"number\">2</span>, <span class=\"string\">\"pear\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> same = Util.&lt;Integer, String&gt;compare(p1, p2);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-Bounded-Type-Parameters\">5) Bounded Type Parameters<a href=\"post/20200923-Java-Basics-02#5-Bounded-Type-Parameters\"></a></h5><p> When we want to restrict the types that can be used as type arguments in a parameterized type, we can use <em>bounded type parameters</em>. To declare a bounded type parameter, list the type parameter’s name, followed by the <code>extends</code> keyword, followed by its <em>upper bound</em>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countGreaterThan</span><span class=\"params\">(T[] anArray, T elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T e : anArray)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.compareTo(elem) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In addition to limiting the types you can use to instantiate a generic type, bounded type parameters allow you to invoke methods defined in the bounds.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NaturalNumber</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NaturalNumber</span><span class=\"params\">(T n)</span>  </span>&#123; <span class=\"keyword\">this</span>.n = n; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEven</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n.intValue() % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A type parameter can have <em>multiple bounds</em>. A type variable with multiple bounds is a subtype of all the types listed in the bound. If one of the bounds is a class, it must be specified first.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> &lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> &amp; <span class=\"title\">B</span> &amp; <span class=\"title\">C</span>&gt; </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-Inheritance-and-Subtypes\">6) Inheritance and Subtypes<a href=\"post/20200923-Java-Basics-02#6-Inheritance-and-Subtypes\"></a></h5><p><code>Name&lt;A&gt;</code>  has no relationship to <code>Name&lt;B&gt;</code> even when class A is the parents of class B.  The common parent of <code>Name&lt;A&gt;</code> and <code>Name&lt;B&gt;</code> is <code>Object</code>.</p>\n<p>We can subtype a generic class or interface by extending or implementing it. The relationship between the type parameters of one class or interface and the type parameters of another are determined by the <code>extends</code> and <code>implements</code> clauses.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PayloadList</span>&lt;<span class=\"title\">E</span>,<span class=\"title\">P</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPayload</span><span class=\"params\">(<span class=\"keyword\">int</span> index, P val)</span></span>;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The following parameterizations of <code>PayloadList</code> are subtypes of <code>List&lt;String&gt;</code>: <code>PayloadList&lt;String,String&gt;</code>, <code>PayloadList&lt;String,Integer&gt;</code>, <code>PayloadList&lt;String,Exception&gt;</code></p>\n<h5 id=\"7-Type-Inference\">7) Type Inference<a href=\"post/20200923-Java-Basics-02#7-Type-Inference\"></a></h5><p><em>Type inference</em> is a Java compiler’s ability to look at each method invocation and corresponding declaration to determine the types of the arguments and, if available, the type that the result is being assigned, or returned. </p>\n<p>Type inference enables us to invoke a generic method without specifying a type between angle brackets. Java compiler can infer the type parameters of a generic method call.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBox</span><span class=\"params\">(U u, java.util.List&lt;Box&lt;U&gt;&gt; boxes)</span> </span>&#123;</span><br><span class=\"line\">    Box&lt;U&gt; box = <span class=\"keyword\">new</span> Box&lt;&gt;();</span><br><span class=\"line\">    box.set(u);</span><br><span class=\"line\">    boxes.add(box);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">java.util.ArrayList&lt;Box&lt;Integer&gt;&gt; listOfIntegerBoxes = <span class=\"keyword\">new</span> java.util.ArrayList&lt;&gt;();</span><br><span class=\"line\">BoxDemo.&lt;Integer&gt;addBox(Integer.valueOf(<span class=\"number\">10</span>), listOfIntegerBoxes);</span><br><span class=\"line\">BoxDemo.addBox(Integer.valueOf(<span class=\"number\">20</span>), listOfIntegerBoxes);</span><br></pre></td></tr></table></figure>\n\n<p>We can replace the type arguments required to invoke the constructor of a generic class with an empty set of type parameters (<code>&lt;&gt;</code>) as long as the compiler can infer the type arguments from the context.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>Constructors can be generic in both generic and non-generic classes. The compiler infers the type <code>Integer</code> for the formal type parameter, <code>X</code>, of the generic class <code>MyClass&lt;X&gt;</code>. It infers the type <code>String</code> for the formal type parameter, <code>T</code>, of the constructor of this generic class.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>&lt;<span class=\"title\">X</span>&gt; </span>&#123;</span><br><span class=\"line\">  &lt;T&gt; MyClass(T t) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass&lt;Integer&gt; myObject = <span class=\"keyword\">new</span> MyClass&lt;&gt;(<span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>The <em>target type</em> of an expression is the data type that the Java compiler expects depending on where the expression appears. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">emptyList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// Expect an instance of List&lt;String&gt;, so this data type is the target type.</span></span><br><span class=\"line\">List&lt;String&gt; listOne = Collections.emptyList();</span><br><span class=\"line\"><span class=\"comment\">// Or use a type witness and specify the value of T.</span></span><br><span class=\"line\">List&lt;String&gt; listOne = Collections.&lt;String&gt;emptyList();</span><br></pre></td></tr></table></figure>\n\n<p>Inference algorithm uses only invocation arguments, target types, and possibly an obvious expected return type to infer types.</p>\n<h4 id=\"Ⅱ-Wildcards\">Ⅱ. Wildcards<a href=\"post/20200923-Java-Basics-02#Ⅱ-Wildcards\"></a></h4><p>In generic code, the question mark (<code>?</code>), called the <em>wildcard</em>, represents an unknown type. The wildcard can be used in a variety of situations: as the type of a parameter, field, or local variable; sometimes as a return type. The wildcard is never used as a type argument for a generic method invocation, a generic class instance creation, or a supertype.</p>\n<h5 id=\"1-Bounded-Wildcards\">1) Bounded Wildcards<a href=\"post/20200923-Java-Basics-02#1-Bounded-Wildcards\"></a></h5><p>You can use an upper bounded wildcard to relax the restrictions on a variable. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// matches a list of type Number or any of its subclasses.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">sumOfList</span><span class=\"params\">(List&lt;? extends Number&gt; list)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> s = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Number n : list)</span><br><span class=\"line\">        s += n.doubleValue();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;Double&gt; ld = Arrays.asList(<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>, <span class=\"number\">3.5</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"sum = \"</span> + sumOfList(ld)); <span class=\"comment\">// 7.0</span></span><br></pre></td></tr></table></figure>\n\n","prev":{"title":"Strings","slug":"20200924-Strings"},"next":{"title":"Java Basics 01","slug":"20200917-Java-Basics-01"},"link":"https://oreodu.github.io/post/20200923-Java-Basics-02/","toc":[{"title":"Java Basics 02","id":"Java-Basics-02","index":"1"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/post/20200923-Java-Basics-02/\" title=\"Java Basics 02\">https://oreodu.github.io/post/20200923-Java-Basics-02/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}