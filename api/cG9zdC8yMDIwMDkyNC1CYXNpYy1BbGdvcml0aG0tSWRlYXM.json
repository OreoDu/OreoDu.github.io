{"title":"Basic Algorithm Ideas","date":"2020-09-24T06:29:25.000Z","thumbnail":"https://i.loli.net/2020/09/09/G5ZdMD1FTziltnx.jpg","slug":"20200924-Basic-Algorithm-Ideas","comments":true,"tags":["Basic Algorithm Ideas"],"categories":["Algorithms"],"updated":"2020-09-24T06:49:00.828Z","content":"<h2 id=\"Basic-Algorithm-Ideas\">Basic Algorithm Ideas<a href=\"post/20200924-Basic-Algorithm-Ideas#Basic-Algorithm-Ideas\"></a></h2><h3 id=\"Overview\">Overview<a href=\"post/20200924-Basic-Algorithm-Ideas#Overview\"></a></h3><p>(概略图)</p>\n<p><strong>· materials:</strong><br>  · <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>  · <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>  · <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>  · <a href=\"https://sp19.datastructur.es/\" target=\"_blank\" rel=\"noopener\"><u>CS61B Spring 2019 at UCB</u></a><br>  · <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\" rel=\"noopener\"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>  · Wikipedia</p>\n<h3 id=\"Part-1-Greedy-Algorithms\">Part.1 Greedy Algorithms<a href=\"post/20200924-Basic-Algorithm-Ideas#Part-1-Greedy-Algorithms\"></a></h3><h3 id=\"Part-2-Divide-and-Conquer\">Part.2 Divide and Conquer<a href=\"post/20200924-Basic-Algorithm-Ideas#Part-2-Divide-and-Conquer\"></a></h3><h3 id=\"Part-3-Recursion\">Part.3 Recursion<a href=\"post/20200924-Basic-Algorithm-Ideas#Part-3-Recursion\"></a></h3><p>Recursion is useful for solving problems with a naturally repeating structure - they are defined in terms of themselves.</p>\n<p>It requires you to find patterns of smaller problems, and to define the smallest problem possible</p>\n<p>Structure of a Recursive Function:</p>\n<p>1.One or more <strong>base cases</strong>, usually the smallest input.<br>2.One or more ways of <strong>reducing the problem</strong>, and then <strong>solving the smaller problem using recursion</strong>.<br>3.One or more ways of <strong>using the solution to each smaller problem</strong> to solve our larger problem.</p>\n<p><strong>Recursion</strong> has three main components<br><strong>Base case/s</strong>: The simplest form of the problem<br><strong>Recursive call/s</strong>: Smaller version of the problem<br>Use the solution to the smaller version of the problem to arrive at the solution to the original problem</p>\n<p><strong>Functional abstraction</strong>: When working with recursion, use <em>functional abstraction</em>: assume the recursive call gives the correct result.</p>\n<p>List out all the cases.<br>Identify <strong>patterns</strong> between each case.<br>Simplify repeated code with <strong>recursive calls</strong>.</p>\n<p><strong>Verifying the correctness of recursive functions</strong>:</p>\n<p>Verify that the base cases work as expected.</p>\n<p>For each larger case, verify that it works by <strong>assuming the smaller recursive calls are correct</strong>.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cascade</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n        cascade<span class=\"token punctuation\">(</span>n <span class=\"token operator\">//</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"Part-4-Back-Tracking\">Part.4 Back Tracking<a href=\"post/20200924-Basic-Algorithm-Ideas#Part-4-Back-Tracking\"></a></h3><h3 id=\"Part-5-Dynamic-Programing\">Part.5 Dynamic Programing<a href=\"post/20200924-Basic-Algorithm-Ideas#Part-5-Dynamic-Programing\"></a></h3><h3 id=\"Part-6-Enumeration-algorithm\">Part.6 Enumeration algorithm<a href=\"post/20200924-Basic-Algorithm-Ideas#Part-6-Enumeration-algorithm\"></a></h3>","prev":{"title":"Graphs","slug":"20200924-Graphs"},"next":{"title":"Strings","slug":"20200924-Strings"},"link":"https://oreodu.github.io/post/20200924-Basic-Algorithm-Ideas/","toc":[{"title":"Basic Algorithm Ideas","id":"Basic-Algorithm-Ideas","index":"1","children":[{"title":"Overview","id":"Overview","index":"1.1"},{"title":"Part.3 Recursion","id":"Part-3-Recursion","index":"1.2"},{"title":"Part.6 Enumeration algorithm","id":"Part-6-Enumeration-algorithm","index":"1.3"}]}],"reward":true,"copyright":{"author":null,"link":"<a href=\"https://oreodu.github.io/post/20200924-Basic-Algorithm-Ideas/\" title=\"Basic Algorithm Ideas\">https://oreodu.github.io/post/20200924-Basic-Algorithm-Ideas/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}