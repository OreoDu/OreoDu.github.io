{"title":"Trie","date":"2020-12-19T15:53:25.000Z","date_formatted":{"ll":"Dec 19, 2020","L":"12/19/2020","MM-DD":"12-19"},"link":"2020/20201219-Trie","comments":true,"tags":["Data Structure","Trie"],"categories":["Data Structure"],"updated":"2020-12-29T13:08:30.041Z","content":"<h1 id=\"trie\">Trie<a title=\"#trie\" href=\"#trie\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· Wikipedia<br>\n· Leetcode - <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/solution/\" target=\"_blank\">Trie</a></p>\n<p>Trie (which pronounces “try”)  or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings.</p>\n<p>There are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie? Although hash table has O(1) time complexity for looking for a key, it is not efficient in the following operations :</p>\n<ul>\n<li>Finding all keys with a common prefix.</li>\n<li>Enumerating a dataset of strings in lexicographical order.</li>\n</ul>\n<p>Another reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to O(n) where <em>n</em> is the number of keys inserted. Trie could use less space compared to Hash Table when storing many keys with the same prefix. In this case using trie has only O(m) time complexity, where m is the key length. Searching for a key in a balanced tree costs <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"9.955ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 4286 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(mlogn)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"1153\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"2031\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"2330\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"2815\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"3296\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"3896\" y=\"0\"/>\n</g>\n</svg> time complexity.</p>\n<h2 id=\"part.1-trie-node-structure\">Part.1 Trie node structure<a title=\"#part.1-trie-node-structure\" href=\"#part.1-trie-node-structure\"></a></h2>\n<p>Trie is a rooted tree. Its nodes have the following fields:</p>\n<ul>\n<li>Maximum of R links to its children, where each link corresponds to one of R character values from dataset alphabet. In this article we assume that R is 26, the number of lowercase latin letters.</li>\n<li>Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// R links to node children</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrieNode[] links;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> R = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrieNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        links = <span class=\"keyword\">new</span> TrieNode[R];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsKey</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> links[ch -<span class=\"string\">&#x27;a&#x27;</span>] != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TrieNode <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> links[ch -<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">char</span> ch, TrieNode node)</span> </span>&#123;</span><br><span class=\"line\">        links[ch -<span class=\"string\">&#x27;a&#x27;</span>] = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        isEnd = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isEnd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Two of the most common operations in a trie are insertion of a key and search for a key.</p>\n<h4 id=\"insertion-of-a-key-to-a-trie\">Insertion of a key to a trie<a title=\"#insertion-of-a-key-to-a-trie\" href=\"#insertion-of-a-key-to-a-trie\"></a></h4>\n<img src=\"/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-12-29 at 20.44.45.png\" alt=\"Screen Shot 2020-12-29 at 20.44.45\" style=\"zoom: 33%;\">\n<p>We insert a key by searching into the trie. We start from the root and search a link, which corresponds to the first key character. There are two cases :</p>\n<ul>\n<li>A link exists. Then we move down the tree following the link to the next child level. The algorithm continues with searching for the next key character.</li>\n<li>A link does not exist. Then we create a new node and link it with the parent’s link matching the current key character. We repeat this step until we encounter the last character of the key, then we mark the current node as an end node and the algorithm finishes.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">  TrieNode node = root;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> currentChar = word.charAt(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.containsKey(currentChar)) &#123;</span><br><span class=\"line\">      node.put(currentChar, <span class=\"keyword\">new</span> TrieNode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node = node.get(currentChar);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  node.setEnd();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : O(m), where m is the key length.</li>\n</ul>\n<p>In each iteration of the algorithm, we either examine or create a node in the trie till we reach the end of the key. This takes only m operations.</p>\n<ul>\n<li>Space complexity : O(m).</li>\n</ul>\n<p>In the worst case newly inserted key doesn’t share a prefix with the the keys already inserted in the trie. We have to add m new nodes, which takes us O(m) space.</p>\n<h4 id=\"search-for-a-key-in-a-trie\">Search for a key in a trie<a title=\"#search-for-a-key-in-a-trie\" href=\"#search-for-a-key-in-a-trie\"></a></h4>\n<p>Each key is represented in the trie as a path from the root to the internal node or leaf. We start from the root with the first key character. We examine the current node for a link corresponding to the key character. There are two cases :</p>\n<ul>\n<li>A link exist. We move to the next node in the path following this link, and proceed searching for the next key character.</li>\n<li>A link does not exist. If there are no available key characters and current node is marked as <code>isEnd</code> we return true. Otherwise there are possible two cases in each of them we return false :\n<ul>\n<li>There are key characters left, but it is impossible to follow the key path in the trie, and the key is missing.</li>\n<li>No key characters left, but current node is not marked as <code>isEnd</code>. Therefore the search key is only a prefix of another key in the trie.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// search a prefix or whole key in trie and</span></span><br><span class=\"line\"><span class=\"comment\">// returns the node where search ends</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TrieNode <span class=\"title\">searchPrefix</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">  TrieNode node = root;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> curLetter = word.charAt(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.containsKey(curLetter)) &#123;</span><br><span class=\"line\">      node = node.get(curLetter);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">  TrieNode node = searchPrefix(word);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node != <span class=\"keyword\">null</span> &amp;&amp; node.isEnd();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : O(m) In each step of the algorithm we search for the next key character. In the worst case the algorithm performs m<em>m</em> operations.</li>\n<li>Space complexity : O(1)</li>\n</ul>\n<h4 id=\"search-for-a-key-prefix-in-a-trie\">Search for a key prefix in a trie<a title=\"#search-for-a-key-prefix-in-a-trie\" href=\"#search-for-a-key-prefix-in-a-trie\"></a></h4>\n<p>The approach is very similar to the one we used for searching a key in a trie. We traverse the trie from the root, till there are no characters left in key prefix or it is impossible to continue the path in the trie with the current key character. The only difference with the mentioned above <code>search for a key</code> algorithm is that when we come to an end of the key prefix, we always return true. We don’t need to consider the <code>isEnd</code> mark of the current trie node, because we are searching for a prefix of a key, not for a whole key.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns if there is any word in the trie</span></span><br><span class=\"line\"><span class=\"comment\">// that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">  TrieNode node = searchPrefix(prefix);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : O(m)</li>\n<li>Space complexity : O(1)</li>\n</ul>\n<h2 id=\"part.2-applications\">Part.2 Applications<a title=\"#part.2-applications\" href=\"#part.2-applications\"></a></h2>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Autocomplete\" target=\"_blank\">Autocomplete</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Spell_checker\" target=\"_blank\">Spell checker</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Longest_prefix_match\" target=\"_blank\">IP routing (Longest prefix matching)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/T9_(predictive_text)\" target=\"_blank\">T9 predictive text</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Boggle\" target=\"_blank\">Solving word games</a></li>\n</ol>\n","prev":{"title":"Bit Manipulation","link":"2020/20201231-Bit-Manipulation"},"next":{"title":"Synchronization","link":"2020/20201217-Synchronization"},"plink":"https://oreodu.github.io/2020/20201219-Trie/","toc":[{"id":"trie","title":"Trie","index":"1","children":[{"id":"part.1-trie-node-structure","title":"Part.1 Trie node structure","index":"1.1"},{"id":"part.2-applications","title":"Part.2 Applications","index":"1.2"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201219-Trie/\" title=\"Trie\">https://oreodu.github.io/2020/20201219-Trie/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}