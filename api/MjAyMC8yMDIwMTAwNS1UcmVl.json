{"title":"Tree","date":"2020-10-05T00:50:00.000Z","date_formatted":{"ll":"Oct 5, 2020","L":"10/05/2020","MM-DD":"10-05"},"link":"2020/20201005-Tree","comments":true,"tags":["B-tree","Binary heap","Binary search tree","Binary tree","Red-Black tree"],"categories":["Data Structure"],"updated":"2020-12-23T10:26:00.420Z","content":"<h1 id=\"tree\">Tree<a title=\"#tree\" href=\"#tree\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· Wikipedia</p>\n<h2 id=\"part.1-basis\">Part.1 Basis<a title=\"#part.1-basis\" href=\"#part.1-basis\"></a></h2>\n<p>Recursive Description: A tree has a root and a list of branchesEach branch is a treeA tree with zero branches is called a leaf.</p>\n<p>Relative Description: Each location in a tree is called a nodeEach node has a label valueOne node can be the parent/child of another.</p>\n<p><img src=\"https://i.loli.net/2020/09/13/fDJtsRH6xkdKNCG.png\" alt=\"11\" class=\"φcx\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use the recursive description</span></span><br><span class=\"line\"><span class=\"comment\"># We can also use the class to define the tree and its related attributes and methods.</span></span><br><span class=\"line\"><span class=\"comment\"># Constructor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tree</span>(<span class=\"params\">label, branches=[]</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> is_tree(branch)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [label] + <span class=\"built_in\">list</span>(branches)</span><br><span class=\"line\"><span class=\"comment\"># Selectors</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">label</span>(<span class=\"params\">tree</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">branches</span>(<span class=\"params\">tree</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_tree</span>(<span class=\"params\">tree</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(tree) != <span class=\"built_in\">list</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(tree) &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches(tree):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_tree(branch):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_leaf</span>(<span class=\"params\">tree</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> branches(tree)</span><br><span class=\"line\"></span><br><span class=\"line\">print(tree(<span class=\"number\">3</span>, [tree(<span class=\"number\">1</span>),tree(<span class=\"number\">2</span>, [tree(<span class=\"number\">1</span>),tree(<span class=\"number\">1</span>)])])) <span class=\"comment\"># [3, [1], [2, [1], [1]]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tree processing</span></span><br><span class=\"line\"><span class=\"comment\"># conut the nodes in a Tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_nodes</span>(<span class=\"params\">tree</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_leaf(tree): <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    lst = [count_nodes(b) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(tree)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(lst,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># count the leaves</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_leaves</span>(<span class=\"params\">tree</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_leaf(tree): <span class=\"keyword\">return</span> [label(tree)]</span><br><span class=\"line\">    <span class=\"comment\"># leaves = [count_leaves(b) for b in branches(tree)] #[[1],[[1],[1]]]</span></span><br><span class=\"line\">    leaves = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(tree):</span><br><span class=\"line\">        leaves += count_leaves(tree) <span class=\"comment\"># [1,1,1]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leaves</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print the tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_tree</span>(<span class=\"params\">tree,indent = <span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27; &#x27;</span>*indent,label(tree))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(tree):</span><br><span class=\"line\">            print_tree(b,indent+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create a tree from an exsisted tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">square_tree</span>(<span class=\"params\">tree</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_leaf(tree): <span class=\"keyword\">return</span> tree(label(tree)**<span class=\"number\">2</span>)</span><br><span class=\"line\">    lst = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> brannches(tree):</span><br><span class=\"line\">        lst += [suqare_tree(b)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree(label(tree)**<span class=\"number\">2</span>,lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prune the tree </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prune</span>(<span class=\"params\">t,x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> label(t) == x: <span class=\"keyword\">return</span> null</span><br><span class=\"line\">    branches(t) = [b <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(t) <span class=\"keyword\">if</span> label(b) != x ]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branchces():</span><br><span class=\"line\">        prune( b,x)</span><br></pre></td></tr></table></figure>\n<h2 id=\"part.2-binary-tree\">Part.2 Binary tree<a title=\"#part.2-binary-tree\" href=\"#part.2-binary-tree\"></a></h2>\n<p>Binary tree is a tree in which each node has at most two children and it is empty or node with links to left and right binary trees.</p>\n<h3 id=\"1.-definitions\">1. Definitions<a title=\"#1.-definitions\" href=\"#1.-definitions\"></a></h3>\n<p>Array representation.</p>\n<p>・Indices start at 1.</p>\n<p>・Take nodes in level order.</p>\n<p>・No explicit links needed!</p>\n<h3 id=\"2.-properties\">2. properties<a title=\"#2.-properties\" href=\"#2.-properties\"></a></h3>\n<h3 id=\"3.-operations\">3. Operations<a title=\"#3.-operations\" href=\"#3.-operations\"></a></h3>\n<h4 id=\"insertion\">Insertion<a title=\"#insertion\" href=\"#insertion\"></a></h4>\n<h4 id=\"deletion\">Deletion<a title=\"#deletion\" href=\"#deletion\"></a></h4>\n<h4 id=\"traversal\">Traversal<a title=\"#traversal\" href=\"#traversal\"></a></h4>\n<h3 id=\"4.-types\">4. Types<a title=\"#4.-types\" href=\"#4.-types\"></a></h3>\n<h4 id=\"full-binary-tree\">Full binary tree<a title=\"#full-binary-tree\" href=\"#full-binary-tree\"></a></h4>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glherxqlk1j30sg0l90tn.jpg\" alt=\"1024px-Full_binary.svg\" style=\"zoom:25%;\">\n<h4 id=\"complete-binary-tree\">Complete binary tree<a title=\"#complete-binary-tree\" href=\"#complete-binary-tree\"></a></h4>\n<p>Perfectly balanced, except for bottom level.</p>\n<p>Property. Height of complete tree with N nodes is <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"6.706ex\" height=\"3.343ex\" style=\"vertical-align: -1.171ex;\" viewbox=\"0 -934.9 2887.4 1439.2\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">⎣lg N⎦</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4E\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">⎣</text>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"609\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"908\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4E\" x=\"1388\" y=\"0\"/>\n<g transform=\"translate(2277,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">⎦</text>\n</g>\n</g>\n</svg>.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glheq6q6epj31hc0rvjt0.jpg\" alt=\"1920px-Complete_binary2.svg\" style=\"zoom:15%;\">\n<h4 id=\"balanced-binary-tree\">Balanced binary tree<a title=\"#balanced-binary-tree\" href=\"#balanced-binary-tree\"></a></h4>\n<h3 id=\"5.-applications\">5. Applications<a title=\"#5.-applications\" href=\"#5.-applications\"></a></h3>\n<h4 id=\"sort-and-search\">Sort and Search<a title=\"#sort-and-search\" href=\"#sort-and-search\"></a></h4>\n<h5 id=\"binary-heap\">Binary heap<a title=\"#binary-heap\" href=\"#binary-heap\"></a></h5>\n<ol>\n<li>Definition</li>\n</ol>\n<p>Binary heap is defined as a binary tree with two additional constrains.</p>\n<p><strong>·</strong> Shape property: it must be a complete binary tree, represented in level order in an array (not using the first entry).</p>\n<p><strong>·</strong> Heap property: (partially ordered) the key stored in each node is either greater than or equal to or less than or equal to the keys in the node’s children, according to some total order.</p>\n<ol start=\"2\">\n<li>Operations and implementations</li>\n</ol>\n<p>Binary heap is usually represented by the array which is the same with the binary tree implementation above.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glhm2c13loj30n60maacz.jpg\" alt=\"Screen Shot 2020-12-09 at 14.57.27\" style=\"zoom:33%;\">\n<p>Both insert and remove operations are adding or removing from the end of the heap. Then in order to restore the heap property, we traverse up or down the heap.</p>\n<p><strong>Insert</strong></p>\n<p>To add an element to a heap:</p>\n<ol>\n<li>Add the element to the bottom level of the heap at the leftmost open space.</li>\n<li>Compare the added element with its parent; if they are in the correct order, stop.</li>\n<li>If not, do the <em>Bottom-up reheapify (swim)</em> operation, swap the element with its parent and return to the previous step.()</li>\n</ol>\n<p><strong>Delete</strong></p>\n<p>To delete the root(maximum in a max-heap or minimum in a min-heap)  or an arbitrary element from the heap:</p>\n<ol>\n<li>Replace the root of the heap with the last element on the last level.</li>\n<li>Compare the new root with its children; if they are in the correct order, stop.</li>\n<li>If not, do the <em>Top-down heapify (sink)</em> operation, swap the element with one of its children and return to the previous step. (Swap with its smaller child in a min-heap and its larger child in a max-heap.)</li>\n</ol>\n<p><strong>Search</strong></p>\n<p>Finding an arbitrary element takes O(n) time.</p>\n<p><strong>Building a heap</strong></p>\n<p>Building a heap from an array of n input elements can be done by starting with an empty heap, then successively inserting each element.</p>\n<p>Or we can treat the array as a binary tree of arbitrary order and start from the second lowest level and sift the root of each subtree downward until the heap property is restored.</p>\n<p><strong>Decrease key</strong></p>\n<p><strong>·</strong> Find the index of the element we want to modify<br>\n<strong>·</strong> Decrease the value of the node<br>\n<strong>·</strong> Sink down (assuming a max heap) to restore the heap property</p>\n<p>**Increase key **</p>\n<p><strong>·</strong> Find the index of the element we want to modify<br>\n<strong>·</strong> Increase the value of the node<br>\n<strong>·</strong> Swim up (assuming a max heap) to restore the heap property</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> DataStructure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryMaxHeap</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Key</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Key[] heap;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REFACTOR = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Comparator&lt;Key&gt; comparator;  <span class=\"comment\">// optional comparator</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinaryMaxHeap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinaryMaxHeap</span><span class=\"params\">(Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1</span>, comparator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinaryMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        heap = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinaryMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity, Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.comparator = comparator;</span><br><span class=\"line\">        heap = (Key[]) <span class=\"keyword\">new</span> Object[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinaryMaxHeap</span><span class=\"params\">(Key[] a)</span> </span>&#123;</span><br><span class=\"line\">        N = a.length;</span><br><span class=\"line\">        heap = (Key[]) <span class=\"keyword\">new</span> Comparable[N + <span class=\"number\">1</span>];</span><br><span class=\"line\">        System.arraycopy(a,<span class=\"number\">0</span>, heap, <span class=\"number\">1</span>, N);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = N/<span class=\"number\">2</span>; k &gt;= <span class=\"number\">1</span>; k--) &#123;</span><br><span class=\"line\">            sink(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isBinaryMaxHeap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;The heap is underflow!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heap[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Key x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* pq maintains the smallest N items</span></span><br><span class=\"line\"><span class=\"comment\">        if (N == pq.length) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if (x.compareTo(max()) &lt; 0) delete(1);</span></span><br><span class=\"line\"><span class=\"comment\">            else return;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;The key can&#x27;t be null!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == heap.length - <span class=\"number\">1</span>) resize(REFACTOR * heap.length);</span><br><span class=\"line\">        heap[++N] = x;</span><br><span class=\"line\">        swim(N);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isBinaryMaxHeap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> delete(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;Priority queue underflow&quot;</span>);</span><br><span class=\"line\">        Key max = heap[i];</span><br><span class=\"line\">        exch(i, N--);</span><br><span class=\"line\">        sink(i);</span><br><span class=\"line\">        heap[N + <span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;  <span class=\"comment\">// prevent loitering</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">isBinaryMaxHeap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> capacity &gt; N;</span><br><span class=\"line\">        Key[] newArray = (Key[]) <span class=\"keyword\">new</span> Comparable[capacity];</span><br><span class=\"line\">        System.arraycopy(heap,<span class=\"number\">0</span>, newArray, <span class=\"number\">0</span>, N + <span class=\"number\">1</span>);</span><br><span class=\"line\">        heap = newArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * Helper functions to restore the heap invariant.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span> &amp;&amp; less(k/<span class=\"number\">2</span>, k)) &#123;</span><br><span class=\"line\">            exch(k, k/<span class=\"number\">2</span>);</span><br><span class=\"line\">            k = k / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">2</span>*k &lt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &lt; N &amp;&amp; less(j, j+<span class=\"number\">1</span>)) j++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!less(k, j)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            exch(k, j);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * Helper functions for compares and swaps.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (comparator == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((Comparable&lt;Key&gt;) heap[i]).compareTo(heap[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> comparator.compare(heap[i], heap[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Key tmp = heap[i];</span><br><span class=\"line\">        heap[i] = heap[j];</span><br><span class=\"line\">        heap[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// is heap[1..n] a max heap?</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBinaryMaxHeap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (heap[i] == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = N+<span class=\"number\">1</span>; i &lt; heap.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (heap[i] != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heap[<span class=\"number\">0</span>] != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMaxHeapOrdered(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// is subtree of heap[1..n] rooted at k a max heap?</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMaxHeapOrdered</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt; N) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">2</span>*k;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">2</span>*k + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left  &lt;= N &amp;&amp; less(k, left))  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt;= N &amp;&amp; less(k, right)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMaxHeapOrdered(left) &amp;&amp; isMaxHeapOrdered(right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * Iterator.</span></span><br><span class=\"line\"><span class=\"comment\">     ***************************************************************************/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;Key&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HeapIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">Key</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> BinaryMaxHeap&lt;Key&gt; copy;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeapIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (comparator == <span class=\"keyword\">null</span>) copy = <span class=\"keyword\">new</span> BinaryMaxHeap&lt;&gt;(size());</span><br><span class=\"line\">            <span class=\"keyword\">else</span> copy = <span class=\"keyword\">new</span> BinaryMaxHeap&lt;&gt;(size(), comparator);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)</span><br><span class=\"line\">                copy.insert(heap[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> !copy.isEmpty(); &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasNext()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> copy.delMax();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer[] a = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        BinaryMaxHeap&lt;Integer&gt; bh = <span class=\"keyword\">new</span> BinaryMaxHeap&lt;&gt;(a);</span><br><span class=\"line\">        System.out.println(bh.max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Applications</li>\n</ol>\n<p>See more about <a href=\"https://oreodu.github.io/2020/20201202-Priority-Queues\" target=\"_blank\">Priority queue</a>.<br>\nSee more about <a href=\"https://oreodu.github.io/2020/20200102-Sorting\" target=\"_blank\">Heapsort</a></p>\n<h5 id=\"binary-search-tree\">Binary search tree<a title=\"#binary-search-tree\" href=\"#binary-search-tree\"></a></h5>\n<ol>\n<li>Definition</li>\n</ol>\n<p>A binary search tree (BST) is a binary tree where each node has a <code>Comparable</code> key (and an associated value) and satisfies the restriction that the key in any node is larger than the keys in all nodes in that node’s left subtree and smaller than the keys in all nodes in that node’s right subtree.</p>\n<img src=\"https://tva1.sinaimg.cn/large/0081Kckwgy1glxlmt4qi7j30h00aq77s.jpg\" alt=\"Screen Shot 2020-12-23 at 10.51.28\" style=\"zoom:50%;\">\n<ol start=\"2\">\n<li>Operations and implementations</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> DataStructure;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BST</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Key key;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value val;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node left, right;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">// number of nodes in subtree</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value val, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BST</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to contains() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;calls get() with a null key&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;calls to put() with a null key&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            delete(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root = put(root, key, val);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, val, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) x.left = put(x.left, key, val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) x.right = put(x.right, key, val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  x.val = val;</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.left) + size(x.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;BST unberflow&quot;</span>);</span><br><span class=\"line\">        root = deleteMin(root);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMin</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">        x.left = deleteMin(x.left);</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.left) + size(x.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;BST underflow&quot;</span>);</span><br><span class=\"line\">        root = deleteMax(root);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">deleteMax</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">        x.right = deleteMax(x.right);</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.left) + size(x.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;calls delete() with a null key&quot;</span>);</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) x.right = delete(x.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) x.left = delete(x.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            Node t = x;</span><br><span class=\"line\">            x = min(t.right);</span><br><span class=\"line\">            x.right = deleteMin(t.right);</span><br><span class=\"line\">            x.left = t.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x.size = <span class=\"number\">1</span> + size(x.right) + size(x.left);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls min() with empty BST&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls max() with empty BTS&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to floor is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls to floor with empty BST&quot;</span>);</span><br><span class=\"line\">        Node x = floor(root, key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;argument to floor() is too small&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">floor</span><span class=\"params\">(Node x,Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> floor(x.left, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node t = floor(x.right, key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor2</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        Key x = floor2(root, key, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;argument to floor() is too small&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">floor2</span><span class=\"params\">(Node x, Key key, Key best)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> best;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> floor2(x.left, key, best);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> floor2(x.right, key, x.key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">ceiling</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;calls to ceiling() with empty BTS&quot;</span>);</span><br><span class=\"line\">        Node x = ceiling(root, key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">&quot;argument to floor() is too large&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">ceiling</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ceiling(x.right, key);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node t = ceiling(x.left, key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> rank)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rank &lt; <span class=\"number\">0</span> || rank &gt;= size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to select() is invaild: &quot;</span> + rank);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> select(root, rank);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Key <span class=\"title\">select</span><span class=\"params\">(Node x, <span class=\"keyword\">int</span> rank)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftsize = size(x.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftsize &gt; rank) <span class=\"keyword\">return</span> select(x.left, rank);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (leftsize &lt; rank) <span class=\"keyword\">return</span> select(x.right, rank - leftsize - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x.key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;argument to rank() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rank(key, root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Key key, Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> rank(key, x.left);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> + size(x.left) + rank(key, x.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> size(x.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;Key&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys(min(), max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">keys</span><span class=\"params\">(Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to keys() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;second argument to keys() is null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Queue&lt;Key&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        keys(root, queue, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">keys</span><span class=\"params\">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmplo = lo.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmphi = hi.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmplo &lt; <span class=\"number\">0</span>) keys(x.left, queue, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmplo &lt;= <span class=\"number\">0</span> &amp;&amp; cmphi &gt;= <span class=\"number\">0</span>) queue.add(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmphi &gt; <span class=\"number\">0</span>) keys(x.right, queue, lo, hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Key lo, Key hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;first argument to size() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;second argument to size() is null&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo.compareTo(hi) &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contains(hi)) <span class=\"keyword\">return</span> rank(hi) - rank(lo) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> rank(hi) - rank(lo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> height(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + Math.max(height(x.left), height(x.right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterable&lt;Key&gt; <span class=\"title\">levelorder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> LinkedList&lt;Key&gt;();</span><br><span class=\"line\">        Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;Node&gt;();</span><br><span class=\"line\">        queue.offer(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty()) &#123;</span><br><span class=\"line\">            Node x = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            keys.offer(x.key);</span><br><span class=\"line\">            queue.offer(x.left);</span><br><span class=\"line\">            queue.offer(x.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isBST()) System.out.println(<span class=\"string\">&quot;Not in symmetric order!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSizeConsistent()) System.out.println(<span class=\"string\">&quot;Subtree counts not consistent!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRankConsistent()) System.out.println(<span class=\"string\">&quot;Ranks not consistent&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isBST() &amp;&amp; isSizeConsistent() &amp;&amp; isRankConsistent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBST</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> isBST(root, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBST</span><span class=\"params\">(Node x, Key min, Key max)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min != <span class=\"keyword\">null</span> &amp;&amp; x.key.compareTo(min) &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max != <span class=\"keyword\">null</span> &amp;&amp; x.key.compareTo(max) &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isBST(x.left, min, x.key) &amp;&amp; isBST(x.right, x.key, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSizeConsistent</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> isSizeConsistent(root);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSizeConsistent</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.size != size(x.left) + size(x.right) + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSizeConsistent(x.left) &amp;&amp; isSizeConsistent(x.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRankConsistent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size(); i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != rank(select(i))) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Key key : keys())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.compareTo(select(rank(key))) != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BST&lt;String, Integer&gt; st = <span class=\"keyword\">new</span> BST&lt;&gt;();</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;J&quot;</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;S&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;K&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;L&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;Q&quot;</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        st.put(<span class=\"string\">&quot;M&quot;</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The height of the tree is :&quot;</span> + st.height());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The Ceiling of the key C is :&quot;</span> + st.ceiling(<span class=\"string\">&quot;C&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The floor of the key N is :&quot;</span> + st.floor(<span class=\"string\">&quot;N&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The rank of the key J is :&quot;</span> + st.rank(<span class=\"string\">&quot;J&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Select :&quot;</span> + st.select(<span class=\"number\">4</span>));</span><br><span class=\"line\">        st.deleteMax();</span><br><span class=\"line\">        st.deleteMin();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s: st.keys()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Key:&quot;</span> + s + <span class=\"string\">&quot;, Value&quot;</span> + st.get(s));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s: st.levelorder()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Key:&quot;</span> + s + <span class=\"string\">&quot;, Value&quot;</span> + st.get(s));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Applications</li>\n</ol>\n<p><a href=\"https://oreodu.github.io/2020/20201202-Associative-arrays\" target=\"_blank\">Associative arrays</a>.</p>\n<h5 id=\"red-black-tree\">Red-Black tree<a title=\"#red-black-tree\" href=\"#red-black-tree\"></a></h5>\n<h5 id=\"b-tree\">B-tree<a title=\"#b-tree\" href=\"#b-tree\"></a></h5>\n<h4 id=\"encoding\">Encoding<a title=\"#encoding\" href=\"#encoding\"></a></h4>\n<p>Huffman coding and cladograms</p>\n","prev":{"title":"Union Find","link":"2020/20201005-Union-Find"},"next":{"title":"Hash Table","link":"2020/20201005-Hash-Table"},"plink":"https://oreodu.github.io/2020/20201005-Tree/","toc":[{"id":"tree","title":"Tree","index":"1","children":[{"id":"part.1-basis","title":"Part.1 Basis","index":"1.1"},{"id":"part.2-binary-tree","title":"Part.2 Binary tree","index":"1.2"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201005-Tree/\" title=\"Tree\">https://oreodu.github.io/2020/20201005-Tree/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}