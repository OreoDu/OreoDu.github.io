{"title":"SQL Basics","date":"2020-09-16T07:42:00.000Z","date_formatted":{"ll":"Sep 16, 2020","L":"09/16/2020","MM-DD":"09-16"},"link":"2020/20200916-SQL-Basics","comments":true,"tags":["SQL"],"categories":["Programming"],"updated":"2020-10-03T18:16:27.401Z","content":"<h1 id=\"sql-basics\">SQL Basics<a title=\"#sql-basics\" href=\"#sql-basics\"></a></h1>\n<h3 id=\"overview\">Overview<a title=\"#overview\" href=\"#overview\"></a></h3>\n<p>(概略图)</p>\n<p><strong>· materials:</strong><br>\n· <a href=\"https://inst.eecs.berkeley.edu/~cs61a/su19/\" target=\"_blank\"><u>CS61A Summer 2019 at UCB</u></a></p>\n<p>SQL is an example of a (declarative) language with interacts with a  database management system (DBMS) in order to make data processing easier and faster</p>\n<h3 id=\"part.1-create-the-table\">Part.1 Create the Table<a title=\"#part.1-create-the-table\" href=\"#part.1-create-the-table\"></a></h3>\n<p><strong>· Make a table</strong></p>\n<p>A CREATE TABLE statement gives a global name to a table.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE [name]([columns]); # create empty table</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE dogs(name, fur, phrase DEFAULT &#39;woof&#39;); # using default values</span><br></pre></td></tr></table></figure>\n<p><strong>· Create rows of data</strong></p>\n<p><code>CREATE TABLE [name] AS ...;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT [expr] AS [name], [expr] AS [name], ... UNION</span><br><span class=\"line\">SELECT [expr] AS [name], [expr] AS [name], ... UNION</span><br><span class=\"line\">SELECT [expr] AS [name], [expr] AS [name], ...;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE cities AS</span><br><span class=\"line\">  SELECT 38 AS latitude, 122 AS longitude, &quot;Berkeley&quot; AS name   UNION</span><br><span class=\"line\">  SELECT 42,\t\t\t    71,\t\t\t     &quot;Cambridge&quot;        UNION</span><br><span class=\"line\">  SELECT 45,\t\t\t    93,\t\t\t     &quot;Minneapolis&quot;;</span><br></pre></td></tr></table></figure>\n<p><strong>· Create rows of data from existing tables</strong></p>\n<p>A <code>SELECT</code> statement can specify an input table using a <code>FROM</code> clause. A subset of the rows of the input table can be selected using a <code>WHERE</code> clause. Can declare the order of the remaining rows using an <code>ORDER BY</code> clause. Otherwise, no order. Column descriptions determine how each input row is projected to a result row.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT [columns] FROM [table] WHERE [condition] </span><br><span class=\"line\">ORDER BY [order] [ASC&#x2F;DESC] LIMIT [number];</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT &quot;west coast&quot; AS region, name FROM cities WHERE longitude &gt;&#x3D; 115 UNION</span><br><span class=\"line\">SELECT &quot;other&quot;, \t\t\t\t name FROM cities WHERE longitude &lt; 115;</span><br></pre></td></tr></table></figure>\n<p><strong>· Arithmetic in SELECT Statements</strong></p>\n<p>In a SELECT expression, column names evaluate to row values.Arithmetic expressions can combine row values and constants.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT single + 2 * couple AS total FROM restaurant;</span><br></pre></td></tr></table></figure>\n<p><strong>· Join the Table</strong></p>\n<p>When we join two tables, we get a new table with one row for each combination of rows from the original tables.</p>\n<p><code>SELECT * FROM table1, table2;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM parents, dogs;</span><br><span class=\"line\">SELECT parent FROM parents, dogs WHERE child &#x3D; name AND fur &#x3D; &quot;curly&quot;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT s.name, s.artist </span><br><span class=\"line\">      FROM songs AS s, artists AS ar, albums AS al</span><br><span class=\"line\">      WHERE album &#x3D; al.name AND s.artist &#x3D; ar.name</span><br><span class=\"line\">            AND release_year &#x3D; 2010</span><br><span class=\"line\">            ORDER BY first_year_active;</span><br></pre></td></tr></table></figure>\n<p><strong>· Aliasing</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT a.child AS first, b.child AS second FROM parents AS a, parents AS b WHERE a.parent &#x3D; b.parent AND a.child &lt; b.child;</span><br></pre></td></tr></table></figure>\n<p><strong>· String Expression</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql&gt; SELECT name || &quot; dog&quot; FROM dogs;</span><br><span class=\"line\">abraham dog</span><br><span class=\"line\">barack dog</span><br><span class=\"line\">clinton dog</span><br></pre></td></tr></table></figure>\n<h3 id=\"part.2-aggregation\">Part.2 Aggregation<a title=\"#part.2-aggregation\" href=\"#part.2-aggregation\"></a></h3>\n<p><strong>Aggregation</strong> is the process of doing operations on <em>groups of rows</em> instead of just a single row. SQL provides aggregate functions whose return values can be used as entries in a column.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT AVG(age) AS avg_age FROM dogs;</span><br><span class=\"line\">SELECT COUNT(*) AS count FROM dogs;</span><br><span class=\"line\">SELECT SUM(age) AS sum_age FROM dogs;</span><br><span class=\"line\">SELECT MIN(name) AS min_name FROM dogs;</span><br></pre></td></tr></table></figure>\n<p><strong>· Group</strong></p>\n<p>By default, aggregation is performed over all the rows of the table. We can <code>GROUP BY</code> any valid SQL expression, which includes using multiple column names and operators. We can specify  a single group consists of all rows for which [expression] evaluates to the same value. The output table will have <strong>one row</strong> per group.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT [columns] FROM [table] WHERE [condition] </span><br><span class=\"line\">       GROUP BY [expression]</span><br><span class=\"line\">       ORDER BY [order] [ASC&#x2F;DESC]</span><br><span class=\"line\">       LIMIT [number];</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT fur, AVG(age) AS avg_age FROM dogs GROUP BY fur;</span><br></pre></td></tr></table></figure>\n<p><strong>· Filtering Groups</strong></p>\n<p>We know how to filter individual rows using the <code>WHERE</code> <a href=\"http://clause.To\">clause.To</a> filter groups, use the <code>HAVING [condition]</code> clause.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT fur, AVG(age) AS avg_age</span><br><span class=\"line\">       FROM dogs GROUP BY fur</span><br><span class=\"line\">       HAVING COUNT(*) &gt; 1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"part.3-mutating-tables\">Part.3 Mutating Tables<a title=\"#part.3-mutating-tables\" href=\"#part.3-mutating-tables\"></a></h3>\n<p><strong>· Remove Table</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE [IF EXISTS] [name];</span><br><span class=\"line\">DROP TABLE IF EXISTS parents;</span><br></pre></td></tr></table></figure>\n<p><strong>· Inserting Records</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO [table]([columns]) VALUES([values]), ([values]);</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO dogs(name, fur) VALUES(&#39;fillmore&#39;, &#39;curly&#39;);</span><br><span class=\"line\">INSERT INTO dogs VALUES(&#39;delano&#39;, &#39;long&#39;, &#39;hi!&#39;);</span><br></pre></td></tr></table></figure>\n<p><strong>· Updating Records</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE [table] SET [column] &#x3D; [expression] WHERE [condition];</span><br><span class=\"line\">DELETE FROM [table] WHERE [condition];</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE dogs SET phrase &#x3D; &#39;WOOF&#39; WHERE fur &#x3D; &#39;curly&#39;;</span><br><span class=\"line\">DELETE FROM dogs WHERE fur &#x3D; &#39;curly&#39; and phrase &#x3D; &#39;WOOF&#39;;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Java Basics 01","link":"2020/20200917-Java-Basics-01"},"next":{"title":"Scheme Basics","link":"2020/20200915-Scheme-Basics"},"plink":"https://oreodu.github.io/2020/20200916-SQL-Basics/","toc":[{"id":"sql-basics","title":"SQL Basics","index":"1"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20200916-SQL-Basics/\" title=\"SQL Basics\">https://oreodu.github.io/2020/20200916-SQL-Basics/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}