{"title":"0029. Divide Two Integers","date":"2020-10-23T11:35:17.419Z","date_formatted":{"ll":"Oct 23, 2020","L":"10/23/2020","MM-DD":"10-23"},"updated":"2020-10-10T07:48:53.000Z","content":"<p>English ｜ <a href=\"leetcode/0029\">简体中文</a></p>\n<h2 id=\"q\">Q<a title=\"#q\" href=\"#q\"></a></h2>\n<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p>\n<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>\n<p>The integer division should truncate toward zero.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> dividend = 10, divisor = 3<br>\n<strong>Output:</strong> 3</p>\n</blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote>\n<p><strong>Input:</strong> dividend = 7, divisor = -3<br>\n<strong>Output:</strong> -2</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Both dividend and divisor will be 32-bit signed integers.</li>\n<li>The divisor will never be 0.</li>\n<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 2^31 − 1 when the division result overflows.</li>\n</ul>\n<h2 id=\"a\">A<a title=\"#a\" href=\"#a\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"number\">_</span> dividend: Int, <span class=\"number\">_</span> divisor: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"type\">INT_MAX</span> = <span class=\"type\">Int</span>(<span class=\"type\">INT32_MAX</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> divisor == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">INT_MAX</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = (dividend &gt; <span class=\"number\">0</span>) == (divisor &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d1 = <span class=\"built_in\">abs</span>(dividend), d2 = <span class=\"built_in\">abs</span>(divisor), <span class=\"built_in\">count</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> d1 &gt;= d2 &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> shift = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> d1 &gt;= d2 &lt;&lt; shift &#123;</span><br><span class=\"line\">                shift += <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            d1 -= d2 &lt;&lt; (shift - <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">count</span> += <span class=\"number\">1</span> &lt;&lt; (shift - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> &gt; <span class=\"type\">INT_MAX</span> &amp;&amp; flag &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">INT_MAX</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag ? <span class=\"built_in\">count</span> : -<span class=\"built_in\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","link":"leetcode/0029-en","comments":true,"plink":"https://oreodu.github.io/leetcode/0029-en/","toc":[{"id":"q","title":"Q","index":"1"},{"id":"a","title":"A","index":"2"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/leetcode/0029-en/\" title=\"0029. Divide Two Integers\">https://oreodu.github.io/leetcode/0029-en/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}