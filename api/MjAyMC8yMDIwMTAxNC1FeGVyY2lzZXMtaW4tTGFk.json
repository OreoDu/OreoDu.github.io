{"title":"Exercises in Lad","date":"2020-10-14T06:37:00.000Z","date_formatted":{"ll":"Oct 14, 2020","L":"10/14/2020","MM-DD":"10-14"},"link":"2020/20201014-Exercises-in-Lad","comments":true,"tags":["Lad Task"],"categories":["Sundries Storage"],"updated":"2020-10-14T06:38:40.276Z","content":"<h1 id=\"exercises\">Exercises<a title=\"#exercises\" href=\"#exercises\"></a></h1>\n<p>研究テーマを決める前に、以下のプログラミング課題を一通り</p>\n<hr>\n<p>課題１：　A*　（基本的な探索アルゴリズムの実装、　高速なコードの実装）</p>\n<p>Russell &amp;Norvigで紹介された8パズルを、Ａ＊アルゴリズムを用いて解くプログラムを実装する。<br>\n　　以下の３つの条件における性能（実行時間）を評価・比較する<br>\na)　ヒューリスティック関数を使わないＡ＊（h(s)=0 for all states)<br>\nb)  ゴールの位置にないタイルの数をヒューリスティックとする　　（Russell and Norvig p.106）<br>\nb)  マンハッタン距離をヒューリスティックとする　　（Russell and Norvig p.106）</p>\n<p>評価実験は１００個以上のランダムに作成したパズル初期状態に対して行う。<br>\n但し、単純ランダムにタイルを割り当てて初期状態を作ると、解が存在しない初期状態が多い。<br>\n正しいパズルの初期状態の生成方法：　まず、正しい状態（＝ゴール状態）から、一歩ランダムな方向にに空タイルを移動する。<br>\nこのように空タイルをランダムな方向に移動する作業を繰り返すとパズルはどんどん崩れるが、必ず解（ゴールまでの経路）が存在する。<br>\n一般的には、ランダム移転数を増やすほど、「難しい」パズルが生成される。<br>\n** C/C++で実装すればどんな問題でも1秒以内で解けるはず(信原君がRubyで実装したソルバは数秒以内で全ての問題が解けた）</p>\n<p>課題１A:　データ構造等の工夫で高速な１５パズルの実装を目指す</p>\n<p>まず、１５パズルのソルバを実装する（８パズルのソルバを作成していれば簡単なはず）。<br>\nヒューリスティックはマンハッタン距離を使う。<br>\n上記の８パズルのように１５パズルの問題をランダム生成すれば、かなり難しい問題が生成される。<br>\n一秒間に展開されるノード数を測る（ソルバを実行して、終了時に生成されたノード数　/ 実行時間）。</p>\n<p>目標：　一秒間に１００万ノード以上生成するソルバを実装。</p>\n<p>ある程度自力で頑張った後、以下の論文を読む。<br>\n<a href=\"http://www.aaai.org/ocs/index.php/SOCS/SOCS12/paper/viewFile/5404/5682\">http://www.aaai.org/ocs/index.php/SOCS/SOCS12/paper/viewFile/5404/5682</a></p>\n<hr>\n<p>課題２<br>\n任意の数独パズルを解くソルバを実装しなさい。<br>\n入力ファイル：　以下のページの「test cases」にテキスト形式の問題集が置かれてます。<br>\n<a href=\"http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku/\">http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku/</a><br>\n上のページには数独の解き方の解説も書かれてますが、<br>\n殆ど一般性が無いアドバイスなので（全てのパズルを解く保障が無い）、解き方の解説は無視しましょう。<br>\n正しい解き方はRusell&amp;Norvigの教科書の制約充足の章に紹介されている手法です。<br>\n１）まず、深さ優先探索を用いたバックトラック法を実装<br>\n２）更に効率良く解く為に、制約伝播(constraint propagation)を実装する。<br>\n今回の課題の味噌は（２）です。</p>\n<p>正しく実装すれば、「難しい」と言われているパズルもミリ秒単位以内で解けます</p>\n<p>** 遠藤君が実装した制約伝播＋バックトラックを用いたPython ソルバ(PyPy JIT)は上記サイトのmsk_009問題集1,011門を全問解くのに要した時間が15秒。</p>\n<hr>\n<p>課題３</p>\n<p>数独の課題でバックトラック＋制約伝播はかなり強力な手法だと実感したと思います。<br>\nでは、ＢＴ＋制約伝播はどこまで通用するのか、違う問題を通じて確認しましょう。<br>\nついでに、そろそろ本物の学術論文を読み始めましょう。</p>\n<p>Russell&amp;Norvig 5.3 (p.151)にN-Queens問題が紹介されてます。<br>\nこのN-Queens問題に対して：</p>\n<p>１）バックトラック法＋制約伝播を用いたソルバを実装する<br>\n　　入力：　Queenの数N</p>\n<p>２）　局所探索法（min-conflicts法)を用いたソルバを実装する。<br>\n制約充足における局所探索法は教科書（第２版）の制約充足の章で簡潔に説明されているが、<br>\n教科書の洗練された説明だけでなく、原文を読む（当時、かなり大きなインパクトがあった有名な論文で、ＡＩ分野の「名作」の一つ。<br>\nSolving Large-Scale Constraint Satisfaction and Scheduling Problems<br>\nUsing a Heuristic Repair Method presented at the Eighth National<br>\nConference on Artificial Intelligence (AAAI-90)<br>\n<a href=\"https://www.aaai.org/Papers/AAAI/1990/AAAI90-003.pdf\">https://www.aaai.org/Papers/AAAI/1990/AAAI90-003.pdf</a><br>\nこの論文で紹介されたアルゴリズムを実装する。</p>\n<p>局所探索法のソルバを正しく、効率良く実装すれば、かなり大規模な問題が解けるはず。</p>\n<p>３）　上記ソルバ１，２、を比較する</p>\n<p>**遠藤君の結果（３・２６）<br>\nN=1,000,000の問題を128秒で解けた(python, pypy JIT on 1.06GHz Core 2 Duo, 2GB RAM)</p>\n<hr>\n<p>課題４</p>\n<p>今度はN-Queens問題をboolean satisfiability (SAT)として表現し<br>\nて解くプログラムを作りましょう。</p>\n<p>以下の資料(Chumin Li作)にNQueensSATモデルの概要が説明されている：<br>\n<a href=\"https://sites.google.com/site/aflabinternal/sharedfiles/Li-SAT-modeling-slides.pdf?attredirects=0&amp;d=1\">https://sites.google.com/site/aflabinternal/sharedfiles/Li-SAT-modeling-slides.pdf?attredirects=0&amp;d=1</a></p>\n<p>但し、SATソルバは自分で作らず、<br>\nネットから高性能のソルバを拾って利用する。例えば、<br>\n<a href=\"http://minisat.se/\">http://minisat.se/</a>   （他のソルバでも構わない）</p>\n<p>minisatf等が処理可能な標準ファイル形式(.cnf 形式)の説明：<br>\n<a href=\"http://www.satcompetition.org/2009/format-benchmarks2009.html\">http://www.satcompetition.org/2009/format-benchmarks2009.html</a></p>\n<p>要するに、Queenの数Nを入力として、<br>\n１）SATソルバが処理できる形式のファイルを作成、<br>\n（この変換作業が今回の課題の味噌）<br>\n２）SATソルバを実行、<br>\n３）結果を読み込み、正しい解か確認</p>\n<p>minisatは基本的には制約伝播＋木探索なので局所探索には劣るが、汎用ＳＡＴソルバでどこまで解けるか実感する（前回作った、自作の制約伝播＋深さ優先探索ソルバと比較する）</p>\n<hr>\n<p>課題５：汎用なプランナと、問題に特化した探索アルゴリズムを比較する</p>\n<p>課題＃1で実装した8パズルのソルバと、最新の汎用プランナFast Downwardを比較する</p>\n<p>汎用プランナFast Downwardをダウンロードして、コンパイルする<br>\n<a href=\"http://www.fast-downward.org/HomePage\">http://www.fast-downward.org/HomePage</a><br>\n<a href=\"http://www.fast-downward.org/ObtainingAndRunningFastDownward\">http://www.fast-downward.org/ObtainingAndRunningFastDownward</a></p>\n<p>FastDownwardを実装するには、問題(ドメイン）の一般的なモデルファイルおよび具体的な問題のインスタンスファイルが必要</p>\n<p>このサイトから8パズルのモデル・インスタンスファイルのペア３問：eight01.pddl, eight01x.pddl　,<br>\neight02,eight02x, eight03,eight03xをダウンロード：<br>\n<a href=\"http://www.ida.liu.se/~TDDC65/ai/la/strips/\">http://www.ida.liu.se/~TDDC65/ai/la/strips/</a></p>\n<p>まず、eight01.pddl, eight01x.pddlをなるべく理解する。<br>\nPDDL形式を理解するには、まずはRussell&amp;Norvigのプランニングの章（１１）を復習。<br>\nPDDL形式の入門的な説明 <a href=\"http://users.cecs.anu.edu.au/~patrik/pddlman/writing.html\">http://users.cecs.anu.edu.au/~patrik/pddlman/writing.html</a></p>\n<p>課題１で作った8パズルソルバの為に、eight01.pddl, eight01x.pddl… eight3x.pddlに相当する<br>\n入力ファイルを作成する（自動的な変換でなく、手作業でＯＫ）。</p>\n<p>8パズルソルバとFastDownwardの探索性能を比較する：<br>\nFast Downwardの実行：　<a href=\"http://www.fast-downward.org/PlannerUsage\">http://www.fast-downward.org/PlannerUsage</a></p>\n<hr>\n<p>課題６：　進化計算<br>\nBlack-box関数最適化contest<br>\n<a href=\"http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2016/CEC2016.htm\">http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2016/CEC2016.htm</a></p>\n<p>ここで紹介されている４番目のtechnical report (single parameter)のベンチマーク問題に対する進化アルゴリズムを実装する。</p>\n<p>J. J. Liang, B-Y. Qu, P. N. Suganthan, “Problem Definitions and Evaluation Criteria for the CEC 2014 Special Session and Competition on Single Objective Real-Parameter Numerical Optimization”, Technical Report 201311, Computational Intelligence Laboratory, Zhengzhou University, Zhengzhou, China  and  Technical Report, Nanyang Technological University, Singapore, December 2013. (Single parameter-operator set based case)</p>\n<p>まずは自分で考えて、何か実装する。</p>\n<p>次に、SHADEを実装してみる。<br>\n<a href=\"http://metahack.org/CEC2013-SHADE.pdf\">http://metahack.org/CEC2013-SHADE.pdf</a></p>\n<p>参考に：田邊のコード（C++版、Java版　Matlab/Octave版）　<a href=\"https://sites.google.com/site/tanaberyoji/software\">https://sites.google.com/site/tanaberyoji/software</a></p>\n<p>ハマったら、　今年のcontestに投稿してみる：　<a href=\"http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2017/CEC2017.htm\">http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2017/CEC2017.htm</a></p>\n","next":{"title":"Mathematical Proof and Discussion of \"Fast and Slow Pointer\"","link":"2020/20201014-Mathematical-Proof-and-Discussion-of-Fast-and-Slow-Pointer"},"plink":"https://oreodu.github.io/2020/20201014-Exercises-in-Lad/","toc":[{"id":"exercises","title":"Exercises","index":"1"}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/2020/20201014-Exercises-in-Lad/\" title=\"Exercises in Lad\">https://oreodu.github.io/2020/20201014-Exercises-in-Lad/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}