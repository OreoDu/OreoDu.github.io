{"title":"Data Structure","date":"2020-04-25T07:45:00.000Z","slug":"20200425-Data-Structure","comments":true,"tags":["Data Structure"],"categories":["Data Structure"],"updated":"2020-10-03T18:15:09.979Z","content":"<h2 id=\"Data-Structure\">Data Structure<a href=\"post/20200425-Data-Structure#Data-Structure\"></a></h2><h3 id=\"Overview\">Overview<a href=\"post/20200425-Data-Structure#Overview\"></a></h3><p>(概略图)</p>\n<p><strong>· materials:</strong><br>  · Wikipedia</p>\n<h3 id=\"Part-1-Linear-List\">Part.1 Linear List<a href=\"post/20200425-Data-Structure#Part-1-Linear-List\"></a></h3><h4 id=\"Array\">Array<a href=\"post/20200425-Data-Structure#Array\"></a></h4><h4 id=\"Linked-List\">Linked List<a href=\"post/20200425-Data-Structure#Linked-List\"></a></h4><h4 id=\"Stack\">Stack<a href=\"post/20200425-Data-Structure#Stack\"></a></h4><h4 id=\"Queue\">Queue<a href=\"post/20200425-Data-Structure#Queue\"></a></h4><h3 id=\"Part-2-Hash-Table\">Part.2 Hash Table<a href=\"post/20200425-Data-Structure#Part-2-Hash-Table\"></a></h3><h3 id><a href=\"post/20200425-Data-Structure#\"></a></h3><h3 id=\"Part-3-Tree\">Part.3 Tree<a href=\"post/20200425-Data-Structure#Part-3-Tree\"></a></h3><p>Recursive Description: A tree has a root and a list of branchesEach branch is a treeA tree with zero branches is called a leaf.</p>\n<p>Relative Description: Each location in a tree is called a nodeEach node has a label valueOne node can be the parent/child of another.</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/13/fDJtsRH6xkdKNCG.png\" alt=\"11\" data-zoomable></p></div>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use the recursive description</span></span><br><span class=\"line\"><span class=\"comment\"># We can also use the class to define the tree and its related attributes and methods.</span></span><br><span class=\"line\"><span class=\"comment\"># Constructor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tree</span><span class=\"params\">(label, branches=[])</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> is_tree(branch)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [label] + list(branches)</span><br><span class=\"line\"><span class=\"comment\"># Selectors</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">label</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">branches</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_tree</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> type(tree) != list <span class=\"keyword\">or</span> len(tree) &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches(tree):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_tree(branch):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_leaf</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> branches(tree)</span><br><span class=\"line\"></span><br><span class=\"line\">print(tree(<span class=\"number\">3</span>, [tree(<span class=\"number\">1</span>),tree(<span class=\"number\">2</span>, [tree(<span class=\"number\">1</span>),tree(<span class=\"number\">1</span>)])])) <span class=\"comment\"># [3, [1], [2, [1], [1]]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tree processing</span></span><br><span class=\"line\"><span class=\"comment\"># conut the nodes in a Tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_nodes</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_leaf(tree): <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    lst = [count_nodes(b) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(tree)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum(lst,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># count the leaves</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_leaves</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_leaf(tree): <span class=\"keyword\">return</span> [label(tree)]</span><br><span class=\"line\">    <span class=\"comment\"># leaves = [count_leaves(b) for b in branches(tree)] #[[1],[[1],[1]]]</span></span><br><span class=\"line\">    leaves = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(tree):</span><br><span class=\"line\">        leaves += count_leaves(tree) <span class=\"comment\"># [1,1,1]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leaves</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print the tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_tree</span><span class=\"params\">(tree,indent = <span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">' '</span>*indent,label(tree))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(tree):</span><br><span class=\"line\">            print_tree(b,indent+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create a tree from an exsisted tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">square_tree</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_leaf(tree): <span class=\"keyword\">return</span> tree(label(tree)**<span class=\"number\">2</span>)</span><br><span class=\"line\">    lst = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> brannches(tree):</span><br><span class=\"line\">        lst += [suqare_tree(b)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree(label(tree)**<span class=\"number\">2</span>,lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prune the tree </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prune</span><span class=\"params\">(t,x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> label(t) == x: <span class=\"keyword\">return</span> null</span><br><span class=\"line\">    branches(t) = [b <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branches(t) <span class=\"keyword\">if</span> label(b) != x ]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> branchces():</span><br><span class=\"line\">        prune( b,x)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part-4-Others\">Part.4 Others<a href=\"post/20200425-Data-Structure#Part-4-Others\"></a></h3><h4 id=\"Ⅰ-Union-Find\">Ⅰ.  Union-Find<a href=\"post/20200425-Data-Structure#Ⅰ-Union-Find\"></a></h4><p>A  disjoint-set data structure is a data structure that keeps track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets. </p>\n<p>A  union-find algorithm is an algorithm that performs two useful operations on such a data structure:<br>· Find: Determine which subset a particular element is in. Used to check if two elements are in the same subset.<br>· Union: Join two subsets into a single subset.</p>\n<h5 id=\"1）Quik-Find-eager-approach\">1）Quik-Find (eager approach)<a href=\"post/20200425-Data-Structure#1）Quik-Find-eager-approach\"></a></h5><p>Data structure: Integer array id[] of length N<br>Interpretation: <em>p</em> and <em>q</em> are connected iff they have the same id.<img src=\"https://i.loli.net/2020/09/25/4fotqNvk6Klr8R9.png\" alt=\"1\" style=\"zoom:50%;\">     <img src=\"https://i.loli.net/2020/09/25/HDLj7Pg83npwJVG.png\" alt=\"2\" style=\"zoom: 33%;\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickFind</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">QuickFind</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    id  = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">      id[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id[p] == id[q];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//change all entries whose id equals id[p] to id[q].</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p,<span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> pid = id[p];</span><br><span class=\"line\">      <span class=\"keyword\">int</span> qid = id[q];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;id.length; i++)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (id[i] == pid) id[i] = qid;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-Quik-Union-lazy-approach\">2)  Quik-Union (lazy approach)<a href=\"post/20200425-Data-Structure#2-Quik-Union-lazy-approach\"></a></h5><p>Data structure: Integer array id[] of length N<br>Interpretation: id[i] is the parent of i.</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/25/CxwA365cELkj9pN.png\" alt=\"3\" style=\"zoom:50%;\" data-zoomable>        <img src=\"https://i.loli.net/2020/09/25/zYEd4WNAnvfsIyc.png\" alt=\"4\" style=\"zoom:33%;\" data-zoomable></p></div>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickUnion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">QuickUnion</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        id  = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;N; i++) id[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=id[p]) p = id[p];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root(p) == root(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// set the id of p's root to the id of q's root.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pr = root(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qr = root(q);</span><br><span class=\"line\">        id[pr] = qr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Improvement-Weighed-quick-union\">3)  Improvement: Weighed quick union<a href=\"post/20200425-Data-Structure#3-Improvement-Weighed-quick-union\"></a></h5><p>In order to avoid tall trees, we can keep track of the <em>size</em> of each tree and balance by linking root of smaller tree to root of larger tree.</p>\n<p>Data structure: Integer array id[] of length N and extra helper array size[].</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/25/n2XLPSoFVrMQwq7.png\" alt=\"6\" style=\"zoom:50%;\" data-zoomable>          <img src=\"https://i.loli.net/2020/09/25/t8GTg5mU2w6oIYA.png\" alt=\"5\" style=\"zoom: 25%;\" data-zoomable></p></div>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Only need to change the union method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pr = root(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qr = root(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr == qr) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size[pr]&lt;size[qr]) &#123;</span><br><span class=\"line\">            id[pr] = qr;</span><br><span class=\"line\">            size[qr] += size[pr];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            id[qr] = pr;</span><br><span class=\"line\">            size[pr] += size[qr];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>We can also link the root based on the rank(or height). But tracking the size is better.</p>\n<img src=\"https://i.loli.net/2020/09/25/DgFo2cv6utdXqMO.jpg\" alt=\"12\" style=\"zoom: 25%;\">\n\n\n\n<h5 id=\"4-Improvement-path-compression\">4) Improvement: path compression<a href=\"post/20200425-Data-Structure#4-Improvement-path-compression\"></a></h5><p>In order to reduce the height of the trees, we can update the parent of the node to the root we found.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Only need to change the root method.</span></span><br><span class=\"line\"><span class=\"comment\">//add second loop to root() to set the id[] of each examined node to the root.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = p;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r!=id[r]) r = id[r];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!= id[p])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = id[p];</span><br><span class=\"line\">        id[p] = r;</span><br><span class=\"line\">        p = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make every other node in path point to its grandparent</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=id[p])&#123;</span><br><span class=\"line\">        id[p] = id[id[p]];</span><br><span class=\"line\">        p = id[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-Analysis-of-running-time\">5) Analysis of running time:<a href=\"post/20200425-Data-Structure#5-Analysis-of-running-time\"></a></h5><p>(lg* : times you take logN to get one)</p>\n<img src=\"https://i.loli.net/2020/09/25/L6xFqZDORv8lkrP.png\" alt=\"122\" style=\"zoom:50%;\">\n\n<h5 id=\"6-Union-Find-Application\">6) Union Find Application<a href=\"post/20200425-Data-Structure#6-Union-Find-Application\"></a></h5><p>· Percolation.<br>· Games (Go, Hex).<br>· Dynamic connectivity.<br>· Least common ancestor.<br>· Equivalence of finite state automata.<br>· Hinley-Milner polymorphic type inference.<br>· Kruskal’s minimum spanning tree algorithm.<br>· Compiling equivalence statements in Fortran.<br>· Morphological attribute openings and closings.<br>· Matlab’s bwlabel() function in image processing.</p>\n<h3 id=\"Bag\">Bag<a href=\"post/20200425-Data-Structure#Bag\"></a></h3><h3 id=\"Union-find\">Union-find<a href=\"post/20200425-Data-Structure#Union-find\"></a></h3><h3 id=\"Priority-queue\">Priority queue<a href=\"post/20200425-Data-Structure#Priority-queue\"></a></h3>","prev":{"title":"Basis & Regression & Classification","slug":"20200501-Machine-Learning-Basis"},"next":{"title":"Searching and Sorting","slug":"20200102-Searching-and-Sorting"},"link":"https://oreodu.github.io/post/20200425-Data-Structure/","toc":[{"title":"Data Structure","id":"Data-Structure","index":"1","children":[{"title":"Overview","id":"Overview","index":"1.1"},{"title":"Part.3 Tree","id":"Part-3-Tree","index":"1.2"},{"title":"Part.4 Others","id":"Part-4-Others","index":"1.3"},{"title":"Priority queue","id":"Priority-queue","index":"1.4"}]}],"reward":true,"copyright":{"author":"Oreo Du","link":"<a href=\"https://oreodu.github.io/post/20200425-Data-Structure/\" title=\"Data Structure\">https://oreodu.github.io/post/20200425-Data-Structure/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}