{"title":"Data Structure","date":"2020-04-25T07:45:00.000Z","thumbnail":"https://i.loli.net/2020/09/09/hpqrHXILJGxeSbO.jpg","slug":"20200425-Data-Structure","tags":["Data Structure"],"categories":["Data Structure"],"updated":"2020-09-30T05:53:05.974Z","content":"<h2 id=\"Data-Structure\">Data Structure<a href=\"post/20200425-Data-Structure#Data-Structure\"></a></h2><h3 id=\"Overview\">Overview<a href=\"post/20200425-Data-Structure#Overview\"></a></h3><p>(概略图)</p>\n<p><strong>· materials:</strong><br>  · Wikipedia</p>\n<h3 id=\"Part-1-Linear-List\">Part.1 Linear List<a href=\"post/20200425-Data-Structure#Part-1-Linear-List\"></a></h3><h4 id=\"Array\">Array<a href=\"post/20200425-Data-Structure#Array\"></a></h4><h4 id=\"Linked-List\">Linked List<a href=\"post/20200425-Data-Structure#Linked-List\"></a></h4><h4 id=\"Stack\">Stack<a href=\"post/20200425-Data-Structure#Stack\"></a></h4><h4 id=\"Queue\">Queue<a href=\"post/20200425-Data-Structure#Queue\"></a></h4><h3 id=\"Part-2-Hash-Table\">Part.2 Hash Table<a href=\"post/20200425-Data-Structure#Part-2-Hash-Table\"></a></h3><h3 id><a href=\"post/20200425-Data-Structure#\"></a></h3><h3 id=\"Part-3-Tree\">Part.3 Tree<a href=\"post/20200425-Data-Structure#Part-3-Tree\"></a></h3><p>Recursive Description: A tree has a root and a list of branchesEach branch is a treeA tree with zero branches is called a leaf.</p>\n<p>Relative Description: Each location in a tree is called a nodeEach node has a label valueOne node can be the parent/child of another.</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/13/fDJtsRH6xkdKNCG.png\" alt=\"11\" data-zoomable></p></div>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># Use the recursive description</span>\n<span class=\"token comment\" spellcheck=\"true\"># We can also use the class to define the tree and its related attributes and methods.</span>\n<span class=\"token comment\" spellcheck=\"true\"># Constructor</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tree</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">,</span> branches<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> branch <span class=\"token keyword\">in</span> branches<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> is_tree<span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>label<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">(</span>branches<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># Selectors</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">label</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">branches</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_tree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> type<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> list <span class=\"token operator\">or</span> len<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">for</span> branch <span class=\"token keyword\">in</span> branches<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> is_tree<span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_leaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">not</span> branches<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tree<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tree<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># [3, [1], [2, [1], [1]]]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># Tree processing</span>\n<span class=\"token comment\" spellcheck=\"true\"># conut the nodes in a Tree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">count_nodes</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> is_leaf<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>count_nodes<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> branches<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># count the leaves</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">count_leaves</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> is_leaf<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>label<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\"># leaves = [count_leaves(b) for b in branches(tree)] #[[1],[[1],[1]]]</span>\n    leaves <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> branches<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        leaves <span class=\"token operator\">+=</span> count_leaves<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># [1,1,1]</span>\n    <span class=\"token keyword\">return</span> leaves\n\n<span class=\"token comment\" spellcheck=\"true\"># print the tree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_tree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span>indent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token operator\">*</span>indent<span class=\"token punctuation\">,</span>label<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> branches<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            print_tree<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>indent<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># create a tree from an exsisted tree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square_tree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> is_leaf<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> brannches<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        lst <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>suqare_tree<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>lst<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># prune the tree </span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">prune</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> label<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> null\n    branches<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> branches<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> label<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> x <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> branchces<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        prune<span class=\"token punctuation\">(</span> b<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"Part-4-Others\">Part.4 Others<a href=\"post/20200425-Data-Structure#Part-4-Others\"></a></h3><h4 id=\"Ⅰ-Union-Find\">Ⅰ.  Union-Find<a href=\"post/20200425-Data-Structure#Ⅰ-Union-Find\"></a></h4><p>A  disjoint-set data structure is a data structure that keeps track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets. </p>\n<p>A  union-find algorithm is an algorithm that performs two useful operations on such a data structure:<br>· Find: Determine which subset a particular element is in. Used to check if two elements are in the same subset.<br>· Union: Join two subsets into a single subset.</p>\n<h5 id=\"1）Quik-Find-eager-approach\">1）Quik-Find (eager approach)<a href=\"post/20200425-Data-Structure#1）Quik-Find-eager-approach\"></a></h5><p>Data structure: Integer array id[] of length N<br>Interpretation: <em>p</em> and <em>q</em> are connected iff they have the same id.<img src=\"https://i.loli.net/2020/09/25/4fotqNvk6Klr8R9.png\" alt=\"1\" style=\"zoom:50%;\">     <img src=\"https://i.loli.net/2020/09/25/HDLj7Pg83npwJVG.png\" alt=\"2\" style=\"zoom: 33%;\"></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickFind</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">QuickFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    id  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">connected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> id<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//change all entries whose id equals id[p] to id[q].</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> pid <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> qid <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>id<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pid<span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> qid<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"2-Quik-Union-lazy-approach\">2)  Quik-Union (lazy approach)<a href=\"post/20200425-Data-Structure#2-Quik-Union-lazy-approach\"></a></h5><p>Data structure: Integer array id[] of length N<br>Interpretation: id[i] is the parent of i.</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/25/CxwA365cELkj9pN.png\" alt=\"3\" style=\"zoom:50%;\" data-zoomable>        <img src=\"https://i.loli.net/2020/09/25/zYEd4WNAnvfsIyc.png\" alt=\"4\" style=\"zoom:33%;\" data-zoomable></p></div>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickUnion</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">QuickUnion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        id  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span>id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">connected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// set the id of p's root to the id of q's root.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> pr <span class=\"token operator\">=</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> qr <span class=\"token operator\">=</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        id<span class=\"token punctuation\">[</span>pr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> qr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"3-Improvement-Weighed-quick-union\">3)  Improvement: Weighed quick union<a href=\"post/20200425-Data-Structure#3-Improvement-Weighed-quick-union\"></a></h5><p>In order to avoid tall trees, we can keep track of the <em>size</em> of each tree and balance by linking root of smaller tree to root of larger tree.</p>\n<p>Data structure: Integer array id[] of length N and extra helper array size[].</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2020/09/25/n2XLPSoFVrMQwq7.png\" alt=\"6\" style=\"zoom:50%;\" data-zoomable>          <img src=\"https://i.loli.net/2020/09/25/t8GTg5mU2w6oIYA.png\" alt=\"5\" style=\"zoom: 25%;\" data-zoomable></p></div>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// Only need to change the union method</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> pr <span class=\"token operator\">=</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> qr <span class=\"token operator\">=</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pr <span class=\"token operator\">==</span> qr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">[</span>pr<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">[</span>qr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">[</span>pr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> qr<span class=\"token punctuation\">;</span>\n            size<span class=\"token punctuation\">[</span>qr<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">[</span>pr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">[</span>qr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">;</span>\n            size<span class=\"token punctuation\">[</span>pr<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">[</span>qr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>We can also link the root based on the rank(or height). But tracking the size is better.</p>\n<img src=\"https://i.loli.net/2020/09/25/DgFo2cv6utdXqMO.jpg\" alt=\"12\" style=\"zoom: 25%;\">\n\n\n\n<h5 id=\"4-Improvement-path-compression\">4) Improvement: path compression<a href=\"post/20200425-Data-Structure#4-Improvement-path-compression\"></a></h5><p>In order to reduce the height of the trees, we can update the parent of the node to the root we found.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// Only need to change the root method.</span>\n<span class=\"token comment\" spellcheck=\"true\">//add second loop to root() to set the id[] of each examined node to the root.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">!=</span>id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span> id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n        p <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Make every other node in path point to its grandparent</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span>id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        p <span class=\"token operator\">=</span> id<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"5-Analysis-of-running-time\">5) Analysis of running time:<a href=\"post/20200425-Data-Structure#5-Analysis-of-running-time\"></a></h5><p>(lg* : times you take logN to get one)</p>\n<img src=\"https://i.loli.net/2020/09/25/L6xFqZDORv8lkrP.png\" alt=\"122\" style=\"zoom:50%;\">\n\n<h5 id=\"6-Union-Find-Application\">6) Union Find Application<a href=\"post/20200425-Data-Structure#6-Union-Find-Application\"></a></h5><p>· Percolation.<br>· Games (Go, Hex).<br>· Dynamic connectivity.<br>· Least common ancestor.<br>· Equivalence of finite state automata.<br>· Hinley-Milner polymorphic type inference.<br>· Kruskal’s minimum spanning tree algorithm.<br>· Compiling equivalence statements in Fortran.<br>· Morphological attribute openings and closings.<br>· Matlab’s bwlabel() function in image processing.</p>\n<h3 id=\"Bag\">Bag<a href=\"post/20200425-Data-Structure#Bag\"></a></h3><h3 id=\"Union-find\">Union-find<a href=\"post/20200425-Data-Structure#Union-find\"></a></h3><h3 id=\"Priority-queue\">Priority queue<a href=\"post/20200425-Data-Structure#Priority-queue\"></a></h3>","prev":{"title":"Basis & Regression & Classification","slug":"20200501-Machine-Learning-Basis"},"next":{"title":"Searching and Sorting","slug":"20200102-Searching-and-Sorting"},"link":"https://oreodu.github.io/post/20200425-Data-Structure/","toc":[{"title":"Data Structure","id":"Data-Structure","index":"1","children":[{"title":"Overview","id":"Overview","index":"1.1"},{"title":"Part.3 Tree","id":"Part-3-Tree","index":"1.2"},{"title":"Part.4 Others","id":"Part-4-Others","index":"1.3"},{"title":"Priority queue","id":"Priority-queue","index":"1.4"}]}],"reward":true,"copyright":{"author":null,"link":"<a href=\"https://oreodu.github.io/post/20200425-Data-Structure/\" title=\"Data Structure\">https://oreodu.github.io/post/20200425-Data-Structure/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}