<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm Basics</title>
    <url>/2019/20191013-Algorithm-Basics/</url>
    <content><![CDATA[<h2 id="algorithm-basics">Algorithm Basics<a title="#algorithm-basics" href="#algorithm-basics"></a></h2>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>
· Wikipedia</p>
<h3 id="part.1-what-is-algorithm?">Part.1 What is Algorithm?<a title="#part.1-what-is-algorithm?" href="#part.1-what-is-algorithm?"></a></h3>
<p>The program is designed to solve certain problems and it mainly contains algorithms and data structures.</p>
<blockquote>
<p>An algorithm is a sequence of instructions. (from <i>Algorithm</i> Wikipedia)</p>
</blockquote>
<p>As usual, the algorithm use control structures (sequential, conditional, recurrent) and operators to make the instructions. A effective algorithms must have several characteristics as follows:<br>
<strong>1.Correctness</strong>: For each legal input, the algorithms must produce the expected output after a few precise and feasible instructions. (End within finite time.)<br>
<strong>2.Robustness</strong>: The algorithms must can apply in all possible circumstances that could arise and have the ability of tolerating perturbations and unexcepted exceptions.<br>
<strong>3.High efficiency and low storage requirement</strong></p>
<h3 id="part.2-how-to-design-a-proper-algorithm?">Part.2 How to design a proper algorithm?<a title="#part.2-how-to-design-a-proper-algorithm?" href="#part.2-how-to-design-a-proper-algorithm?"></a></h3>
<p>Typical steps in the development of algorithms:<br>
1.Problem definition<br>
2.Development of a model<br>
3.Specification of the algorithm<br>
<strong>4</strong>.Designing an algorithm<br>
<strong>5</strong>.Checking the correctness of the algorithm<br>
<strong>6</strong>.Analysis of algorithm<br>
<strong>7</strong>.Implementation of algorithm<br>
8.Program testing<br>
9.Documentation preparation<br>
(from <i>Algorithm</i> Wikipedia)</p>
<p>When we finished design the algorithm, we should keep asking ourselves three questions as follows in order to make it more efficient.</p>
<blockquote>
<p><a href="http://1.Is">1.Is</a> it correct (produce the expected output) ?  (<strong>Check</strong>)<br>
2.How much time and storage does it take?  (<strong>Analyze</strong>)<br>
3.Can we do better (higher efficiency and lower storage) ?  (<strong>optimize</strong>)<br>
(from <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani)</p>
</blockquote>
<h3 id="part.3-classification">Part.3 Classification<a title="#part.3-classification" href="#part.3-classification"></a></h3>
<p>There are various ways to classify algorithms.</p>
<p><strong>By design paradigm</strong>:<br>
· Brute-force or exhaustive search (try every possible solution)<br>
· Search and enumeration<br>
· Back tracking<br>
· Divide and conquer (repeatedly reduces an instance of a problem to one or more smaller instances  until the instances are small enough to solve easily)<br>
· Randomized algorithm (make some choices randomly (or pseudo-randomly))<br>
· Reduction of complexity (transform the difficult problem into a better-known problem that we have asymptotically optimal algorithms.)</p>
<p><strong>By implementation</strong>:<br>
· Recursion ( invokes itself repeatedly)<br>
· Logical (logic + control)<br>
· Serial (execute one algorithm at a time), parallel or distributed (several processors work on a problem at the same time)<br>
· Deterministic (exact decision at every step of the algorithm) or non-deterministic (guess through the use of heuristics)<br>
· Exact (reach an exact solution) or approximate (closer to the true solution)<br>
· Quantum algorithm</p>
<p><strong>Optimization problems</strong><br>
· Linear programming (the constraints of the problem can be used directly in producing the optimal solutions.)<br>
· Dynamic programming (the optimal solution to a problem can be constructed from optimal solutions to subproblems and overlapping subproblems)<br>
· The greedy method (start with some given or modified solutions)<br>
· The heuristic method (find a solution close to the optimal solution)</p>
<h3 id="part.4-how-to-analyze-an-algorithm?">Part.4 How to analyze an algorithm?<a title="#part.4-how-to-analyze-an-algorithm?" href="#part.4-how-to-analyze-an-algorithm?"></a></h3>
<p>It is frequently important to know how much of a particular resource (such as <strong>time or storage</strong>) is theoretically required for a given algorithm.  (from <i>Algorithm</i> Wikipedia). By analyzing the time complexity and space complexity we are able to improve the algorithm in a clearer direction.</p>
<h4 id="ⅰ.-time-complexity">Ⅰ. Time complexity<a title="#ⅰ.-time-complexity" href="#ⅰ.-time-complexity"></a></h4>
<p>In theory, we quantify the time through counting the number of elementary operations performed by the algorithm and multiply it by the time spent on each operation, where an elementary operation takes a fixed amount of time. Thus the amount of time taken by the same algorithm differ by a constant factor which is depended on the performance of different computers.</p>
<p>In most cases, in order to analyze the algorithms in a more efficient way we should simplify the way we estimate the time complexity. Because only the number of the operations depends on algorithms and input data, so we can ignore the constant time spent on each elementary operation and express the running time by counting the number of the operations, as a function of the size of the input. Further, as the input size goes to infinity, we can use the basic operation as a proxy for the running time and ignore the lower order terms.</p>
<p>So it is commonly expressed using the <strong>asymptotic notation</strong>, which lets us only focus on the big pictures. Asymptotic notation characterizes functions according to their growth rates: different functions with the same growth rate may be represented using the same notation.</p>
<p>Since an algorithm’s performance time may vary with different inputs of  the same size, we commonly use the <strong>worst-case time complexity</strong>, denoted as $T(n)$, which is defined as the maximum amount of time taken on any input of size n.</p>
<p><strong>Asymptotic notation</strong>:</p>
<p>Let <i>f(n)</i> and <i>g(n)</i> be functions from positive integers to positive reals and think of them as the running time of two algorithms on inputs of size n.</p>
<p>1.$ f = O(g) $, if there is a constant $ c&gt;0 $ and $ n_0 $, such that $ |f(n)| \leq c · g(n) $ for all $n&gt;n_0$<br>
Big O notation provides an upper bound on the growth rate of the function.  <i>f</i> grows no faster than <i>g</i>.</p>
<p>2.$ g = Ω(f) $ ( <i>f</i> grows no faster than <i>g</i> ) if there is a constant $c &gt; 0$, such that $g(n) \geq c · f(n)$</p>
<p>3.$f = Θ(g)$( <i>g</i> grows the same as <i>f</i> ) if there is a constant $c &gt; 0$, such that $g(n) = c · f(n)$</p>
<p>If the function <i>f</i> can be written as a finite sum of other functions, then the fastest growing one determines the order of $f(n)$. Here are some rules that can simplify <i>f</i> to <i>O(g)</i> by omitting coefficients and lower order terms.</p>
<p>· Multiplicative constants can be omitted.<br>
· log a dominates log b, $n^a$ dominates $n^b$ and $a^n$ dominates $b^n$ if $a&gt;b$<br>
· Any exponential dominates any polynomial<br>
· Any polynomial dominates any logarithm</p>
<p>· $f_1= O(g_1)$ and $f_2 = O(g_2)$, $f_1· f_2 = O(g_1· g_2))$<br>
· $f_1 = O(g_1)$ and $f_2 = O(g_2)$, $f_1 + f_2 = O(max(g_1, g_2))$</p>
<p>· Orders of common functions:<br>
$O(1)$, $O(\log(\log(n)))$, $O(\log(n))$, $O((\log(n))^c)  (c&gt;1)$,<br>
$O(n^c)  (0&lt;c&lt;1)$, $O(n)$, $O(n\log (n)) = O(\log(n!))$,<br>
$O(n^2)$, $O(n^c)$, $O(c^n)  (c&gt;1)$, $O(n!)$</p>
<img src="https://i.loli.net/2020/09/29/IUthjneKSuP4wWX.png" alt="123" style="zoom:50%;">
<p>Upper bound: a specific algorithms.<br>
Lower bound: proof that no algorithm can do better.</p>
<p>Optimal algorithm: Lower bound equals upper bound to within a constant factor.</p>
<p>When we design an algorithm,we usually focus on lower the upper bound(discover a new algorithm) and raise the lower bound.</p>
<h4 id="ⅱ.-space-complexity">Ⅱ. Space complexity<a title="#ⅱ.-space-complexity" href="#ⅱ.-space-complexity"></a></h4>
<p>The space complexity of an algorithm is the amount of the memory required by an algorithm to execute a program and produce output as a function of the size of the input. Similar to time complexity, Space complexity is often expressed asymptotically. such as $O(1)$,$O(n)$, $O(n\log(n))$, $O(n^\alpha)$, $O(2^n)$, etc., where n is the input size in units of bits needed to represent the input.</p>
<h3 id="part.5-computational-theory">Part.5 Computational Theory<a title="#part.5-computational-theory" href="#part.5-computational-theory"></a></h3>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Sorting</title>
    <url>/2020/20200102-Sorting/</url>
    <content><![CDATA[<h1 id="sorting">Sorting<a title="#sorting" href="#sorting"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>
· Wikipedia<br>
· You can see the implementations of those sort algorithms <a href="https://github.com/OreoDu/Implementations/tree/main/src/Algorithms/Sort" target="_blank">here</a>.</p>
<p>Many sorting algorithms to choose from:</p>
<p>Internal sorts.<br>
・<strong>Insertion sort</strong>, <strong>selection sort</strong>,  <strong>bubble sort</strong>,  shaker sort.<br>
・<strong>Quick sort</strong>,  <strong>merge sort</strong>,  heap sort,  samplesort, <strong>shellsort</strong>.<br>
・Solitaire sort, red-black sort, splaysort, Yaroslavskiy sort, psort, …</p>
<p>External sorts.<br>
Poly-phase mergesort, cascade-merge, oscillating sort.</p>
<p>String/radix sorts.<br>
Distribution, MSD, LSD, 3-way string quicksort.</p>
<p>Parallel sorts.<br>
・Bitonic sort, Batcher even-odd sort.<br>
・Smooth sort, cube sort, column sort.<br>
・GPUsort.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>Name</th>
<th>Worst</th>
<th>Average</th>
<th>Best</th>
<th>In-place</th>
<th>Stability</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bubble Sort</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.064ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 888.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
</g>
</svg></td>
<td>In-place</td>
<td>Stable</td>
</tr>
<tr>
<td>Selection Sort</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td>In-place</td>
<td>No</td>
</tr>
<tr>
<td>Insertion Sort</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{4} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-34" x="493" y="-698"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.064ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 888.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
</g>
</svg></td>
<td>In-place</td>
<td>Stable</td>
</tr>
<tr>
<td>Shell Sort</td>
<td>depend on the increment sequence</td>
<td>-</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.064ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 888.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
</g>
</svg></td>
<td>In-place</td>
<td>No</td>
</tr>
<tr>
<td>Merge Sort</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.937ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2556 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N lg N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1667" y="0"/>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.937ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2556 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N lg N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1667" y="0"/>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.937ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2556 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N lg N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1667" y="0"/>
</g>
</svg></td>
<td>Out-place</td>
<td>Stable</td>
</tr>
<tr>
<td>Quick Sort</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.099ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3056.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> 2N lg N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1389" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1687" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2168" y="0"/>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.937ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2556 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N lg N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1667" y="0"/>
</g>
</svg></td>
<td>In-place</td>
<td>No</td>
</tr>
<tr>
<td>3-way quick</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.013ex" height="5.676ex" style="vertical-align: -1.838ex;" viewbox="0 -1652.5 1728 2443.8" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N^2}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1487" height="60" x="0" y="220"/>
<g transform="translate(60,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="513"/>
</g>
 <use xlink:href="#E1-MJMAIN-32" x="493" y="-687"/>
</g>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.099ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3056.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> 2N lg N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1389" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1687" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2168" y="0"/>
</g>
</svg></td>
<td>N</td>
<td>In-place</td>
<td>No</td>
</tr>
<tr>
<td>Heap Sort</td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.099ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3056.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2NlgN</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1389" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1687" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2168" y="0"/>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.099ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3056.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2NlgN</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1389" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1687" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2168" y="0"/>
</g>
</svg></td>
<td><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.937ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2556 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">NlgN</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1667" y="0"/>
</g>
</svg></td>
<td>In-place</td>
<td>No</td>
</tr>
</tbody>
</table></div></div><p>Stability: long-distance exchange might move an item past some equal item.</p>
<h2 id="part.1-elementary-sort">Part.1 Elementary Sort<a title="#part.1-elementary-sort" href="#part.1-elementary-sort"></a></h2>
<h3 id="ⅰ.--selection-sort-&amp;--bubble-sort">Ⅰ.  Selection Sort &amp;  Bubble Sort<a title="#ⅰ.--selection-sort-&amp;--bubble-sort" href="#ⅰ.--selection-sort-&amp;--bubble-sort"></a></h3>
<p>Unlike the basic sort method inserting elements into the sorted subarray, we can select the <code>i-th</code> largest element  and put the value into the <code>a[i]</code>. We can select the element from the front portion and put it in the back or  we can select the element from the back portion and put it in the front.</p>
<p>There are two ways to select element. The first method is bubble sort. It operates by repeatedly swapping the adjacent elements if they are in the wrong order which result in that the <code>i-th</code> largest element is moved to <code>a[i]</code>.</p>
<img src="https://i.loli.net/2020/10/17/DjUukWQXEGFqBln.png" alt="22" style="zoom:20%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n-i-<span class="number">1</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>]) exch(a, j, j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The second method called selection sort. It sorts an array by repeatedly finding the index <code>min</code> of smallest remaining element from the unsorted part and swap <code>a[i]</code> and <code>a[min]</code>.</p>
<img src="https://i.loli.net/2020/10/17/29Xv3rjCIUksJxD.jpg" alt="22" style="zoom:25%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[min]) min = j;</span><br><span class="line">        exch(a, i, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Selection sort is more efficient and faster than the bubble sort because of less exchanges.</p>
<h3 id="ⅱ.--insertion-sort">Ⅱ.  Insertion Sort<a title="#ⅱ.--insertion-sort" href="#ⅱ.--insertion-sort"></a></h3>
<p>Find the proper position for <code>a[i]</code> in <code>0-th</code> ~  <code>(i-1)-th</code> sorted subarray by swapping <code>a[i]</code> with each larger element to its left.</p>
<img src="https://i.loli.net/2020/10/17/WdkRHFXYelstmpq.png" alt="11" style="zoom: 20%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j-<span class="number">1</span>]) exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅲ.-shell-sort">Ⅲ. Shell Sort<a title="#ⅲ.-shell-sort" href="#ⅲ.-shell-sort"></a></h3>
<p>Shell Sort is mainly a variation of Insertion Sort. In insertion sort, we move elements only one position ahead. The idea of Shell Sort is to allow exchange of far items.</p>
<p>In Shell Sort, we make the array h-sorted for a large value of h. We keep reducing the value of h until it becomes 1. An array is said to be h-sorted if all sub-lists of every <code>h-th</code> element is sorted.</p>
<p>After the previous h-sort, the array is partially sorted so the insertion will be fast (a g-sorted array remains g-sorted after h-sorting. See  the proof below or <a href="https://cs.stackexchange.com/questions/47096/why-does-decreasing-the-gap-size-in-shell-sort-never-undo-previous-sorts" target="_blank">here</a>).</p>
<img src="https://i.loli.net/2020/10/18/AzZPorRqkJcVM9p.jpg" alt="11" style="zoom: 30%;">
<p>Increment sequence that we can use:<br>
<strong>Power of two minus one</strong>: 1,3,7,…<br>
<strong>3x+1</strong>: 1,4,13,40,…<br>
<strong>Sedgewick</strong>: 1,5,19,41,109,…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    <span class="comment">// while (h &lt; n/3) h = h*3 + 1;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> h = n/<span class="number">3</span>; h &gt;= <span class="number">1</span>; h = h/<span class="number">3</span> ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; a[j] &lt; a[j-h]; j -= h)</span><br><span class="line">                exch(a,j,j-h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.2-advanced-sort">Part.2 Advanced Sort<a title="#part.2-advanced-sort" href="#part.2-advanced-sort"></a></h2>
<h3 id="ⅰ.-marge-sort">Ⅰ. Marge sort<a title="#ⅰ.-marge-sort" href="#ⅰ.-marge-sort"></a></h3>
<p>Java sort for objects.</p>
<h4 id="basic-idea:">Basic idea:<a title="#basic-idea:" href="#basic-idea:"></a></h4>
<p>divide array into two halves, recursively sort each half and merge two halves.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkyv16hv4nj30tw0eqgq1.jpg" alt="Screen Shot 2020-11-23 at 09.42.02" style="zoom:50%;">
<h4 id="running-time">Running Time<a title="#running-time" href="#running-time"></a></h4>
<p>Proposition: Merge sort uses at most <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.937ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2556 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">NlgN</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1667" y="0"/>
</g>
</svg> compares and <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.099ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3056.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">6NlgN</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-36" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1389" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1687" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2168" y="0"/>
</g>
</svg> array accesses to sort any array of size N.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkyv1su20aj30lg054wf0.jpg" alt="Screen Shot 2020-11-23 at 09.42.40" style="zoom:50%;">
<img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-23 at 09.43.16.png" alt="Screen Shot 2020-11-23 at 09.43.16" style="zoom:50%;">
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="21.595ex" height="5.176ex" style="vertical-align: -1.838ex;" viewbox="0 -1437.2 9298 2228.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> D(N) = 2D(\frac{N}{2}) + N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="828" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1218" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="2106" y="0"/>
 <use xlink:href="#E1-MJMAIN-3D" x="2773" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="3830" y="0"/>
 <use xlink:href="#E1-MJMATHI-44" x="4330" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="5159" y="0"/>
<g transform="translate(5548,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="1008" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMATHI-4E" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-32" x="254" y="-687"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="6797" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="7408" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="8409" y="0"/>
</g>
</svg></p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="70.36ex" height="8.176ex" style="vertical-align: -3.505ex;" viewbox="0 -2011.3 30293.7 3520.2" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{D(N)}{N} = \frac{D(\frac{N}{2})}{\frac{N}{2}} + 1 = \frac{D(\frac{N}{4})}{\frac{N}{4}} + 1 + 1= ... = \frac{D(\frac{N}{N})}{\frac{N}{N}} + 1...+ 1 = lg N</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="2616" height="60" x="0" y="220"/>
<g transform="translate(60,770)">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="828" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1218" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="2106" y="0"/>
</g>
 <use xlink:href="#E1-MJMATHI-4E" x="863" y="-704"/>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="3133" y="0"/>
<g transform="translate(3912,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="2715" height="60" x="0" y="220"/>
<g transform="translate(60,936)">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="828" y="0"/>
<g transform="translate(1218,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="748" height="60" x="0" y="220"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="629"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="278" y="-589"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="2206" y="0"/>
</g>
<g transform="translate(863,-949)">
<g transform="translate(120,0)">
<rect stroke="none" width="748" height="60" x="0" y="220"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="629"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="278" y="-589"/>
</g>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="7368" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="8368" y="0"/>
 <use xlink:href="#E1-MJMAIN-3D" x="9147" y="0"/>
<g transform="translate(9925,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="2715" height="60" x="0" y="220"/>
<g transform="translate(60,944)">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="828" y="0"/>
<g transform="translate(1218,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="748" height="60" x="0" y="220"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="629"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-34" x="278" y="-600"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="2206" y="0"/>
</g>
<g transform="translate(863,-949)">
<g transform="translate(120,0)">
<rect stroke="none" width="748" height="60" x="0" y="220"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="629"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-34" x="278" y="-600"/>
</g>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="13381" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="14382" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="15104" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="16105" y="0"/>
 <use xlink:href="#E1-MJMAIN-3D" x="16883" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="17662" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="18107" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="18552" y="0"/>
 <use xlink:href="#E1-MJMAIN-3D" x="18997" y="0"/>
<g transform="translate(19776,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="2715" height="60" x="0" y="220"/>
<g transform="translate(60,948)">
 <use xlink:href="#E1-MJMATHI-44" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="828" y="0"/>
<g transform="translate(1218,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="748" height="60" x="0" y="220"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="629"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="-606"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="2206" y="0"/>
</g>
<g transform="translate(863,-949)">
<g transform="translate(120,0)">
<rect stroke="none" width="748" height="60" x="0" y="220"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="629"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="84" y="-606"/>
</g>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="23232" y="0"/>
<g transform="translate(24232,0)">
 <use xlink:href="#E1-MJMAIN-31"/>
 <use xlink:href="#E1-MJMAIN-2E" x="500" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="779" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="1057" y="0"/>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="25790" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="26791" y="0"/>
 <use xlink:href="#E1-MJMAIN-3D" x="27569" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="28626" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="28924" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="29405" y="0"/>
</g>
</svg></p>
<h4 id="memory">Memory<a title="#memory" href="#memory"></a></h4>
<p>Proposition: Merge sort uses extra space proportional to N.</p>
<p>A sorting algorithm is in-place if it uses &lt;= <em>clogN</em> extra memory. (Insertion sort, selection sort, shell sort) ---- In-place merge sort.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// divide and conquer prototype</span></span><br><span class="line"><span class="comment">// Solve a problem by bividing it into two halves, sovling the two halves, </span></span><br><span class="line"><span class="comment">// and then putting the solutions together to get the appropriate answer.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, mid)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, mid + <span class="number">1</span>, hi)</span></span>;</span><br><span class="line"> 	 <span class="comment">// copy</span></span><br><span class="line"> 	 <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= hi; k++) &#123;</span><br><span class="line">  	  aux[k] = a[k];</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="comment">// merge</span></span><br><span class="line"> 	 <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line"> 	 <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">  	  <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class="line">  	  <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];</span><br><span class="line">  	  <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) a[k] = aux[j++];</span><br><span class="line">  	  <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">  	&#125;</span><br><span class="line"> 	 <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a,lo,hi)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    sort(a, aux, lo, mid);</span><br><span class="line">    sort(a, aux, mid + <span class="number">1</span>, hi);</span><br><span class="line">    merge(a, aux, lo, mid, hi);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    Comparable[] aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">    sort(a, aux, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="improvement">Improvement<a title="#improvement" href="#improvement"></a></h4>
<ol>
<li>Because merge sort has too much overhead for tiny subarrays so we use insertion sort for small subarrays. Cutoff to insertion sort for ≈ 7items.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (hi &lt;= lo + CUTOFF -<span class="number">1</span>) &#123;</span><br><span class="line">    Insertion.sort(a, lo, hi);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">  sort(a, aux, lo, mid);</span><br><span class="line">  sort(a, aux, mid + <span class="number">1</span>, hi);</span><br><span class="line">  merge(a, aux, lo, mid, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>If the biggest item in the first half &lt;= smallest item in the second half, we can just stop and move forward.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (hi &lt;= lo + CUTOFF -<span class="number">1</span>) &#123;</span><br><span class="line">    Insertion.sort(a, lo, hi);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">  sort(a, aux, lo, mid);</span><br><span class="line">  sort(a, aux, mid + <span class="number">1</span>, hi);</span><br><span class="line">  <span class="keyword">if</span>(!less(a[mid + <span class="number">1</span>],a[mid])) <span class="keyword">return</span>;</span><br><span class="line">  merge(a, aux, lo, mid, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>In the previous code, we have to copy the merge part in the a[] into aux[] and then merge (copy the merge result from the aux[] to a[]). So in order to save time and eliminate the copy, we can switch the role of the input and auxiliary array in each recursive call.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, mid)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, mid + <span class="number">1</span>, hi)</span></span>;</span><br><span class="line">    </span><br><span class="line"> 	 	<span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line"> 	 	<span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">  	  	<span class="keyword">if</span> (i &gt; mid) aux[k] = a[j++];</span><br><span class="line">  	  	<span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) aux[k] = a[i++];</span><br><span class="line">  	  	<span class="keyword">else</span> <span class="keyword">if</span> (less(a[j], a[i])) aux[k] = a[j++];</span><br><span class="line">  	 	 	<span class="keyword">else</span> aux[k] = a[i++];</span><br><span class="line">  		&#125;</span><br><span class="line"> 	 	<span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a,lo,hi)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">  	<span class="keyword">if</span> (hi &lt;= lo + CUTOFF -<span class="number">1</span>) &#123;</span><br><span class="line">    	Insertion.sort(a, lo, hi);</span><br><span class="line">   	 	<span class="keyword">return</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line"> 		sort(aux, a, lo, mid);</span><br><span class="line">  	sort(aux, a, mid + <span class="number">1</span>, hi);</span><br><span class="line">  	<span class="keyword">if</span>(!less(a[mid + <span class="number">1</span>],a[mid])) <span class="keyword">return</span>;</span><br><span class="line">  	merge(a, aux, lo, mid, hi);</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">      Comparable[] aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) aux[i] = a[i];</span><br><span class="line">    	sort(a, aux, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Bottom-up merge sort</li>
</ol>
<p>Basic idea: pass through array and merge the subarrays of size 2, 4, 8, 16 …</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkz03bkbrcj30ri0fewid.jpg" alt="Screen Shot 2020-11-23 at 12.36.57" style="zoom:50%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBU</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, mid)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, mid + <span class="number">1</span>, hi)</span></span>;</span><br><span class="line"> 	 <span class="comment">// copy</span></span><br><span class="line"> 	 <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= hi; k++) &#123;</span><br><span class="line">  	  aux[k] = a[k];</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="comment">// merge</span></span><br><span class="line"> 	 <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line"> 	 <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">  	  <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</span><br><span class="line">  	  <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];</span><br><span class="line">  	  <span class="keyword">else</span> <span class="keyword">if</span> (less(a[j], a[i])) a[k] = aux[j++];</span><br><span class="line">  	  <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">  	&#125;</span><br><span class="line"> 	 <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a,lo,hi)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line"> 		Comparable[] aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line"> 		<span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz = sz + sz)</span><br><span class="line"> 			<span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N - sz; lo += sz + sz)</span><br><span class="line">        merge(a, aux, lo, lo + sz - <span class="number">1</span>, Math.min(lo + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅱ.quick-sort">Ⅱ.Quick Sort<a title="#ⅱ.quick-sort" href="#ⅱ.quick-sort"></a></h3>
<p>Java sort for primitive types.</p>
<h4 id="basic-idea:-1">Basic idea:<a title="#basic-idea:-1" href="#basic-idea:-1"></a></h4>
<p>・Shuffle the array.</p>
<p>・Partition so that, for some k . Entry k is in place, no larger element to the left of k, no smaller entry to the right of k.</p>
<p>​    Repeat until i and j pointers cross.<br>
・Scan i from left to right so long as (a[i] &lt; a[lo]).<br>
・Scan j from right to left so long as (a[j] &gt; a[lo]).<br>
・Exchange a[i] with a[j]. (a[i] &gt;=  a[lo] and a[j] &lt;= a[lo])<br>
​    When pointers cross.<br>
・Exchange a[j] with a[lo].</p>
<p>・Sort each piece recursively.</p>
<img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-24 at 13.06.23.png" alt="Screen Shot 2020-11-24 at 13.06.23" style="zoom: 33%;">
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gl03jjxlnvj3154050jrz.jpg" alt="Screen Shot 2020-11-24 at 11.21.56" style="zoom:67%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = hi + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (less(a[++i], a[lo])) <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">while</span> (less(a[lo], a[--j])) <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">      exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    exch(a, lo, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// shuffling is needed for performance guarantee</span></span><br><span class="line">    StdRandom.shuffle(a);</span><br><span class="line">    sort(a, <span class="number">0</span> , a.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">    sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="average-case-analysis">Average-case analysis<a title="#average-case-analysis" href="#average-case-analysis"></a></h4>
<p>Proposition. The average number of compares <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="3.353ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 1443.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> C_N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
</g>
</svg> to quick sort an array of N distinct keys is ~ <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.378ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 3176.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> 2N lnN</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1389" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="1687" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2288" y="0"/>
</g>
</svg> (and the number of exchanges is ~ ⅓ <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.215ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2676 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N ln N</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1787" y="0"/>
</g>
</svg>)</p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="67.693ex" height="5.343ex" style="vertical-align: -1.838ex;" viewbox="0 -1508.9 29145.7 2300.3" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> C_N = (N + 1) + (\frac{C_0 + C_{N-1}}{N}) + (\frac{C_1 + C_{N-2}}{N}) + ... + (\frac{C_{N-1} + C_{0}}{N})</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
 <use xlink:href="#E1-MJMAIN-3D" x="1721" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="2777" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="3167" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="4278" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="5278" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="5779" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="6390" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="7391" y="0"/>
<g transform="translate(7781,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="4860" height="60" x="0" y="220"/>
<g transform="translate(60,728)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-30" x="1011" y="-213"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1391" y="0"/>
<g transform="translate(2392,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMATHI-4E" x="1986" y="-704"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="12881" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="13493" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="14494" y="0"/>
<g transform="translate(14883,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="4860" height="60" x="0" y="220"/>
<g transform="translate(60,728)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1011" y="-213"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1391" y="0"/>
<g transform="translate(2392,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1667" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMATHI-4E" x="1986" y="-704"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="19984" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="20373" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="21152" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="21597" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="22042" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="22487" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="23266" y="0"/>
<g transform="translate(23655,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="4860" height="60" x="0" y="220"/>
<g transform="translate(60,728)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="2570" y="0"/>
<g transform="translate(3571,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-30" x="1011" y="-213"/>
</g>
</g>
 <use xlink:href="#E1-MJMATHI-4E" x="1986" y="-704"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="28756" y="0"/>
</g>
</svg></p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.9ex" height="5.176ex" style="vertical-align: -1.838ex;" viewbox="0 -1437.2 1248.5 2228.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{1}{N} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1008" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="254" y="676"/>
 <use xlink:href="#E1-MJMATHI-4E" x="60" y="-704"/>
</g>
</g>
</svg> is the partitioning probability. There are <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.066ex" height="2.343ex" style="vertical-align: -0.505ex;" viewbox="0 -791.3 2611.9 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N + 1 </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2111" y="0"/>
</g>
</svg> compares during the partition. <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="20.15ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 8675.6 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> C_0 = C_1 = 0, N&gt;1 </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-30" x="1011" y="-213"/>
 <use xlink:href="#E1-MJMAIN-3D" x="1447" y="0"/>
<g transform="translate(2503,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1011" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="3950" y="0"/>
 <use xlink:href="#E1-MJMAIN-30" x="5006" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="5507" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="5952" y="0"/>
 <use xlink:href="#E1-MJMAIN-3E" x="7118" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="8175" y="0"/>
</g>
</svg></p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="44.711ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 19250.6 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> NC_N = N(N+1) + 2(C_0 + C_1 +...+ C_{N-1}) </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
<g transform="translate(888,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="2610" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="3666" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="4554" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="4944" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="6055" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="7055" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="7556" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="8167" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="9168" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="9669" y="0"/>
<g transform="translate(10058,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-30" x="1011" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="11450" y="0"/>
<g transform="translate(12451,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1011" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="13620" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="14398" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="14844" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="15289" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="15734" y="0"/>
<g transform="translate(16512,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="18861" y="0"/>
</g>
</svg></p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="52.624ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 22657.5 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> (N-1)C_{N-1} = N(N-1) + 2(C_0 + C_1 +...+ C_{N-2}) </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-28" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="389" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1500" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2500" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="3001" y="0"/>
<g transform="translate(3390,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="6016" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="7073" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="7961" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="8351" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="9461" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="10462" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="10963" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="11574" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="12575" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="13076" y="0"/>
<g transform="translate(13465,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-30" x="1011" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="14857" y="0"/>
<g transform="translate(15857,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1011" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="17027" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="17805" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="18250" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="18696" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="19141" y="0"/>
<g transform="translate(19919,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1667" y="0"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="22267" y="0"/>
</g>
</svg></p>
<p>Subtract the above two equation:</p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="37.368ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 16089 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> NC_N - (N-1)C_{N-1} = 2N + 2C_{N-1} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
<g transform="translate(888,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2212" x="2554" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="3555" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="3944" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="5055" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="6056" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="6556" y="0"/>
<g transform="translate(6946,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="9572" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="10628" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="11128" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="12239" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="13240" y="0"/>
<g transform="translate(13740,0)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
</g>
</g>
</svg></p>
<p>Rearrange terms and divide by <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="9.939ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 4279.4 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N (N + 1)</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1278" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="2388" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="3389" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="3889" y="0"/>
</g>
</svg>:</p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="79.914ex" height="5.509ex" style="vertical-align: -2.005ex;" viewbox="0 -1508.9 34407.3 2372" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{C_N}{N+1} = \frac{C_{N-1}}{N} + \frac{2}{N+1}  = \frac{C_{N-2}}{N-1} + \frac{2}{N} + \frac{2}{N+1} = \frac{2}{3} + \frac{2}{4} + \frac{2}{5} + ... + \frac{2}{N + 1} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/>
<path stroke-width="1" id="E1-MJMAIN-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/>
<path stroke-width="1" id="E1-MJMAIN-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="2731" height="60" x="0" y="220"/>
<g transform="translate(644,676)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
</g>
<g transform="translate(60,-704)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2111" y="0"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="3249" y="0"/>
<g transform="translate(4028,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="2468" height="60" x="0" y="220"/>
<g transform="translate(60,728)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
</g>
 <use xlink:href="#E1-MJMATHI-4E" x="789" y="-704"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="7236" y="0"/>
<g transform="translate(8014,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="2731" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-32" x="1115" y="676"/>
<g transform="translate(60,-704)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2111" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="11486" y="0"/>
<g transform="translate(12265,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="2731" height="60" x="0" y="220"/>
<g transform="translate(191,728)">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
<g transform="translate(715,-150)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2212" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1667" y="0"/>
</g>
</g>
<g transform="translate(60,-704)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2111" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="15737" y="0"/>
<g transform="translate(16515,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="1008" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-32" x="254" y="676"/>
 <use xlink:href="#E1-MJMATHI-4E" x="60" y="-704"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="18208" y="0"/>
<g transform="translate(18987,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="2731" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-32" x="1115" y="676"/>
<g transform="translate(60,-704)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2111" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-3D" x="22459" y="0"/>
<g transform="translate(23237,0)">
<g transform="translate(397,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-32" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-33" x="60" y="-686"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="24598" y="0"/>
<g transform="translate(25376,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-32" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-34" x="60" y="-698"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="26681" y="0"/>
<g transform="translate(27460,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-32" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-35" x="60" y="-687"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="28542" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="29321" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="29766" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="30211" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="30656" y="0"/>
<g transform="translate(31435,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="2731" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-32" x="1115" y="676"/>
<g transform="translate(60,-704)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2111" y="0"/>
</g>
</g>
</g>
</g>
</svg></p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="42.597ex" height="5.343ex" style="vertical-align: -2.005ex;" viewbox="0 -1437.2 18340.1 2300.3" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> C_N = 2(N+1)(\frac{1}{3} + \frac{1}{4} + \frac{1}{5} + ... + \frac{1}{N+1}) </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/>
<path stroke-width="1" id="E1-MJMAIN-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/>
<path stroke-width="1" id="E1-MJMAIN-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
 <use xlink:href="#E1-MJMAIN-3D" x="1721" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="2777" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="3278" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="3667" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="4778" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="5779" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="6279" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="6669" y="0"/>
<g transform="translate(7058,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-33" x="60" y="-686"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="8141" y="0"/>
<g transform="translate(8919,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-34" x="60" y="-698"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="10224" y="0"/>
<g transform="translate(11003,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-35" x="60" y="-687"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="12086" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="12864" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="13309" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="13754" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="14200" y="0"/>
<g transform="translate(14978,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="2731" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="1115" y="676"/>
<g transform="translate(60,-704)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="2111" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="17950" y="0"/>
</g>
</svg></p>
<p>~ <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="11.355ex" height="6.176ex" style="vertical-align: -2.338ex;" viewbox="0 -1652.5 4888.8 2659.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \int^{N+1}_{3}{\frac{1}{x}dx} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJSZ2-222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJSZ2-222B" x="0" y="0"/>
<g transform="translate(1060,1089)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2B" x="888" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1667" y="0"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-33" x="787" y="-1270"/>
<g transform="translate(2860,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="692" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="96" y="676"/>
 <use xlink:href="#E1-MJMATHI-78" x="60" y="-686"/>
</g>
 <use xlink:href="#E1-MJMATHI-64" x="932" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="1456" y="0"/>
</g>
</g>
</svg>   ~   <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="26.359ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 11349 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> 2(N+1)ln N  ≈ 1.39N lg N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMAIN-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/>
<path stroke-width="1" id="E1-MJMAIN-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="890" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="2000" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="3001" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="3501" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3891" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4189" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="4790" y="0"/>
 <use xlink:href="#E1-MJMAIN-2248" x="5956" y="0"/>
<g transform="translate(7012,0)">
 <use xlink:href="#E1-MJMAIN-31"/>
 <use xlink:href="#E1-MJMAIN-2E" x="500" y="0"/>
 <use xlink:href="#E1-MJMAIN-33" x="779" y="0"/>
 <use xlink:href="#E1-MJMAIN-39" x="1279" y="0"/>
</g>
 <use xlink:href="#E1-MJMATHI-4E" x="8793" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="9681" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="9980" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="10460" y="0"/>
</g>
</svg></p>
<h4 id="summary-of-performance-characteristics">Summary of performance characteristics<a title="#summary-of-performance-characteristics" href="#summary-of-performance-characteristics"></a></h4>
<p>Worst case. Number of compares is quadratic. <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="31.377ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 13509.3 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N + (N-1) + (N-2) + ... + 1 </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="2111" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2500" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="3611" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="4612" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="5112" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="5724" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="6725" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="7114" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="8225" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="9226" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="9726" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="10116" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="10894" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="11339" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="11785" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="12230" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="13008" y="0"/>
</g>
</svg> ~ <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.176ex" height="5.176ex" style="vertical-align: -1.838ex;" viewbox="0 -1437.2 2228.5 2228.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{1}{2}N^2 </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-32" x="60" y="-687"/>
</g>
<g transform="translate(860,0)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="583"/>
</g>
</g>
</svg></p>
<p>Average case. Number of compares is ~ 1.39 N lg N. (Faster than merge sort because of less data movement)</p>
<p>Memory. Quicksort is an in-place sorting algorithm<br>
· Partitioning: constant extra space.<br>
· Depth of recursion: logarithmic extra space (with high probability).</p>
<p>Quick sort is not stable.</p>
<h4 id="practical-improvements">Practical improvements<a title="#practical-improvements" href="#practical-improvements"></a></h4>
<ol>
<li>Like merge sort, quick sort also has too much overhead for tiny subarrays so we can cutoff to insertion sort for ≈ 10 items.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hi &lt;= lo + CUTOFF - <span class="number">1</span>) &#123;</span><br><span class="line">    Insertion.sort(a, lo, hi);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">  sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">  sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Median of sample<br>
・Best choice of pivot item = median.<br>
・Estimate true median by taking median of sample(a[lo], a[mid], a[hi]).<br>
・Median of 3 random items.<br>
See more details <a href="https://stackoverflow.com/questions/7559608/median-of-three-values-strategy" target="_blank">here</a>.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">medianOf3</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (less(a[hi],a[lo])) exch(a, lo, hi);</span><br><span class="line">  <span class="keyword">if</span> (less(a[mid],a[lo])) exch(a, mid, lo);</span><br><span class="line">  <span class="keyword">if</span> (less(a[hi],a[mid])) exch(a, mid, hi);</span><br><span class="line">  <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">int</span> m = medianOf3(a, lo, (lo + hi)/<span class="number">2</span>, hi);</span><br><span class="line">   swap(a, lo, m);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">   sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">   sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="quick-select">Quick-Select<a title="#quick-select" href="#quick-select"></a></h4>
<p>Goal. Given an array of N items, find a kth smallest item.<br>
Once we got the <code>top k</code>, then Min (k = 0), max (k = N - 1), median (k = N/ 2).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title">select</span><span class="params">(Comparable[] a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  StdRandom.shuffle(a);</span><br><span class="line">  <span class="keyword">int</span> lo = <span class="number">0</span>, hi = a.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (hi &gt; lo) &#123;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    <span class="keyword">if</span> (j &lt; k) lo = j + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; k) hi = j - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a[k];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Quick-select takes linear time on average.<br>
Intuitively, each partitioning step splits array approximately in half:<br>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="21.424ex" height="5.176ex" style="vertical-align: -1.838ex;" viewbox="0 -1437.2 9224.4 2228.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> N + \frac{N}{2} + \frac{N}{4} + ... + 1 </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="1110" y="0"/>
<g transform="translate(1889,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="1008" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMATHI-4E" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-32" x="254" y="-687"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="3582" y="0"/>
<g transform="translate(4360,0)">
<g transform="translate(342,0)">
<rect stroke="none" width="1008" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMATHI-4E" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-34" x="254" y="-698"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-2B" x="5831" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="6609" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="7055" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="7500" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="7945" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="8723" y="0"/>
</g>
</svg> ~ <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="3.226ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 1389 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> 2N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="500" y="0"/>
</g>
</svg> compares.</p>
<p>Formal analysis: <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="44.465ex" height="5.509ex" style="vertical-align: -2.171ex;" viewbox="0 -1437.2 19144.6 2372" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> C_N = 2N + 2k ln(\frac{N}{k}) +2(N-k)ln(\frac{N}{N-k}) </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
 <use xlink:href="#E1-MJMAIN-3D" x="1721" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="2777" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="3278" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="4389" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="5389" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="5890" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="6411" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="6710" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="7310" y="0"/>
<g transform="translate(7700,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="1008" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMATHI-4E" x="60" y="676"/>
 <use xlink:href="#E1-MJMATHI-6B" x="243" y="-715"/>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="8948" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="9560" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="10561" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="11061" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="11451" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="12561" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="13562" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="14084" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="14473" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="14772" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="15372" y="0"/>
<g transform="translate(15762,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="2752" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMATHI-4E" x="932" y="676"/>
<g transform="translate(60,-715)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1110" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="2111" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="18755" y="0"/>
</g>
</svg>  (if k = <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.9ex" height="5.176ex" style="vertical-align: -1.838ex;" viewbox="0 -1437.2 1248.5 2228.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{N}{2} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="1008" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMATHI-4E" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-32" x="254" y="-687"/>
</g>
</g>
</svg> , <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="17.578ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 7568.3 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> C_N = (2 + 2ln)N </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-43" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="1011" y="-213"/>
 <use xlink:href="#E1-MJMAIN-3D" x="1721" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="2777" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="3167" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="3890" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="4890" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="5391" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="5689" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="6290" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="6679" y="0"/>
</g>
</svg>)</p>
<p>Quick-select uses ~ <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.176ex" height="5.176ex" style="vertical-align: -1.838ex;" viewbox="0 -1437.2 2228.5 2228.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \frac{1}{2}N^2 </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<g transform="translate(120,0)">
<rect stroke="none" width="620" height="60" x="0" y="220"/>
 <use xlink:href="#E1-MJMAIN-31" x="60" y="676"/>
 <use xlink:href="#E1-MJMAIN-32" x="60" y="-687"/>
</g>
<g transform="translate(860,0)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="1292" y="583"/>
</g>
</g>
</svg> compares in the worst case.</p>
<h4 id="duplicate-keys----dijkstra-3-way">Duplicate keys – Dijkstra 3-way<a title="#duplicate-keys----dijkstra-3-way" href="#duplicate-keys----dijkstra-3-way"></a></h4>
<p>Goal. Partition array into 3 parts so that:<br>
・Entries between lt and gt equal to partition item v.<br>
・No larger entries to left of lt.<br>
・No smaller entries to right of gt.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gl18n7o35lj30my0dcdgl.jpg" alt="Screen Shot 2020-11-25 at 11.04.11" style="zoom: 33%;">
<p>・Let <code>v</code> be partitioning item <code>a[lo]</code>.<br>
・Scan <code>i</code> from left to right.<br>
・(<code>a[i]</code> &lt; v): exchange <code>a[lt]</code> with <code>a[i]</code>; increment both <code>lt</code> and <code>i</code> .<br>
・(<code>a[i]</code> &gt; v): exchange <code>a[gt]</code> with <code>a[i]</code>; decrement <code>gt</code> .<br>
・(<code>a[i]</code> == v): increment <code>i</code>.</p>
<img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-25 at 15.36.10.png" alt="Screen Shot 2020-11-25 at 15.36.10" style="zoom: 50%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> lt = lo, gt = hi, i = lo;</span><br><span class="line">  Comparable v = a[lo];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i &lt;= gt) &#123;</span><br><span class="line">    <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) exch(a, lt++, i++);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) exch(a, i, gt--);</span><br><span class="line">    <span class="keyword">else</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(a, lo, lt - <span class="number">1</span>);</span><br><span class="line">  sort(a, gt + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Sorting lower bound: If there are n distinct keys and the <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.575ex" height="2.676ex" style="vertical-align: -0.338ex;" viewbox="0 -1006.6 1108.8 1152.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">i^{th}</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-69" x="0" y="0"/>
<g transform="translate(345,412)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-68" x="361" y="0"/>
</g>
</g>
</svg> one occurs <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.129ex" height="2.009ex" style="vertical-align: -0.671ex;" viewbox="0 -576.1 916.8 865.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">x_i</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-69" x="809" y="-213"/>
</g>
</svg> times, any compare-based sorting algorithm must use at least <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="16.813ex" height="5.843ex" style="vertical-align: -2.338ex;" viewbox="0 -1508.9 7238.9 2515.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> lg(\frac{N!}{x_1! x_2!...x_n!}) </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6C" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="298" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="779" y="0"/>
<g transform="translate(1168,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="5440" height="60" x="0" y="220"/>
<g transform="translate(2136,676)">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-21" x="888" y="0"/>
</g>
<g transform="translate(60,-737)">
 <use xlink:href="#E1-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="809" y="-213"/>
 <use xlink:href="#E1-MJMAIN-21" x="1026" y="0"/>
<g transform="translate(1304,0)">
 <use xlink:href="#E1-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="809" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-21" x="2331" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="2609" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="3054" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="3500" y="0"/>
<g transform="translate(3945,0)">
 <use xlink:href="#E1-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="809" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-21" x="5042" y="0"/>
</g>
</g>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="6849" y="0"/>
</g>
</svg>   ~  <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="10.646ex" height="6.843ex" style="vertical-align: -3.005ex;" viewbox="0 -1652.5 4583.8 2946.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> \sum^{n}_{i = 1}{x_i lg\frac{x_i}{N}} </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJSZ2-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJSZ2-2211" x="0" y="0"/>
<g transform="translate(147,-1090)">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-69" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-3D" x="345" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="1124" y="0"/>
</g>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="721" y="1627"/>
<g transform="translate(1611,0)">
 <use xlink:href="#E1-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-69" x="809" y="-213"/>
 <use xlink:href="#E1-MJMATHI-6C" x="916" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1215" y="0"/>
<g transform="translate(1695,0)">
<g transform="translate(120,0)">
<rect stroke="none" width="1036" height="60" x="0" y="220"/>
<g transform="translate(59,677)">
 <use xlink:href="#E1-MJMATHI-78" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-69" x="809" y="-213"/>
</g>
 <use xlink:href="#E1-MJMATHI-4E" x="74" y="-704"/>
</g>
</g>
</g>
</g>
</svg> (<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.937ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2556 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> NlgN </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1667" y="0"/>
</g>
</svg> when all distinct, linear when only a constant number of distinct keys) compares in the worst case.</p>
<p>Quick sort with 3-way partitioning is entropy-optimal.  [Sedgewick-Bentley, 1997]<br>
(whatever the distribution of equal keys in there, this thing is going to use number of compares that’s proportional to the best that you could possibly do)</p>
<h3 id="ⅲ.-heap-sort">Ⅲ. Heap Sort<a title="#ⅲ.-heap-sort" href="#ⅲ.-heap-sort"></a></h3>
<p>We can see the implementations of binary heap and more details <a href="https://oreodu.github.io/2020/20201005-Tree" target="_blank">here</a>. Based on the binary heap we can sort the array in an efficient way.</p>
<p>**・**Create max-heap with all N keys.<br>
**・**Repeatedly remove the maximum key.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gliju7v50rj30su0ugq7l.jpg" alt="Screen Shot 2020-12-10 at 10.25.45" style="zoom:45%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = N / <span class="number">2</span>; k &gt; <span class="number">1</span>; k--) &#123;</span><br><span class="line">            sink(a, k , N);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(N &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            exch(a, <span class="number">1</span>, N);</span><br><span class="line">            sink(a, <span class="number">1</span>, --N);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(Comparable[] a, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(a, j, j + <span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(a, k, j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(a, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert from 1-based indexing to 0-base indexing</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable tmp = a[i - <span class="number">1</span>];</span><br><span class="line">        a[i - <span class="number">1</span>] = a[j - <span class="number">1</span>];</span><br><span class="line">        a[j - <span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  convert from 1-based indexing to 0-base indexing</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[i - <span class="number">1</span>].compareTo(a[j - <span class="number">1</span>]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Comparable[] a = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        sort(a);</span><br><span class="line">        printArray(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Proposition.<br>
Heap construction uses ≤ 2 N compares and exchanges.<br>
Heap-sort uses ≤ 2 N lg N compares and exchanges.</p>
<p>Heap-sort is an in-place sorting algorithm with <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.064ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3041.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">NlogN</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="1187" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1672" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2153" y="0"/>
</g>
</svg> worst-case so it is optimal both time and space, but its inner loop is longer than quick-sort’s and it makes poor use of cache memory. It is also not stable.</p>
<h3 id="ⅳ.--bucket-sort">Ⅳ.  Bucket sort<a title="#ⅳ.--bucket-sort" href="#ⅳ.--bucket-sort"></a></h3>
<h3 id="ⅴ.-radix-sort">Ⅴ. Radix sort<a title="#ⅴ.-radix-sort" href="#ⅴ.-radix-sort"></a></h3>
<h2 id="part.3-sorting-complexity">Part.3 Sorting Complexity<a title="#part.3-sorting-complexity" href="#part.3-sorting-complexity"></a></h2>
<p>(Framework to study efficiency of algorithms for solving a particular problem X)</p>
<h3 id="model-of-computation">Model of computation<a title="#model-of-computation" href="#model-of-computation"></a></h3>
<p>(allowable operations): Decision tree.</p>
<p>Proposition: Any compare-based sorting algorithm must use at least lg ( N ! ) ~ N lg N compares in the worst-case.</p>
<p>Assume array consists of N distinct values <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.284ex" height="2.009ex" style="vertical-align: -0.671ex;" viewbox="0 -576.1 983.4 865.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">a_1</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-31" x="748" y="-213"/>
</g>
</svg> through <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.921ex" height="2.009ex" style="vertical-align: -0.671ex;" viewbox="0 -576.1 1257.8 865.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">a_N</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-4E" x="748" y="-213"/>
</g>
</svg> and there are N! different orderings. As for the worst case, there will be h(the height of the decision tree) compares.</p>
<p>Binary tree of height h  ⇒ at most <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.251ex" height="2.676ex" style="vertical-align: -0.338ex;" viewbox="0 -1006.6 969.3 1152.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^k</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6B" x="707" y="583"/>
</g>
</svg> leaves.<br>
N! Different orderings  ⇒ at least N! leaves.</p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="65.55ex" height="3.176ex" style="vertical-align: -0.838ex;" viewbox="0 -1006.6 28222.6 1367.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^h ≥ leaves ≥ N! ⇒ h ≥ lg (N!) ~ NlgN (Stirling's approximation) </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMAIN-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMAIN-21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"/>
<path stroke-width="1" id="E1-MJMAIN-21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-68" x="707" y="583"/>
 <use xlink:href="#E1-MJMAIN-2265" x="1285" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="2342" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2640" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3107" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="3636" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4122" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4588" y="0"/>
 <use xlink:href="#E1-MJMAIN-2265" x="5335" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="6392" y="0"/>
 <use xlink:href="#E1-MJMAIN-21" x="7280" y="0"/>
 <use xlink:href="#E1-MJMAIN-21D2" x="7837" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="9115" y="0"/>
 <use xlink:href="#E1-MJMAIN-2265" x="9969" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="11025" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="11324" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="11804" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="12194" y="0"/>
 <use xlink:href="#E1-MJMAIN-21" x="13082" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="13361" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="14000" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="14889" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="15187" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="15668" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="16556" y="0"/>
 <use xlink:href="#E1-MJMATHI-53" x="16946" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="17591" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="17953" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="18298" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="18750" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="19048" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="19394" y="0"/>
<g transform="translate(19994,0)">
 <use xlink:href="#E1-MJMATHI-67" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2032" x="680" y="583"/>
</g>
 <use xlink:href="#E1-MJMATHI-73" x="20771" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="21240" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="21770" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="22273" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="22777" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="23228" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="23714" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="24286" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="24632" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="25510" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="26040" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="26401" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="26747" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="27232" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="27833" y="0"/>
</g>
</svg></p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkze0wkxnrj30su0kigom.jpg" alt="Screen Shot 2020-11-23 at 20.39.01" style="zoom: 45%;">
<h3 id="cost-model-(operation-counts):">Cost model (operation counts):<a title="#cost-model-(operation-counts):" href="#cost-model-(operation-counts):"></a></h3>
<p>compares.</p>
<h3 id="upper-bound">Upper bound<a title="#upper-bound" href="#upper-bound"></a></h3>
<p>(Cost guarantee provided by some algorithm for X): ~ <em>N lg N</em> from merge sort.</p>
<h3 id="lower-bound">Lower bound<a title="#lower-bound" href="#lower-bound"></a></h3>
<p>(Proven limit on cost guarantee of all algorithms for X): ~ <em>N lg N</em></p>
<p>Lower bound may not hold if the algorithm has information about:<br>
・The initial order of the input.  (partially-ordered arrays)<br>
・The distribution of key values. (duplicate keys)<br>
・The representation of the keys.<br>
(Digital properties of keys:  We can use digit/character compares instead of key compares for numbers and strings.)</p>
<h3 id="optimal-algorithm">Optimal algorithm<a title="#optimal-algorithm" href="#optimal-algorithm"></a></h3>
<p>(Algorithm with best possible cost guarantee for X): merge sort. (But it is not optimal with respect to space usage)</p>
<h2 id="part.4-sort-in-java">Part.4 Sort in Java<a title="#part.4-sort-in-java" href="#part.4-sort-in-java"></a></h2>
<p>If we want to sort any type of data,we can use interface to simplify the process.</p>
<h3 id="comparable-interface">Comparable interface<a title="#comparable-interface" href="#comparable-interface"></a></h3>
<p>Sort using a type’s natural order.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Comparable interface (Built in java)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Item i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object Implementation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">X</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Overide</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(X x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sort Implementaion</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N = x.length();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j&gt;<span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x[j].compareTo(x[j-<span class="number">1</span>])&lt;<span class="number">0</span>) exch(x, j, j-<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">break</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXSorter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        X[] x = &#123;x1,x2,x3&#125;;</span><br><span class="line">        x.sort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="comparator-interface">Comparator interface<a title="#comparator-interface" href="#comparator-interface"></a></h3>
<p>Sort using an alternate order. Required property: Must be a total order.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(Key v, Key w)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>using with our sorting libraries</li>
</ol>
<p>・Use <code>Object</code> instead of <code>Comparable</code>.<br>
・Pass Comparator to sort() and less() and use it in less().</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] a, Comparator comparator)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> N = a.length;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(comparator, a[j], a[j-<span class="number">1</span>]); j--)</span><br><span class="line">     exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparator c, Object v, Object w)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> c.compare(v, w) &lt; <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">  Object swap = a[i]; </span><br><span class="line">  a[i] = a[j]; </span><br><span class="line">  a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>system sort</li>
</ol>
<p>・Create Comparator object.<br>
・Pass as second argument to Arrays.sort().</p>
<p>Decouples the definition of the data type from the definition of what it means to compare two objects of that type.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] a;</span><br><span class="line"><span class="comment">// use natural order</span></span><br><span class="line">Arrays.sort(a);</span><br><span class="line"><span class="comment">// Uses alternate order defined by Comparator&lt;String&gt; object.</span></span><br><span class="line">Arrays.sort(a, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">Arrays.sort(a, Collator.getInstance(<span class="keyword">new</span> Locale(<span class="string">&quot;es&quot;</span>)));</span><br><span class="line">Arrays.sort(a, <span class="keyword">new</span> BritishPhoneBookOrder());</span><br></pre></td></tr></table></figure>
<p>To implement a comparator:</p>
<p>・Define a (nested) class that implements the Comparator interface.<br>
・Implement the compare() method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_NAME = <span class="keyword">new</span> ByName();</span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_SECTION = <span class="keyword">new</span> BySection();</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> section;</span><br><span class="line"> <span class="comment">/* ... */</span></span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> v.name.compareTo(w.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BySection</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123; </span><br><span class="line">     	<span class="keyword">return</span> v.section - w.section;</span><br><span class="line">   	&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// polar order</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point2D</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> Comparator&lt;Point2D&gt; POLAR_ORDER = <span class="keyword">new</span> PolarOrder();</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> x, y;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ccw</span><span class="params">(Point2D a, Point2D b, Point2D c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area2 = (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);</span><br><span class="line">    <span class="keyword">if</span> (area2 &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// clockwise</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (area2 &gt; <span class="number">0</span>) <span class="keyword">return</span> +<span class="number">1</span>; <span class="comment">// counter-clockwise</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// collinear</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> 	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PolarOrder</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Point2D</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Point2D q1, Point2D q2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">double</span> dy1 = q1.y - y;</span><br><span class="line"> 			<span class="keyword">double</span> dy2 = q2.y - y;</span><br><span class="line">      <span class="comment">// p, q1, q2 are horizontal</span></span><br><span class="line"> 			<span class="keyword">if</span> (dy1 == <span class="number">0</span> &amp;&amp; dy2 == <span class="number">0</span>) &#123; <span class="comment">/*...*/</span> &#125;</span><br><span class="line">      <span class="comment">// q1 above, q2 below</span></span><br><span class="line"> 			<span class="keyword">else</span> <span class="keyword">if</span> (dy1 &gt;= <span class="number">0</span> &amp;&amp; dy2 &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      <span class="comment">// q2 above, q1 below</span></span><br><span class="line"> 			<span class="keyword">else</span> <span class="keyword">if</span> (dy2 &gt;= <span class="number">0</span> &amp;&amp; dy1 &lt; <span class="number">0</span>) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">      <span class="comment">// both above or below</span></span><br><span class="line"> 			<span class="keyword">else</span> <span class="keyword">return</span> -ccw(Point2D.<span class="keyword">this</span>, q1, q2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slope order</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> x;     <span class="comment">// x-coordinate of this point</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> y;     <span class="comment">// y-coordinate of this point</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">slopeTo</span><span class="params">(Point that)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x0 = <span class="keyword">this</span>.x, y0 = <span class="keyword">this</span>.y;</span><br><span class="line">        <span class="keyword">int</span> x1 = that.x, y1 = that.y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x0 == x1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y0 == y1) <span class="keyword">return</span> Double.NEGATIVE_INFINITY;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> Double.POSITIVE_INFINITY;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (y0 == y1) <span class="keyword">return</span> +<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span> * (y1 - y0) / (x1 - x0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Comparator&lt;Point&gt; <span class="title">slopeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BySlopeOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BySlopeOrder</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">double</span> aSlope = slopeTo(a);</span><br><span class="line">            <span class="keyword">double</span> bSlope = slopeTo(b);</span><br><span class="line">            <span class="keyword">if</span> (aSlope &gt; bSlope) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aSlope &lt; bSlope) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="system-sorts">System sorts<a title="#system-sorts" href="#system-sorts"></a></h3>
<p><code>Arrays.sort()</code></p>
<p>Has different method for each primitive type and datatypes that implement <code>Comparable</code>.</p>
<p>Uses tuned quick sort for primitive types and tuned merge sort for objects.</p>
<h4 id="engineering-a-system-sort">engineering a system sort<a title="#engineering-a-system-sort" href="#engineering-a-system-sort"></a></h4>
<p>Basic algorithm = quicksort.<br>
・Cutoff to insertion sort for small subarrays.<br>
・Partitioning scheme: Bentley-McIlroy 3-way partitioning.<br>
・Partitioning item.<br>
– small arrays: middle entry<br>
– medium arrays: median of 3<br>
– large arrays: Tukey’s ninther</p>
<p>Tukey’s ninther :<br>
Median of the median of 3 samples, each of 3 entries.<br>
・Approximates the median of 9.<br>
・Uses at most 12 compares.</p>
<p>Better partitioning than random shuffle and less costly.</p>
<img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-11-25 at 09.51.56.png" alt="Screen Shot 2020-11-25 at 09.51.56" style="zoom:50%;">
<h2 id="part.5-applications">Part.5 Applications<a title="#part.5-applications" href="#part.5-applications"></a></h2>
<p>Sorting algorithms are essential in a broad variety of applications:<br>
(obvious applications)<br>
・Sort a list of names.<br>
・Organize an MP3 library.<br>
・Display Google PageRank results.<br>
・List RSS feed in reverse chronological order.</p>
<p>(problems become easy once items are in sorted order)<br>
・Find the median.<br>
・Identify statistical outliers.<br>
・Binary search in a database.<br>
・Find duplicates in a mailing list.</p>
<p>(non-obvious applications)<br>
・Data compression.<br>
・Computer graphics.<br>
・Computational biology.<br>
・Load balancing on a parallel computer.<br>
. . .</p>
<h3 id="ⅰ.-shuffle">Ⅰ. Shuffle<a title="#ⅰ.-shuffle" href="#ⅰ.-shuffle"></a></h3>
<p>Goal: rearrange array so that result is uniformly random permutation.</p>
<ol>
<li>Generate a random real number (uniformly at random) for each array entry and sort the array based on it.</li>
<li>Knuth Shuffle: In iteration <code>i</code>, pick integer r between <code>0</code> and <code>i</code> uniformly at random and swap a[i] and a[r].</li>
</ol>
<h3 id="ⅱ.-convex-hull">Ⅱ. Convex hull<a title="#ⅱ.-convex-hull" href="#ⅱ.-convex-hull"></a></h3>
<p>Convex hull: a set of N points which is the smallest perimeter fence enclosing the points.<br>
Output: Sequence of vertices in counterclockwise order.</p>
<img src="https://i.loli.net/2020/10/18/P5EMAqcuGdSRHU3.png" alt="44" style="zoom: 33%;">
<p>Geometric properties:</p>
<img src="https://i.loli.net/2020/10/18/sGPg7WBV3NL4crA.png" alt="33" style="zoom: 40%;">
<ol>
<li>Can traverse the convex hull by making only counterclockwise turns</li>
<li>The vertices of convex hull appear in increasing order of polar angle with respect to point p with lowest y-coordinate.</li>
</ol>
<p>Graham scan:</p>
<ol>
<li>Choose point p with smallest y-coordinate.</li>
<li>Sort points by polar angle with p.</li>
<li>Consider points in order; discard unless it create a counterclockwise turn.</li>
</ol>
<p>Implement of determine whether it’s a counterclockwise turn:<br>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="57.061ex" height="3.009ex" style="vertical-align: -1.005ex;" viewbox="0 -863.1 24568 1295.7" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> 2 x Area(a,b,c) = (b_x - a_x)(c_y - a_y) - (b_y -  a_y)(c_x - a_x) </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
<path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-41" x="1073" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="1823" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2275" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2741" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="3271" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3660" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="4190" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="4635" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="5064" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="5509" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="5943" y="0"/>
 <use xlink:href="#E1-MJMAIN-3D" x="6610" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="7666" y="0"/>
<g transform="translate(8056,0)">
 <use xlink:href="#E1-MJMATHI-62" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="607" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2212" x="9212" y="0"/>
<g transform="translate(10213,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="748" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="11247" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="11637" y="0"/>
<g transform="translate(12026,0)">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="613" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2212" x="13134" y="0"/>
<g transform="translate(14135,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="748" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="15116" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="15728" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="16728" y="0"/>
<g transform="translate(17118,0)">
 <use xlink:href="#E1-MJMATHI-62" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="607" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2212" x="18221" y="0"/>
<g transform="translate(19222,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="748" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="20203" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="20593" y="0"/>
<g transform="translate(20982,0)">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="613" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-2212" x="22143" y="0"/>
<g transform="translate(23144,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="748" y="-213"/>
</g>
 <use xlink:href="#E1-MJMAIN-29" x="24178" y="0"/>
</g>
</svg><br>
(Based on: the area of a parallelogram is equal to the cross product of two vectors)<br>
(v1: (<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.413ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3191.6 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">b_x - a_x</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-62" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="607" y="-213"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1156" y="0"/>
<g transform="translate(2157,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="748" y="-213"/>
</g>
</g>
</svg>, <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.166ex" height="2.843ex" style="vertical-align: -1.005ex;" viewbox="0 -791.3 3085.5 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">b_y -  a_y</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-62" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="607" y="-213"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1103" y="0"/>
<g transform="translate(2104,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="748" y="-213"/>
</g>
</g>
</svg>), v2:(<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.422ex" height="2.343ex" style="vertical-align: -0.671ex;" viewbox="0 -719.6 3195.6 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">c_x - a_x</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="613" y="-213"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1160" y="0"/>
<g transform="translate(2161,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-78" x="748" y="-213"/>
</g>
</g>
</svg>,<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.176ex" height="2.676ex" style="vertical-align: -1.005ex;" viewbox="0 -719.6 3089.5 1152.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">c_y - a_y</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="613" y="-213"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1107" y="0"/>
<g transform="translate(2108,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-79" x="748" y="-213"/>
</g>
</g>
</svg>))</p>
<img src="https://i.loli.net/2020/10/18/qlINrFnUkjJsEoc.png" alt="67" style="zoom:45%;">
<p>See more <a href="https://algs4.cs.princeton.edu/99hull/" target="_blank">here</a>.</p>
<p>Application:</p>
<ol>
<li>Robot motion planning.<br>
Find shortest path in the plane from s to t that avoids a polygonal obstacle.<br>
Shortest path is either straight line from s to t or it is one of two polygonal chains of convex hull.</li>
<li>Farthest pair problem<br>
Given N points in the plane, find a pair of points with the largest Euclidean distance between them.<br>
Farthest pair of points are extreme points on convex hull.</li>
</ol>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Bubble Sort</tag>
        <tag>Selection Sort</tag>
        <tag>Insertion Sort</tag>
        <tag>Shell Sort</tag>
        <tag>Merge sort</tag>
        <tag>Quick Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Basis &amp; Regression &amp; Classification</title>
    <url>/2020/20200501-Machine-Learning-Basis/</url>
    <content><![CDATA[<h1 id="basis-&amp;-regression-&amp;-classification">Basis &amp; Regression &amp; Classification<a title="#basis-&amp;-regression-&amp;-classification" href="#basis-&amp;-regression-&amp;-classification"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong></p>
<p>· Wikipedia</p>
<p>· Machine Learning</p>
<h2 id="1.-intro">1. Intro<a title="#1.-intro" href="#1.-intro"></a></h2>
<p>Tom Mitchell provides a more modern definition: “A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.”</p>
<h4 id="·-supervised-learning">· Supervised Learning<a title="#·-supervised-learning" href="#·-supervised-learning"></a></h4>
<p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p>
<p>Supervised learning problems are categorized into <strong>“regression”</strong> and **“classification” ** problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories.</p>
<h4 id="·-unsupervised-learning">· Unsupervised Learning<a title="#·-unsupervised-learning" href="#·-unsupervised-learning"></a></h4>
<p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables.</p>
<p>We can derive this structure by <strong>clustering</strong> the data based on relationships among the variables in the data.</p>
<p>With unsupervised learning there is no feedback based on the prediction results.</p>
<h4 id="·-model">· Model<a title="#·-model" href="#·-model"></a></h4>
<p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn the hypothesis function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y.</p>
<p>Inout : X</p>
<p>Output: Y</p>
<p>Hypothesis function: h</p>
<p>Cost function : J</p>
<p>Objective function: minimize (J)</p>
<h2 id="2.-regression">2. Regression<a title="#2.-regression" href="#2.-regression"></a></h2>
<h3 id="linear-regression">Linear Regression<a title="#linear-regression" href="#linear-regression"></a></h3>
<p>$ h_\theta (x) =  \theta_1 x + \theta_0 $</p>
<h4 id="cost-function">Cost Function<a title="#cost-function" href="#cost-function"></a></h4>
<p>We can measure the accuracy of our hypothesis function by using a <strong>cost function</strong>.</p>
<p><strong>Mean Squared Error</strong></p>
<p>$  J(\theta_0, \theta_1) =  \frac{1}{2m} \sum^{m}_ {i=1} {( h_ \theta(x^{(i)}) - y^{(i)} )^2} $</p>
<p>$ J(\theta_0, \theta_1) $ can be ploted by a contour figure.</p>
<h4 id="gradient-descent-(minizining-the-cost-function-j)">Gradient descent (minizining the cost function J)<a title="#gradient-descent-(minizining-the-cost-function-j)" href="#gradient-descent-(minizining-the-cost-function-j)"></a></h4>
<p>$ \theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)} $</p>
<p>(Update $\theta_j$ simultaneously)</p>
<p>learning rate: <strong>α</strong></p>
<p>we should adjust our parameter <em>α</em> to ensure that the gradient descent algorithm converges in a reasonable time. Failure to converge or too much time to obtain the minimum value imply that our step size is wrong.</p>
<p>The method looks at every example in the entire training set on every step, and is called <strong>batch gradient descent</strong></p>
<p><u><a href="https://medium.com/@rohitpandey576/why-does-gradient-descent-work-128713588136" target="_blank">Why does gradient descent work?</a></u></p>
<h3 id="multivariate-linear-regression">Multivariate Linear Regression<a title="#multivariate-linear-regression" href="#multivariate-linear-regression"></a></h3>
<p>Linear regression with multiple variables.</p>
<p>$ h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \theta_3 x_3 + \cdots + \theta_n x_n $</p>
<p>$ h_\theta(x) =\begin{bmatrix}\theta_0 \hspace{2em} \theta_1 \hspace{2em} … \hspace{2em} \theta_n\end{bmatrix}\begin{bmatrix}x_0 \newline x_1 \newline \vdots \newline x_n\end{bmatrix}= \theta^T X $</p>
<p>$ x_{0}^{(i)} =1 \text{ for } (i\in { 1,\dots, m } ) $</p>
<p>$  J(\theta) =  \frac{1}{2m} \sum^{m}_ {i=1} {( h_ \theta(x^{(i)}) - y^{(i)} )^2} $</p>
<h4 id="feature-scaling">Feature Scaling<a title="#feature-scaling" href="#feature-scaling"></a></h4>
<p>We can speed up gradient descent by having each of our input values in roughly the same range. This is because θ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven.</p>
<p>Two techniques to help with this are <strong>feature scaling</strong> and <strong>mean normalization</strong>.</p>
<p>feature scaling : $ x_i = \frac{x_i}{s_i} $</p>
<p>mean normalization : $ x_i = \frac{x_i - \mu_i}{s_i} $</p>
<p>($ s_i $:  standard deviation , $ \mu_i $: average)</p>
<h4 id="gradient-descent">Gradient descent<a title="#gradient-descent" href="#gradient-descent"></a></h4>
<p>$ \theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)} $</p>
<p><strong>Debugging gradient descent.</strong></p>
<p>Make a plot with <em>number of iterations</em> and cost function J(θ).  It has been proven that if learning rate α is sufficiently small, then J(θ) will decrease on every iteration.</p>
<p>If <em>α</em> is too small: slow convergence.</p>
<p>If <em>α</em> is too large: may not decrease on every iteration and thus may not converge.</p>
<p>(Try like this: … 0.001 … 0.01 … 0.1 … 1)</p>
<h4 id="normal-equation">Normal Equation<a title="#normal-equation" href="#normal-equation"></a></h4>
<p>Normal Equation is a second way of minimizing J.</p>
<p>In the “Normal Equation” method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration.</p>
<p>$ \theta =( X_T  X)^{-1}X_TY  $</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>Gradient Descent</th>
<th><strong>Normal Equation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Need to choose alpha</td>
<td>No need to choose alpha</td>
</tr>
<tr>
<td>Needs many iterations</td>
<td>No need to iterate</td>
</tr>
<tr>
<td>$ O(kn^2)$</td>
<td>$ O(n^3)$, need to calculate inverse of $ X^TX $</td>
</tr>
<tr>
<td>Works well when n is large</td>
<td>Slow if n is very large</td>
</tr>
</tbody>
</table></div></div><p>If $ X^TX $ is <strong>noninvertible,</strong> the common causes might be having :</p>
<p><strong>·</strong> Redundant features, where two features are very closely related (i.e. they are linearly dependent)<br>
<strong>·</strong> Too many features (e.g. m ≤ n). In this case, delete some features or use “regularization”.</p>
<h3 id="polynomial-regression">Polynomial Regression<a title="#polynomial-regression" href="#polynomial-regression"></a></h3>
<p>We can <strong>change the behavior or curve</strong> of our hypothesis function by making it a quadratic, cubic or square root function (or any other form).</p>
<p>e.g.  $ h_\theta (x) = \theta_0 + \theta_1 x + \theta_2 x^2 + \theta_3 x^3 $</p>
<p>( if you choose your features this way then feature scaling becomes very important. $ 10^3 = 1000 $)</p>
<p>Feature choosing: We can <strong>combine</strong> multiple features into one.</p>
<h2 id="3.-classification(logistic-regression)">3. Classification(Logistic regression)<a title="#3.-classification(logistic-regression)" href="#3.-classification(logistic-regression)"></a></h2>
<h3 id="binary-classification">Binary classification<a title="#binary-classification" href="#binary-classification"></a></h3>
<h4 id="activiation-fuction">Activiation Fuction<a title="#activiation-fuction" href="#activiation-fuction"></a></h4>
<p>The activation Function of the output layer depend on the specific problems.</p>
<p>For example: Binary classification — sigmoid function, Multiple Classification — softmax function, Regression — identity function</p>
<p><strong>· Sigmoid Function</strong> (maps any real number to the (0, 1) interval)</p>
<p>$ h_\theta (x) = g(\theta^T x) = \dfrac{1}{1 + e^{- \theta^T x}} $</p>
<p>$ h_\theta(x) = P(y=1 | x ; \theta) = 1 - P(y=0 | x ; \theta) $</p>
<p><strong>Decision Boundary</strong> (The property of the Hypothesis function)</p>
<p>$ h_\theta(x) = g(\theta^T x) \geq 0.5     when \theta^T x \geq 0 $</p>
<p>Non-linear decision boundary : $ \theta^T x = \theta_0 + \theta_1 x + \theta_2 x^2 + \theta_3 x^3 $</p>
<h4 id="cost-function-1">Cost function<a title="#cost-function-1" href="#cost-function-1"></a></h4>
<p>We cannot use the same cost function that we use for linear regression because the Logistic Function will not be a convex function, causing many local optima.</p>
<p><strong>Cross Entropy Error</strong></p>
<p>$ J(\theta) = \dfrac{1}{m} \sum_ {i=1}^m \mathrm{Cost}(h_\theta(x^{(i)}),y^{(i)}) $</p>
<p>$ Cost (h_ \theta(x^{(i)}),y^{(i)}) = -y^{(i)} \log(h_ \theta(x^{(i)}))  - (1- y^{(i)}) \log(1-h_ \theta(x^{(i)}))  $</p>
<p>$ \mathrm{Cost}(h_\theta(x),y) = 0 \text{ ,if } h_\theta(x) = y $</p>
<p>$ \mathrm{Cost}(h_ \theta(x),y) \rightarrow \infty \text{ ,if } y=0 \mathrm{and}  h_\theta(x) \rightarrow 1 $</p>
<p>$ \mathrm{Cost}(h_ \theta(x),y) \rightarrow \infty \text{ ,if } y=1  \mathrm{and}  h_\theta(x) \rightarrow 0 $</p>
<p>When $ h_ \theta(x^{(i)}) $ become so small, the value of log will become negative infinity. So in order to avoid such situation, we can add a small value to the $ h_ \theta(x^{(i)}) $, usually it can be 1e-7.</p>
<h4 id="gradient-descent-1">Gradient descent<a title="#gradient-descent-1" href="#gradient-descent-1"></a></h4>
<p>$ \theta_j := \theta_j - \frac{\alpha}{m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} $</p>
<p><strong>Advanced Optimization</strong></p>
<p>“Conjugate gradient”, “BFGS”, and “L-BFGS” are more sophisticated, faster ways to optimize θ and also no need to manually pick $ \alpha $ which can be used instead of gradient descent.</p>
<h3 id="multiple-classification">Multiple Classification<a title="#multiple-classification" href="#multiple-classification"></a></h3>
<p><strong>One-vs-all</strong></p>
<p>$ h_\theta^{(i)}(x) = P(y = i | x ; \theta)   y \in \lbrace0, 1 … n\rbrace$</p>
<p>$ \mathrm{prediction} = \max_i( h_\theta ^{(i)}(x) ) $</p>
]]></content>
      <categories>
        <category>Machine Lerning</category>
      </categories>
      <tags>
        <tag>Machine Lesarning Basis</tag>
      </tags>
  </entry>
  <entry>
    <title>Neural Networks</title>
    <url>/2020/20200516-Neural-Networks/</url>
    <content><![CDATA[<h1 id="neural-networks">Neural Networks<a title="#neural-networks" href="#neural-networks"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong></p>
<p>· Wikipedia</p>
<p>· Machine Learning</p>
<h3 id="why-neural-networks?">Why Neural Networks?<a title="#why-neural-networks?" href="#why-neural-networks?"></a></h3>
<h4 id="·-decision-boundary">· Decision Boundary<a title="#·-decision-boundary" href="#·-decision-boundary"></a></h4>
<p>Every Machine Learning algorithm learns the mapping from an input to output.</p>
<p>In the case of classification problems, a decision boundary helps us in determining whether a given data point belongs to a certain class. Traditional machine learning algoritms cannot learn decision boundaries for nonlinear data.  However, Neural Network is capable of learning any nonlinear function.</p>
<p>Also, those algorithms are not capable of learning all the functions.</p>
<h4 id="·-feature-engineering">· Feature engineering<a title="#·-feature-engineering" href="#·-feature-engineering"></a></h4>
<p>In machine learning, we have to do feature  extraction and feature selection before we train the model. Feature engineering is a key step in the model building process. However, in deep Learning, we can automate the process of feature engineering.</p>
<h2 id="feed-forward-neural-network-(multilayer-perceptron)">Feed-Forward Neural network (Multilayer Perceptron)<a title="#feed-forward-neural-network-(multilayer-perceptron)" href="#feed-forward-neural-network-(multilayer-perceptron)"></a></h2>
<img src="https://i.loli.net/2020/06/22/DvejB2L6YuKFCcO.png" alt="mlp" style="zoom: 50%;">
<h3 id="cost-function-(regularized)">Cost Function (regularized)<a title="#cost-function-(regularized)" href="#cost-function-(regularized)"></a></h3>
<p><strong>·</strong> L = total number of layers in the network</p>
<p><strong>·</strong> $ s_l $ = number of units (not counting bias unit) in layer l</p>
<p><strong>·</strong> K = number of output units/classes</p>
<p>$ J(\Theta) = - \frac{1}{m} \sum_ {i=1}^m \sum_ {k=1}^K \left[y^{(i)}_ k \log ((h_ \Theta (x^{(i)}))_ k) + (1 - y^{(i)}_ k)\log (1 - (h_ \Theta(x^{(i)}))_ k)\right] + \frac{\lambda}{2m}\sum_ {l=1}^{L-1} \sum_ {i=1}^{s_l} \sum_ {j=1}^{s_ {l+1}} ( \Theta_{j,i}^{(l)})^2 $</p>
<h3 id="backpropagation-algorithm">Backpropagation Algorithm<a title="#backpropagation-algorithm" href="#backpropagation-algorithm"></a></h3>
<p><strong>·</strong> Given training set $ { (x^{(1)}, y^{(1)}) … (x^{(m)}, y^{(m)})} $</p>
<p><strong>·</strong> Set $ \Delta^{(l)}_{i,j} := 0$ for all (l,i,j)</p>
<p><strong>·</strong> For training example t =1 to m:</p>
<p>​     <strong>1)</strong> $ a^{(1)} = x $</p>
<p>​     <strong>2)</strong> Perform forward propagation to compute $a^{(l)}$ for l=2,3,…,L</p>
<p>​           $ z^{(l)} = \Theta^{(l-1)} a^{(l-1)} $</p>
<p>​           $ a^{(l)} = g(z^{(l)}) $</p>
<p>​     <strong>3)</strong> Using $y^{(t)}$, compute $\delta^{(L)} = a^{(L)} - y^{(t)} $</p>
<p>​     <strong>4)</strong> Compute $ \delta^{(L-1)}, \delta^{(L-2)},\dots,\delta^{(2)} $</p>
<p>using $\delta^{(l)} = ((\Theta^{(l)})^T \delta^{(l+1)})  .* g^{′}(z^{(l)}) ),  ( g^{′}(z^{(l)})=a^{(l)} .* (1−a^{(l)}) ) $</p>
<p>​     <strong>5)</strong> $\Delta^{(l)}_ {i,j} := \Delta^{(l)}_ {i,j} + a^{(l)}_ j \delta^{(l+1)}_ j $ or with vectorization, $\Delta^{(l)} := \Delta^{(l)} + \delta^{(l+1)} (a^{(l)})^T $</p>
<p>​     Hence we update our new $\Delta$ matrix. ($\frac{∂J(\Theta)}{∂\Theta^{(l)}_ {i,j}} = D^{(l)}_ {i,j}$)</p>
<p>​     $ D^{(l)}_ {i,j} =  \frac{1}{m} \Delta^{(l)}_ {i,j}, $ if j = 0</p>
<p>​     $D^{(l)}_ {i,j} =  \frac{1}{m}(\Delta^{(l)}_ {i,j} + \lambda \Theta^{(l)}_ {i,j}),$ if j≠0</p>
<p>In the actual programming implementation, we can separate back propagation through layers.</p>
<p><u><a href="https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/common/layers.py" target="_blank">See  more details</a></u></p>
<h3 id="gradient-checking">Gradient Checking<a title="#gradient-checking" href="#gradient-checking"></a></h3>
<p>Gradient checking will assure that our backpropagation works as intended.</p>
<p>We can approximate the derivative of our cost function with: ($ ϵ =10^{−4} $)</p>
<p>$ \frac{∂J(\Theta)}{∂\Theta_ {j}} = \frac{J(\Theta_1 ,…, \Theta_j + ϵ ,…, \Theta_n) - J(\Theta_1 ,…, \Theta_j - ϵ ,…, \Theta_n)}{2ϵ}  $</p>
<h3 id="activation-function">Activation Function<a title="#activation-function" href="#activation-function"></a></h3>
<p>Activation functions introduce non-linearity to the model which allows it to learn complex functional mappings between the inputs and response variables. There are quite a few different activation functions like sigmoid, tanh, RelU, Leaky RelU, etc.</p>
<p><u><a href="https://missinglink.ai/guides/neural-network-concepts/7-types-neural-network-activation-functions-right/" target="_blank">See  more details</a></u></p>
<h4 id="sigmoid-function:">Sigmoid Function:<a title="#sigmoid-function:" href="#sigmoid-function:"></a></h4>
<p>$ h_\theta (x) = g(\theta^T x) = \dfrac{1}{1 + e^{- \theta^T x}} $</p>
<p>Avoid overflow:</p>
<p>$  \dfrac{1}{1 + e^{- \theta^T x}} = \frac{1}{2} (tan(\frac{x}{2}) + 1)$</p>
<p>$ tanx = \frac{e^x - e^{-x}}{e^x + e^{-x}}  =  \frac{e^{2x} - 1 }{e^{2x} + 1} = \frac{1 - e^{-2x} }{1 + e^{-2x} }$</p>
<h4 id="relu-function（rectified-linear-unit）:">ReLU Function（Rectified Linear Unit）:<a title="#relu-function（rectified-linear-unit）:" href="#relu-function（rectified-linear-unit）:"></a></h4>
<p>$  h(x)= x ( x &gt; 0 )  or  0   ( x \leq 0 )  $</p>
<h4 id="softmax-function:">Softmax Function:<a title="#softmax-function:" href="#softmax-function:"></a></h4>
<p>$ h(x)_ k = \frac{exp(a_k)}{\sum_ {i=1}^K exp(a_i)} $</p>
<p>Avoid overflow: (c can be the - max(a))</p>
<p>$ h(x)_ k = \frac{exp(a_k + c)}{\sum_ {i=1}^K exp(a_i + c)} $</p>
<p>The activation Function of the output layer depend on the specific problems.</p>
<p>For example: Binary classification — sigmoid function, Multiple Classification — softmax function, Regression — identity function</p>
<h3 id="optimization-function">Optimization Function<a title="#optimization-function" href="#optimization-function"></a></h3>
<p><u><a href="https://towardsdatascience.com/why-gradient-descent-isnt-enough-a-comprehensive-introduction-to-optimization-algorithms-in-59670fd5c096" target="_blank">See  more details</a></u></p>
<h4 id="gradient-descent:">Gradient Descent:<a title="#gradient-descent:" href="#gradient-descent:"></a></h4>
<p>$ \Theta^{(l)}_ {i,j} = \Theta^{(l)}_ {i,j} - \eta \frac{∂J(\Theta)}{∂\Theta^{(l)}_ {i,j}} $</p>
<p><strong>Standard Gradient descent</strong> updates the <em>parameters</em> only after each epoch.</p>
<p><strong>Stochastic gradient descent</strong> updates the <em>parameters</em> for <em>each observation</em> which leads to more number of updates*.*</p>
<p><strong>Mini-batch Gradient descent</strong> updates the parameters for a finite number of observations.</p>
<h4 id="momentum-based-gradient-descent">Momentum-based Gradient Descent<a title="#momentum-based-gradient-descent" href="#momentum-based-gradient-descent"></a></h4>
<p>$ v^{(l)}_ {i,j}  =  \alpha v^{(l)}_ {i,j}  - \eta \frac{∂J(\Theta)}{∂\Theta^{(l)}_ {i,j}} $</p>
<p>$ \Theta^{(l)}_ {i,j} = \Theta^{(l)}_ {i,j} + v^{(l)}_ {i,j}  $</p>
<p>Momentum-based gradient descent remembers the update $v$ at each iteration, and determines the next update as a linear combination of the gradient and the previous update. Unlike in stochastic gradient descent, it tends to keep traveling in the same direction, preventing oscillations.</p>
<p>(Extension: Nesterov accelerated Gradient Descent)</p>
<h4 id="adagrad">Adagrad<a title="#adagrad" href="#adagrad"></a></h4>
<p>$ h^{(l)}_ {i,j}  = h^{(l)}_ {i,j} +  ( \frac{∂J(\Theta)}{∂\Theta^{(l)}_ {i,j}} )^2 $</p>
<p>$ \Theta^{(l)}_ {i,j} = \Theta^{(l)}_ {i,j} + \eta \frac{1}{\sqrt{h^{(l)}_ {i,j} } + \epsilon}  \frac{∂J(\Theta)}{∂\Theta^{(l)}_ {i,j}} $</p>
<p>It adopts the learning rate(η) based on the <strong>sparsity</strong> of features. So the parameters with small updates(sparse features) have high <em>learning rate</em> whereas the parameters with large  updates(dense features) have low <em>learning rate</em>. Therefore adagrad uses a different <em>learning rate</em> for each <em>parameter.</em></p>
<p>(Extension: RMSProp)</p>
<h4 id="adam(adaptive-moment-estimation)">Adam(Adaptive Moment Estimation)<a title="#adam(adaptive-moment-estimation)" href="#adam(adaptive-moment-estimation)"></a></h4>
<p>Adam algorithm introduces the concept of adaptive momentum along with adaptive learning rate. Adam is a combined form of Momentum-based GD and RMSProp.</p>
<img src="https://i.loli.net/2020/06/25/3eEICUzJWN5xLQA.png" alt="adm" style="zoom:50%;">
<h3 id="initialize-the-weights">Initialize the weights<a title="#initialize-the-weights" href="#initialize-the-weights"></a></h3>
<p><u><a href="https://towardsdatascience.com/weight-initialization-techniques-in-neural-networks-26c649eb3b78" target="_blank">See  more details</a></u></p>
<h4 id="zero-initialization-and-random-initialization">Zero initialization and Random initialization<a title="#zero-initialization-and-random-initialization" href="#zero-initialization-and-random-initialization"></a></h4>
<p>In general practice biases are initialized with 0 and weights are initialized with random numbers.</p>
<p>Usually, we can not initialize weight with the same values, high values or very low values. Otherwize, weight uniformity will happen or the gradients may vanish or explode quickly.</p>
<h4 id="xavier-initialization">Xavier initialization<a title="#xavier-initialization" href="#xavier-initialization"></a></h4>
<p>It is mostly used for tanh() or sigmoid() activation function.</p>
<img src="https://i.loli.net/2020/06/25/AKQsCMUT6bedVtw.png" alt="Xavier" style="zoom: 50%;">
<img src="https://i.loli.net/2020/06/25/6QfRzvADObthNVy.png" alt="Xavier1" style="zoom: 50%;">
<h4 id="he-initialization">He initialization<a title="#he-initialization" href="#he-initialization"></a></h4>
<p>It is mostly used for ReLU() activation function.</p>
<img src="https://i.loli.net/2020/06/25/x5W4gyvkenXT3zf.png" alt="he" style="zoom: 50%;">
<h3 id="batch-normalization">Batch Normalization<a title="#batch-normalization" href="#batch-normalization"></a></h3>
<p>Apart from the input layer, we can also normalize the hiden layer by adjusting and scaling the input. Batch normalization reduces the amount by what the hidden unit values shift around (covariance shift) and allows each layer of a network to learn by itself a little bit more independently of other layers. Also, it reduces overfitting because it has a slight regularization effects. Similar to dropout, it adds some noise to each hidden layer’s activations.</p>
<p>See  more details <u><a href="https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html" target="_blank">here</a></u> and <u><a href="https://towardsdatascience.com/batch-normalization-in-neural-networks-1ac91516821c" target="_blank">here</a></u></p>
<img src="https://i.loli.net/2020/06/25/IGgC3xaJDARne75.png" alt="BN" style="zoom:50%;">
<h3 id="dropout">Dropout<a title="#dropout" href="#dropout"></a></h3>
<p><u><a href="https://medium.com/@amarbudhiraja/https-medium-com-amarbudhiraja-learning-less-to-learn-better-dropout-in-deep-machine-learning-74334da4bfc5" target="_blank">More details from here</a></u>.</p>
<p>In order to prevent over-fitting, we can use dropout to ignore units (i.e. neurons) during the training phase of certain set of neurons which is chosen at random so we can reduce interdependent learning amongst the neurons.</p>
<p><img src="https://i.loli.net/2020/06/25/hFOIB3paKbc1jmG.png" alt="drop" class="φcx"></p>
<p>(from the paper”Dropout: a simple way to prevent neural networks from overfitting”, JMLR 2014)</p>
<h3 id="main-steps">Main Steps<a title="#main-steps" href="#main-steps"></a></h3>
<p>First, pick a network architecture.</p>
<p>​    · Number of input units = dimension of features $x^{(i)}$</p>
<p>​    · Number of output units = number of classes</p>
<p>​    · Number of hidden units per layer = usually more the better (must balance with cost of computation as it increases with more hidden units)</p>
<p>Next, training a Neural Network.</p>
<p>​    · Randomly initialize the weights</p>
<p>​    · Implement forward propagation to get $ h_\Theta(x^{(i)}) $ for any $ x^{(i)} $</p>
<p>​    · Implement the cost function</p>
<p>​    · Implement backpropagation to compute partial derivatives</p>
<p>​    · Use gradient checking to confirm that your backpropagation works. Then disable gradient checking.</p>
<p>​    · Use gradient descent or a built-in optimization function to minimize the cost function with the weights in theta.</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Model Selection and Evaluation</title>
    <url>/2020/20200531-Model-Selection-and-Evaluation/</url>
    <content><![CDATA[<h1 id="basic-model-selection-and-evaluation">Basic Model Selection and Evaluation<a title="#basic-model-selection-and-evaluation" href="#basic-model-selection-and-evaluation"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong></p>
<p>· Wikipedia</p>
<p>· Machine Learning</p>
<p>The recommended approach to solving machine learning problems is to:</p>
<p><strong>1)</strong> Start with a simple algorithm, implement it quickly, test it early on your cross validation data.</p>
<p><strong>2)</strong> Diagnosing bias and variance by ploting learning curves($ J_ {CV}(\Theta)$ and $ J_ {train}(\Theta)$) and gain guidance as to choose the right and effective solution to improve its performance.</p>
<p><strong>3)</strong> Tune the model hyperparameters.</p>
<p>​      For example: Getting more training examples, Adding features, Decreasing λ…</p>
<p><strong>4)</strong> Manually examine the errors on examples in the cross validation set and try to spot a trend where most of the errors were made.</p>
<h2 id="model-evaluation">Model Evaluation<a title="#model-evaluation" href="#model-evaluation"></a></h2>
<p>During the process of assessing the learning algorithm’s performance, it is important to do error analysis using some error metrics.</p>
<h3 id="1.-bias-variance-trade-off">1. Bias-Variance Trade-Off<a title="#1.-bias-variance-trade-off" href="#1.-bias-variance-trade-off"></a></h3>
<p>The prediction error for most machine learning algorithm can be broken down into three parts:</p>
<ul>
<li>Bias Error</li>
<li>Variance Error</li>
<li>Irreducible Error (introduced from the chosen framing of the problem which cannot be reduced.)</li>
</ul>
<p><strong>· Bias</strong> are the simplifying assumptions made by a model to make the target function easier to learn.</p>
<ul>
<li><strong>Low Bias</strong>: Suggests less assumptions about the form of the target function.</li>
<li><strong>High-Bias</strong>: Suggests more assumptions about the form of the target function.</li>
</ul>
<p><strong>· Variance</strong> is the amount that the estimate of the target function will change if different training data was used.</p>
<ul>
<li><strong>Low Variance</strong>: Suggests small changes to the estimate of the target function with changes to the training dataset, meaning that the algorithm is good at picking out the hidden underlying mapping between the inputs and the output variables.</li>
<li><strong>High Variance</strong>: Suggests large changes to the estimate of the target function with changes to the training dataset, meaning that the specifics of the training have influences the number and types of parameters used to characterize the mapping function.</li>
</ul>
<p>Examples of <strong>low-bias</strong> and <strong>high-variance</strong> machine learning algorithms include: Decision Trees, k-Nearest Neighbors and support Vector Machine.</p>
<p>Examples of <strong>high-bias</strong> and <strong>low-variance</strong> machine learning algorithms include: Linear Regression, Linear Discriminant Analysis and Logistic Regression.</p>
<p><u><a href="https://machinelearningmastery.com/gentle-introduction-to-the-bias-variance-trade-off-in-machine-learning/" target="_blank">More details from here</a></u>.</p>
<p><strong>Underfitting</strong>, or high bias, is when the form of our hypothesis function h maps poorly to the trend of the data. It is usually caused by a function that is too simple or uses too few features.</p>
<p><strong>Overfitting</strong>, or high variance, is caused by a hypothesis function that fits the available data but does not generalize well to predict new data. It is usually caused by a complicated function that creates a lot of unnecessary curves and angles unrelated to the data.</p>
<p>Options address the issue of overfitting:</p>
<ol>
<li>
<p>Reduce the number of features. (Manually or use model selection algorithm)</p>
</li>
<li>
<p>Regularization. (Keep all the features, but reduce the magnitude of parameters $ \theta_j$.)</p>
</li>
</ol>
<p>Reduces over-fitting by adding a penalty to the loss function.</p>
<ol start="3">
<li>Dropout</li>
</ol>
<h4 id="regularization">Regularization<a title="#regularization" href="#regularization"></a></h4>
<p><u><a href="https://www.analyticsvidhya.com/blog/2018/04/fundamentals-deep-learning-regularization-techniques/" target="_blank">More details from here</a></u>.</p>
<p><strong>1.For linear regression:</strong></p>
<p><strong>Cost function:</strong></p>
<p>$  J(\theta) =  \frac{1}{2m} [ \sum^{m}_ {i=1} {( h_ \theta(x^{(i)}) - y^{(i)} )^2} +  \lambda \sum^{n}_ {j=1} \theta_j^2 ] $</p>
<p>$ \lambda $ is the regularization parameter. It determines how much the costs of our theta parameters are inflated. (we don’t penalize the $\theta_0 $)</p>
<p>Using the above cost function with the extra summation, we can smooth the output of our hypothesis function to reduce overfitting. If lambda is chosen to be too large, it may smooth out the function too much and cause underfitting.</p>
<p><strong>Gradient descent:</strong></p>
<p>$ \theta_0 := \theta_0 - \alpha \frac{1}{m} \sum_ {i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} $</p>
<p>$ \theta_j := \theta_j (1-\alpha \frac{\lambda}{m}) - \alpha \frac{1}{m} \sum_ {i=1}^m ( h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} $</p>
<p><strong>Normal Equation:</strong></p>
<p>$\theta = \left( X^TX + \lambda \cdot L \right)^{-1} X^Ty $</p>
<p>$ \text{where}\ \ L = \begin{bmatrix} 0 &amp; &amp; &amp; &amp; \newline &amp; 1 &amp; &amp; &amp; \newline &amp; &amp; 1 &amp; &amp; \newline &amp; &amp; &amp; \ddots &amp; \newline &amp; &amp; &amp; &amp; 1 \newline\end{bmatrix} $</p>
<p>If m &lt; n (features), then $ X^TX $ is non-invertible. However, when we add the term λ⋅L, then $X^TX + λ⋅L $ becomes invertible.</p>
<p><strong>2.For logistic regression:</strong></p>
<p><strong>Cost function:</strong></p>
<p>$ J(\theta) = - \dfrac{1}{m} \sum_ {i=1}^m[y^{(i)} \log(h_ \theta(x^{(i)})) + (1- y^{(i)}) \log(1-h_ \theta(x^{(i)})) ] + \frac{1}{2m} \lambda \sum^{n}_ {j=1} \theta_j^2  $</p>
<p><strong>Gradient descent:</strong></p>
<p>$ \theta_0 := \theta_0 - \alpha \frac{1}{m} \sum_ {i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} $</p>
<p>$ \theta_j := \theta_j (1-\alpha \frac{\lambda}{m}) - \alpha \frac{1}{m} \sum_ {i=1}^m ( h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} $</p>
<h3 id="2.-precision-and-recall-trade-off">2. Precision and Recall Trade-Off<a title="#2.-precision-and-recall-trade-off" href="#2.-precision-and-recall-trade-off"></a></h3>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="padding:0"></th>
<th>Actual positive</th>
<th>Actual negative</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>Predicted positive</strong></td>
<td>True Positive</td>
<td>False Positive</td>
</tr>
<tr>
<td style="text-align:center"><strong>Predicted negative</strong></td>
<td>False Negative</td>
<td>True Negative</td>
</tr>
</tbody>
</table></div></div><p>$ Accuracy  = \frac{TP +TN }{TP + FP + FP + TN} $</p>
<p>Accuracy is the most intuitive performance measure and it is simply a ratio of correctly predicted observation to the total observations and it is a great measure only when you have symmetric datasets and  false positives and false negatives have similar cost. If the cost of false positives and false negatives are very different, we have to breakdown the accuracy formula even further and find a better evaluation metric.</p>
<p>$ Precision  = \frac{TP}{TP + FP}$</p>
<p>High precision means less data is predicted positive and relates to high false negative and low false positive.</p>
<p>$ Recall  = \frac{TP}{TP + FN}$ (Sensitivity)</p>
<p>High recall means more data is predicted positive and relates to high false positive and low false negative.</p>
<p>$ F_1  = 2 * \frac{Precision * Recall}{Precision + Recall} $</p>
<p>F1 Score is the weighted average of precision and recall. Therefore, this score takes both false positives and false negatives into account. So we can evaluate the model based on  the F1 score.</p>
<img src="https://i.loli.net/2020/05/31/ADnS1bRrB6pK5qc.png" alt="precision" style="zoom:80%;">
<p>(from wikipedia)</p>
<h2 id="model-selection">Model Selection<a title="#model-selection" href="#model-selection"></a></h2>
<h3 id="train,-test-and-validation-datasets">Train, Test and Validation Datasets<a title="#train,-test-and-validation-datasets" href="#train,-test-and-validation-datasets"></a></h3>
<ul>
<li><strong>Training Dataset</strong>: The sample of data used to fit the parameters of model. (60%)</li>
<li><strong>Validation Dataset</strong>: The sample of data used to provide an unbiased evaluation of a model fit on the training dataset while tuning model hyperparameters. The evaluation becomes more biased as skill on the validation dataset is incorporated into the model configuration. (20%)</li>
<li><strong>Test Dataset</strong>: The sample of data that has not been used prior, either for training the model or tuning the model parameters and only used to provide an unbiased evaluation of the skill of the final tuned model when comparing or selecting between final models. (20%)</li>
</ul>
<h3 id="learning-curve">Learning curve<a title="#learning-curve" href="#learning-curve"></a></h3>
<p>When we test our simple model on validation dataset, we can plot a learning curve with different hyperparameters to help us to gain guidance as to choose the right and effective solution to improve its performance.</p>
<p>For example: the size of training set.</p>
<p><strong>1) Experiencing high bias:</strong></p>
<img src="https://i.loli.net/2020/05/31/bz2sP7rSZlapHov.png" alt="high bias" style="zoom:150%;">
<p><strong>Low training set size</strong>: causes $ J_ {train}(\Theta)$ to be low and $ J_ {CV}(\Theta)$ to be high.</p>
<p><strong>Large training set size</strong>: causes both $ J_ {CV}(\Theta)$ and $ J_ {train}(\Theta)$ to be high with $ J_ {CV}(\Theta) ≈ J_ {train}(\Theta) $</p>
<p>If a learning algorithm is suffering from <strong>high bias</strong>, getting more training data will not help much.</p>
<p><strong>2) Experiencing high variance:</strong></p>
<img src="https://i.loli.net/2020/05/31/d5fATNm4KjUVSeC.png" alt="high variance" style="zoom:150%;">
<p><strong>Low training set size</strong>: $ J_ {train}(\Theta)$ will be low and $ J_ {CV}(\Theta)$ will be high.</p>
<p><strong>Large training set size</strong>: $ J_ {train}(\Theta)$ increases with training set size and $ J_ {CV}(\Theta)$ continues to decrease without leveling off. Also,$ J_ {train}(\Theta) &lt;  J_ {CV}(\Theta)$ but the difference between them remains significant.</p>
<p>If a learning algorithm is suffering from <strong>high variance</strong>, getting more training data is likely to help.</p>
<p>After ploting the learning curve, we can tune the model hyperparameters targetedly.</p>
<p>For example:</p>
<ul>
<li>
<p><strong>Getting more training examples:</strong> Fixes high variance</p>
</li>
<li>
<p><strong>Trying smaller sets of features:</strong> Fixes high variance</p>
</li>
<li>
<p><strong>Adding features:</strong> Fixes high bias</p>
</li>
<li>
<p><strong>Adding polynomial features:</strong> Fixes high bias</p>
</li>
<li>
<p><strong>Decreasing λ:</strong> Fixes high bias</p>
</li>
<li>
<p><strong>Increasing λ:</strong> Fixes high variance.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Machine Lerning</category>
      </categories>
      <tags>
        <tag>Model Selection and Evaluation</tag>
      </tags>
  </entry>
  <entry>
    <title>Support Vector Machines</title>
    <url>/2020/20200605-Support-Vector-Machines/</url>
    <content><![CDATA[<h1 id="support-vector-machines">Support Vector Machines<a title="#support-vector-machines" href="#support-vector-machines"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong></p>
<p>· Wikipedia</p>
<p>· Machine Learning</p>
]]></content>
      <categories>
        <category>Machine Lerning</category>
      </categories>
      <tags>
        <tag>Support Vector Machines</tag>
      </tags>
  </entry>
  <entry>
    <title>Convolutional Neural Networks</title>
    <url>/2020/20200625-Convolutional-Neural-Networks/</url>
    <content><![CDATA[<h1 id="convolutional-neural-networks-(cnn)">Convolutional Neural Networks (CNN)<a title="#convolutional-neural-networks-(cnn)" href="#convolutional-neural-networks-(cnn)"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong></p>
<p>· Wikipedia</p>
<p>· <u><a href="https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53" target="_blank">Sources NO.1</a></u></p>
<p>· <u><a href="https://www.analyticsvidhya.com/blog/2020/02/mathematics-behind-convolutional-neural-network/?utm_source=blog&amp;utm_medium=cnn-vs-rnn-vs-mlp-analyzing-3-types-of-neural-networks-in-deep-learning" target="_blank">Sources NO.2</a></u></p>
<p>· <u><a href="https://towardsdatascience.com/convolution-neural-networks-a-beginners-guide-implementing-a-mnist-hand-written-digit-8aa60330d022" target="_blank">Sources NO.3</a></u></p>
<p><img src="https://i.loli.net/2020/07/17/Ve2RsvIFM7WozLS.jpg" alt="m" class="φcx"></p>
<p>A Convolutional Neural Network is a Deep Learning algorithm which can take in an input image, assign importance (learnable weights and biases) to various objects in the image and be able to differentiate one from the other. ConvNets have the ability to learn these characteristics.</p>
<p>The architecture of a ConvNet is analogous to that of the connectivity pattern of Neurons in the Human Brain and was inspired by the organization of the Visual Cortex. Individual neurons respond to stimuli only in a restricted region of the visual field known as the Receptive Field. A collection of such fields overlap to cover the entire visual area.</p>
<h2 id="why-cnn?">Why CNN?<a title="#why-cnn?" href="#why-cnn?"></a></h2>
<p>A CNN, in specific, has one or more layers of convolution filters comparing to the multilayer perceptron. A convolution filter receives its input from multiple units from the previous layer which together create a proximity.</p>
<p>The convolution layers (as well as pooling layers) are especially beneficial as:</p>
<ul>
<li>**·**They uset the parameter sharing. A single filter is applied across different parts of an input to produce a feature map. So, they reduce the number of parameters in the network which reduces the chance of overfitting as the model would be less complex than a fully connected network (MLP).  Also, different filters can extract different kinds of features from an input.</li>
<li><strong>·</strong> They consider the shared information (the spatial features) in the small neighborhoods. Filters in the ConNets are used to extract the relevant features from the input using the convolution operation.</li>
<li><strong>·</strong> They learn the filters automatically without mentioning it explicitly. These filters help in extracting the right and relevant features from the input data.</li>
</ul>
<h2 id="layers">Layers<a title="#layers" href="#layers"></a></h2>
<h3 id="convolution-layer">Convolution layer<a title="#convolution-layer" href="#convolution-layer"></a></h3>
<p><img src="https://i.loli.net/2020/07/17/gxehjuNRdkQEmM5.gif" alt="k" class="φcx"></p>
<p>The convolution filters or kernels moves to the right with a certain Stride Value and  do the dot product till it parses the complete width. Moving on, it hops down to the beginning (left) of the image with the same Stride Value and repeats the process until the entire image is traversed.</p>
<p>The objective of the Convolution Operation is to extract the high-level features such as edges, from the input image. Each filter can extract different features.</p>
<h4 id="pading">Pading<a title="#pading" href="#pading"></a></h4>
<p>Padding is a technique to simply add zeros around the margin of the image to increase it’s dimension. Padding allows us to emphasize the border pixels and in order lose less information.</p>
<img src="https://i.loli.net/2020/07/17/btVT1sBFp9c8I5E.gif" alt="pading" style="zoom: 67%;">
<p>Same Padding: Dimensionality is remains the same.</p>
<p>Valid Padding: Dimensionality is increased.</p>
<p>Feature size = ((Image size + 2 * Padding size − Kernel size) / Stride)+1</p>
<h3 id="pooling-layer">Pooling layer<a title="#pooling-layer" href="#pooling-layer"></a></h3>
<p>Pooling layer helps reduce the spatial size of the convolved features and also helps reduce over-fitting by providing an abstracted representation of them. It is a sample-based discretization process. Furthermore, it is useful for extracting dominant features which are rotational and positional invariant, thus maintaining the process of effectively training of the model.</p>
<p><img src="https://i.loli.net/2020/07/17/heRa2M5WCoPvilI.gif" alt="p" class="φcx"></p>
<p>The kernel take the max or average of the region from the input overlapped by the kernel.</p>
<p>Max Pooling also performs as a Noise Suppressant. It discards the noisy activations altogether and also performs de-noising along with dimensionality reduction. On the other hand, Average Pooling simply performs dimensionality reduction as a noise suppressing mechanism. Hence, we can say that Max Pooling performs a lot better than Average Pooling.</p>
<h3 id="fully-connected-layer">Fully connected layer<a title="#fully-connected-layer" href="#fully-connected-layer"></a></h3>
<p>Adding a Fully-Connected layer is a cheap way of learning non-linear combinations of the high-level features as represented by the output of the convolutional layer.</p>
<p>We flatten the image into a column vector. The flattened output is fed to a feed-forward neural network and backpropagation applied to every iteration of training. Over a series of epochs, the model is able to distinguish between dominating and certain low-level features in images and classify them using the Softmax Classification technique.</p>
<img src="https://i.loli.net/2020/07/17/m6rhp5qJojD9PFN.jpg" alt="f" style="zoom: 67%;">
<p>Usually, activation function and dropout layer are used between two consecutive fully connected layers to introduce non-linearity and reduce over-fitting respectively. At the last fully connected layer we choose the output size based on our application.</p>
<h3 id="dropout-layer">Dropout layer<a title="#dropout-layer" href="#dropout-layer"></a></h3>
<p>Dropout is a regularization technique used to reduce over-fitting on neural networks. Usually, deep learning models use dropout on the fully connected layers, but is also possible to use dropout after the max-pooling layers, creating image noise augmentation.</p>
<p>Dropout randomly zeroes some of the connections of the input tensor with probability p using samples from a Bernoulli distribution.</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Feature Engineering</title>
    <url>/2020/20200716-Feature-Engineering/</url>
    <content><![CDATA[<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong></p>
<p>· Wikipedia</p>
<p>· Machine Learning</p>
]]></content>
      <categories>
        <category>Machine Lerning</category>
      </categories>
      <tags>
        <tag>Feature Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Basis 03</title>
    <url>/2020/20200908-Python-Basics-03/</url>
    <content><![CDATA[<h1 id="python-basis-03">Python Basis 03<a title="#python-basis-03" href="#python-basis-03"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p><strong>· materials:</strong><br>
· <a href="https://www.py4e.com/" target="_blank"><i>Python for Everybody (Exploring Data Using Python 3)</i></a>  by Charles R. Severance<br>
· <i>Learn Python 3 the Hard Way</i> by Zed A. Shaw<br>
· <u><a href="https://github.com/jackfrued/Python-100-Days" target="_blank">Python-100-Days</a></u> by jackfrued<br>
· <u><a href="https://docs.python.org/3/tutorial/index.html" target="_blank">Python Tutorial</a></u><br>
· <a href="https://google.github.io/styleguide/pyguide.html" target="_blank"><u>Google Python Style Guide</u></a></p>
<h3 id="part.1-process-and-thread">Part.1 Process and thread<a title="#part.1-process-and-thread" href="#part.1-process-and-thread"></a></h3>
<h3 id="part.2-network-programming">Part.2 Network Programming<a title="#part.2-network-programming" href="#part.2-network-programming"></a></h3>
<h3 id="part.3-using-web-services">Part.3 Using Web Services<a title="#part.3-using-web-services" href="#part.3-using-web-services"></a></h3>
<h3 id="part.4-databases">Part.4 Databases<a title="#part.4-databases" href="#part.4-databases"></a></h3>
<h3 id="part.5-data-visualization">Part.5 Data Visualization<a title="#part.5-data-visualization" href="#part.5-data-visualization"></a></h3>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scheme Basics</title>
    <url>/2020/20200915-Scheme-Basics/</url>
    <content><![CDATA[<h1 id="scheme-basics">Scheme Basics<a title="#scheme-basics" href="#scheme-basics"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <a href="https://inst.eecs.berkeley.edu/~cs61a/su19/" target="_blank"><u>CS61A Summer 2019 at UCB</u></a></p>
<h3 id="part.1-scheme-values">Part.1 Scheme values<a title="#part.1-scheme-values" href="#part.1-scheme-values"></a></h3>
<p><strong>Ⅰ. Atoms:</strong> primitive values that cannot be broken up into smaller parts</p>
<ul>
<li>numbers: <code>10, -6, 5.7, 4021</code></li>
<li>booleans: <code> #t, #f</code></li>
<li>symbols: <code>hello, world</code></li>
</ul>
<p><strong>Ⅱ. Pairs and Lists:</strong>  a sequence of zero or more values<br>
<code>(1 2 3 4 5 6)</code><br>
The pair is the basic compound value in Scheme. Lists in Scheme are created using pairs. They’re linked lists.</p>
<p>1.Pair<br>
Pairs are created using the <code>cons</code> expression in Scheme<br>
<code>car</code> selects the first element in a pair<br>
<code>cdr</code> selects the second element in a pair<br>
The second element of a pair must be another pair, or <code>nil</code></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">scm&gt; (define x (cons 1 (cons 3 nil))</span><br><span class="line">x</span><br><span class="line">scm&gt; x</span><br><span class="line">(<span class="name">1</span> <span class="number">3</span>)</span><br><span class="line">scm&gt; (car x)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">scm&gt; (cdr x)</span><br><span class="line">(<span class="name">3</span>)</span><br></pre></td></tr></table></figure>
<p>2.List<br>
The list constructor takes in any number of elements and puts each element as a single element in a list.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">scm&gt; (list 1 2 3)</span><br><span class="line">(<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line">scm&gt; (list 0 (list 1 2 3))</span><br><span class="line">(<span class="name">0</span> (<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>The quote special form takes in a single argument and returns an unevaluated version of the argument. Quoting a symbol gives a symbol back. Quoting the representation of a list gives a list.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">scm&gt; ‘(0 (1 2 3))</span><br><span class="line">(<span class="name">0</span> (<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p><strong>cons</strong>: When you want to add an element on to the start of a list.<br>
Ex: add an element to the start of the list returned by a recursive call<br>
<strong>list:</strong>  When you have multiple elements you want to put into a list all at once.<br>
Ex: want to create a two element list containing x and y<br>
<strong>quote:</strong>  When you know the exact structure of the list and the values it contains.<br>
Ex: create a list to pass in as an argument in an interactive session</p>
<p><strong>Ⅲ. Procedures:</strong>  function objects, either built-in or user-defined<br>
<code>(lambda (x) (* x x))</code></p>
<h3 id="part.2-scheme-expressions">Part.2 Scheme expressions<a title="#part.2-scheme-expressions" href="#part.2-scheme-expressions"></a></h3>
<p>Scheme programs consist only of expressions, all of which can be categorized into either atomic expressions or combinations.<br>
<strong>Ⅰ. Atomic expressions</strong><br>
<em>Self-evaluating:</em> numbers, booleans<br>
<code>3, 5.5, -10, #t, #f</code><br>
<em>Symbols:</em> names bound to values<br>
<code>+, modulo, list, x, foo, hello-world</code></p>
<p><strong>Ⅱ. Combinations</strong></p>
<p><code>(&lt;operator&gt; &lt;operand1&gt; &lt;operand2&gt; …)</code><br>
A combination is either a <strong>call expression</strong> or a <strong>special form expression</strong>.<br>
<code>(+ 2 3)</code>, <code>(abs (/ 20 5))</code>, <code>(&lt; 4 8.5)</code><br>
<code>(define x 5)</code>, <code>(if #t 10 20)</code>, <code>(lambda (x) (* x x))</code></p>
<p><strong>· Call expressions</strong><br>
A call expression applies a procedure to some arguments.</p>
<p>Evaluate call expressions:<br>
Step 1.  Evaluate the operator to get a procedure.<br>
Step 2.  Evaluate all operands left to right to get the arguments.<br>
Step 3. Apply the procedure to the arguments.</p>
<p><strong>· Special form expressions</strong><br>
1.Assigning values to names<br>
The define special form assigns a value to a name:<br>
<code>(define &lt;name&gt; &lt;expr&gt;)</code><br>
Evaluate:<br>
Step 1. Evaluate the given expression.<br>
Step 2. Bind the resulting value to the given name in the current frame.<br>
Step 3. Return the name as a symbol.</p>
<p>2.Defining functions with names<br>
The second version of define is a shorthand for creating a function with a name:<br>
<code>(define (&lt;name&gt; &lt;param1&gt; &lt;param2&gt; …) &lt;body&gt;)</code><br>
Evaluate:<br>
Step 1. Create a lambda procedure with the given parameters and body.<br>
Step 2. Bind it to the given name in the current frame.<br>
Step 3. Return the function name as a symbol.<br>
(If there is more than one expression in the body, the function returns the value of the last expression.)</p>
<p>3.Creating functions<br>
The lambda special form returns a lambda procedure.<br>
<code>(lambda (&lt;param1&gt; &lt;param2&gt; …) &lt;body&gt;)</code><br>
Evaluate:<br>
Step 1. Create a lambda procedure with the given parameters and body.<br>
Step 2. Return the lambda procedure.</p>
<p>4.Control flow<br>
The if special form allows us to evaluate an expression based on a condition:<br>
<code>(if &lt;predicate&gt; &lt;if-true&gt; &lt;if-false&gt;)</code><br>
Evaluate:<br>
Step 1. Evaluate the <code>&lt;predicate&gt;</code>.<br>
Step 2. If <code>&lt;predicate&gt;</code> evaluates to anything but #f, evaluate <code>&lt;if-true&gt;</code> and return the value. Otherwise, evaluate <code>&lt;if-false&gt;</code> if provided and return the value.</p>
<p>The cond special form allows us to specify many conditions and consequences:<br>
<code>(cond (&lt;pred1&gt; &lt;expr1&gt;) (&lt;pred2&gt; &lt;expr2&gt;) … (else &lt;else-expr&gt;))</code><br>
Evaluate:<br>
Step 1. Evaluate <code>&lt;pred1&gt;</code>, <code>&lt;pred2&gt;</code>, etc. until one evaluates to a truth-y value.<br>
Step 2. Evaluate and return the expression corresponding to the first truth-y predicate. If no predicate evaluates to a truth-y value, evaluate and return <code>&lt;else-expr&gt;</code> if provided.</p>
<p>5.Others<br>
<code>(equal? e1 e2)</code> checks if e1 and e2 evaluate to equivalent values.<br>
<code>(eq? e1 e2)</code> checks if e1 and e2 evaluate to identical values.</p>
<h3 id="part.3-tail-recursion">Part.3 Tail Recursion<a title="#part.3-tail-recursion" href="#part.3-tail-recursion"></a></h3>
<p>We know that a function call will form a “call record” in memory, also known as a “call frame”, which saves information such as the call location and internal variables. If function B is called inside function A, then a call frame of B will be formed above the call frame of A. Wait until the end of B runs and return the result to A, then the call frame of B will disappear. If function B also calls function C, then there is a call frame of C, and so on. All call frames form a “call stack” (call stack).</p>
<p><strong>· Tail Call</strong><br>
In computer science, a tail call is a subroutine call performed as the final action of a procedure.  If all recursive calls are in tail contexts, we say that function is  tail recursive. If a language supports tail call optimization, a tail recursive function will only ever open a constant number of frames.</p>
<p>Tail calls can be implemented without adding a new stack frame to the call stack. Most of the frame of the current procedure is no longer needed, and can be replaced by the frame of the tail call, modified as appropriate (similar to overlay for processes, but for function calls). The program can then jump to the called subroutine.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">; original recursive call</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fact</span> n)</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">0</span>)</span><br><span class="line">   <span class="number">1</span></span><br><span class="line">   (<span class="name"><span class="builtin-name">*</span></span> n (<span class="name">fact</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>)))))  </span><br><span class="line"><span class="comment">;We need to keep these frames open because the last step in the function is to multiply n with the result of the recursive call.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; tail call</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fact</span> n)</span><br><span class="line">  (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fact-tail</span> n result)</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&lt;=</span></span> n <span class="number">1</span>)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">fact-tail</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>) (<span class="name"><span class="builtin-name">*</span></span> n result))))</span><br><span class="line">  (<span class="name">fact-tail</span> n <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<h3 id="part.5-macros">Part.5 Macros<a title="#part.5-macros" href="#part.5-macros"></a></h3>
<p>In Scheme,  expressions are lists (or primitive values) and quoting prevents evaluation of an expression. Calling <code>eval</code> on an unevaluated expression will evaluate that value. So it means that they’re also a form of data. And we can assign expressions to variables, pass expressions into functions, and create and return new expressions within functions.</p>
<p><code>'</code> : takes in a single argument and returns an unevaluated version of the argument.<br>
<code>list</code>: takes in any number of elements and puts each element as a single element in a list.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">scm&gt; (list &#x27;quotient 10 2)</span><br><span class="line">(<span class="name"><span class="builtin-name">quotient</span></span> <span class="number">10</span> <span class="number">2</span>)</span><br><span class="line">scm&gt; (eval (list &#x27;quotient 10 2))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">dounle</span> expr)</span><br><span class="line">        (<span class="name"><span class="builtin-name">begin</span></span> (<span class="name"><span class="builtin-name">eval</span></span> expr) (<span class="name"><span class="builtin-name">eval</span></span> expr))</span><br><span class="line">scm&gt; (<span class="name">double</span> &#x27;(print <span class="number">2</span>))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">dounle</span> expr)</span><br><span class="line">        (<span class="name"><span class="builtin-name">list</span></span> <span class="symbol">&#x27;begin</span> expr expr))</span><br><span class="line">scm&gt; (eval  (double &#x27;(print 2)))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><code>Macros</code> are a more convenient way to transform or create expressions. The <code>define-macro</code> special form will create a macro procedure. Macros take in and return expressions, which are then evaluated <strong>in place of</strong> the call to the macro.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define-macro</span> (<span class="name">twice</span> expr)</span><br><span class="line">  (<span class="name"><span class="builtin-name">list</span></span> <span class="symbol">&#x27;begin</span> expr expr))</span><br><span class="line">scm&gt; (twice (print 2)) ;Equivalent to: (begin (print 2) (print 2))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><code>begin</code> is a special form takes in any number of expressions, evaluates them in order, and evaluates to the value of the final expression.</p>
<p><strong>· The evaluation procedure of Macros</strong>:<br>
Step.1: Evaluate the operator sub-expression, which evaluates to a macro procedure.<br>
Step.2: Apply the macro procedure to the operand expressions <em>without evaluating them first</em>.<br>
Step.3: Evaluate the expression returned by the macro procedure in the frame the macro was called in.(must return an unevaluated expression. e.g. a linked list)</p>
<p>Scheme doesn’t have for loops, but thanks to macros, we can add them.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define-macro</span> (<span class="name">for</span> sym in vals do expr)</span><br><span class="line">  (<span class="name"><span class="builtin-name">list</span></span> <span class="symbol">&#x27;map</span> (<span class="name"><span class="builtin-name">list</span></span> <span class="symbol">&#x27;lambda</span> (<span class="name"><span class="builtin-name">list</span></span> sym) expr) vals))</span><br><span class="line"></span><br><span class="line">scm&gt; (for x in &#x27;(1 2 3 4) do (* x x))</span><br><span class="line">(<span class="name">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span>)</span><br><span class="line">scm&gt; (map (lambda (x) (* x x)) &#x27;(1 2 3 4))</span><br><span class="line">(<span class="name">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">define-macro</span> (<span class="name">for</span> sym vals expr)</span><br><span class="line">  `(map (lambda (,sym) ,expr) ,vals))</span><br></pre></td></tr></table></figure>
<p>Quasiquotation allows you to have some parts of a list be read literally and some parts be evaluated.</p>
<p>**<code>** Short for(quasiquote …), </code>,`Short for (unquote …)</p>
<h3 id="part.6-streams">Part.6 Streams<a title="#part.6-streams" href="#part.6-streams"></a></h3>
<p>Scheme uses streams just like the iterators in Python whose <code>rest</code> is lazily evaluated.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">ints</span> first)</span><br><span class="line">    (<span class="name">cons-stream</span> first</span><br><span class="line">                 (<span class="name">ints</span> (<span class="name"><span class="builtin-name">+</span></span> first <span class="number">1</span>)))</span><br><span class="line">scm&gt; (<span class="name">ints</span> <span class="number">1</span>)</span><br><span class="line">(<span class="name">1</span> . #[<span class="name">promise</span> (<span class="name"><span class="builtin-name">not</span></span> forced)]) <span class="comment">;repesent these expressions are only valuated when we ask.</span></span><br><span class="line">  </span><br><span class="line">scm&gt; (<span class="name"><span class="builtin-name">define</span></span> s (<span class="name">cons-stream</span> <span class="number">1</span> (<span class="name">cons-stream</span> <span class="number">2</span> nil)))</span><br><span class="line">s</span><br><span class="line">scm&gt; s</span><br><span class="line">(<span class="name">1</span> . #[<span class="name">promise</span> (<span class="name"><span class="builtin-name">not</span></span> forced)])</span><br><span class="line">scm&gt; (<span class="name">cdr-stream</span> s)           <span class="comment">; cdr-stream forces Scheme to compute the rest.</span></span><br><span class="line">(<span class="name">2</span> . #[<span class="name">promise</span> (<span class="name"><span class="builtin-name">not</span></span> forced)])</span><br><span class="line">scm&gt; (<span class="name">cdr-stream</span> (<span class="name">cdr-stream</span> s))</span><br><span class="line">()</span><br></pre></td></tr></table></figure>
<p><code>promise</code>:  an object that delays evaluation of an expression.<br>
The <code>delay</code> special form creates promises.<br>
The <code>force</code> procedure evaluates the expression inside the promise</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">scm&gt; (define x (delay (print 5)))</span><br><span class="line">x</span><br><span class="line">scm&gt; x</span><br><span class="line">#[promise (not forced)]</span><br><span class="line">scm&gt; (force x)</span><br><span class="line"><span class="number">5</span></span><br><span class="line">scm&gt; x</span><br><span class="line">#[promise (forced)]</span><br></pre></td></tr></table></figure>
<p><strong>· Constant Stream</strong></p>
<p>A constant stream is an infinitely long stream with a number repeated.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">constant-stream</span> i)</span><br><span class="line">        (<span class="name">cons-stream</span> i (<span class="name">constant-stream</span> i)))</span><br><span class="line">scm&gt; (define ones (constant-stream 1))</span><br><span class="line">scm&gt; (car ones)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">scm&gt; (car (cdr-stream ones))</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>· Add-Stream and Ints-Stream</strong></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">add-stream</span> s1 s2)</span><br><span class="line">	(<span class="name">cons-stream</span> (<span class="name"><span class="builtin-name">+</span></span> (<span class="name"><span class="builtin-name">car</span></span> s1) (<span class="name"><span class="builtin-name">car</span></span> s2))</span><br><span class="line">				  (<span class="name">add-stream</span> (<span class="name">cdr-stream</span> s1) (<span class="name">cdr-stream</span> s2)))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> ones (<span class="name">cons-stream</span> <span class="number">1</span> ones))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> ints (<span class="name">cons-stream</span> <span class="number">1</span> (<span class="name">add-stream</span> ones ints))</span><br></pre></td></tr></table></figure>
<h3 id="part.7-evaluating-process">Part.7 Evaluating Process<a title="#part.7-evaluating-process" href="#part.7-evaluating-process"></a></h3>
<p><strong>Ⅰ. Evaluating primitive expressions</strong></p>
<p><strong>Self-evaluating expressions</strong>:<br>
These expressions evaluate to themselves.</p>
<p><strong>Symbols</strong>:<br>
Look in the current frame for the symbol. If it is found, return the value bound to it.<br>
If it is not found in the current frame, look in the parent frame. If it is not found in the parent frame, look in its parent frame, and so on. If the global frame is reached and the name is not found, raise a <code>SchemeError</code>.</p>
<p><strong>Ⅱ. Evaluating Combinations</strong></p>
<p>1.Special form</p>
<p>If the operator is a symbol and is found in the dictionary of special forms, the combination is a special form. Each special form has special rules for evaluation.</p>
<p>2.Call expression</p>
<p>Step 1. Evaluate the operator to get a procedure.<br>
Step 2. Evaluate all of the operands from left to right.<br>
Step 3. Apply the procedure to the values of the operands.</p>
<p>A <strong>built-in procedure</strong> is a procedure that is predefined in our Scheme interpreter, e.g. <code>+, list, modulo</code>, etc.</p>
<p>A <strong>user-defined procedure</strong> is a procedure defined by the user, either with a lambda expression or a define expression.<br>
<strong>· Applying user-defined procedures:</strong><br>
Step 1. Open a new frame whose parent is the parent frame of the procedure being applied.<br>
Step 2. Bind the formal parameters of the procedure to the arguments in the new frame.<br>
Step 3. Evaluate the body of the procedure in the new frame.</p>
<img src="https://i.loli.net/2020/09/15/ti4eSyWaPGkjupI.png" alt="11" style="zoom: 67%;">
<p>​                                                            （from CS61A Summer 2019 at UCB）</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Scheme</tag>
      </tags>
  </entry>
  <entry>
    <title>Programs Basics 01</title>
    <url>/2020/20200910-Programs-Basics-01/</url>
    <content><![CDATA[<h1 id="programs-basis-01">Programs Basis 01<a title="#programs-basis-01" href="#programs-basis-01"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Structure and Interpretation of Computer Programs</i> by Harold Abelson and Gerald Jay Sussman with Julie Sussman<br>
· <a href="https://inst.eecs.berkeley.edu/~cs61a/su19/" target="_blank"><u>CS61A Summer 2019 at UCB</u></a><br>
· Wikipedia</p>
<p>Goals of Program Decomposition<br>
1.Complexity Management<br>
2.Reusability and abstraction</p>
<h3 id="part.1-building-abstractions-with-procedures">Part.1 Building Abstractions with Procedures<a title="#part.1-building-abstractions-with-procedures" href="#part.1-building-abstractions-with-procedures"></a></h3>
<p>A <strong>function</strong> should solve one problem.</p>
<p>A function should have the <strong>smallest</strong> <strong>number of parameters</strong> possible to solve its problem.</p>
<p>A repeated sequence should be put in its own function.<br>
Avoid repeating more than a couple lines of code.</p>
<p>micro level - take one of those smaller functions and identify smaller problems within that that WONT necessarily identifying separate questions and reusing them</p>
<h3 id="part.2-building-abstractions-with-data">Part.2 Building Abstractions with Data<a title="#part.2-building-abstractions-with-data" href="#part.2-building-abstractions-with-data"></a></h3>
<p>Data abstraction lets us manipulate compound values as units.</p>
<p>Isolate two parts of any program that uses data:<br>
How data are represented (as parts)<br>
How data are manipulated (as units)<br>
Data abstraction: A methodology by which functions enforce an abstraction barrier between representation and use.</p>
<p><strong>Abstraction Barriers:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># constructor rational(n,d)  returns a rational number </span></span><br><span class="line"><span class="comment"># Selector numerator(x),     returns the numerator of x</span></span><br><span class="line"><span class="comment">#          denominator(x)    returns the denominator of x</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(y),</span><br><span class="line">                    denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    nx, dx = numer(x), denom(x)</span><br><span class="line">    ny, dy = numer(y), denom(y)</span><br><span class="line">    <span class="keyword">return</span> rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_rational</span>(<span class="params">x</span>):</span></span><br><span class="line">    print(numer(x), <span class="string">&#x27;/&#x27;</span>, denom(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rationals_are_equal</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br></pre></td></tr></table></figure>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>Parts of the program that…</th>
<th>Treat rationals as…</th>
<th>Using…</th>
</tr>
</thead>
<tbody>
<tr>
<td>Use rational numbers to perform computation</td>
<td>whole data values</td>
<td>add_rational, mul_rational, rationals_are_equal, print_rational</td>
</tr>
<tr>
<td>Create rationals or implement rational operations</td>
<td>numerators and denominators</td>
<td>rational, numer, denom</td>
</tr>
<tr>
<td>Implement selectors and constructor for rationals</td>
<td>two-element lists</td>
<td>list literals and element selection</td>
</tr>
</tbody>
</table></div></div><ul>
<li>
<p>Decomposition</p>
<p><strong>Program Decomposition</strong> is a process for breaking down large problems into logical sub-problems.</p>
</li>
</ul>
<p>1.A well decomposed function is sometimes likened to a “black box”. The black box presents the simplest possible abstraction to describe what the output will be and hides the implementation. Its inner workings are not revealed.</p>
<p>Data abstraction is an example of this. For constructors &amp; selectors, we don’t care about the body of the function. We only need to know what they take as input and their intended result.</p>
<p>2.Decomposition is a divide and conquer strategy. （The process of breaking a large problem into more manageable sub-problems）</p>
<p>From the outside, black boxes are simply defined in terms of their input and output, so they are easy to piece together.</p>
<h3 id="part.3-program-paradigms">Part.3 Program Paradigms<a title="#part.3-program-paradigms" href="#part.3-program-paradigms"></a></h3>
<p>Program is the way approach writing program and program’s relationship to how it’s executed by  the interpreter or complier.</p>
<p><strong>Imperative program</strong> contain explicit instructions to tell the computer <strong>how</strong> to accomplish something. The interpreter(which is designed to execute as optimally as possible) then executes those instructions.</p>
<p><strong>Declarative programming</strong>, where we can just tell the computer <strong>what</strong> we want, instead of how we want it done. The interpreter then figures out how to accomplish that.</p>
<h3 id="part.4-interpreting-computer-programs">Part.4 Interpreting Computer Programs<a title="#part.4-interpreting-computer-programs" href="#part.4-interpreting-computer-programs"></a></h3>
<p>**Ⅰ. Interpreter **</p>
<p>There are two languages involved:<br>
Implemented language: this is the language the user types in.<br>
Implementation language: this is the language that interpreter is implemented in.<br>
(Implemented Language is translated into the Implementation Language)</p>
<p>The translation step in a couple forms:	<br>
Compiled (pre-translated) - translate all at once and run later. (C, C++…)<br>
Interpreted (translated on-the-fly) - translate while the program is running. (Python, Java…)</p>
<p>An interpreter does 3 things:<br>
Reads input from user in a specific programming language.<br>
Translates input to be computer readable and evaluates the result.<br>
Prints the result for the user.</p>
<img src="https://i.loli.net/2020/09/15/jOYo8UFcEsZbHhB.png" alt="12" style="zoom:80%;">
<p>​                                                    (from CS61A Summer 2019 at UCB)</p>
<p><strong>1.Read</strong></p>
<p>1.Lexical Analysis (Lexer):<br>
Turning the input into a collection of <em>tokens</em>. A token: single input of the input string, e.g. literals, names, keywords, delimiters.</p>
<p>2.Syntactic Analysis (Parser):<br>
Turning tokens into a representation of the expression in the implementing language.</p>
<p><strong>2.Evaluate</strong></p>
<p>Rules for evaluating an expression depends on the expression’s type.</p>
<p><strong>· Frames and Environments</strong></p>
<p>When evaluating expressions, the current environment consists of the current frame, its parent frame, and all its ancestor frames until the Global Frame.</p>
<p>Frames are represented in our interpreter as instances of the <strong>Frame</strong> class. Each frame instance has two instance attributes:<br>
<strong>bindings</strong>: a dictionary that binds strings to values.<br>
<strong>parent</strong>: the parent frame, another <strong>Frame</strong> instance.</p>
<p>The evaluator needs to know the current environment, given as a single <strong>Frame</strong> instance, in order to look up names in expressions.</p>
<p><a href="https://oreodu.github.io/2020/09/15/20200915-Scheme-Language-Basis/" target="_blank"><u>See the evaluating process of Scheme here</u></a></p>
<h3 id="part.3-modularity,-objects,-and-state">Part.3 Modularity, Objects, and State<a title="#part.3-modularity,-objects,-and-state" href="#part.3-modularity,-objects,-and-state"></a></h3>
<h3 id="part.4-meta-linguistic-abstraction">Part.4 Meta-Linguistic Abstraction<a title="#part.4-meta-linguistic-abstraction" href="#part.4-meta-linguistic-abstraction"></a></h3>
<h3 id="part.5-register-machine'-model-of-control">Part.5 Register Machine’ Model of Control<a title="#part.5-register-machine'-model-of-control" href="#part.5-register-machine'-model-of-control"></a></h3>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Basics</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Basics</title>
    <url>/2020/20200916-SQL-Basics/</url>
    <content><![CDATA[<h1 id="sql-basics">SQL Basics<a title="#sql-basics" href="#sql-basics"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <a href="https://inst.eecs.berkeley.edu/~cs61a/su19/" target="_blank"><u>CS61A Summer 2019 at UCB</u></a></p>
<p>SQL is an example of a (declarative) language with interacts with a  database management system (DBMS) in order to make data processing easier and faster</p>
<h3 id="part.1-create-the-table">Part.1 Create the Table<a title="#part.1-create-the-table" href="#part.1-create-the-table"></a></h3>
<p><strong>· Make a table</strong></p>
<p>A CREATE TABLE statement gives a global name to a table.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE [name]([columns]); # create empty table</span><br><span class="line"></span><br><span class="line">CREATE TABLE dogs(name, fur, phrase DEFAULT &#39;woof&#39;); # using default values</span><br></pre></td></tr></table></figure>
<p><strong>· Create rows of data</strong></p>
<p><code>CREATE TABLE [name] AS ...;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [expr] AS [name], [expr] AS [name], ... UNION</span><br><span class="line">SELECT [expr] AS [name], [expr] AS [name], ... UNION</span><br><span class="line">SELECT [expr] AS [name], [expr] AS [name], ...;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE cities AS</span><br><span class="line">  SELECT 38 AS latitude, 122 AS longitude, &quot;Berkeley&quot; AS name   UNION</span><br><span class="line">  SELECT 42,			    71,			     &quot;Cambridge&quot;        UNION</span><br><span class="line">  SELECT 45,			    93,			     &quot;Minneapolis&quot;;</span><br></pre></td></tr></table></figure>
<p><strong>· Create rows of data from existing tables</strong></p>
<p>A <code>SELECT</code> statement can specify an input table using a <code>FROM</code> clause. A subset of the rows of the input table can be selected using a <code>WHERE</code> clause. Can declare the order of the remaining rows using an <code>ORDER BY</code> clause. Otherwise, no order. Column descriptions determine how each input row is projected to a result row.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [columns] FROM [table] WHERE [condition] </span><br><span class="line">ORDER BY [order] [ASC&#x2F;DESC] LIMIT [number];</span><br><span class="line"></span><br><span class="line">SELECT &quot;west coast&quot; AS region, name FROM cities WHERE longitude &gt;&#x3D; 115 UNION</span><br><span class="line">SELECT &quot;other&quot;, 				 name FROM cities WHERE longitude &lt; 115;</span><br></pre></td></tr></table></figure>
<p><strong>· Arithmetic in SELECT Statements</strong></p>
<p>In a SELECT expression, column names evaluate to row values.Arithmetic expressions can combine row values and constants.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT single + 2 * couple AS total FROM restaurant;</span><br></pre></td></tr></table></figure>
<p><strong>· Join the Table</strong></p>
<p>When we join two tables, we get a new table with one row for each combination of rows from the original tables.</p>
<p><code>SELECT * FROM table1, table2;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM parents, dogs;</span><br><span class="line">SELECT parent FROM parents, dogs WHERE child &#x3D; name AND fur &#x3D; &quot;curly&quot;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT s.name, s.artist </span><br><span class="line">      FROM songs AS s, artists AS ar, albums AS al</span><br><span class="line">      WHERE album &#x3D; al.name AND s.artist &#x3D; ar.name</span><br><span class="line">            AND release_year &#x3D; 2010</span><br><span class="line">            ORDER BY first_year_active;</span><br></pre></td></tr></table></figure>
<p><strong>· Aliasing</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.child AS first, b.child AS second FROM parents AS a, parents AS b WHERE a.parent &#x3D; b.parent AND a.child &lt; b.child;</span><br></pre></td></tr></table></figure>
<p><strong>· String Expression</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql&gt; SELECT name || &quot; dog&quot; FROM dogs;</span><br><span class="line">abraham dog</span><br><span class="line">barack dog</span><br><span class="line">clinton dog</span><br></pre></td></tr></table></figure>
<h3 id="part.2-aggregation">Part.2 Aggregation<a title="#part.2-aggregation" href="#part.2-aggregation"></a></h3>
<p><strong>Aggregation</strong> is the process of doing operations on <em>groups of rows</em> instead of just a single row. SQL provides aggregate functions whose return values can be used as entries in a column.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(age) AS avg_age FROM dogs;</span><br><span class="line">SELECT COUNT(*) AS count FROM dogs;</span><br><span class="line">SELECT SUM(age) AS sum_age FROM dogs;</span><br><span class="line">SELECT MIN(name) AS min_name FROM dogs;</span><br></pre></td></tr></table></figure>
<p><strong>· Group</strong></p>
<p>By default, aggregation is performed over all the rows of the table. We can <code>GROUP BY</code> any valid SQL expression, which includes using multiple column names and operators. We can specify  a single group consists of all rows for which [expression] evaluates to the same value. The output table will have <strong>one row</strong> per group.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [columns] FROM [table] WHERE [condition] </span><br><span class="line">       GROUP BY [expression]</span><br><span class="line">       ORDER BY [order] [ASC&#x2F;DESC]</span><br><span class="line">       LIMIT [number];</span><br><span class="line"></span><br><span class="line">SELECT fur, AVG(age) AS avg_age FROM dogs GROUP BY fur;</span><br></pre></td></tr></table></figure>
<p><strong>· Filtering Groups</strong></p>
<p>We know how to filter individual rows using the <code>WHERE</code> <a href="http://clause.To">clause.To</a> filter groups, use the <code>HAVING [condition]</code> clause.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT fur, AVG(age) AS avg_age</span><br><span class="line">       FROM dogs GROUP BY fur</span><br><span class="line">       HAVING COUNT(*) &gt; 1;</span><br></pre></td></tr></table></figure>
<h3 id="part.3-mutating-tables">Part.3 Mutating Tables<a title="#part.3-mutating-tables" href="#part.3-mutating-tables"></a></h3>
<p><strong>· Remove Table</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] [name];</span><br><span class="line">DROP TABLE IF EXISTS parents;</span><br></pre></td></tr></table></figure>
<p><strong>· Inserting Records</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO [table]([columns]) VALUES([values]), ([values]);</span><br><span class="line"></span><br><span class="line">INSERT INTO dogs(name, fur) VALUES(&#39;fillmore&#39;, &#39;curly&#39;);</span><br><span class="line">INSERT INTO dogs VALUES(&#39;delano&#39;, &#39;long&#39;, &#39;hi!&#39;);</span><br></pre></td></tr></table></figure>
<p><strong>· Updating Records</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE [table] SET [column] &#x3D; [expression] WHERE [condition];</span><br><span class="line">DELETE FROM [table] WHERE [condition];</span><br><span class="line"></span><br><span class="line">UPDATE dogs SET phrase &#x3D; &#39;WOOF&#39; WHERE fur &#x3D; &#39;curly&#39;;</span><br><span class="line">DELETE FROM dogs WHERE fur &#x3D; &#39;curly&#39; and phrase &#x3D; &#39;WOOF&#39;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Algorithm Ideas</title>
    <url>/2020/20200924-Basic-Algorithm-Ideas/</url>
    <content><![CDATA[<h2 id="basic-algorithm-ideas">Basic Algorithm Ideas<a title="#basic-algorithm-ideas" href="#basic-algorithm-ideas"></a></h2>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://sp19.datastructur.es/" target="_blank"><u>CS61B Spring 2019 at UCB</u></a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>
· Wikipedia</p>
<h3 id="part.1-greedy-algorithms">Part.1 Greedy Algorithms<a title="#part.1-greedy-algorithms" href="#part.1-greedy-algorithms"></a></h3>
<p>left to complete</p>
<h3 id="part.2-divide-and-conquer">Part.2 Divide and Conquer<a title="#part.2-divide-and-conquer" href="#part.2-divide-and-conquer"></a></h3>
<p>left to complete</p>
<h3 id="part.3-recursion">Part.3 Recursion<a title="#part.3-recursion" href="#part.3-recursion"></a></h3>
<p>Recursion is useful for solving problems with a naturally repeating structure - they are defined in terms of themselves.</p>
<p>It requires you to find patterns of smaller problems, and to define the smallest problem possible</p>
<p>Structure of a Recursive Function:</p>
<p>1.One or more <strong>base cases</strong>, usually the smallest input.<br>
2.One or more ways of <strong>reducing the problem</strong>, and then <strong>solving the smaller problem using recursion</strong>.<br>
3.One or more ways of <strong>using the solution to each smaller problem</strong> to solve our larger problem.</p>
<p><strong>Recursion</strong> has three main components<br>
<strong>Base case/s</strong>: The simplest form of the problem<br>
<strong>Recursive call/s</strong>: Smaller version of the problem<br>
Use the solution to the smaller version of the problem to arrive at the solution to the original problem</p>
<p><strong>Functional abstraction</strong>: When working with recursion, use <em>functional abstraction</em>: assume the recursive call gives the correct result.</p>
<p>List out all the cases.<br>
Identify <strong>patterns</strong> between each case.<br>
Simplify repeated code with <strong>recursive calls</strong>.</p>
<p><strong>Verifying the correctness of recursive functions</strong>:</p>
<p>Verify that the base cases work as expected.</p>
<p>For each larger case, verify that it works by <strong>assuming the smaller recursive calls are correct</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade(n // <span class="number">10</span>)</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure>
<h3 id="part.4-back-tracking">Part.4 Back Tracking<a title="#part.4-back-tracking" href="#part.4-back-tracking"></a></h3>
<h3 id="part.5-dynamic-programing">Part.5 Dynamic Programing<a title="#part.5-dynamic-programing" href="#part.5-dynamic-programing"></a></h3>
<h3 id="part.6-enumeration-algorithm">Part.6 Enumeration algorithm<a title="#part.6-enumeration-algorithm" href="#part.6-enumeration-algorithm"></a></h3>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Basic Algorithm Ideas</tag>
      </tags>
  </entry>
  <entry>
    <title>Graphs</title>
    <url>/2020/20200924-Graphs/</url>
    <content><![CDATA[<h2 id="graphs">Graphs<a title="#graphs" href="#graphs"></a></h2>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://sp19.datastructur.es/" target="_blank"><u>CS61B Spring 2019 at UCB</u></a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>
· Wikipedia</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Graphs</tag>
      </tags>
  </entry>
  <entry>
    <title>Other Algorithms</title>
    <url>/2020/20200924-Other-Algorithms/</url>
    <content><![CDATA[<h2 id="other-algorithms">Other Algorithms<a title="#other-algorithms" href="#other-algorithms"></a></h2>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://sp19.datastructur.es/" target="_blank"><u>CS61B Spring 2019 at UCB</u></a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>
· Wikipedia</p>
<h3 id><a title="#" href="#"></a></h3>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Other Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Strings</title>
    <url>/2020/20200924-Strings/</url>
    <content><![CDATA[<h2 id="strings">Strings<a title="#strings" href="#strings"></a></h2>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://sp19.datastructur.es/" target="_blank"><u>CS61B Spring 2019 at UCB</u></a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank"><u>Algorithms, Part I,Ⅱ by Princeton University</u></a><br>
· Wikipedia</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Tree</title>
    <url>/2020/20201005-Tree/</url>
    <content><![CDATA[<h1 id="tree">Tree<a title="#tree" href="#tree"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· Wikipedia</p>
<h2 id="part.1-basis">Part.1 Basis<a title="#part.1-basis" href="#part.1-basis"></a></h2>
<p>Recursive Description: A tree has a root and a list of branchesEach branch is a treeA tree with zero branches is called a leaf.</p>
<p>Relative Description: Each location in a tree is called a nodeEach node has a label valueOne node can be the parent/child of another.</p>
<p><img src="https://i.loli.net/2020/09/13/fDJtsRH6xkdKNCG.png" alt="11" class="φcx"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use the recursive description</span></span><br><span class="line"><span class="comment"># We can also use the class to define the tree and its related attributes and methods.</span></span><br><span class="line"><span class="comment"># Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch)</span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line"><span class="comment"># Selectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br><span class="line"></span><br><span class="line">print(tree(<span class="number">3</span>, [tree(<span class="number">1</span>),tree(<span class="number">2</span>, [tree(<span class="number">1</span>),tree(<span class="number">1</span>)])])) <span class="comment"># [3, [1], [2, [1], [1]]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tree processing</span></span><br><span class="line"><span class="comment"># conut the nodes in a Tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_nodes</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree): <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    lst = [count_nodes(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(lst,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># count the leaves</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree): <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="comment"># leaves = [count_leaves(b) for b in branches(tree)] #[[1],[[1],[1]]]</span></span><br><span class="line">    leaves = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree):</span><br><span class="line">        leaves += count_leaves(tree) <span class="comment"># [1,1,1]</span></span><br><span class="line">    <span class="keyword">return</span> leaves</span><br><span class="line"></span><br><span class="line"><span class="comment"># print the tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">tree,indent = <span class="number">0</span></span>):</span></span><br><span class="line">    print(<span class="string">&#x27; &#x27;</span>*indent,label(tree))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree):</span><br><span class="line">            print_tree(b,indent+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a tree from an exsisted tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree): <span class="keyword">return</span> tree(label(tree)**<span class="number">2</span>)</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> brannches(tree):</span><br><span class="line">        lst += [suqare_tree(b)]</span><br><span class="line">    <span class="keyword">return</span> tree(label(tree)**<span class="number">2</span>,lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prune the tree </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prune</span>(<span class="params">t,x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> label(t) == x: <span class="keyword">return</span> null</span><br><span class="line">    branches(t) = [b <span class="keyword">for</span> b <span class="keyword">in</span> branches(t) <span class="keyword">if</span> label(b) != x ]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branchces():</span><br><span class="line">        prune( b,x)</span><br></pre></td></tr></table></figure>
<h2 id="part.2-binary-tree">Part.2 Binary tree<a title="#part.2-binary-tree" href="#part.2-binary-tree"></a></h2>
<p>Binary tree is a tree in which each node has at most two children and it is empty or node with links to left and right binary trees.</p>
<h3 id="1.-definitions">1. Definitions<a title="#1.-definitions" href="#1.-definitions"></a></h3>
<p>Array representation.</p>
<p>・Indices start at 1.</p>
<p>・Take nodes in level order.</p>
<p>・No explicit links needed!</p>
<h3 id="2.-properties">2. properties<a title="#2.-properties" href="#2.-properties"></a></h3>
<h3 id="3.-operations">3. Operations<a title="#3.-operations" href="#3.-operations"></a></h3>
<h4 id="insertion">Insertion<a title="#insertion" href="#insertion"></a></h4>
<h4 id="deletion">Deletion<a title="#deletion" href="#deletion"></a></h4>
<h4 id="traversal">Traversal<a title="#traversal" href="#traversal"></a></h4>
<h3 id="4.-types">4. Types<a title="#4.-types" href="#4.-types"></a></h3>
<h4 id="full-binary-tree">Full binary tree<a title="#full-binary-tree" href="#full-binary-tree"></a></h4>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glherxqlk1j30sg0l90tn.jpg" alt="1024px-Full_binary.svg" style="zoom:25%;">
<h4 id="complete-binary-tree">Complete binary tree<a title="#complete-binary-tree" href="#complete-binary-tree"></a></h4>
<p>Perfectly balanced, except for bottom level.</p>
<p>Property. Height of complete tree with N nodes is <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.706ex" height="3.343ex" style="vertical-align: -1.171ex;" viewbox="0 -934.9 2887.4 1439.2" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">⎣lg N⎦</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
<text font-family="monospace" stroke="none" transform="scale(71.759) matrix(1 0 0 -1 0 0)">⎣</text>
 <use xlink:href="#E1-MJMATHI-6C" x="609" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="908" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="1388" y="0"/>
<g transform="translate(2277,0)">
<text font-family="monospace" stroke="none" transform="scale(71.759) matrix(1 0 0 -1 0 0)">⎦</text>
</g>
</g>
</svg>.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glheq6q6epj31hc0rvjt0.jpg" alt="1920px-Complete_binary2.svg" style="zoom:15%;">
<h4 id="balanced-binary-tree">Balanced binary tree<a title="#balanced-binary-tree" href="#balanced-binary-tree"></a></h4>
<h3 id="5.-applications">5. Applications<a title="#5.-applications" href="#5.-applications"></a></h3>
<h4 id="sort-and-search">Sort and Search<a title="#sort-and-search" href="#sort-and-search"></a></h4>
<h5 id="binary-heap">Binary heap<a title="#binary-heap" href="#binary-heap"></a></h5>
<ol>
<li>Definition</li>
</ol>
<p>Binary heap is defined as a binary tree with two additional constrains.</p>
<p><strong>·</strong> Shape property: it must be a complete binary tree, represented in level order in an array (not using the first entry).</p>
<p><strong>·</strong> Heap property: (partially ordered) the key stored in each node is either greater than or equal to or less than or equal to the keys in the node’s children, according to some total order.</p>
<ol start="2">
<li>Operations and implementations</li>
</ol>
<p>Binary heap is usually represented by the array which is the same with the binary tree implementation above.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhm2c13loj30n60maacz.jpg" alt="Screen Shot 2020-12-09 at 14.57.27" style="zoom:33%;">
<p>Both insert and remove operations are adding or removing from the end of the heap. Then in order to restore the heap property, we traverse up or down the heap.</p>
<p><strong>Insert</strong></p>
<p>To add an element to a heap:</p>
<ol>
<li>Add the element to the bottom level of the heap at the leftmost open space.</li>
<li>Compare the added element with its parent; if they are in the correct order, stop.</li>
<li>If not, do the <em>Bottom-up reheapify (swim)</em> operation, swap the element with its parent and return to the previous step.()</li>
</ol>
<p><strong>Delete</strong></p>
<p>To delete the root(maximum in a max-heap or minimum in a min-heap)  or an arbitrary element from the heap:</p>
<ol>
<li>Replace the root of the heap with the last element on the last level.</li>
<li>Compare the new root with its children; if they are in the correct order, stop.</li>
<li>If not, do the <em>Top-down heapify (sink)</em> operation, swap the element with one of its children and return to the previous step. (Swap with its smaller child in a min-heap and its larger child in a max-heap.)</li>
</ol>
<p><strong>Search</strong></p>
<p>Finding an arbitrary element takes O(n) time.</p>
<p><strong>Building a heap</strong></p>
<p>Building a heap from an array of n input elements can be done by starting with an empty heap, then successively inserting each element.</p>
<p>Or we can treat the array as a binary tree of arbitrary order and start from the second lowest level and sift the root of each subtree downward until the heap property is restored.</p>
<p><strong>Decrease key</strong></p>
<p><strong>·</strong> Find the index of the element we want to modify<br>
<strong>·</strong> Decrease the value of the node<br>
<strong>·</strong> Sink down (assuming a max heap) to restore the heap property</p>
<p>**Increase key **</p>
<p><strong>·</strong> Find the index of the element we want to modify<br>
<strong>·</strong> Increase the value of the node<br>
<strong>·</strong> Swim up (assuming a max heap) to restore the heap property</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> DataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryMaxHeap</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key[] heap;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFACTOR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;Key&gt; comparator;  <span class="comment">// optional comparator</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>, comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        heap = (Key[]) <span class="keyword">new</span> Comparable[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(<span class="keyword">int</span> capacity, Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">        heap = (Key[]) <span class="keyword">new</span> Object[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryMaxHeap</span><span class="params">(Key[] a)</span> </span>&#123;</span><br><span class="line">        N = a.length;</span><br><span class="line">        heap = (Key[]) <span class="keyword">new</span> Comparable[N + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(a,<span class="number">0</span>, heap, <span class="number">1</span>, N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            sink(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;The heap is underflow!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> heap[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* pq maintains the smallest N items</span></span><br><span class="line"><span class="comment">        if (N == pq.length) &#123;</span></span><br><span class="line"><span class="comment">            if (x.compareTo(max()) &lt; 0) delete(1);</span></span><br><span class="line"><span class="comment">            else return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The key can&#x27;t be null!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (N == heap.length - <span class="number">1</span>) resize(REFACTOR * heap.length);</span><br><span class="line">        heap[++N] = x;</span><br><span class="line">        swim(N);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delete(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Priority queue underflow&quot;</span>);</span><br><span class="line">        Key max = heap[i];</span><br><span class="line">        exch(i, N--);</span><br><span class="line">        sink(i);</span><br><span class="line">        heap[N + <span class="number">1</span>] = <span class="keyword">null</span>;  <span class="comment">// prevent loitering</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> capacity &gt; N;</span><br><span class="line">        Key[] newArray = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        System.arraycopy(heap,<span class="number">0</span>, newArray, <span class="number">0</span>, N + <span class="number">1</span>);</span><br><span class="line">        heap = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions to restore the heap invariant.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k)) &#123;</span><br><span class="line">            exch(k, k/<span class="number">2</span>);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions for compares and swaps.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Comparable&lt;Key&gt;) heap[i]).compareTo(heap[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> comparator.compare(heap[i], heap[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Key tmp = heap[i];</span><br><span class="line">        heap[i] = heap[j];</span><br><span class="line">        heap[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is heap[1..n] a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBinaryMaxHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heap[i] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N+<span class="number">1</span>; i &lt; heap.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heap[i] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heap[<span class="number">0</span>] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxHeapOrdered(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is subtree of heap[1..n] rooted at k a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxHeapOrdered</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; N) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span>*k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left  &lt;= N &amp;&amp; less(k, left))  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= N &amp;&amp; less(k, right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxHeapOrdered(left) &amp;&amp; isMaxHeapOrdered(right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Iterator.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Key&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeapIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> BinaryMaxHeap&lt;Key&gt; copy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeapIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size());</span><br><span class="line">            <span class="keyword">else</span> copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size(), comparator);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">                copy.insert(heap[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !copy.isEmpty(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Key <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> copy.delMax();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        BinaryMaxHeap&lt;Integer&gt; bh = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(a);</span><br><span class="line">        System.out.println(bh.max());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Applications</li>
</ol>
<p>See more about <a href="https://oreodu.github.io/2020/20201202-Priority-Queues" target="_blank">Priority queue</a>.<br>
See more about <a href="https://oreodu.github.io/2020/20200102-Sorting" target="_blank">Heapsort</a></p>
<h5 id="binary-search-tree">Binary search tree<a title="#binary-search-tree" href="#binary-search-tree"></a></h5>
<ol>
<li>Definition</li>
</ol>
<p>A binary search tree (BST) is a binary tree where each node has a <code>Comparable</code> key (and an associated value) and satisfies the restriction that the key in any node is larger than the keys in all nodes in that node’s left subtree and smaller than the keys in all nodes in that node’s right subtree.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glxlmt4qi7j30h00aq77s.jpg" alt="Screen Shot 2020-12-23 at 10.51.28" style="zoom:50%;">
<ol start="2">
<li>Operations and implementations</li>
</ol>
<p>The running times of algorithms on binary search trees depend on the shapes of the trees, which, in turn, depends on the order in which keys are inserted.</p>
<p>Search, insertion, finding the minimum, finding the maximum, floor, ceiling, rank, select, delete the minimum, delete the maximum, delete, and range count operations all take time proportional to the height of the tree, in the worst case.</p>
<p><strong>Floor and ceiling</strong>:</p>
<p>If a given key key is less than the key at the root of a BST, then the floor of key (the largest key in the BST less than or equal to key) <em>must</em> be in the left subtree. If key is greater than the key at the root, then the floor of key <em>could</em> be in the right subtree, but only if there is a key smaller than or equal to key in the right subtree; if not (or if key is equal to the key at the root) then the key at the root is the floor of key. Finding the ceiling is similar, interchanging right and left.</p>
<p><strong>Selection</strong>:</p>
<p>Suppose that we seek the key of rank <em>k</em> (the key such that precisely <em>k</em> other keys in the BST are smaller). If the number of keys <em>t</em> in the left subtree is larger than <em>k</em>, we look (recursively) for the key of rank <code>k</code> in the left subtree; if <em>t</em> is equal to <em>k</em>, we return the key at the root; and if <em>t</em> is smaller than <em>k</em>, we look (recursively) for the key of rank <em>k - t - 1</em> in the right subtree.</p>
<p><strong>Delete</strong>:</p>
<p>Save a link to the node to be deleted in <code>t</code>. Set <code>x</code> to point to its successor <code>min(t.right)</code>.  Set the right link of x (which is supposed to point to the BST containing all the keys larger than <code>x.key</code>) to <code>deleteMin(t.right)</code>, the link to the BST containing all the keys that are larger than <code>x.key</code> after the deletion. Set the left link of <code>x</code> (which was null) to <code>t.left</code> (all the keys that are less than both the deleted key and its successor).</p>
<p><strong>Range search</strong>:</p>
<p>Based on <em>inorder</em> traversal of the BST, we add each key that is in the range to a <code>Queue</code>, and to skip the recursive calls for subtrees that cannot contain keys in the range.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> DataStructure;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Key key;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> Node left, right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">// number of nodes in subtree</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls get() with a null key&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> get(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> get(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls to put() with a null key&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = put(root, key, val);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = put(x.left, key, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = put(x.right, key, val);</span><br><span class="line">        <span class="keyword">else</span>  x.val = val;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST unberflow&quot;</span>);</span><br><span class="line">        root = deleteMin(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">        x.left = deleteMin(x.left);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST underflow&quot;</span>);</span><br><span class="line">        root = deleteMax(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMax</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">        x.right = deleteMax(x.right);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls delete() with a null key&quot;</span>);</span><br><span class="line">        root = delete(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = delete(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = delete(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">            <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">            Node t = x;</span><br><span class="line">            x = min(t.right);</span><br><span class="line">            x.right = deleteMin(t.right);</span><br><span class="line">            x.left = t.left;</span><br><span class="line">        &#125;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.right) + size(x.left);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls min() with empty BST&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> min(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">min</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls max() with empty BTS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> max(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">max</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to floor is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to floor with empty BST&quot;</span>);</span><br><span class="line">        Node x = floor(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node x,Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = floor(x.right, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Key x = floor2(root, key, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Node x, Key key, Key best)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> best;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.left, key, best);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.right, key, x.key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">ceiling</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to ceiling() with empty BTS&quot;</span>);</span><br><span class="line">        Node x = ceiling(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too large&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> ceiling(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = ceiling(x.left, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rank &lt; <span class="number">0</span> || rank &gt;= size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to select() is invaild: &quot;</span> + rank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> select(root, rank);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Key <span class="title">select</span><span class="params">(Node x, <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> leftsize = size(x.left);</span><br><span class="line">        <span class="keyword">if</span> (leftsize &gt; rank) <span class="keyword">return</span> select(x.left, rank);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (leftsize &lt; rank) <span class="keyword">return</span> select(x.right, rank - leftsize - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to rank() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> rank(key, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key, Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> rank(key, x.left);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> + size(x.left) + rank(key, x.right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> size(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Key&gt;();</span><br><span class="line">        <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to keys() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to keys() is null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        keys(root, queue, lo, hi);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> cmplo = lo.compareTo(x.key);</span><br><span class="line">        <span class="keyword">int</span> cmphi = hi.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt; <span class="number">0</span>) keys(x.left, queue, lo, hi);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt;= <span class="number">0</span> &amp;&amp; cmphi &gt;= <span class="number">0</span>) queue.add(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmphi &gt; <span class="number">0</span>) keys(x.right, queue, lo, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) <span class="keyword">return</span> rank(hi) - rank(lo) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> rank(hi) - rank(lo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(height(x.left), height(x.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">levelorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; keys = <span class="keyword">new</span> LinkedList&lt;Key&gt;();</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            Node x = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            keys.offer(x.key);</span><br><span class="line">            queue.offer(x.left);</span><br><span class="line">            queue.offer(x.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isBST()) System.out.println(<span class="string">&quot;Not in symmetric order!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isSizeConsistent()) System.out.println(<span class="string">&quot;Subtree counts not consistent!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isRankConsistent()) System.out.println(<span class="string">&quot;Ranks not consistent&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> isBST() &amp;&amp; isSizeConsistent() &amp;&amp; isRankConsistent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isBST(root, <span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">(Node x, Key min, Key max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (min != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(min) &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(max) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBST(x.left, min, x.key) &amp;&amp; isBST(x.right, x.key, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isSizeConsistent(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (x.size != size(x.left) + size(x.right) + <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSizeConsistent(x.left) &amp;&amp; isSizeConsistent(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRankConsistent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (i != rank(select(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Key key : keys())</span><br><span class="line">            <span class="keyword">if</span> (key.compareTo(select(rank(key))) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BST&lt;String, Integer&gt; st = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;J&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        st.put(<span class="string">&quot;A&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        st.put(<span class="string">&quot;S&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;K&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        st.put(<span class="string">&quot;L&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.put(<span class="string">&quot;Q&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        st.put(<span class="string">&quot;M&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The height of the tree is :&quot;</span> + st.height());</span><br><span class="line">        System.out.println(<span class="string">&quot;The Ceiling of the key C is :&quot;</span> + st.ceiling(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The floor of the key N is :&quot;</span> + st.floor(<span class="string">&quot;N&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The rank of the key J is :&quot;</span> + st.rank(<span class="string">&quot;J&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Select :&quot;</span> + st.select(<span class="number">4</span>));</span><br><span class="line">        st.deleteMax();</span><br><span class="line">        st.deleteMin();</span><br><span class="line">        <span class="keyword">for</span> (String s: st.keys()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s: st.levelorder()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Applications</li>
</ol>
<p><a href="https://oreodu.github.io/2020/20201202-Associative-arrays" target="_blank">Associative arrays</a>.</p>
<h5 id="red-black-tree">Red-Black tree<a title="#red-black-tree" href="#red-black-tree"></a></h5>
<h5 id="b-tree">B-tree<a title="#b-tree" href="#b-tree"></a></h5>
<h4 id="encoding">Encoding<a title="#encoding" href="#encoding"></a></h4>
<p>Huffman coding and cladograms</p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Binary tree</tag>
        <tag>Binary heap</tag>
        <tag>Binary search tree</tag>
        <tag>Red-Black tree</tag>
        <tag>B-tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Union Find</title>
    <url>/2020/20201005-Union-Find/</url>
    <content><![CDATA[<h1 id="union-find">Union-Find<a title="#union-find" href="#union-find"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· Wikipedia<br>
· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>
· You can see the implementations of those linear list <a href="https://github.com/OreoDu/Implementations/tree/main/src/Algorithms/UnionFind" target="_blank">here</a>.</p>
<p>A  disjoint-set data structure is a data structure that keeps track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets.</p>
<p>A  union-find algorithm is an algorithm that performs two useful operations on such a data structure:<br>
· Find: Determine which subset a particular element is in. Used to check if two elements are in the same subset.<br>
· Union: Join two subsets into a single subset.</p>
<h2 id="part.1-quik-find-(eager-approach)">Part.1 Quik-Find (eager approach)<a title="#part.1-quik-find-(eager-approach)" href="#part.1-quik-find-(eager-approach)"></a></h2>
<p>Data structure: Integer array id[] of length N<br>
Interpretation: <em>p</em> and <em>q</em> are connected iff they have the same id.</p>
<p><img src="https://i.loli.net/2020/09/25/4fotqNvk6Klr8R9.png" alt="1" style="zoom:50%;">     <img src="https://i.loli.net/2020/09/25/HDLj7Pg83npwJVG.png" alt="2" style="zoom: 33%;"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFind</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QuickFind</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    id  = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">      id[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id[p] == id[q];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//change all entries whose id equals id[p] to id[q].</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> pid = id[p];</span><br><span class="line">      <span class="keyword">int</span> qid = id[q];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;id.length; i++)</span><br><span class="line">          <span class="keyword">if</span> (id[i] == pid) id[i] = qid;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.2--quik-union-(lazy-approach)">Part.2  Quik-Union (lazy approach)<a title="#part.2--quik-union-(lazy-approach)" href="#part.2--quik-union-(lazy-approach)"></a></h2>
<p>Data structure: Integer array id[] of length N<br>
Interpretation: id[i] is the parent of i.</p>
<p><img src="https://i.loli.net/2020/09/25/CxwA365cELkj9pN.png" alt="3" style="zoom:50%;">        <img src="https://i.loli.net/2020/09/25/zYEd4WNAnvfsIyc.png" alt="4" style="zoom:33%;"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickUnion</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        id  = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;N; i++) id[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(p!=id[p]) p = id[p];</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root(p) == root(q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set the id of p&#x27;s root to the id of q&#x27;s root.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pr = root(p);</span><br><span class="line">        <span class="keyword">int</span> qr = root(q);</span><br><span class="line">        id[pr] = qr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.3-improvement:-weighed-quick-union">Part.3 Improvement: Weighed quick union<a title="#part.3-improvement:-weighed-quick-union" href="#part.3-improvement:-weighed-quick-union"></a></h2>
<p>In order to avoid tall trees, we can keep track of the <em>size</em> of each tree and balance by linking root of smaller tree to root of larger tree.</p>
<p>Data structure: Integer array id[] of length N and extra helper array size[].</p>
<p><img src="https://i.loli.net/2020/09/25/n2XLPSoFVrMQwq7.png" alt="6" style="zoom:50%;">          <img src="https://i.loli.net/2020/09/25/t8GTg5mU2w6oIYA.png" alt="5" style="zoom: 25%;"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Only need to change the union method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pr = root(p);</span><br><span class="line">        <span class="keyword">int</span> qr = root(q);</span><br><span class="line">        <span class="keyword">if</span> (pr == qr) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (size[pr]&lt;size[qr]) &#123;</span><br><span class="line">            id[pr] = qr;</span><br><span class="line">            size[qr] += size[pr];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            id[qr] = pr;</span><br><span class="line">            size[pr] += size[qr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>We can also link the root based on the rank(or height). But tracking the size is better.</p>
<img src="https://i.loli.net/2020/09/25/DgFo2cv6utdXqMO.jpg" alt="12" style="zoom: 25%;">
<h2 id="part.4-improvement:-path-compression">Part.4 Improvement: path compression<a title="#part.4-improvement:-path-compression" href="#part.4-improvement:-path-compression"></a></h2>
<p>In order to reduce the height of the trees, we can update the parent of the node to the root we found.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Only need to change the root method.</span></span><br><span class="line"><span class="comment">//add second loop to root() to set the id[] of each examined node to the root.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = p;</span><br><span class="line">    <span class="keyword">while</span>(r!=id[r]) r = id[r];</span><br><span class="line">    <span class="keyword">while</span>(p!= id[p])&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = id[p];</span><br><span class="line">        id[p] = r;</span><br><span class="line">        p = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make every other node in path point to its grandparent</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p!=id[p])&#123;</span><br><span class="line">        id[p] = id[id[p]];</span><br><span class="line">        p = id[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="analysis-of-running-time:">Analysis of running time:<a title="#analysis-of-running-time:" href="#analysis-of-running-time:"></a></h4>
<p>(lg* : times you take logN to get one)</p>
<img src="https://i.loli.net/2020/09/25/L6xFqZDORv8lkrP.png" alt="122" style="zoom:50%;">
<h4 id="union-find-application">Union Find Application<a title="#union-find-application" href="#union-find-application"></a></h4>
<p>· Percolation.<br>
· Games (Go, Hex).<br>
· Dynamic connectivity.<br>
· Least common ancestor.<br>
· Equivalence of finite state automata.<br>
· Hinley-Milner polymorphic type inference.<br>
· Kruskal’s minimum spanning tree algorithm.<br>
· Compiling equivalence statements in Fortran.<br>
· Morphological attribute openings and closings.<br>
· Matlab’s bwlabel() function in image processing.</p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash Table</title>
    <url>/2020/20201005-Hash-Table/</url>
    <content><![CDATA[<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· Wikipedia</p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Basics 03</title>
    <url>/2020/20201007-Java-Basics-03/</url>
    <content><![CDATA[<h1 id="java-basics-03">Java Basics 03<a title="#java-basics-03" href="#java-basics-03"></a></h1>
<h2 id="part.1-iterator">Part.1 Iterator<a title="#part.1-iterator" href="#part.1-iterator"></a></h2>
<p>Iterator is an interface which belongs to collection framework in the <code>java.util.Iterator</code>. It allows us to traverse the collection, access the data element and remove the data elements of the collection.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>; <span class="comment">// usually don&#x27;t use remove.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLLStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> class Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> ListIterator();&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;Item&gt; current = sentinel.next;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> current != <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SLListStack&lt;Integer&gt; s = <span class="keyword">new</span> SLListStack&lt;&gt;();</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// s is iterable.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n: s) System.out.println(n);</span><br><span class="line">    Iterator&lt;Integer&gt; i = SLListStack.iterator();</span><br><span class="line">    <span class="keyword">while</span>(i.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = i.next();</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.2-testing">Part.2 Testing<a title="#part.2-testing" href="#part.2-testing"></a></h2>
<p>Assertion: statement to test assumptions about the program.<br>
Helps detect logic bugs.<br>
Document the code.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -ea Myprogram &#x2F;&#x2F; enable assertions</span><br><span class="line">java -da Myprogram &#x2F;&#x2F; disable assertions (default)</span><br></pre></td></tr></table></figure>
<h2 id="part.3-exception">Part.3 Exception<a title="#part.3-exception" href="#part.3-exception"></a></h2>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Collections in Java</title>
    <url>/2020/20201013-Collection-in-Java/</url>
    <content><![CDATA[<h1 id="collections-in-java">Collections in Java<a title="#collections-in-java" href="#collections-in-java"></a></h1>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Exercises in Lad</title>
    <url>/2020/20201014-Exercises-in-Lad/</url>
    <content><![CDATA[<h1 id="exercises">Exercises<a title="#exercises" href="#exercises"></a></h1>
<p>研究テーマを決める前に、以下のプログラミング課題を一通り</p>
<hr>
<p>課題１：　A*　（基本的な探索アルゴリズムの実装、　高速なコードの実装）</p>
<p>Russell &amp;Norvigで紹介された8パズルを、Ａ＊アルゴリズムを用いて解くプログラムを実装する。<br>
　　以下の３つの条件における性能（実行時間）を評価・比較する<br>
a)　ヒューリスティック関数を使わないＡ＊（h(s)=0 for all states)<br>
b)  ゴールの位置にないタイルの数をヒューリスティックとする　　（Russell and Norvig p.106）<br>
b)  マンハッタン距離をヒューリスティックとする　　（Russell and Norvig p.106）</p>
<p>評価実験は１００個以上のランダムに作成したパズル初期状態に対して行う。<br>
但し、単純ランダムにタイルを割り当てて初期状態を作ると、解が存在しない初期状態が多い。<br>
正しいパズルの初期状態の生成方法：　まず、正しい状態（＝ゴール状態）から、一歩ランダムな方向にに空タイルを移動する。<br>
このように空タイルをランダムな方向に移動する作業を繰り返すとパズルはどんどん崩れるが、必ず解（ゴールまでの経路）が存在する。<br>
一般的には、ランダム移転数を増やすほど、「難しい」パズルが生成される。<br>
** C/C++で実装すればどんな問題でも1秒以内で解けるはず(信原君がRubyで実装したソルバは数秒以内で全ての問題が解けた）</p>
<p>課題１A:　データ構造等の工夫で高速な１５パズルの実装を目指す</p>
<p>まず、１５パズルのソルバを実装する（８パズルのソルバを作成していれば簡単なはず）。<br>
ヒューリスティックはマンハッタン距離を使う。<br>
上記の８パズルのように１５パズルの問題をランダム生成すれば、かなり難しい問題が生成される。<br>
一秒間に展開されるノード数を測る（ソルバを実行して、終了時に生成されたノード数　/ 実行時間）。</p>
<p>目標：　一秒間に１００万ノード以上生成するソルバを実装。</p>
<p>ある程度自力で頑張った後、以下の論文を読む。<br>
<a href="http://www.aaai.org/ocs/index.php/SOCS/SOCS12/paper/viewFile/5404/5682">http://www.aaai.org/ocs/index.php/SOCS/SOCS12/paper/viewFile/5404/5682</a></p>
<hr>
<p>課題２<br>
任意の数独パズルを解くソルバを実装しなさい。<br>
入力ファイル：　以下のページの「test cases」にテキスト形式の問題集が置かれてます。<br>
<a href="http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku/">http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku/</a><br>
上のページには数独の解き方の解説も書かれてますが、<br>
殆ど一般性が無いアドバイスなので（全てのパズルを解く保障が無い）、解き方の解説は無視しましょう。<br>
正しい解き方はRusell&amp;Norvigの教科書の制約充足の章に紹介されている手法です。<br>
１）まず、深さ優先探索を用いたバックトラック法を実装<br>
２）更に効率良く解く為に、制約伝播(constraint propagation)を実装する。<br>
今回の課題の味噌は（２）です。</p>
<p>正しく実装すれば、「難しい」と言われているパズルもミリ秒単位以内で解けます</p>
<p>** 遠藤君が実装した制約伝播＋バックトラックを用いたPython ソルバ(PyPy JIT)は上記サイトのmsk_009問題集1,011門を全問解くのに要した時間が15秒。</p>
<hr>
<p>課題３</p>
<p>数独の課題でバックトラック＋制約伝播はかなり強力な手法だと実感したと思います。<br>
では、ＢＴ＋制約伝播はどこまで通用するのか、違う問題を通じて確認しましょう。<br>
ついでに、そろそろ本物の学術論文を読み始めましょう。</p>
<p>Russell&amp;Norvig 5.3 (p.151)にN-Queens問題が紹介されてます。<br>
このN-Queens問題に対して：</p>
<p>１）バックトラック法＋制約伝播を用いたソルバを実装する<br>
　　入力：　Queenの数N</p>
<p>２）　局所探索法（min-conflicts法)を用いたソルバを実装する。<br>
制約充足における局所探索法は教科書（第２版）の制約充足の章で簡潔に説明されているが、<br>
教科書の洗練された説明だけでなく、原文を読む（当時、かなり大きなインパクトがあった有名な論文で、ＡＩ分野の「名作」の一つ。<br>
Solving Large-Scale Constraint Satisfaction and Scheduling Problems<br>
Using a Heuristic Repair Method presented at the Eighth National<br>
Conference on Artificial Intelligence (AAAI-90)<br>
<a href="https://www.aaai.org/Papers/AAAI/1990/AAAI90-003.pdf">https://www.aaai.org/Papers/AAAI/1990/AAAI90-003.pdf</a><br>
この論文で紹介されたアルゴリズムを実装する。</p>
<p>局所探索法のソルバを正しく、効率良く実装すれば、かなり大規模な問題が解けるはず。</p>
<p>３）　上記ソルバ１，２、を比較する</p>
<p>**遠藤君の結果（３・２６）<br>
N=1,000,000の問題を128秒で解けた(python, pypy JIT on 1.06GHz Core 2 Duo, 2GB RAM)</p>
<hr>
<p>課題４</p>
<p>今度はN-Queens問題をboolean satisfiability (SAT)として表現し<br>
て解くプログラムを作りましょう。</p>
<p>以下の資料(Chumin Li作)にNQueensSATモデルの概要が説明されている：<br>
<a href="https://sites.google.com/site/aflabinternal/sharedfiles/Li-SAT-modeling-slides.pdf?attredirects=0&amp;d=1">https://sites.google.com/site/aflabinternal/sharedfiles/Li-SAT-modeling-slides.pdf?attredirects=0&amp;d=1</a></p>
<p>但し、SATソルバは自分で作らず、<br>
ネットから高性能のソルバを拾って利用する。例えば、<br>
<a href="http://minisat.se/">http://minisat.se/</a>   （他のソルバでも構わない）</p>
<p>minisatf等が処理可能な標準ファイル形式(.cnf 形式)の説明：<br>
<a href="http://www.satcompetition.org/2009/format-benchmarks2009.html">http://www.satcompetition.org/2009/format-benchmarks2009.html</a></p>
<p>要するに、Queenの数Nを入力として、<br>
１）SATソルバが処理できる形式のファイルを作成、<br>
（この変換作業が今回の課題の味噌）<br>
２）SATソルバを実行、<br>
３）結果を読み込み、正しい解か確認</p>
<p>minisatは基本的には制約伝播＋木探索なので局所探索には劣るが、汎用ＳＡＴソルバでどこまで解けるか実感する（前回作った、自作の制約伝播＋深さ優先探索ソルバと比較する）</p>
<hr>
<p>課題５：汎用なプランナと、問題に特化した探索アルゴリズムを比較する</p>
<p>課題＃1で実装した8パズルのソルバと、最新の汎用プランナFast Downwardを比較する</p>
<p>汎用プランナFast Downwardをダウンロードして、コンパイルする<br>
<a href="http://www.fast-downward.org/HomePage">http://www.fast-downward.org/HomePage</a><br>
<a href="http://www.fast-downward.org/ObtainingAndRunningFastDownward">http://www.fast-downward.org/ObtainingAndRunningFastDownward</a></p>
<p>FastDownwardを実装するには、問題(ドメイン）の一般的なモデルファイルおよび具体的な問題のインスタンスファイルが必要</p>
<p>このサイトから8パズルのモデル・インスタンスファイルのペア３問：eight01.pddl, eight01x.pddl　,<br>
eight02,eight02x, eight03,eight03xをダウンロード：<br>
<a href="http://www.ida.liu.se/~TDDC65/ai/la/strips/">http://www.ida.liu.se/~TDDC65/ai/la/strips/</a></p>
<p>まず、eight01.pddl, eight01x.pddlをなるべく理解する。<br>
PDDL形式を理解するには、まずはRussell&amp;Norvigのプランニングの章（１１）を復習。<br>
PDDL形式の入門的な説明 <a href="http://users.cecs.anu.edu.au/~patrik/pddlman/writing.html">http://users.cecs.anu.edu.au/~patrik/pddlman/writing.html</a></p>
<p>課題１で作った8パズルソルバの為に、eight01.pddl, eight01x.pddl… eight3x.pddlに相当する<br>
入力ファイルを作成する（自動的な変換でなく、手作業でＯＫ）。</p>
<p>8パズルソルバとFastDownwardの探索性能を比較する：<br>
Fast Downwardの実行：　<a href="http://www.fast-downward.org/PlannerUsage">http://www.fast-downward.org/PlannerUsage</a></p>
<hr>
<p>課題６：　進化計算<br>
Black-box関数最適化contest<br>
<a href="http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2016/CEC2016.htm">http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2016/CEC2016.htm</a></p>
<p>ここで紹介されている４番目のtechnical report (single parameter)のベンチマーク問題に対する進化アルゴリズムを実装する。</p>
<p>J. J. Liang, B-Y. Qu, P. N. Suganthan, “Problem Definitions and Evaluation Criteria for the CEC 2014 Special Session and Competition on Single Objective Real-Parameter Numerical Optimization”, Technical Report 201311, Computational Intelligence Laboratory, Zhengzhou University, Zhengzhou, China  and  Technical Report, Nanyang Technological University, Singapore, December 2013. (Single parameter-operator set based case)</p>
<p>まずは自分で考えて、何か実装する。</p>
<p>次に、SHADEを実装してみる。<br>
<a href="http://metahack.org/CEC2013-SHADE.pdf">http://metahack.org/CEC2013-SHADE.pdf</a></p>
<p>参考に：田邊のコード（C++版、Java版　Matlab/Octave版）　<a href="https://sites.google.com/site/tanaberyoji/software">https://sites.google.com/site/tanaberyoji/software</a></p>
<p>ハマったら、　今年のcontestに投稿してみる：　<a href="http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2017/CEC2017.htm">http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2017/CEC2017.htm</a></p>
]]></content>
      <categories>
        <category>Sundries Storage</category>
      </categories>
      <tags>
        <tag>Lad Task</tag>
      </tags>
  </entry>
  <entry>
    <title>Mathematical Proof and Discussion of &quot;Fast and Slow Pointer&quot;</title>
    <url>/2020/20201014-Mathematical-Proof-and-Discussion-of-Fast-and-Slow-Pointer/</url>
    <content><![CDATA[<h2 id="mathematical-proof-and-discussion-of--&quot;fast-and-slow-pointer&quot;">Mathematical Proof and Discussion of  “Fast and Slow Pointer”<a title="#mathematical-proof-and-discussion-of--&quot;fast-and-slow-pointer&quot;" href="#mathematical-proof-and-discussion-of--&quot;fast-and-slow-pointer&quot;"></a></h2>
<ul>
<li>
<pre><code> https://math.stackexchange.com/questions/913499/proof-of-floyd-cycle-chasing-tortoise-and-hare
</code></pre>
</li>
<li>
<pre><code> https://hongyangyu.github.io/algorithm/2017/09/04/Fast-Pointer-and-Slow-Pointer/
</code></pre>
</li>
<li>
<pre><code> https://zhuanlan.zhihu.com/p/60736361
</code></pre>
</li>
<li>
<pre><code> https://www.jianshu.com/p/a821b0a15b51</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Sundries Storage</category>
      </categories>
      <tags>
        <tag>Linked list</tag>
        <tag>Two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Linear List</title>
    <url>/2020/20200425-Linear-List/</url>
    <content><![CDATA[<h2 id="linear-list">Linear List<a title="#linear-list" href="#linear-list"></a></h2>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<h3 id="materials:">materials:<a title="#materials:" href="#materials:"></a></h3>
<p>· Wikipedia<br>
· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>
· You can see the implementations of those linear list <a href="https://github.com/OreoDu/Implementations/tree/main/src/DataStructure" target="_blank">here</a>.</p>
<p>A list or sequence is an abstract data type that represents a countable number of ordered values, where the same value may occur more than once. Lists are typically implemented either as linked lists (either singly or doubly linked) or as arrays, static arrays or dynamic arrays(variable length).</p>
<p>If we limit the operations of sequence, then we can get stack or queue.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="padding:0"></th>
<th style="text-align:center">Linked list</th>
<th style="text-align:center">Array</th>
<th style="text-align:center">Dynamic array</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Indexing</td>
<td style="text-align:center">Θ(<em>n</em>)</td>
<td style="text-align:center">Θ(1)</td>
<td style="text-align:center">Θ(1)</td>
</tr>
<tr>
<td style="text-align:center">Insert/delete at beginning</td>
<td style="text-align:center">Θ(1)</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">Θ(<em>n</em>)</td>
</tr>
<tr>
<td style="text-align:center">Insert/delete at end</td>
<td style="text-align:center">Θ(1) (known); Θ(<em>n</em>) (unknown)</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">Θ(1) <a href="https://en.wikipedia.org/wiki/Amortized_analysis" target="_blank">amortized</a></td>
</tr>
<tr>
<td style="text-align:center">Insert/delete in middle</td>
<td style="text-align:center">search time + Θ(1)</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">Θ(<em>n</em>)</td>
</tr>
<tr>
<td style="text-align:center">Wasted space (average)</td>
<td style="text-align:center">Θ(<em>n</em>)</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Θ(<em>n</em>)</td>
</tr>
</tbody>
</table></div></div><h2 id="part.1-array">Part.1 Array<a title="#part.1-array" href="#part.1-array"></a></h2>
<p>Array consists of a linear collection of values or variables store in contiguous space that can be selected by one or more indices. Arrays are used to implement other data structures, such as lists, heaps, hash tables, deques, queues, stacks, strings, and VLists.</p>
<p><img src="https://i.loli.net/2020/10/05/eTAkmIBp8izjosD.gif" alt="objects-tenElementArray" class="φcx"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Arrays in Java. Declaration, instantiation, assignment</span></span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">char</span>[] b = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>The array data type in java is static array. Static arrays have a size that is fixed when they are created and consequently do not allow elements to be inserted or removed. However, by allocating a new array and copying the contents of the old array to it, it is possible to effectively implement a <em>dynamic</em> version of an array.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Array in Python is list data type. List is mutable.</span></span><br><span class="line">list0 = <span class="built_in">list</span>()</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">100</span>]  </span><br><span class="line">list2 = [<span class="string">&#x27;Hello&#x27;</span>]*<span class="number">3</span> </span><br></pre></td></tr></table></figure>
<h4 id="efficiency">Efficiency<a title="#efficiency" href="#efficiency"></a></h4>
<p>Random access is available. However, modification(add or remove elements) with reallocation or reorganization of the entire structure have poor space and time complexity because the data items need not be stored contiguously in memory or on disk, while restructuring an array at run-time is a expensive operation.</p>
<p>Arrays take linear (O(n)) space in the number of elements n that they hold. Array-based implementations of other data structures are frequently simple and space-efficient, requiring little space overhead.</p>
<p>In an array with element size k and on a machine with a cache line size of B bytes, iterating through an array of n elements requires the minimum of ceiling(nk/B) cache misses, because its elements occupy contiguous memory locations. Arrays have better cache locality compared to linked lists.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFACTOR = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        T[] newArray = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, newArray, <span class="number">0</span>, size);</span><br><span class="line">        items = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == items.length) resize(size * REFACTOR);</span><br><span class="line">        items[size++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The list is empty.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> r = (<span class="keyword">double</span>) size / items.length;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0.25</span>) resize(items.length / <span class="number">2</span>);</span><br><span class="line">            T returnValue = items[size - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// avoid loitering</span></span><br><span class="line">            items[--size] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) System.out.println(<span class="string">&quot;The array is empty.&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            System.out.print(items[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="special-arrays">Special Arrays<a title="#special-arrays" href="#special-arrays"></a></h4>
<p><a href="https://en.wikipedia.org/wiki/Dynamic_array" target="_blank">Dynamic arrays</a> or growable arrays are similar to arrays but add the ability to insert and delete elements; adding and deleting at the end is particularly efficient. However, they reserve linear (Θ(<em>n</em>)) additional storage, whereas arrays do not reserve additional storage.</p>
<p><a href="https://en.wikipedia.org/wiki/Associative_array" target="_blank">Associative arrays</a> provide a mechanism for array-like functionality without huge storage overheads when the index values are sparse. Specialized associative arrays with integer keys include <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank">Patricia tries</a>, <a href="https://en.wikipedia.org/wiki/Judy_array" target="_blank">Judy arrays</a>, and <a href="https://en.wikipedia.org/wiki/Van_Emde_Boas_tree" target="_blank">van Emde Boas trees</a>.</p>
<h2 id="part.2-linked-list">Part.2 Linked List<a title="#part.2-linked-list" href="#part.2-linked-list"></a></h2>
<p>A linked list is a linear collection of nodes( data and reference) which together represent a sequence and whose order is not given by their physical placement in memory. Instead,  the reference of each node points to the next. They can be used to implement several other common abstract data types, including lists, stacks, queues, <a href="https://en.wikipedia.org/wiki/Associative_array" target="_blank">associative arrays</a>, and <a href="https://en.wikipedia.org/wiki/S-expression" target="_blank">S-expressions</a>.</p>
<img src="https://i.loli.net/2020/10/05/xJ2w3mbatEvh7FV.png" alt="122" style="zoom: 25%;">
<h4 id="efficiency-1">Efficiency<a title="#efficiency-1" href="#efficiency-1"></a></h4>
<p>This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration. A drawback of linked lists is that access time is linear (and difficult to pipeline). Faster access, such as random access, is not feasible and reverse traversing is difficult because linked lists are inherently sequential access. Also</p>
<p>Linked list are dynamic, so the length of list can increase or decrease as necessary. Each node does not necessarily follow the previous one physically in the memory. But they use more memory than arrays because of the storage used by their pointers.</p>
<p>Nodes are stored noncontiguously, greatly increasing the time periods required to access individual elements within the list, especially with a CPU cache.</p>
<h3 id="ⅰ.-singly-linked-list">Ⅰ. Singly linked list<a title="#ⅰ.-singly-linked-list" href="#ⅰ.-singly-linked-list"></a></h3>
<img src="https://i.loli.net/2020/10/07/VwNKaRGuY8pcjWv.png" alt="sllist" style="zoom: 50%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T i, Node&lt;T&gt; n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invariant: Sentinel (be guaranteed to be true during code execution.)</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; sentinel;</span><br><span class="line">    <span class="comment">// Cache: size (put aside data to speed up retrieval)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; first = <span class="keyword">new</span> Node&lt;&gt;(x,<span class="keyword">null</span>);</span><br><span class="line">        sentinel = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>,first);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; n = <span class="keyword">new</span> Node&lt;&gt;(x,sentinel.next);</span><br><span class="line">        sentinel.next = n;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sentinel.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The List is empty&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; re = sentinel.next;</span><br><span class="line">            sentinel.next = sentinel.next.next;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> re.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; p = sentinel;</span><br><span class="line">        <span class="keyword">while</span>(p.next != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">        p.next = <span class="keyword">new</span> Node&lt;&gt;(x,<span class="keyword">null</span>);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; p = sentinel.next;</span><br><span class="line">        <span class="keyword">while</span>(p!= <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.item + <span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End of the List.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅱ.-doubly-linked-list">Ⅱ. Doubly Linked List<a title="#ⅱ.-doubly-linked-list" href="#ⅱ.-doubly-linked-list"></a></h3>
<img src="https://i.loli.net/2020/10/07/qMoSrQEA4tf9Bku.png" alt="ddlist" style="zoom:50%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;T&gt; next;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;T&gt; pre;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;T&gt; pre, T item, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.pre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; sentinel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.pre = sentinel;</span><br><span class="line">        sentinel.next = sentinel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DLList</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        Node&lt;T&gt; first = <span class="keyword">new</span> Node&lt;&gt;(sentinel,x,sentinel);</span><br><span class="line">        sentinel.pre = first;</span><br><span class="line">        sentinel.next = first;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; n = <span class="keyword">new</span> Node&lt;&gt;(sentinel, x, sentinel.next);</span><br><span class="line">        sentinel.next = n;</span><br><span class="line">        n.next.pre = n;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The list is empty.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; re  = sentinel.next;</span><br><span class="line">            sentinel.next = sentinel.next.next;</span><br><span class="line">            re.next.pre = sentinel;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> re.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.pre.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; n = <span class="keyword">new</span> Node&lt;&gt;(sentinel.pre,x,sentinel);</span><br><span class="line">        sentinel.pre.next = n;</span><br><span class="line">        sentinel.pre = n;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The list is empty&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; re = sentinel.pre;</span><br><span class="line">            sentinel.pre = re.pre;</span><br><span class="line">            re.pre.next = sentinel;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> re.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; p = sentinel.next;</span><br><span class="line">        <span class="keyword">while</span>(p != sentinel) &#123;</span><br><span class="line">            System.out.print(p.item + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The end of the list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅲ.-two-pointers--used--in-the-linked-lists">Ⅲ. Two pointers  used  in the linked lists<a title="#ⅲ.-two-pointers--used--in-the-linked-lists" href="#ⅲ.-two-pointers--used--in-the-linked-lists"></a></h3>
<ol>
<li>Same speed pointer</li>
</ol>
<p><strong>Problem</strong>: Change the links in the list.</p>
<p>Usually we use <code>previous</code>, <code>current</code> and <code>next </code> to store the nodes avoiding losing the references and at the same time manipulation the nodes during the iteration.</p>
<p><strong>Problem</strong>: Find the nth last node from the singly linked list.</p>
<p>We can traverse the list at first to get the length of the list, then traverse the list again and count from 0 until it reach length - n.</p>
<p>The key of this problem is to get the <code>length-n</code> so that we can traverse the list only one time. One way to get the information during iteration is to set two pointers. We set both <code>p</code> and <code>q</code> pointer in the head. Firstly, <code>q</code> moves few steps to reach the nth node and <code>p</code> stay at the original place, then <code>p</code> and <code>q</code> move together until <code>q</code> reach the end of the list. Now <code>p</code> is pointing at the nth last node.</p>
<ol start="2">
<li>Slow and fast pointer</li>
</ol>
<p><strong>Problem:</strong> Discover the dichotomous point of the singly linked list.</p>
<p>Traverse the linked list to get the length of the linked list, and then count to get the intermediate node.</p>
<p>Or we can use two pointers(slow and fast). Both of which initially point to the head of the table. Slow moves forward one node at a time, fast moves forward two nodes at a time. When fast moves to the end of the linked list, slow points to the middle node of the linked list.</p>
<p><strong>Problem:</strong> Detect circle: How to check whether a singly linked list has a cycle? If there is a cycle, how to determine the starting point and length of the ring?</p>
<p>Store the nodes that we have visited in a set. Once we found one node that is already in the set, it means that cycle exists in list and that position is the entrance of the cycle.</p>
<p>Or we can use slow and fast pointers. See more details <a href="https://oreodu.github.io/post/20201014-Mathematical-Proof-and-Discussion-of-Fast-and-Slow-Pointer" target="_blank">here</a>.</p>
<h2 id="part.3-stack">Part.3 Stack<a title="#part.3-stack" href="#part.3-stack"></a></h2>
<p>A stack is an abstract data type that serves as a collection of elements, with two main principal operations:</p>
<ul>
<li>push, which adds an element to the collection, and</li>
<li>pop, which removes the most recently added element that was not yet removed. <strong>LIFO</strong> (<strong>last in, first out</strong>)</li>
</ul>
<img src="https://i.loli.net/2020/10/07/9sd4mlFK8hnC3PM.png" alt="pictorial-representation-of-stack" style="zoom:50%;">
<p>​                                                                                  (from <a href="https://www.softwaretestinghelp.com/stack-in-cpp/" target="_blank">here</a>)</p>
<h3 id="ⅰ.--slliststack">Ⅰ.  SLListStack<a title="#ⅰ.--slliststack" href="#ⅰ.--slliststack"></a></h3>
<p>Every operation takes constant time in the worst case but uses extra time and space to deal with the link.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLListStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;T&gt; next;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T item, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; sentinel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLListStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; n = <span class="keyword">new</span> Node&lt;&gt;(x,sentinel.next);</span><br><span class="line">        sentinel.next = n;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;There is no element in the stack&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; re = sentinel.next;</span><br><span class="line">            sentinel.next = re.next;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> re.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅱ.-aliststack">Ⅱ. AListStack<a title="#ⅱ.-aliststack" href="#ⅱ.-aliststack"></a></h3>
<p>Every operation takes constant amortized time but less wasted space.	`</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AListStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFACTOR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AListStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        items =(T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        T[] n =(T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        System.arraycopy(items,<span class="number">0</span>,n,<span class="number">0</span>,size);</span><br><span class="line">        items = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (items.length == size) resize(size*REFACTOR);</span><br><span class="line">        items[size++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The stack is empty.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> r = (<span class="keyword">double</span>) size / items.length;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0.25</span>) resize(items.length / <span class="number">2</span>);</span><br><span class="line">            T returnValue = items[size - <span class="number">1</span>];</span><br><span class="line">            items[--size] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅲ.-applications">Ⅲ. Applications<a title="#ⅲ.-applications" href="#ⅲ.-applications"></a></h3>
<ul>
<li>Parsing in a computer.</li>
<li>Java virtual machine.</li>
<li>Undo  in a word processor.</li>
<li>Back button in a web browser.</li>
<li>Implementing function calls in  a compiler.
<ul>
<li>Function call: push local environment and return address.</li>
<li>Return: pop return address and local environment.</li>
</ul>
</li>
<li>Arithmetic expression evaluation.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvaluationStack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Or we can use the java.util.Stack.</span></span><br><span class="line">        AListStack&lt;Integer&gt; numQueue = <span class="keyword">new</span> AListStack&lt;&gt;();</span><br><span class="line">        AListStack&lt;Character&gt; opeQueue = <span class="keyword">new</span> AListStack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c: args[<span class="number">0</span>].toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) numQueue.push(Character.getNumericValue(c));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>) opeQueue.push(c);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> ope = opeQueue.pop();</span><br><span class="line">                <span class="keyword">int</span> num0 = numQueue.pop();</span><br><span class="line">                <span class="keyword">int</span> num1 = numQueue.pop();</span><br><span class="line">                <span class="keyword">if</span> (ope == <span class="string">&#x27;*&#x27;</span>) numQueue.push(num1 * num0);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ope == <span class="string">&#x27;/&#x27;</span>) numQueue.push(num1 / num0);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ope == <span class="string">&#x27;+&#x27;</span>) numQueue.push(num1 + num0);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ope == <span class="string">&#x27;-&#x27;</span>) numQueue.push(num1 - num0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The result of the expression is: &quot;</span> + numQueue.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.4-queue">Part.4 Queue<a title="#part.4-queue" href="#part.4-queue"></a></h2>
<p>A queue is an abstract data type that serves as a collection of elements, with two main principal operations:</p>
<ul>
<li>enqueue, which adds an element to the collection, and</li>
<li>dequeue, which removes the least recently added element that was not yet removed. <strong>FIFO</strong> (<strong>first in, first out</strong>)</li>
</ul>
<img src="https://i.loli.net/2020/10/07/lcLWI7BeUgfFqRy.png" alt="0_TRbfsq86lqDoqW6b" style="zoom: 20%;">
<h3 id="ⅰ.-dllistqueue">Ⅰ. DLListQueue<a title="#ⅰ.-dllistqueue" href="#ⅰ.-dllistqueue"></a></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLListQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;T&gt; next;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;T&gt; pre;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;T&gt; pre, T item, Node&lt;T&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.pre  = pre;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; sentinel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DLListQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; n = <span class="keyword">new</span> Node&lt;&gt;(sentinel, x, sentinel.next);</span><br><span class="line">        sentinel.next = n;</span><br><span class="line">        n.next.pre = n;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The queue is empty!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; returnValue = sentinel.pre;</span><br><span class="line">            returnValue.pre.next = sentinel;</span><br><span class="line">            sentinel.pre = returnValue.pre;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> returnValue.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅱ.-alistqueue">Ⅱ. AListQueue<a title="#ⅱ.-alistqueue" href="#ⅱ.-alistqueue"></a></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AListQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFACTOR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AListQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">        head = <span class="number">0</span>;</span><br><span class="line">        tail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        T[] n = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        <span class="keyword">int</span> size = tail-head;</span><br><span class="line">        System.arraycopy(items,<span class="number">0</span>,n,<span class="number">0</span>,size);</span><br><span class="line">        items = n;</span><br><span class="line">        head = <span class="number">0</span>;</span><br><span class="line">        tail = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> tail - head;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> tail == head;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == items.length) resize((tail - head)*REFACTOR);</span><br><span class="line">        items[tail++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == head) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The queue is empty.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> r = (<span class="keyword">double</span>) (tail - head) / items.length;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0.25</span>) resize(items.length / <span class="number">2</span>);</span><br><span class="line">            T returnValue = items[tail];</span><br><span class="line">            items[tail++] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.5-java-collections-library">Part.5 Java collections Library<a title="#part.5-java-collections-library" href="#part.5-java-collections-library"></a></h2>
<p><code>java.util.List</code> : is API for an sequence of items.</p>
<p><code>java.util.ArrayList</code> : implements <code>java.util.List</code> and uses resizing array.</p>
<p><code>java.util.LinkedList</code> : implements <code>java.util.List</code> and uses linked list.</p>
<p><code>java.util.Stack</code> : extends <code>java.util.Vector</code> and implements <code>java.util.List</code>.</p>
<p><code>java.util.Queue</code> : An interface.</p>
<p>See more obout collections <a href="https://oreodu.github.io/post/20201013-Collection-in-Java" target="_blank">here</a>.</p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Linked list</tag>
        <tag>Two pointers</tag>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Basics 01</title>
    <url>/2019/20191010-Python-Basics-01/</url>
    <content><![CDATA[<h1 id="python-basics-01">Python Basics 01<a title="#python-basics-01" href="#python-basics-01"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>Programming is a method that we use computers to do the complicated calculations and repetitive tasks which human are not very good at in order to solve the difficult problem.</p>
<blockquote>
<p>Python is a high-level language intended to be relatively straightforward for humans to read and write and for computers to read and process.  (from <i>Python for Everybody</i>)</p>
</blockquote>
<p><img src="https://i.loli.net/2020/09/06/ohHcd45Qz6wTumq.png" alt="11"><br>
<strong>· materials:</strong><br>
· <a href="https://www.py4e.com/" target="_blank"><i>Python for Everybody (Exploring Data Using Python 3)</i></a>  by Charles R. Severance<br>
· <i>Learn Python 3 the Hard Way</i> by Zed A. Shaw<br>
· <u><a href="https://github.com/jackfrued/Python-100-Days" target="_blank">Python-100-Days</a></u> by jackfrued<br>
· <u><a href="https://docs.python.org/3/tutorial/index.html" target="_blank">Python Tutorial</a></u><br>
· <a href="https://google.github.io/styleguide/pyguide.html" target="_blank"><u>Google Python Style Guide</u></a></p>
<h4 id="part.1-installing-python-3-on-windows-10">Part.1 Installing Python 3 On Windows 10<a title="#part.1-installing-python-3-on-windows-10" href="#part.1-installing-python-3-on-windows-10"></a></h4>
<p>Download and install Python 3.x.x from <u><a href="https://www.python.org/download/" target="_blank">here</a></u>. (When you’re installing Python you should make sure that you have chosen “Add Python 3.x.x  to PATH” or you can do this by yourself later.)</p>
<p>Download and install the text editor. (I installed <u><a href="https://atom.io/" target="_blank">Atom</a></u>.)</p>
<p>Two ways that you run your code：<br>
<strong>·</strong> Write the script  in the text editor and execute it in the command window or type commands into the Python interpreter.</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python xxx.py arg1 arg2 arg3</span><br></pre></td></tr></table></figure>
<p><strong>·</strong> Write and run the code in a interactive programming tool (such as IPython).</p>
<h4 id="part.2-how-do-the-programs-work-inside-the-computer?">Part.2 How do the programs work inside the computer?<a title="#part.2-how-do-the-programs-work-inside-the-computer?" href="#part.2-how-do-the-programs-work-inside-the-computer?"></a></h4>
<p>First, let’s have a quick look at the simplified computer structure.</p>
<img src="https://i.loli.net/2020/09/06/a8eSX7ofZg4IVNp.png" alt="com-stru" style="zoom:50%;">
<p>(from <i>Python for Everybody</i>)</p>
<p>When we finish our code and store it in the <i>secondary memory</i>, the Python interpreter(CPython、IPython、Jython、PyPy ) will parses the source code and interprets the instructions and the complier will translate the high-level source code into machine language and put the resulting machine language into a file for later execution.</p>
<p>Then when we execute the program, it will be stored in the <i>main memory</i> temporarily. The computer will retrieve the data form the <i>input devices</i> or the <i>network</i>, get the instructions form the <i>main memory</i> and do the computations in the <i>center processing unit(CPU)</i> with a high speed(billion times per second). In the end, the computer will send the results to the <i>output devices</i>.</p>
<h4 id="part.3-language-element">Part.3 Language element<a title="#part.3-language-element" href="#part.3-language-element"></a></h4>
<p>A language must have its own vocabulary and grammar. In the vocabulary of Python, basically, we have <i>Reserved words (keywords)</i>, <i>variable</i>, <i>constant</i> and <i>operators</i>.</p>
<p><strong>Ⅰ. Reserved words</strong> (keywords):<br>
Special identifiers with specific meanings and functions in python that can’t be used by programmer.</p>
<p><img src="https://i.loli.net/2020/09/06/hJebFXYLdgN3wGx.png" alt="reserved-w" class="φcx"></p>
<p>(from <i>Python for Everybody</i>)</p>
<p><strong>Ⅱ. Variable</strong>:</p>
<p>In python, variables don’t have types(only the objects have types) and they are <strong>all</strong> bind a reference of an object (a pointer) to the variable names. The size of the pointer’s memory space has nothing to do with the type, and its memory space just saves the memory address of the pointed data. You can use id() to view the address value of the current variable.</p>
<p><strong>· Types</strong>  :</p>
<ul>
<li><strong>numbers</strong>:
<ul>
<li>integer (can use different radixes: 0b100,0o100,100,0x100)</li>
<li>float (sometimes use scientific notation: 1.234e2)</li>
<li>complex number (ex: 3+2j)</li>
</ul>
</li>
<li><strong>Boolean</strong>: True, False</li>
<li><strong>Text Sequence</strong>: string (be enclosed in single or double quotation marks)</li>
<li><strong>Built-in data structures</strong>: list, tuple, set, dictionary</li>
</ul>
<p><strong>· Immutable and mutable</strong><br>
1.Immutable objects: numbers, bool, strings, tuples. (value type)<br>
The value at the address referenced by the variable cannot be changed. The re-assignment of a variable which point to an immutable object is equivalent to creating a new object in memory instead of the previous object. The advantage of the immutable data type is that no matter how many references there are in the memory, the same object only occupies a piece of memory and all the references will point to it.</p>
<p>2.Mutable objects: list, set, dictionary. (reference type)<br>
When operating on mutable objects, their values are mutable and the change of the value will not create  new objects, that is, the address will not change, but the content in the address has changed or the address has been expanded. Different from immutable objects, for mutable objects, multiple objects with the same value are stored in memory with different address values.</p>
<p>We can use <code>type()</code> function to get the type of the variables.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1.234e6</span></span><br><span class="line">print(<span class="built_in">type</span>(a)) <span class="comment">#&lt;class &#x27;float&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p>The type of the objects can be converted using functions built in Python.</p>
<ul>
<li>
<p>· <code>int()</code>: Convert a number or string to an integer and specify a radix.</p>
</li>
<li>
<p>· <code>float()</code>: Convert a number or strings to a floating point number.</p>
</li>
<li>
<p>· <code>str()</code>: Convert the specified object to a string and specifies the encoding.</p>
</li>
<li>
<p>· <code>chr()</code>: Convert the corresponding encoding (integer) to the string (a character).</p>
</li>
<li>
<p>· <code>ord()</code>: Convert a string (a character) to the corresponding encoding (integer).</p>
</li>
<li>
<p>·  …</p>
</li>
</ul>
<p><strong>· Name rules</strong> : (usually use a mnemonic name)<br>
1.Combination of numbers, letters, underscore (can not start with a number)<br>
2.Case sensitive<br>
3.Can not use reserved words<br>
4.PEP 8 <a href="https://www.python.org/dev/peps/pep-0008/" target="_blank">(<u> Style Guide for Python Code</u> )</a></p>
<p><strong>· How do we use variables?</strong><br>
1.Use variables to save data and perform arithmetic operations</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1.234</span></span><br><span class="line">b = <span class="number">2.345</span></span><br><span class="line">print(a+b) <span class="comment"># 3.579</span></span><br><span class="line"></span><br><span class="line">fruit = <span class="string">&#x27;banana&#x27;</span></span><br><span class="line">letter = fruit[<span class="number">1</span>] <span class="comment"># extracts the character at index position 1 from the fruit variable</span></span><br><span class="line">letter1 = fruit[<span class="number">-1</span>]</span><br><span class="line">print(letter,letter1) <span class="comment"># r t</span></span><br></pre></td></tr></table></figure>
<p>2.The use of backslash <code>\</code><br>
We can use <code>\</code> in a string to indicate escaping, which means that the character after <code>\</code> is no longer its original meaning.<br>
<code>\n</code> means a new line<br>
<code>\t</code> means tab<br>
<code>\141</code>(octal) or <code>\x61</code>(hexadecimal )  means  lowercase letter <code>a</code><br>
<code>\u9a86</code>(Unicode ) means ‘骆’ in Chinese</p>
<p>If we do not want to escape characters after the <code>\</code> or you want to print <code>\</code> , you can use <code>r</code> before the string.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 =  <span class="string">r&#x27; \&#x27; hello, world! \&#x27; &#x27;</span>  <span class="comment"># print: \&#x27; hello, world! \&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27; \&#x27;hello, world!\\ \n &#x27;</span> <span class="comment"># print: &#x27;hello, world!\</span></span><br><span class="line"><span class="built_in">print</span> (s1, s2, end = <span class="string">&#x27; &#x27;</span> )</span><br></pre></td></tr></table></figure>
<p>3.The object string has some built-in methods to process itself.<br>
We can use <code>dir</code> function to show the available methods. (<u><a href="https://docs.python.org/3.5/library/stdtypes.html#string-methods" target="_blank">more methods</a></u>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello,World!&#x27;</span> </span><br><span class="line"><span class="comment"># calculate the length</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span> (str1)) <span class="comment"># 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># obtain capitalized string copy </span></span><br><span class="line"><span class="built_in">print</span> (str1.capitalize ()) <span class="comment">#Hello, world! </span></span><br><span class="line"><span class="comment"># obtain the first character of each word capitalized copy </span></span><br><span class="line"><span class="built_in">print</span> (str1.title()) <span class="comment"># Hello, World! </span></span><br><span class="line"><span class="comment"># obtain an each character capitalized copy  </span></span><br><span class="line"><span class="built_in">print</span> (str1.upper ()) <span class="comment"># HELLO, WORLD! </span></span><br><span class="line"><span class="comment">#replace the specific substring with another one</span></span><br><span class="line">print(str1.replace(<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;e&#x27;</span>)) <span class="comment"># helle,werld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Find the location of the substring</span></span><br><span class="line"><span class="built_in">print</span> (str1.find(<span class="string">&#x27;o&#x27;</span>,<span class="number">5</span> )) <span class="comment"># 7 </span></span><br><span class="line"><span class="built_in">print</span> (str1.find(<span class="string">&#x27;shit &#x27;</span>)) <span class="comment"># -1 </span></span><br><span class="line"><span class="comment"># check whether the string starts with the specified string</span></span><br><span class="line"><span class="built_in">print</span> (str1.startswith (<span class="string">&#x27;He&#x27;</span>)) <span class="comment"># False </span></span><br><span class="line"><span class="comment"># checks whether the string ends with the specified string </span></span><br><span class="line"><span class="built_in">print</span> (str1.endswith (<span class="string">&#x27;!&#x27;</span>)) <span class="comment"># True </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Center the string at the specified width and fill with the specified characters </span></span><br><span class="line">print(str1.center( <span class="number">50</span> ,<span class="string">&#x27;*&#x27;</span> ))</span><br><span class="line"><span class="built_in">print</span> (str1.rjust( <span class="number">50</span> ,<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"></span><br><span class="line">str2 =  <span class="string">&#x27; abc123456 &#x27;</span> </span><br><span class="line"><span class="comment"># check whether the character string configured by numbers</span></span><br><span class="line"><span class="built_in">print</span> (str2.isdigit())   <span class="comment"># False </span></span><br><span class="line"><span class="comment"># check whether the character string configured by letters</span></span><br><span class="line"><span class="built_in">print</span> (str2.isalpha())   <span class="comment"># False </span></span><br><span class="line"><span class="comment"># check whether the character string configured by numbers and letters</span></span><br><span class="line"><span class="built_in">print</span> (str2.isalnum())   <span class="comment"># True </span></span><br><span class="line"><span class="comment">#print without space </span></span><br><span class="line"><span class="built_in">print</span> (str2.strip())</span><br><span class="line">print(str1.translate(str1.maketrans(<span class="string">&#x27;,!&#x27;</span>,<span class="string">&#x27;  &#x27;</span>))) <span class="comment"># hello World </span></span><br></pre></td></tr></table></figure>
<p><strong>Ⅲ. Operators</strong>:<br>
The values the operators is applied to are called <i>operands</i> and an expression is a combination of operands and operators.</p>
<p><strong>· For number and Boolean</strong></p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>Operator</th>
<th style="text-align:left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+</code> <code>-</code></td>
<td style="text-align:left">unary plus and minus</td>
</tr>
<tr>
<td><code>**</code> <code>*</code> <code>/</code> <code>%</code> <code>//</code> <code>+</code> <code>-</code></td>
<td style="text-align:left">power, multiply, division, mold, integer division(round down), add, subtract,</td>
</tr>
<tr>
<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>
<td style="text-align:left">shift right, left shift</td>
</tr>
<tr>
<td><code>~</code> <code>&amp;</code>  <code>^</code></td>
<td style="text-align:left">bitwise negation, bitwise and, bitwise XOR</td>
</tr>
<tr>
<td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td>
<td style="text-align:left">Less than or equal to, less than, greater than, greater than or equal to</td>
</tr>
<tr>
<td><code>==</code> <code>!=</code></td>
<td style="text-align:left">Equal to, not equal to</td>
</tr>
<tr>
<td><code>=</code> <code>%=</code> <code>/=</code> <code>//=</code> <code>*=</code></td>
<td style="text-align:left"><code>**=</code> <code>+=</code> <code>-=</code> <code>&amp;=</code> <code>^=</code> <code>&gt;&gt;=</code> <code>&lt;&lt;=</code></td>
</tr>
<tr>
<td><code>:=</code></td>
<td style="text-align:left">walrus operator</td>
</tr>
<tr>
<td><code>is</code> <code>is not</code></td>
<td style="text-align:left">Identity operator</td>
</tr>
<tr>
<td><code>in</code> <code>not in</code></td>
<td style="text-align:left">Member operator</td>
</tr>
<tr>
<td><code>not</code> <code>or</code> <code>and</code></td>
<td style="text-align:left">Logical Operators</td>
</tr>
</tbody>
</table></div></div><p>1.The priority of the operators:</p>
<p><code>**</code>, <code>~ + -</code>, <code>* / % //</code>, <code>+ -</code>, <code>&gt;&gt; &lt;&lt;</code>, <code>&amp;</code>, <code>^ |</code>, <code>&lt;= &lt; &gt; &gt;=</code>, <code>== !=</code>, <code>= %= /= //= -= += *= **=</code></p>
<p>Parentheses <code>()</code> have the highest precedence and can be used to force an expression to evaluate in the order we want.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a *= b + <span class="number">2</span> <span class="comment"># equivalent to: a=a*(b+2)=50</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag1 = <span class="number">3</span> &lt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> != <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">print(flag3 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">False</span>) <span class="comment">#False</span></span><br><span class="line">print(flag2 <span class="keyword">is</span> <span class="literal">True</span>) <span class="comment">#True</span></span><br></pre></td></tr></table></figure>
<p>2.Short-circuit evaluation of logical expressions:<br>
The evaluation stops when the overall value is already know. <code>y!=0</code> acts as a guard to insure that we only execute <code>(x/y)</code> if y is non-zero.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x &gt;= <span class="number">2</span> <span class="keyword">and</span> y!= <span class="number">0</span> <span class="keyword">and</span> (x/y) &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>3.Built-in functions</p>
<p><code>add(num1,num2)</code>; <code>max(num1,num2)</code>; <code>abs(num)</code>…</p>
<p>Evaluate the operator subexpression, evaluate each operand subexpression, apply the value of the operator subexpression to the values of the operand subexpression.</p>
<p><a href="https://docs.python.org/3/library/math.html" target="_blank"><u>For more details</u></a></p>
<p><strong>· For strings</strong><br>
<code>+</code> : connect the strings<br>
<code>*</code> : repeat the contents of a string<br>
<code>in</code> <code>not in</code> : determine whether a string contains another character<br>
<code>[]</code>and <code>[:]</code> : get some substrings from the string (<strong>including the first but excluding the last</strong>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 =  <span class="string">&#x27; hello&#x27;</span>  *  <span class="number">3</span> </span><br><span class="line"><span class="built_in">print</span> (s1) <span class="comment"># hello hello hello</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;o&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line">s2 =  <span class="string">&#x27; world &#x27;</span> </span><br><span class="line">s1 += s2</span><br><span class="line"><span class="built_in">print</span> (s1) <span class="comment"># hello hello hello world </span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (str1[<span class="number">2</span>]) <span class="comment">#l</span></span><br><span class="line"><span class="built_in">print</span> (str1[<span class="number">2</span>:<span class="number">4</span>]) <span class="comment">#ll</span></span><br><span class="line"><span class="built_in">print</span> (str1[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment">#lowrd</span></span><br><span class="line"><span class="built_in">print</span> (str1[::<span class="number">-1</span>]) <span class="comment">#dlrow,olleh</span></span><br><span class="line"><span class="built_in">print</span> (str1[<span class="number">-4</span>:<span class="number">-2</span>]) <span class="comment">#or</span></span><br><span class="line">print(str1[<span class="number">-1</span>:<span class="number">-4</span>:<span class="number">-1</span>]) <span class="comment">#dlr</span></span><br></pre></td></tr></table></figure>
<p><strong>Ⅳ. Constant</strong>:<br>
There are some <u><a href="https://docs.python.org/3.5/library/constants.html" target="_blank">built-in constants</a></u> in python.</p>
<h4 id="part.4--built-in-data-structures">Part.4  Built-in Data Structures<a title="#part.4--built-in-data-structures" href="#part.4--built-in-data-structures"></a></h4>
<ul>
<li>Allow us to store related values together
<ul>
<li>Can process the values one-by-one or in aggregate</li>
<li>Allows us to form compound values through data abstraction</li>
</ul>
</li>
<li>Give rise to a number of ways of storing values
<ul>
<li>Lists store values in order, associated with an index</li>
<li>Dictionaries have no order but associate values with any sort of key</li>
<li>Trees allow for a hierarchical representation of data</li>
</ul>
</li>
</ul>
<p><strong>Ⅰ. Sequence Type</strong></p>
<p><strong>· list</strong><br>
Numeric types(<code>int </code> <code>float</code> …) are scalar types, which means that objects have no internal structure to access. However, string type is a structured, non-scalar type, so it has a range of properties and methods. List is the same as the string. However, list is mutable.</p>
<p>List is an ordered sequence of values, each of which can be identified by an index, placed in the <code>[]</code> and separated by <code>,</code>. The values can be any type.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a list</span></span><br><span class="line">list0 = <span class="built_in">list</span>()</span><br><span class="line">list0 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">100</span>]  </span><br><span class="line">list1 = [<span class="string">&#x27;Hello&#x27;</span>]*<span class="number">3</span> </span><br><span class="line"><span class="comment"># or [&lt;expr&gt; for &lt;name&gt; in &lt;seq&gt; if &lt;cond&gt;]</span></span><br><span class="line">list2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]  </span><br><span class="line"><span class="built_in">print</span> (list1,list2) <span class="comment"># [&#x27;Hello&#x27;,&#x27;Hello&#x27;,&#x27;Hello&#x27;] [0,1,2,3]</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span>(list0)) <span class="comment">#5 </span></span><br><span class="line"><span class="built_in">print</span> (list0[<span class="number">0</span>]) <span class="comment"># 1 </span></span><br><span class="line"><span class="built_in">print</span> (list0[<span class="number">-3</span>]) <span class="comment"># 5 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split and join</span></span><br><span class="line">list3 = <span class="string">&#x27;list&#x27;</span></span><br><span class="line">print(<span class="built_in">list</span>(list3)) <span class="comment"># [&#x27;l&#x27;,&#x27;i&#x27;,&#x27;s&#x27;,&#x27;t&#x27;]</span></span><br><span class="line">list4 = <span class="string">&#x27;here-it-is&#x27;</span></span><br><span class="line">delimiter = <span class="string">&#x27;-&#x27;</span></span><br><span class="line"><span class="comment"># split the string based on the delimiter. The string will be split based on the space when there is no argument. </span></span><br><span class="line">t = list4.split(delimiter)</span><br><span class="line">print(t) <span class="comment"># [&#x27;here&#x27;,&#x27;it&#x27;,&#x27;is&#x27;]</span></span><br><span class="line">delimiter = <span class="string">&#x27; &#x27;</span></span><br><span class="line">print(delimiter.join(t)) <span class="comment"># here it is</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Traverse element in the list</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">     print(list1[index])</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> list1:</span><br><span class="line">     print(elem)</span><br><span class="line"><span class="keyword">for</span> index,elem <span class="keyword">in</span> <span class="built_in">enumerate</span> (list1):</span><br><span class="line">     print(index, elem)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> <span class="built_in">zip</span>(list2,list3):</span><br><span class="line">    print(key,value)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add and remove elements</span></span><br><span class="line"><span class="comment"># append,insert,extend,remove and pop only change the original list.</span></span><br><span class="line"><span class="comment"># Slicing,Shallow copying,Concatenating,List constructor create a new list.</span></span><br><span class="line">list0.append(<span class="number">200</span>)</span><br><span class="line"><span class="comment"># insert 400 at index 1.</span></span><br><span class="line">list0.insert(<span class="number">1</span>,<span class="number">400</span>)</span><br><span class="line">list0.extend([<span class="number">1000</span>])</span><br><span class="line">list0 += [<span class="number">2000</span>]</span><br><span class="line">print(list0) <span class="comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000] </span></span><br><span class="line">print(<span class="built_in">sum</span>([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]],[])) <span class="comment"># [1]+[2]+[3]+[] = [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  <span class="number">3</span>  <span class="keyword">in</span> list0:</span><br><span class="line">	list0.remove( <span class="number">3</span> )</span><br><span class="line"><span class="comment"># delete and return the 0th element</span></span><br><span class="line">list0.pop (<span class="number">0</span>)</span><br><span class="line"><span class="comment"># delete and return the last element</span></span><br><span class="line">l = list0.pop()</span><br><span class="line"><span class="keyword">del</span> list0[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (list1,l) <span class="comment"># [100, 200, 1000] 2000</span></span><br><span class="line">list1.clear()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Slice the list</span></span><br><span class="line">fruits = [<span class="string">&#x27;grape&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;strawberry&#x27;</span>,<span class="string">&#x27;waxberry&#x27;</span>]</span><br><span class="line">print(fruits[<span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># [&#x27;apple&#x27;, &#x27;strawberry&#x27;]</span></span><br><span class="line">print(fruits[::<span class="number">-1</span>]) <span class="comment"># [&#x27;waxberry&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;, &#x27;grape&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sort the list</span></span><br><span class="line">list1 = [<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;zoo&#x27;</span>,<span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">print(<span class="built_in">sorted</span> (list1)) <span class="comment"># [&#x27;apple&#x27;, &#x27;blueberry&#x27;, &#x27;orange&#x27;, &#x27;zoo&#x27;]</span></span><br><span class="line">print(<span class="built_in">sorted</span> (list1,reverse=<span class="literal">True</span>)) <span class="comment"># [&#x27;zoo&#x27;, &#x27;orange&#x27;, &#x27;blueberry&#x27;, &#x27;apple&#x27;]</span></span><br><span class="line">print(<span class="built_in">sorted</span>(list1,key = <span class="built_in">len</span> )) <span class="comment"># [&#x27;zoo&#x27;, &#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;blueberry&#x27;]</span></span><br><span class="line">list1.sort( reverse = <span class="literal">True</span> )</span><br><span class="line">print(list1) <span class="comment"># [&#x27;zoo&#x27;, &#x27;orange&#x27;, &#x27;blueberry&#x27;, &#x27;apple&#x27;]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generator </span></span><br><span class="line">f = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (f) <span class="comment"># [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;C1&#x27;, &#x27;C2&#x27;]</span></span><br><span class="line"><span class="comment"># Generator objects don&#x27;t take extra space to store data </span></span><br><span class="line">f1 = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">print(sys.getsizeof(f1)) <span class="comment">#120</span></span><br><span class="line">print(f1) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000001C05E2952C8&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># objects and values</span></span><br><span class="line">a = <span class="string">&#x27;banana&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;banana&#x27;</span></span><br><span class="line"><span class="comment"># identical</span></span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment"># True</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># equivalent but not identical</span></span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment"># False</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"><span class="comment"># aliased but refer to the same object</span></span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p>It is important to keep track of when variables are identical versus just equal, since mutating one variable will mutate all other identical variables.</p>
<p>The methods and operators that lists share with other sequences (like strings) are documented <u><a href="https://docs.python.org/2/library/stdtypes.html#string-methods" target="_blank">here</a></u>.</p>
<p>List is mutable so we can change the elements inside the list. The methods and operators that only apply to mutable sequences are documented <u><a href="https://docs.python.org/2/library/stdtypes.html#mutable-sequence-types" target="_blank">here</a></u>.</p>
<p><strong>· Tuple</strong><br>
Tuple in Python is similar to the list and most list operator also work on tuples, however, it can not be modified and it is comparable and hashable.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="string">&#x27;tuple&#x27;</span>, <span class="number">100</span>, <span class="number">12.1</span> ,<span class="literal">True</span>)</span><br><span class="line">w,x,y,z = t <span class="comment"># (w,x,y,z) = t</span></span><br><span class="line"><span class="built_in">print</span> (t[<span class="number">0</span>]) <span class="comment"># tuple</span></span><br><span class="line">print(w,x,y,z) <span class="comment"># &#x27;tuple&#x27;  100  12.1  True</span></span><br><span class="line">w,x = x,w</span><br><span class="line">print(w,x) <span class="comment"># 100 &#x27;tuple&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To creat a single element, you have to include the final comma.</span></span><br><span class="line">t1 = (<span class="string">&#x27;single&#x27;</span>,)</span><br><span class="line">t2 = <span class="built_in">tuple</span>(<span class="string">&#x27;single&#x27;</span>) <span class="comment"># (&#x27;s&#x27;,&#x27;i&#x27;,&#x27;n&#x27;,&#x27;g&#x27;,&#x27;l&#x27;,&#x27;e&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Traverse elements in the list</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> t:</span><br><span class="line">     print(element)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># t[0] = &#x27;change&#x27; # TypeError # It can not be modified.</span></span><br><span class="line"><span class="comment"># The variable t refers to a new tuple and the old one is recycled.</span></span><br><span class="line">t = (<span class="string">&#x27;change&#x27;</span>, <span class="number">100</span>, <span class="number">12.1</span> ,<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># convert the tuple into a list </span></span><br><span class="line">l = <span class="built_in">list</span>(t)</span><br><span class="line">l[<span class="number">0</span>] = <span class="string">&#x27;tuple&#x27;</span></span><br><span class="line">print(l) <span class="comment"># tuple 100 12.1 True</span></span><br><span class="line"><span class="comment"># convert the list into a tuple</span></span><br><span class="line">t = <span class="built_in">tuple</span>(l)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Comparing tuples</span></span><br><span class="line">txt = <span class="string">&#x27;but soft what light in yonder window breaks&#x27;</span> </span><br><span class="line">words = txt.split() </span><br><span class="line">t = <span class="built_in">list</span>() </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    t.append((<span class="built_in">len</span>(word), word))</span><br><span class="line">t.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(t)</span><br><span class="line"><span class="comment"># [(6, &#x27;yonder&#x27;), (6, &#x27;window&#x27;), (6, &#x27;breaks&#x27;), (5, &#x27;light&#x27;), (4, &#x27;what&#x27;), (4, &#x27;soft&#x27;), (3, &#x27;but&#x27;), (2, &#x27;in&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># be used in dictionary</span></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">6</span>&#125;</span><br><span class="line">print(<span class="built_in">sorted</span>([(v,k) <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()])) <span class="comment">#[(6,&#x27;c&#x27;),(3,&#x27;a&#x27;),(2,&#x27;b&#x27;)]</span></span><br></pre></td></tr></table></figure>
<p>1.There are two main advantages of the tuple listed as follows, meanwhile, they are also the reasons why we sometimes use tuple rather than list.</p>
<ol>
<li>In fact, we may prefer to use the invariant objects in the project, especially in the multi-threaded environment because a constant object is much easier to maintain than a variable object and also can be easily shared and accessed.  So if we don’t need to add, delete, or modify elements, we can consider using tuples.</li>
<li>Tuples are better than lists in both creation time and occupied space.</li>
<li>There are a few cases where you might prefer tuples:<br>
· in a return statement<br>
· use a sequence as a dictionary key<br>
· pass a sequence as an argument to a function</li>
</ol>
<p>2.Sequence Aggregation<br>
<code>sum(iterable[, start]) -&gt; value</code>, <code>max(iterable[, key=func]) -&gt; value OR max(a, b, c, ...[, key=func]) -&gt; value</code>, <code>bool(any_value) -&gt; bool</code>, <code>all(iterable) -&gt; bool</code>, <code>any(iterable) -&gt; bool</code></p>
<p><strong>Ⅱ. Set Type</strong><br>
The set in python is consistent with the mathematical set. It can not contain repetitive element.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125; <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)) <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line">set3 = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)) <span class="comment">#&#123;1, 2, 3&#125;</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line">set1.update([<span class="number">11</span>, <span class="number">12</span>]) <span class="comment"># &#123;1, 2, 3, 4, 11, 12&#125;</span></span><br><span class="line">set1.discard(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set1:</span><br><span class="line">    set1.remove(<span class="number">4</span>) <span class="comment"># &#123;2, 3, 11, 12&#125;</span></span><br><span class="line"><span class="comment"># delete and return the first element</span></span><br><span class="line">set1.pop() <span class="comment"># &#123;3, 11, 12&#125; # It&#x27;s different from the list.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">print(set1 &amp; set2) <span class="comment"># &#123;3, 4&#125;</span></span><br><span class="line"><span class="comment"># print(set1.intersection(set2))</span></span><br><span class="line">print(set1 | set2) <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="comment"># print(set1.union(set2))</span></span><br><span class="line">print(set1 - set2) <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"><span class="comment"># print(set1.difference(set2))</span></span><br><span class="line">print(set1 ^ set2) <span class="comment"># &#123;1, 2, 5, 6&#125;</span></span><br><span class="line"><span class="comment"># print(set1.symmetric_difference(set2))</span></span><br><span class="line">print(set2 &lt;= set1) <span class="comment"># False</span></span><br><span class="line"><span class="comment"># print(set2.issubset(set1))</span></span><br><span class="line">print(set1 &gt;= set2) <span class="comment"># False</span></span><br><span class="line"><span class="comment"># print(set1.issuperset(set2))</span></span><br></pre></td></tr></table></figure>
<p><strong>Ⅲ. Mapping Type:  dictionary</strong></p>
<p>A mapping object maps hashtable values to arbitrary objects. Mappings are mutable objects. But the key of the dictionary must be immutable variable.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create the dictionarys</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;Alice&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Peter&#x27;</span>: <span class="number">78</span>, <span class="string">&#x27;Oreo&#x27;</span>: <span class="number">82</span>&#125;</span><br><span class="line">items1 = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">scores[<span class="string">&#x27;Peter&#x27;</span>] = <span class="number">89</span></span><br><span class="line">scores.update(John=<span class="number">67</span>, Marry=<span class="number">85</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores: <span class="comment"># scores.keys() scores.values() scores.items() </span></span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;scores[key]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;John&#x27;</span> <span class="keyword">in</span> scores:</span><br><span class="line">    print(scores[<span class="string">&#x27;John&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">print(scores.get(<span class="string">&#x27;Oreo&#x27;</span>)) <span class="comment"># 82</span></span><br><span class="line">print(scores.get(<span class="string">&#x27;Jonny&#x27;</span>, <span class="number">60</span>)) <span class="comment"># 60</span></span><br><span class="line">print(scores.popitem()) <span class="comment"># (&#x27;Marry&#x27;, 85)</span></span><br><span class="line">print(scores.pop(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">100</span>)) <span class="comment"># 95</span></span><br><span class="line"></span><br><span class="line">vals = <span class="built_in">list</span>(scores)</span><br><span class="line">print(vals) <span class="comment"># [&#x27;Peter&#x27;, &#x27;Oreo&#x27;, &#x27;John&#x27;]</span></span><br><span class="line">print(scores.values(),scores.keys(),scores,items) </span><br><span class="line"><span class="comment"># dict_values([89, 82, 67]) dict_keys([&#x27;Peter&#x27;, &#x27;Oreo&#x27;, &#x27;John&#x27;]) dict_items([(&#x27;Peter&#x27;, 89), (&#x27;Oreo&#x27;, 82), (&#x27;John&#x27;, 67)])</span></span><br><span class="line">scores.clear()</span><br></pre></td></tr></table></figure>
<h4 id="part.-5-language-structure">Part. 5 Language structure<a title="#part.-5-language-structure" href="#part.-5-language-structure"></a></h4>
<p>We put these language elements together to form different expressions (primitive expression: numbers <code>2</code>, strings<code>'hello'</code>,  names <code>add, x...</code>; arithmetic expression: <code>15//3</code>; call expression: <code>max(add(2,3),6)</code> ) .</p>
<p>And different expressions form statements or instructions so that computers can get orders and do the certain operations. The way we organize the statements can be divided into different types of structures in order to make our program more effective. Generally, there are three types: <i>sequential structure, conditional structure</i> and <i>iteration</i>.</p>
<p>Python uses <strong>indentation</strong> to set the hierarchy of different compound statements instead of using<code>&#123;&#125;</code>.  If the continuous statements maintains the same indentation then they belong to the same code block, which is equivalent to one specific function.</p>
<p><strong>Ⅰ. Conditional structure</strong><br>
Sometimes, we have to separate our solutions into different <strong>branches</strong> and change the actions of the program according to some conditions. In python, we use <code>if</code> statement(use the keywords <code>if</code>, <code>else</code>, <code>elif</code>) to implement it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;conditional expression&gt;:</span><br><span class="line">	&lt;suite of statements&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;conditional expression&gt;:</span><br><span class="line">	&lt;suite of statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	&lt;suite of statements&gt;</span><br></pre></td></tr></table></figure>
<p><strong>· Chained conditionals</strong> : (two branches or more)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># calculate the payment</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fh = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter the hour: &#x27;</span>))</span><br><span class="line">    fr = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter the rate: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> fh&lt;<span class="number">0</span> :</span><br><span class="line">        print(<span class="string">&#x27;Pleae enter the right number&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> fh&gt;=<span class="number">40</span> :</span><br><span class="line">        pay = (fh<span class="number">-40</span>)*fr*<span class="number">1.5</span>+<span class="number">40</span>*fr</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        pay = fh*fr</span><br><span class="line">    print(<span class="string">&#x27;Pay: &#x27;</span>, pay)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&#x27;Pease enter numeric input!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>elif</code>: one of the conditions, <code>else</code>: catch the exceptions<br>
(If more than one condition is true, only the first true branch executes.)</p>
<p><strong>· Nested conditionals</strong> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> fh&lt;<span class="number">0</span> :</span><br><span class="line">    print(<span class="string">&#x27;Pleae enter the right number&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> : <span class="keyword">if</span> fh&gt;=<span class="number">40</span> :</span><br><span class="line">           pay = (fh<span class="number">-40</span>)*fr*<span class="number">1.5</span>+<span class="number">40</span>*fr</span><br><span class="line">       <span class="keyword">else</span> :</span><br><span class="line">           pay = fh*fr</span><br></pre></td></tr></table></figure>
<p>Usually, we use chained conditionals rather than nested conditionals or simplify it with operators. “Flat is better than nested”. Because the nested structure will have a serious impact on the readability of code.</p>
<p>In the <code>if</code>  statement, we have to execute the subsequent steps through the result of the <strong>if</strong> conditional expression (usually is a boolean expression: True or False). <code>True</code> and <code>False</code> are specific attributes of each object in python. Examples of <code>True</code> and <code>False</code> values of objects in python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;spam&quot;</span>   <span class="comment"># True</span></span><br><span class="line"><span class="string">&quot;&quot;</span>       <span class="comment"># False</span></span><br><span class="line">[]       <span class="comment"># False</span></span><br><span class="line">&#123;&#125;       <span class="comment"># False</span></span><br><span class="line"><span class="number">1</span>        <span class="comment"># True</span></span><br><span class="line"><span class="number">-1</span>       <span class="comment"># False</span></span><br><span class="line"><span class="number">0.0</span>      <span class="comment"># False </span></span><br><span class="line"><span class="literal">None</span>     <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<p>And also the result of some logical expressions.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &gt;= <span class="number">2</span>      <span class="comment"># False</span></span><br><span class="line">a == b   <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b   <span class="comment"># False</span></span><br><span class="line">ele <span class="keyword">in</span> list1 <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p><strong>Ⅱ. Iteration</strong><br>
Repetitive tasks are the main work for computers. Python provides the <code>while</code> statement and <code>for</code> statement  to  let  the computers do the tasks in a more efficient way.</p>
<p><strong>· <code>while</code> statement</strong>   (indefinite loops):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output the max and min</span></span><br><span class="line">smallest = <span class="literal">None</span></span><br><span class="line">largest = <span class="literal">None</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num = <span class="built_in">input</span>(<span class="string">&#x27;Enter the num: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> num == <span class="string">&#x27;Done&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = <span class="built_in">int</span>(num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;Invalid input!&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> smallest <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> num&lt;smallest:</span><br><span class="line">        smallest = num</span><br><span class="line">    <span class="keyword">if</span> largest <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> num&gt;largest:</span><br><span class="line">        largest = num</span><br><span class="line">print(<span class="string">&#x27;The smallest:&#x27;</span>,smallest,<span class="string">&#x27;The largest:&#x27;</span>,largest)</span><br></pre></td></tr></table></figure>
<p><code>break</code>:  If the condition is met, the program will jump out of the loop.</p>
<p><code>continue</code>:  Skip to the next iteration without finishing the body of the loop for the current iteration.</p>
<p><strong>·  <code>for</code> statement</strong>  (definite loops)</p>
<p>When we want to loop through a set of words, the lines in a file, a list of numbers and so on, we can construct a definite loop using a <code>for</code> statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiplication table</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i * j), end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>
<p><code>range(&lt;start&gt;, &lt;end&gt;, &lt;skip&gt;)</code>: Creates a range object from <code>&lt;start&gt;</code> (inclusive) to <code>&lt;end&gt;</code> (exclusive), skipping every <code>&lt;skip&gt;</code> element.<br>
<code>range(1, 100, 2)</code>An odd sequence of 1 to 99 can be generated and 2 is the the increment of the sequence of values (step size).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">friends = [<span class="string">&#x27;oreo&#x27;</span>, <span class="string">&#x27;sermantha&#x27;</span>, <span class="string">&#x27;Damon&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> friend <span class="keyword">in</span> friends:</span><br><span class="line">    print(<span class="string">&#x27;Happy New Year!&#x27;</span>,friend)</span><br></pre></td></tr></table></figure>
<p><strong>Ⅲ. Function, Module and Package</strong></p>
<p><strong>· Function</strong></p>
<p>In order to  write high-quality code, we should eliminate the repetitive code which is doing the same type of  operations. We can encapsulate those repetitive codes into a function module called “function”  so that we “call” the “function” when we need it.</p>
<p>Generally, function is a named (bind the name to the function value in current scope) and reusable sequence of statements that takes arguments as input, performs a computation and maps arguments  to a return value. (The naming rules of function are consistent with the naming rules of variables. )</p>
<p>A function that does not explicitly return a value will return <strong>None</strong>.</p>
<p>A side effect is anything that happens as a consequence of calling a function.</p>
<p>Procedure for calling/applying user-defined functions:</p>
<ul>
<li>Bind the function’s parameters to its arguments in the new scope .</li>
<li>Execute the body of the function in the new scope.</li>
</ul>
<p>Only call expressions create new local scope and every call expression have their own scope no matter it is the same function that was called again. The parent scope is where the function is defined.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># define a function</span></span><br><span class="line"><span class="comment"># A def statement creates a function object with certain parameters and a body and binds it to a name in the current scope. </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">num</span>):</span></span><br><span class="line">    result =  <span class="number">1</span> </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,num+<span class="number">1</span>):</span><br><span class="line">        result *= n</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>1.Arguements</p>
<p>In Python, function parameters can have default values and also support for variable parameters which is quite different from other languages.</p>
<p>When the arguments passed by a function is an object of an immutable or mutable type, what is passed is not the actual value but a reference to the object.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roll_dice</span>(<span class="params">n=<span class="number">2</span></span>):</span> <span class="comment"># The default value is 2.</span></span><br><span class="line">    Total =  <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        Total += randint(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> Total</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;*&#x27; and &#x27;**&#x27; indicate that args is a variable parameter. </span></span><br><span class="line"><span class="comment"># tu_args will be passed to the function as a tuple and dic_args will be  a dictionary.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">*tu_args,**dic_args</span>):</span> </span><br><span class="line">    Total =  <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> dic_args.items():</span><br><span class="line">        print(key,value)</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> tu_args:</span><br><span class="line">        Total += val</span><br><span class="line">    <span class="keyword">return</span> Total</span><br><span class="line"></span><br><span class="line">print(roll_dice())              <span class="comment"># 8</span></span><br><span class="line">print(roll_dice(<span class="number">6</span>))             <span class="comment"># 24</span></span><br><span class="line">print(add(<span class="number">2</span>,<span class="number">45</span>,a=<span class="number">23</span>,b=<span class="number">44</span>))      <span class="comment"># a 24 b 44 47</span></span><br></pre></td></tr></table></figure>
<p>Python looks for a variable in the order of “local scope”, “nested scope” or the parent scope, “global scope” and “built-in scope”.</p>
<p>Some identifiers like <code>input</code>,<code>print</code> and <code>int</code>  are built  inside the python which belong to built-in scope. The local variables can only be used inside the function it belongs to, but we can access the global variables anywhere we want to.</p>
<p>However, if we want to modify the value of the global variables inside a specific function, we should add <code>global</code>  before the variables. Or we want to modify variables in an enclosing scope( the first non-local frame of the current environment), we can add <code>nonlocal</code> before the variable as a nonlocal assignment. Names listed in a nonlocal statement must refer to pre-existing bindings in an enclosing scope and also must not collide with pre-existing bindings in the local scope. Nonlocal allows you to modify a binding in a parent frame, instead of just looking it up.</p>
<p>Mutable values can be changed <strong>without</strong> a nonlocal statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">d</span>):</span></span><br><span class="line">    b =  <span class="string">&#x27;Hello&#x27;</span> <span class="comment"># b belongs to nested scope</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a =  <span class="number">200</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span> ():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> d</span><br><span class="line">        c =  <span class="string">&#x27;You&#x27;</span> <span class="comment"># c belongs to local scope as a local variable</span></span><br><span class="line">        <span class="keyword">return</span> d.upper() + b + c</span><br><span class="line">    <span class="keyword">return</span> bar()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>  __name__  ==  <span class="string">&#x27; __main__ &#x27;</span> :</span><br><span class="line">    a =  <span class="number">100</span>  <span class="comment"># a belongs to global scope as a global variable</span></span><br><span class="line">    foo(<span class="string">&#x27;hey&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (a) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure>
<p>Python pre-computes which frame contains each name before executing the body of a function. Within the body of a function, all instances of a name must refer to the same frame.</p>
<p>In the actual development process, we should reduce the use of global variables due to its wide scope.  Unexpected modifications may occur and also the memory occupied by variables are unable to be recycled.</p>
<p>2.Docstring</p>
<p>We can write documentation strings (or docstrings) to provide a convenient way of associating documentation with Python modules, functions, classes, and methods. The docstring should describe what the function does, not how.</p>
<p>The rules of writing docstrings:</p>
<ul>
<li>· The doc string line should begin with a capital letter and end with a period.</li>
<li>· The first line should be a short description.</li>
<li>· If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description.</li>
<li>· The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.</li>
</ul>
<p>The way of declaring docstrings:<br>
Using ”’triple single quotes”’  just below the class, method or function declaration.</p>
<p>The way of accessing docstrings:<br>
Using the  _<em>doc</em>_ method of the object or using the help function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span>():</span> </span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;Demonstrates triple double quotes </span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	docstrings and does nothing really.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Using __doc__:&quot;</span>) </span><br><span class="line">print(my_function.__doc__) </span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Using help:&quot;</span>) </span><br><span class="line"><span class="built_in">help</span>(my_function) </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Using __doc__:</span><br><span class="line">Demonstrates triple double quotes</span><br><span class="line">    docstrings and does nothing really.</span><br><span class="line">Using help:</span><br><span class="line">Help on function my_function in module __main__:</span><br><span class="line"></span><br><span class="line">my_function()</span><br><span class="line">    Demonstrates triple double quotes</span><br><span class="line">    docstrings and does nothing really.</span><br></pre></td></tr></table></figure>
<p>3.Built-in functions</p>
<p>Actually, factorial function is a built-in function in python, we can use such kind of functions directly without defining them. <u><a href="https://docs.python.org/3.5/library/functions.html" target="_blank">More built-in functions in python.</a></u></p>
<p>4.Anonymous functions</p>
<p>Python uses lambda to create anonymous functions. The so-called anonymous means that a function is no longer defined in a standard form such as the def statement.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lambda [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>
<p>The body of the function is an expression, which can only encapsulate limited logic in it. And the lambda function has its own namespace and cannot access parameters outside of its parameter list or in the global namespace.</p>
<p>5.Higher Order Function: a function that either takes in functions as an argument and/or returns a function as a return value.</p>
<p>Usually we can give each function exactly one job, but make it apply to many related situations. We can generalize patterns with arguments and computational processs to make the function applied to a series of situations.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">pow</span>(x,<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n,term</span>):</span></span><br><span class="line">    total,k =<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k&lt;= n:</span><br><span class="line">        total,k = total+term(k), k+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n,identity)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n,cube)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose</span>(<span class="params">f,g</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line">    </span><br><span class="line">print(compose(square,make_adder(<span class="number">3</span>))(<span class="number">3</span>))  <span class="comment"># Equal to square(make_adder(3)(3))</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n + k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br><span class="line"></span><br><span class="line">print_sums(<span class="number">1</span>)(<span class="number">3</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>Nested functions can access variables in outer function (adder) as well as the outer function itself (print_sums).</p>
<p>Don’t conflate: function name vs. function call.</p>
<p><strong>· Module</strong><br>
If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Or sometimes, you are faced with naming conflicts of different functions in one file. Or as your program gets longer, you may want to split it into several files for easier maintenance. Or you may also want to use a handy function that you’ve written in several programs without copying its definition into each program. At such moments, python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. In Python, every file represents a module.</p>
<p>We can use the <code>import</code>  to import the specified module to distinguish different functions.</p>
<p>The variable <code>sys.path</code> is a list of strings that determines the interpreter’s search path for modules. It is initialized to a default path taken from the environment variable <code>PYTHONPATH</code>, or from a built-in default if <code>PYTHONPATH</code> is not set. You can modify it using standard list operations: sys.path.append(‘/lib/python’).</p>
<p><code>module1.py </code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">     <span class="built_in">print</span> (<span class="string">&#x27;hello, world!&#x27;</span> )</span><br></pre></td></tr></table></figure>
<p><code>module2.py </code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">     <span class="built_in">print</span> (<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line">m1.foo() <span class="comment">#hello, world!</span></span><br><span class="line">m2.foo() <span class="comment">#goodbye, world!</span></span><br></pre></td></tr></table></figure>
<p>Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module.</p>
<p>However, besides the functions defined in the module we import, if there are some other executable codes, it’d be better to put those codes into the condition shown below so that the python interpreter will only execute them when the module is run directly and will not execute them when we import the module into other files.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br><span class="line"><span class="comment"># __name__ is an implicit variable in Python that represents the name of the module.</span></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27; __main__ &#x27;</span> :</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;hello, world!&#x27;</span>)</span><br><span class="line">    foo()</span><br></pre></td></tr></table></figure>
<p><strong>· Package</strong></p>
<p>Sometimes you may need to create and maintain a growing collection of modules for dealing with difficult problems in an actual project. Packages are a way to achieve this and also structure Python’s module namespace by using “dotted module names”.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sound&#x2F;                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats&#x2F;                  Subpackage for file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              ...</span><br><span class="line">      effects&#x2F;                  Subpackage for sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              ...</span><br><span class="line">      filters&#x2F;                  Subpackage for filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure>
<p>When importing the package, Python searches through the directories on <code>sys.path</code> looking for the package subdirectory. The <code>__init__.py</code> files are required to make Python treat directories containing the file as packages.</p>
<p>We can use leading dots to indicate the current and parent packages involved in the relative import.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> echo</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> formats</span><br><span class="line"><span class="keyword">from</span> ..filters <span class="keyword">import</span> equalizer</span><br></pre></td></tr></table></figure>
<h4 id="part.-exercise">Part. Exercise<a title="#part.-exercise" href="#part.-exercise"></a></h4>
<p><strong>Ex.1</strong>: Enter the year to determine if it is a <strong>leap year</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27; Please enter the year: &#x27;</span>))</span><br><span class="line">is_leap = (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> \</span><br><span class="line">          year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line">print(is_leap)</span><br></pre></td></tr></table></figure>
<p><strong>Ex.2</strong>: Enter two positive integers and calculate their greatest common divisor and least common multiple.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =  <span class="built_in">int</span> ( <span class="built_in">input</span> ( <span class="string">&#x27; x = &#x27;</span> ))</span><br><span class="line">y =  <span class="built_in">int</span> ( <span class="built_in">input</span> ( <span class="string">&#x27; y = &#x27;</span> )) </span><br><span class="line"><span class="keyword">if</span> x &gt; y:</span><br><span class="line">     <span class="comment"># swap the values of x and y</span></span><br><span class="line">    x , y = y, x</span><br><span class="line"><span class="keyword">for</span> factor <span class="keyword">in</span>  <span class="built_in">range</span> (x, <span class="number">0</span> , - <span class="number">1</span> ):</span><br><span class="line">     <span class="keyword">if</span> x % factor == <span class="number">0</span> <span class="keyword">and</span> y % factor == <span class="number">0</span> :</span><br><span class="line">         <span class="built_in">print</span> (<span class="string">&#x27;The greatest common divisor of %d and %d  is %d&#x27;</span> % (x, y, factor))</span><br><span class="line">         <span class="built_in">print</span> (<span class="string">&#x27;The least common multiple of %d and %d is %d&#x27;</span> % (x, y, x * y // factor))</span><br><span class="line">         <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><strong>Ex.3</strong>:  Look for the <strong>Narcissistic number</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span>  <span class="built_in">range</span> ( <span class="number">100</span> , <span class="number">1000</span> ):</span><br><span class="line">    low = num %  <span class="number">10</span> </span><br><span class="line">    mid = num // <span class="number">10</span> % <span class="number">10</span> </span><br><span class="line">    high = num // <span class="number">100</span> </span><br><span class="line">    <span class="keyword">if</span> num == low ** <span class="number">3</span>  + mid ** <span class="number">3</span>  + high ** <span class="number">3</span> :</span><br><span class="line">         <span class="built_in">print</span> (num)</span><br></pre></td></tr></table></figure>
<p><strong>Ex.4</strong>:  Generate the first 20 numbers of the <strong>Fibonacci sequence</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    a, b = b, a + b</span><br><span class="line">    print(a, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Ex.5</strong>:   Find the <strong>perfect number</strong> within 10,000</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(math.sqrt(num)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            result += factor</span><br><span class="line">            <span class="keyword">if</span> factor &gt; <span class="number">1</span> <span class="keyword">and</span> num // factor != factor:</span><br><span class="line">                result += num // factor</span><br><span class="line">    <span class="keyword">if</span> result == num:</span><br><span class="line">        print(num)</span><br></pre></td></tr></table></figure>
<p><strong>Ex.6</strong>:   Output <strong>all prime numbers</strong> within 100</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(num)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        print(num, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Ex.7</strong>: Write a program to find all the palindrome prime within 10000.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span>(<span class="params">arg</span>):</span></span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(math.sqrt(arg))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> arg % i == <span class="number">0</span> :</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> is_prime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome</span>(<span class="params">arg</span>):</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    number = arg</span><br><span class="line">    <span class="keyword">while</span> arg &gt; <span class="number">0</span>:</span><br><span class="line">        result = arg % <span class="number">10</span> + result*<span class="number">10</span></span><br><span class="line">        arg //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> result == number</span><br><span class="line"></span><br><span class="line">exist = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> prime(num) <span class="keyword">and</span> palindrome(num):</span><br><span class="line">        print(<span class="string">&#x27;%d is a palindrome prime!&#x27;</span> % (num))</span><br><span class="line">        exist = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> exist <span class="keyword">is</span> <span class="literal">False</span> :</span><br><span class="line">    print(<span class="string">&#x27;There is no palindrome prime!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Ex.8</strong>: Make a histogram of  the domain name in a mail log and find  the name  that appears the most.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;Enter file:&quot;</span>)</span><br><span class="line">fd = <span class="built_in">open</span>(name)</span><br><span class="line">count  = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fd:</span><br><span class="line">    line = line.rstrip()</span><br><span class="line">    words = line.split()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(words) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(words) &lt; <span class="number">2</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> words[<span class="number">0</span>] == <span class="string">&#x27;From&#x27;</span>:</span><br><span class="line">        word = words[<span class="number">1</span>]</span><br><span class="line">        pos = word.find(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        word = word[pos+<span class="number">1</span>:]</span><br><span class="line">        count[word] = count.get(word,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line">bigkey = <span class="literal">None</span></span><br><span class="line">bigvalue = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> key,val <span class="keyword">in</span> count.items():</span><br><span class="line">    <span class="keyword">if</span> bigvalue <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> bigvalue &lt; val:</span><br><span class="line">        bigkey = key</span><br><span class="line">        bigvalue = val</span><br><span class="line">print(bigkey,bigvalue)</span><br></pre></td></tr></table></figure>
<p>The file is <u><a href="http://www.py4e.com/code3/mbox-short.txt" target="_blank">here</a></u>.</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Basis 02</title>
    <url>/2020/20200906-Python-Basics-02/</url>
    <content><![CDATA[<h1 id="python-basis-02">Python Basis 02<a title="#python-basis-02" href="#python-basis-02"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<img src="https://i.loli.net/2020/09/08/Oz3UJF4QW1m2yos.png" alt="11" style="zoom:50%;">
<p><strong>· materials:</strong><br>
· <a href="https://www.py4e.com/" target="_blank"><u><i>Python for Everybody (Exploring Data Using Python 3)</i></u></a>  by Charles R. Severance<br>
· <i>Learn Python 3 the Hard Way</i> by Zed A. Shaw<br>
· <u><a href="https://github.com/jackfrued/Python-100-Days" target="_blank">Python-100-Days</a></u> by jackfrued<br>
· <u><a href="https://docs.python.org/3/tutorial/index.html" target="_blank">Python Tutorial</a></u><br>
· <a href="https://google.github.io/styleguide/pyguide.html" target="_blank"><u>Google Python Style Guide</u></a></p>
<h3 id="part.1-input-and-output">Part.1 Input and Output<a title="#part.1-input-and-output" href="#part.1-input-and-output"></a></h3>
<p>Usually, we have several ways to get the data we need from the outside. There are two main ways.</p>
<p>We can simply use <code>input()</code> to get the data from the input devices like keyboards.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;Enter the data:&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>Another way is to read the files from our computers or different database.</p>
<p><strong>Ⅰ. File</strong><br>
Open the file.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(filename, mode=<span class="string">&#x27;r&#x27;</span>, buffering=<span class="number">-1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># mode can be &#x27;w&#x27;,&#x27;r&#x27;,&#x27;a&#x27;... (describing the way in which the file will be used)</span></span><br></pre></td></tr></table></figure>
<img src="https://i.loli.net/2020/09/06/3LOGRnblwHTKBDJ.png" alt="11" style="zoom: 50%;">
<p>(from <a href="https://www.runoob.com/python/python-files-io.html" target="_blank"><u>here</u></a>)</p>
<p>It is better to use the <code>with</code> keyword when dealing with file objects. The advantage is that the file is properly closed after all the operations have finished, even if an exception is raised at some point. Otherwise,  you should call <code>f.close()</code> to close the file and immediately free up any system resources used by it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;workfile&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    read_data = f.read()</span><br></pre></td></tr></table></figure>
<p>The <code>open()</code> method returns a file object and it has lots of built-in methods to deal with the data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reads some quantity of data and returns it as a string (in text mode)</span></span><br><span class="line">f.read(size)</span><br><span class="line"><span class="comment"># Read a single line from the file,a newline character (\n) is left.</span></span><br><span class="line">f.readline()</span><br><span class="line"><span class="comment"># Read lines from a file, you can loop over the file object. </span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">     print(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># Read all the lines of a file in a list or use readlines().</span></span><br><span class="line"><span class="built_in">list</span>(f)</span><br><span class="line">f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the contents of string to the file, returning the number of characters written.</span></span><br><span class="line"><span class="comment"># Other types of objects need to be converted before writing to the file.</span></span><br><span class="line">f.write(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns an integer giving the file object’s current position.</span></span><br><span class="line">f.tell()</span><br><span class="line"><span class="comment"># Change the file object’s position</span></span><br><span class="line"><span class="comment"># whence: 0-begining,1-current,2-end</span></span><br><span class="line">f.seek(offset, whence)</span><br></pre></td></tr></table></figure>
<p><strong>Ⅱ. Output Formatting</strong></p>
<p>There are several ways to present the output of a program : <em>expression statements</em> and the <code>print() </code> function. (A third way is using the <code>write()</code> method of file objects;)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a  = <span class="built_in">int</span>(<span class="built_in">input</span> (<span class="string">&#x27;a = &#x27;</span>)) <span class="comment"># 123.4</span></span><br><span class="line">b  = <span class="built_in">int</span>(<span class="built_in">input</span> (<span class="string">&#x27;a = &#x27;</span>)) <span class="comment"># 123.3</span></span><br><span class="line">print(<span class="string">&#x27;%d +%d = %d&#x27;</span> % (a, b,a + b)) <span class="comment"># 123 + 123 = 246</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span>+<span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a+b&#125;</span>&#x27;</span>) <span class="comment"># 123 + 123 = 246</span></span><br><span class="line">print(<span class="string">&#x27;&#123;0&#125;+&#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a + b)) <span class="comment"># 123 + 123 = 246</span></span><br></pre></td></tr></table></figure>
<p>( <code>%</code> is  format operator.  <code>%x</code> is a placeholder. <code>%d</code> is for the integer.  <code>%f</code> is for the decimal.<code>%%</code> is for the percent sign. The strings after the <code>%</code> will replace the placeholder and output to the terminal )</p>
<p>When you don’t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the <code>repr()</code> or <code>str()</code> functions.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;Hello, world.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(s)</span><br><span class="line"><span class="string">&#x27;Hello, world.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(s)</span><br><span class="line"><span class="string">&quot;&#x27;Hello, world.&#x27;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="part.2--scopes-and-namespaces">Part.2  Scopes and Namespaces<a title="#part.2--scopes-and-namespaces" href="#part.2--scopes-and-namespaces"></a></h3>
<p><strong>Ⅰ. Namespaces</strong></p>
<p>A <em>namespace</em> is a mapping from names to objects. Most namespaces are currently implemented as Python dictionaries.</p>
<p>Examples of namespaces are:<br>
<strong>·</strong> the set of built-in names (containing functions such as <code>abs()</code>, and built-in exception names);<br>
<strong>·</strong> the global names in a module;<br>
<strong>·</strong> the local names in a function invocation.</p>
<p>There is absolutely no relation between names in different namespaces. Users of the modules must prefix the  items, which are the same name, with the module name.</p>
<p>Namespaces are created at different moments and have different lifetimes.<br>
The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.<br>
The global namespace for a module is created when the module definition is read in. Normally, module namespaces also last until the interpreter quits.<br>
The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function.</p>
<p><strong>Ⅱ. Scope</strong></p>
<p>A <em>scope</em> is a textual region of a Python program where an unqualified reference to a name attempts to find the name in the namespace.</p>
<p>Although scopes are determined statically, they are used dynamically. At any time during execution, there are 3 or 4 nested scopes whose namespaces are directly accessible:</p>
<ul>
<li><strong>·</strong> the innermost scope, which is searched first, contains the local names</li>
<li><strong>·</strong> the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names</li>
<li><strong>·</strong> the next-to-last scope contains the current module’s global names</li>
<li><strong>·</strong> the outermost scope (searched last) is the namespace containing built-in names</li>
</ul>
<p>The <code>global</code> statement can be used to indicate that particular variables live in the global scope and should be rebound there;<br>
The <code>nonlocal</code> statement is used to rebind variables found outside of the innermost scope and indicates that particular variables live in an enclosing scope.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_test</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span>():</span></span><br><span class="line">        spam = <span class="string">&quot;local spam&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> spam</span><br><span class="line">        spam = <span class="string">&quot;nonlocal spam&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span>():</span></span><br><span class="line">        <span class="keyword">global</span> spam</span><br><span class="line">        spam = <span class="string">&quot;global spam&quot;</span></span><br><span class="line"></span><br><span class="line">    spam = <span class="string">&quot;test spam&quot;</span></span><br><span class="line">    do_local()</span><br><span class="line">    print(<span class="string">&quot;After local assignment:&quot;</span>, spam) <span class="comment"># After local assignment: test spam</span></span><br><span class="line">    do_nonlocal()</span><br><span class="line">    print(<span class="string">&quot;After nonlocal assignment:&quot;</span>, spam) <span class="comment"># After nonlocal assignment: nonlocal spam</span></span><br><span class="line">    do_global()</span><br><span class="line">    print(<span class="string">&quot;After global assignment:&quot;</span>, spam) <span class="comment"># After global assignment: nonlocal spam</span></span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line">print(<span class="string">&quot;In global scope:&quot;</span>, spam) <span class="comment"># In global scope: global spam</span></span><br></pre></td></tr></table></figure>
<h3 id="part.3--class">Part.3  Class<a title="#part.3--class" href="#part.3--class"></a></h3>
<p><strong>Ⅰ. Object-oriented programming (OOP)</strong></p>
<p>Python is  an object-oriented programing language and almost <strong>every operational item in python is an object</strong>. OOP is a computer programming model that organizes software design around objects, rather than functions and logic.  An object can be defined as a data field that has unique attributes and behavior.</p>
<p>Object-oriented programming is based on the following principles:</p>
<ol>
<li>
<p>Encapsulation: The implementation and state of each object are privately held inside a defined  class and require all interaction to be performed through an object’s methods.</p>
</li>
<li>
<p>Abstraction:  Objects only reveal internal mechanisms that are relevant for the use of other objects, hiding any unnecessary implementation code.</p>
</li>
<li>
<p>Inheritance: Relationships and subclasses between objects can be assigned, allowing developers to reuse a common logic while still maintaining a unique hierarchy.</p>
</li>
<li>
<p>Polymorphism: It is the provision of a single interface to entities of different types or the use of a single symbol to represent multiple different types.</p>
</li>
</ol>
<p>Python is multi-paradigm with OOP support and is class-based. Classes provide a means of bundling data and functionality together. Each class instance can have attributes attached to it for maintaining its state(the set of values of the attributes of a particular instance) and methods (defined by its class) for modifying its state.</p>
<p><strong>Ⅱ. Create a class</strong></p>
<p>Some concepts:</p>
<p><strong>·</strong> Class: Used to describe a collection of objects with the same properties and methods. It defines the attributes and methods common to each object in the collection. A class serves as a blueprint for its instances</p>
<p><strong>·</strong> Method: The function defined in the class.</p>
<p><strong>·</strong> Class variable: Class Variables are variables that are shared by all instances of a class and are defined in the class and outside the function body. Class variables are usually not used as instance variables.</p>
<p><strong>·</strong> Instance variable: Instance variables are variables used for data that is unique to a particular instance and an instance variable is a variable modified with <code>self</code>.</p>
<p><strong>·</strong> Data members: Class variables or instance variables which are used to process data related to the class and its instance objects.</p>
<p><strong>·</strong> Instantiation: Create an instance of a class, the concrete object of the class.</p>
<p><strong>·</strong> Class method: A class method receives the class as implicit first argument  which is bound to the class and not the instance of the class. They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance. It can modify a class state that would apply across all the instances of the class. For example it can modify a class variable that will be applicable to all the instances.</p>
<p><strong>·</strong> Static method: A static method does not receive an implicit first argument. A static method is also a method which is bound to the class and not the instance of the class. It can’t access or modify class state. It is present in a class because it makes sense for the method to be present in class.</p>
<p><strong>·</strong> Abstract method: An abstract method represents a method of the base class, which is not implemented, so the base class cannot be instantiated. And the subclass can only be instantiated if the abstract method is implemented.</p>
<p><strong>·</strong> Bound method: Methods that are accessed through an instance will be bound methods. They couple together a function and the object on which that method will be invoked. This means that when we invoke bound methods, the instance is automatically passed in as the first argument (<code>self</code>).</p>
<p>Class objects support two kinds of operations: attribute references and instantiation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="comment"># define the basic attribute</span></span><br><span class="line">    kind = <span class="string">&#x27;mammalia&#x27;</span> <span class="comment"># class variable shared by all instances</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># define the construction method with &#x27;__init__()&#x27;.</span></span><br><span class="line">    <span class="comment"># the instantiation operation of the class will automatically call this method.</span></span><br><span class="line">    <span class="comment"># The method must contain the parameter &#x27;self&#x27; in the first.</span></span><br><span class="line">    <span class="comment"># &#x27;Self&#x27; represents an instance of the class.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w</span>):</span></span><br><span class="line">        self.name = n   <span class="comment"># instance variable unique to each instance</span></span><br><span class="line">        self.age = a</span><br><span class="line">        <span class="comment"># define private attributes which cannot be accessed directly outside the class</span></span><br><span class="line">        <span class="comment"># starting with two underscores &#x27;__&#x27;.</span></span><br><span class="line">        <span class="comment"># It can be accessed by getter and modified by setter.</span></span><br><span class="line">        self.__weight = w</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property # Accessor-getter method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__weight</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @weight.setter # Modifier-setter method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight</span>(<span class="params">self, weight</span>):</span></span><br><span class="line">        self.__weight = weight</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># define private method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__foo</span>(<span class="params">self</span>):</span>          </span><br><span class="line">        print(<span class="string">&#x27;This is a private method.&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;%s said: I am %d years old.&quot;</span> %(self.name,self.age))</span><br><span class="line">        self.__foo()</span><br><span class="line">     </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">staticm</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">classm</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;class&#x27;</span>,cls）</span><br><span class="line">              </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">abstractm</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instance objects can only understand attribute references operations. </span></span><br><span class="line"><span class="comment"># There are two kinds of valid attribute names: data attributes and methods.</span></span><br><span class="line"><span class="comment"># The instantiation operation of the class</span></span><br><span class="line">p = people(<span class="string">&#x27;Oreo&#x27;</span>,<span class="number">10</span>,<span class="number">30</span>)</span><br><span class="line">p.speak() <span class="comment"># Oreo said: I am 10 years old. This is a private method. </span></span><br><span class="line"><span class="comment"># This is equal to people.speak(p)</span></span><br></pre></td></tr></table></figure>
<p>When a class definition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace. In particular, function definitions bind the name of the new function here. Binding an object to a new name using assignment does not create a new object(only created when the class is called). Every object that is an instance of a user-defined class has a unique identity.</p>
<p>Python allows you to define a special <code>__slots__</code> variable when defining a class to limit the attributes that can be added to the class instance.</p>
<p>The <code>dir()</code> method can return a list of valid attributes and methods of the object.</p>
<p>There are built-in functions that can help us access attributes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(p, <span class="string">&#x27;name&#x27;</span>) <span class="comment"># which is the same as p.name</span></span><br><span class="line"><span class="built_in">getattr</span>(people, <span class="string">&#x27;kind&#x27;</span>) <span class="comment"># which is the same as people.kind</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(p, <span class="string">&#x27;balance&#x27;</span>) <span class="comment"># returns False</span></span><br><span class="line"><span class="built_in">hasattr</span>(people, <span class="string">&#x27;kind&#x27;</span>) <span class="comment"># returns True</span></span><br></pre></td></tr></table></figure>
<p>**The evaluation of dot expression: **</p>
<p>We can access class or instance attributes with dot notation. To evaluate a dot expression:</p>
<p>1.Evaluate <code>&lt;expression&gt;</code>, which yields an object.<br>
2.<code>&lt;name&gt;</code> is matched against the instance attributes of that object; if an attribute with that name exists, its value is returned.<br>
3.If not, the name is looked up in the class, which yields a class attribute value. If it is not found in the class, look in any superclasses.<br>
4.That value is returned unless it is a function, in which case a bound method is returned instead.</p>
<p><strong>Ⅲ. Features</strong></p>
<p><strong>· Inheritance</strong></p>
<p>This allows classes to be arranged in a hierarchy that represents “is-a-type-of” relationships and allows easy re-use of the same procedures and data definitions.</p>
<p><strong>· Method override</strong></p>
<p>Subclasses can override the methods defined by superclass.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Single inheritance</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>(<span class="params">people</span>):</span></span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w,g</span>):</span></span><br><span class="line">        <span class="comment"># Call the constructor of the parent class</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g </span><br><span class="line">    <span class="comment"># Override the method of the parent class</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;%s said: I am %d years old and is %d grade.&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">speaker</span>():</span></span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,t</span>):</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;My name is %s，I am a speaker and the topic of my speech is %s.&quot;</span>%(self.name,self.topic))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Multiple inheritance</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sample</span>(<span class="params">speaker,student</span>):</span></span><br><span class="line">    a =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span></span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line"> </span><br><span class="line">test = sample(<span class="string">&quot;Oreo&quot;</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">&quot;Python&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the method names are the same, </span></span><br><span class="line"><span class="comment"># the method of the parent class in front of the brackets is called by default.</span></span><br><span class="line">test.speak()   <span class="comment"># My name is Oreo，I am a speaker and the topic of my speech is Python.</span></span><br><span class="line"><span class="comment"># test.speak() is a method object and can be stored away and called at a later time.</span></span><br></pre></td></tr></table></figure>
<p>The <code>super()</code> function is a method used to call the parent class. <code>super(student,test).speak()</code></p>
<p><strong>· Operator overloading</strong></p>
<p>It is a specific case of polymorphism, where different operators have different implementations depending on their arguments.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line">      self.a = a</span><br><span class="line">      self.b = b</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self,other</span>):</span></span><br><span class="line">      <span class="keyword">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class="line"> </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,<span class="number">-2</span>)</span><br><span class="line"><span class="built_in">print</span> (v1 + v2)</span><br></pre></td></tr></table></figure>
<p><strong>· Special method</strong></p>
<p>They are a variety of instance methods that are reserved by Python, which affect an object’s high level behavior and its interactions with operators.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>Method</th>
<th>Signature</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Returns string for a printable representation of object</td>
<td><code>__repr__(self)</code></td>
<td><code>repr(x)</code> invokes <code>x.__repr__()</code>,this is also invoked when an object is returned by a console.</td>
</tr>
<tr>
<td>Returns string representation of an object</td>
<td><code>__str__(self)</code></td>
<td><code>str(x)</code> invokes <code>x.__str__()</code></td>
</tr>
<tr>
<td>Add</td>
<td><code>__add__(self, other)</code></td>
<td><code>x + y</code> invokes <code>x.__add__(y)</code></td>
</tr>
<tr>
<td>Subtract</td>
<td><code>__sub__(self, other)</code></td>
<td><code>x - y</code> invokes <code>x.__sub__(y)</code></td>
</tr>
<tr>
<td>Multiply</td>
<td><code>__mul__(self, other)</code></td>
<td><code>x * y</code> invokes <code>x.__mul__(y)</code></td>
</tr>
<tr>
<td>Divide</td>
<td><code>__truediv__(self, other)</code></td>
<td><code>x / y</code> invokes <code>x.__truediv__(y)</code></td>
</tr>
<tr>
<td>Power</td>
<td><code>__pow__(self, other)</code></td>
<td><code>x ** y</code> invokes <code>x.__pow__(y)</code></td>
</tr>
<tr>
<td>Length</td>
<td><code>__len__(self)</code></td>
<td><code>len(x)</code> invokes <code>x.__len__()</code></td>
</tr>
<tr>
<td>Get Item</td>
<td><code>__getitem__(self, key)</code></td>
<td><code>x[key]</code> invokes <code>x.__getitem__(key)</code></td>
</tr>
<tr>
<td>Set Item</td>
<td><code>__setitem__(self, key, item)</code></td>
<td><code>x[key] = item</code> invokes <code>x.__setitem__(key, item)</code></td>
</tr>
<tr>
<td>Contains</td>
<td><code>__contains__(self, item)</code></td>
<td><code>item in x</code> invokes <code>x.__contains__(item)</code></td>
</tr>
<tr>
<td>Iterator</td>
<td><code>__iter__(self)</code></td>
<td><code>iter(x)</code> invokes <code>x.__iter__()</code></td>
</tr>
<tr>
<td>Next</td>
<td><code>__next__(self)</code></td>
<td><code>next(x)</code> invokes <code>x.__next__()</code></td>
</tr>
</tbody>
</table></div></div><h3 id="part.4-iterators-and-generators">Part.4 Iterators and Generators<a title="#part.4-iterators-and-generators" href="#part.4-iterators-and-generators"></a></h3>
<p>In python, iterators and generators allowed for lazy evaluation. (delays evaluation of an expression until its value is needed.)</p>
<p><strong>Ⅰ. Iterators</strong></p>
<p>Iterators are used to represent infinite sequences.</p>
<p>Iterable - An object capable of returning its members one at a time. Examples include all sequences (lists, strings, tuples) and some non-sequence types (dictionaries).</p>
<p>An iterator is an object that can remember the position of the traversal. It accesses the first element of the collection(any container object) until all the elements are accessed and it can only go forward.</p>
<p>All iterators are iterables. Not all iterables are iterators. Iterables are books &amp; Iterators are bookmarks.</p>
<p>There are two basic methods for iterators: <code>iter(iterable)</code> and <code>next(iterator)</code>. String, list or tuple objects can all be used to create iterators.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># Create iterator object (Turn iterables into iterators)</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">next</span>(it))   <span class="comment"># Output the next element of the iterator # 1</span></span><br></pre></td></tr></table></figure>
<p>Using a class as an iterator requires implementing two methods in the class <code>__iter__()</code> and <code>__next__()</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumbers</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.a &lt;= <span class="number">20</span>:</span><br><span class="line">      x = self.a</span><br><span class="line">      self.a += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">raise</span> StopIteration </span><br><span class="line">    <span class="comment"># be triggered to end the iteration after completing the specified number of loops.</span></span><br><span class="line"> </span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = <span class="built_in">iter</span>(myclass)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myiter:</span><br><span class="line">  print(x)</span><br></pre></td></tr></table></figure>
<p>The <code>__iter__()</code> method returns a special iterator object, which implements the <code>__next__()</code> method that returns the next iterator object and accesses elements in the container one at a time. When there are no more elements, <code>__next__()</code> raises a  <code>StopIteration</code> exception  to identify the completion of the iteration.</p>
<p><strong>Ⅱ.  Generators</strong></p>
<p>In Python, a function that uses <code>yield</code> is called a generator.</p>
<p>Generators are a simple and powerful tool for creating iterators. They are written like regular functions but use the <code>yield</code> statement whenever they want to return data. Each time <code>next()</code> is called on it, the generator goes into the function and evaluates to the first yield statement. The next time we call next on it, it  resumes where it left off (it remembers all the data values and which statement was last executed). Once the generator hits a return statement, it raises a StopIteration.</p>
<p>When a generator function is called, it returns a generator <strong>instead of</strong> going into the body of the function. The only way to go into the body of a generator function is by calling next on the returned generator.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f is an iterator and return by the generator function(fibonacci).</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">next</span>(f), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<p>A <code>yield from</code> statement yields all values from an iterable.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">k</span>):</span></span><br><span class="line">	<span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">yield</span> <span class="string">&#x27;Blast off&#x27;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">yield</span> k</span><br><span class="line">		<span class="keyword">yield</span> <span class="keyword">from</span> countdown(k<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="part.5-regular-expressions">Part.5 Regular Expressions<a title="#part.5-regular-expressions" href="#part.5-regular-expressions"></a></h3>
<p><strong>Ⅰ. Basic concept</strong></p>
<p>Regular expression is a sequence of characters that define a search pattern. It can be used to check whether a string contains a certain substring, replace the matched substring, or extract it.</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">Oreoisa*irl <span class="comment"># &#x27;*&#x27; means the preceding character can appear 0 or 1 or more times.</span></span><br><span class="line">Oreoisa+irl <span class="comment"># &#x27;+&#x27; means the preceding character must appear at least once.</span></span><br><span class="line">Oreoisa?irl <span class="comment"># &#x27;?&#x27; means the preceding character can appear only 0 or 1 time.</span></span><br></pre></td></tr></table></figure>
<p>Regular expressions are text patterns composed of ordinary characters (such as characters a to z) and special characters (called “metacharacters”). The components of a regular expression can be a single or a set of characters, the range of characters, a selection between characters, or any combination of all these components.</p>
<p><strong>· ordinary character</strong></p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[ABC]</code></td>
<td>match all the characters in the […]</td>
</tr>
<tr>
<td><code>[^ABC]</code></td>
<td>match any character except the ones in the […]</td>
</tr>
<tr>
<td><code>[A-Z]</code></td>
<td>match all the characters range from the first character in the […] to the last one.</td>
</tr>
<tr>
<td><code>.</code></td>
<td>matches any single character except the newline character (\n, \r), which is equivalent to <code>[^\n\r]</code>.</td>
</tr>
<tr>
<td><code>[\s\S]</code></td>
<td>match all the characters. <code>\s</code> matches all whitespace characters, including newlines, <code>\S </code> matches non-whitespace characters, including newlines.</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>match letters, numbers, and underscores. Equivalent to [A-Za-z0-9_]</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
</tbody>
</table></div></div><p><strong>· Non-printing characters</strong></p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\f</code></td>
<td>Matches a form feed character. Equivalent to \x0c and \cL.</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>Match a newline character. Equivalent to \x0a and \cJ.</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>Matches a carriage return character. Equivalent to \x0d and \cM.</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
</tbody>
</table></div></div><p><strong>· Special characters</strong></p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$</code></td>
<td>Match the end position of the input string. To match the $ character itself, use <code>\$</code>.</td>
</tr>
<tr>
<td><code>()</code></td>
<td>Mark the beginning and end of a sub-expression. The sub-expression can be retrieved for later use. To match these characters, use <code><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.134ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2210.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">` and `</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="808" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="1408" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="1932" y="0"/>
</g>
</svg></code>.</td>
</tr>
<tr>
<td><code>*</code>,<code>+</code>,<code>?</code></td>
<td>See details above. To match the <code>*,+,?</code> character itself, use <code>\*</code>,<code>\+</code>,<code>\?</code></td>
</tr>
<tr>
<td><code>|</code></td>
<td>Specify a choice between the two. To match <code>\|</code>, use <code>\|</code></td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
</tbody>
</table></div></div><p><strong>· Qualifier</strong></p>
<p>The qualifier is used to specify how many times a given component of the regular expression must appear to satisfy the match. There are 6 kinds of <code>*</code> or <code>+</code> or <code>?</code> or <code>&#123;n&#125; </code> or <code>&#123;n,&#125;</code> or  <code>&#123;n,m&#125;</code>.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>n is a non-negative integer. Matches certain character n times.</td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>n is a non-negative integer. Matches certain character at least n times.</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>Both m and n are non-negative integers, where n &lt;= m. Matches certain character at least n times and at most m times.</td>
</tr>
</tbody>
</table></div></div><p>The repeat character(<code>*</code> or <code>+</code> ) push outward in both directions(greedy matching) to match the largest possible string. However, if we add a <code>?</code> , <code>*</code> or <code>+</code>  chill out a bit.</p>
<p><strong>· Locator</strong></p>
<p>The locator allows you to fix the regular expression to the beginning or end of a line. Or used to describe the boundary of a string or word.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>Matches the position at the beginning of the input string.</td>
</tr>
<tr>
<td><code>$</code></td>
<td>Matches the position at the end of the input string.</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>Match a word boundary, that is, the position between a word and a space.</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>Match any character except a word boundary.</td>
</tr>
</tbody>
</table></div></div><p><strong>· Selection</strong></p>
<p><code>() </code> means the capture group, <code>()</code> will save the matching value in each group, multiple matching values can be viewed by the number n (n is a number, representing the content of the nth capture group).</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">/([<span class="number">0</span>-<span class="number">9</span>])([a-z]+)  \<span class="number">1</span> /g  <span class="comment"># \1 specifies the first submatch.</span></span><br><span class="line"><span class="comment"># Capture all strings that start with a number and end with multiple letters</span></span><br></pre></td></tr></table></figure>
<p>Parentheses tell where to start and stop what string to extract.</p>
<p><strong>· Non-capturing element</strong></p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>?=</code></td>
<td>exp1(?=exp2) : Find exp1 before exp2</td>
</tr>
<tr>
<td><code>?&lt;=</code></td>
<td>(?&lt;=exp2)exp1 : Find exp1 after exp2</td>
</tr>
<tr>
<td><code>?!</code></td>
<td>exp1(?!exp2) : Find exp1 that does not follow exp2.</td>
</tr>
<tr>
<td><code>?&lt;!</code></td>
<td>(?&lt;!=exp2)exp1 : Find exp1 that is not preceding exp2.</td>
</tr>
</tbody>
</table></div></div><p><strong>· Modifier (tag)</strong></p>
<p>Tags are used to specify additional matching strategies and are written outside the expression.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i</code></td>
<td>ignore : not case sensitive</td>
</tr>
<tr>
<td><code>g</code></td>
<td>global : Global match</td>
</tr>
<tr>
<td><code>m</code></td>
<td>more : Multi-line matching</td>
</tr>
<tr>
<td><code>s</code></td>
<td>Make the special character dot contains the newline character <code>\n</code></td>
</tr>
</tbody>
</table></div></div><p><strong>· Operator precedence</strong></p>
<p><code>\</code>, <code>(), (?:), (?=), []</code>, <code>*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;</code>, <code>^, $, \any character、any character</code>, <code>|</code></p>
<p><strong>Ⅱ. re — Regular expression operation</strong></p>
<p><a href="https://docs.python.org/3/library/re.html" target="_blank"><u>More details</u></a></p>
<p><strong>· re.match and re.search</strong><br>
<code>re.match</code> only matches the beginning of the string. If the string does not match the regular expression at the beginning, the match fails, the function returns None, and <code>re.search</code> matches the entire string until a match is found.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># re.match(pattern, string, flags=0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">&quot;Cats are smarter than dogs&quot;</span></span><br><span class="line"> </span><br><span class="line">matchObj = re.match( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;match --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">matchObj = re.search( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;search --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">No match!!</span></span><br><span class="line"><span class="string">search --&gt; matchObj.group() :  dogs</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>· re.sub</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># re.sub(pattern, repl, string, count=0, flags=0)</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Multiply the matched number by 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span>(<span class="params">matched</span>):</span></span><br><span class="line">    value = <span class="built_in">int</span>(matched.group(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&#x27;A23G4HFD567&#x27;</span></span><br><span class="line"><span class="comment"># ?P&lt;value&gt; means to name a group as value to match the rule to match the following /d+</span></span><br><span class="line">print(re.sub(<span class="string">&#x27;(?P&lt;value&gt;\d+)&#x27;</span>, double, s)) <span class="comment"># A46G8HFD1134</span></span><br></pre></td></tr></table></figure>
<p><strong>· re.compile</strong></p>
<p>The compile function is used to compile regular expressions and generate a regular expression (Pattern) object for use by the match() and search() functions.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)                    <span class="comment"># Match at least one digit</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># Match from the position of &#x27;1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )                                        <span class="comment"># Returns a Match object</span></span><br><span class="line">&lt;_sre.SRE_Match <span class="built_in">object</span> at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)   </span><br><span class="line"><span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   </span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     </span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    </span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><strong>· findall</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)   <span class="comment"># find number</span></span><br><span class="line">result1 = pattern.findall(<span class="string">&#x27;runoob 123 google 456&#x27;</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">&#x27;run88oob123google456&#x27;</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line">print(result1) <span class="comment"># [&#x27;123&#x27;, &#x27;456&#x27;]</span></span><br><span class="line">print(result2) <span class="comment"># [&#x27;88&#x27;, &#x27;12&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="part.5-test">Part.5 Test<a title="#part.5-test" href="#part.5-test"></a></h3>
<p><strong>Ⅰ. doctest — Test interactive Python examples</strong></p>
<p>The <code>doctest</code> module searches for pieces of text that look like interactive Python sessions, and then executes those sessions to verify that they work exactly as shown.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(4, 3)</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(&#x27;a&#x27;, 3)</span></span><br><span class="line"><span class="string">    &#x27;aaa&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod(verbose=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Ⅱ. unittest — Unit testing framework</strong></p>
<p>The unittest unit testing framework was originally inspired by JUnit and has a similar flavor as major unit testing frameworks in other languages. It supports test automation, sharing of setup and shutdown code for tests, aggregation of tests into collections, and independence of the tests from the reporting framework.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStringMethods</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_upper</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertEqual(<span class="string">&#x27;foo&#x27;</span>.upper(), <span class="string">&#x27;FOO&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_isupper</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertTrue(<span class="string">&#x27;FOO&#x27;</span>.isupper())</span><br><span class="line">        self.assertFalse(<span class="string">&#x27;Foo&#x27;</span>.isupper())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_split</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        self.assertEqual(s.split(), [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>])</span><br><span class="line">        <span class="comment"># check that s.split fails when the separator is not a string</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">            s.split(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>
<h3 id="part.6-errors-and-exceptions">Part.6 Errors and Exceptions<a title="#part.6-errors-and-exceptions" href="#part.6-errors-and-exceptions"></a></h3>
<p>Program should be written precisely otherwise the deviations and mistakes in your code will cause the Python to stop and can’t work out the final result. There are three main types of errors that you may encounter during.</p>
<p><strong>·</strong> Syntax errors:</p>
<p>A syntax error means that you have violated the “grammar” rules of Python.</p>
<p><strong>·</strong> Logic errors:</p>
<p>A mistake in the order of the statements or in how the statements relate to one another.</p>
<p><strong>·</strong> Semantic errors:</p>
<p>The program is perfectly correct but it does not do what you intended for it to do.</p>
<p><strong>· Exceptions</strong></p>
<p>Errors detected during execution are called <em>exceptions</em> and are not unconditionally fatal. Most exceptions are not handled by programs, however, and result in error messages. Exceptions come in different types, and the type is printed as part of the message.</p>
<p><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank">Built-in Exceptions</a>  lists the built-in exceptions and their meanings.</p>
<p><strong>· Handling Exceptions</strong></p>
<p>It is possible to write programs that handle selected exceptions. A user-generated interruption is signaled by raising different types of exception.</p>
<p><strong>try/except :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;myfile.txt&#x27;</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = <span class="built_in">int</span>(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">&quot;OS error: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;Could not convert data to an integer.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>
<p><strong>try/except … else :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">&#x27;cannot open&#x27;</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Excute when there is no error happen</span></span><br><span class="line">        print(arg, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>) </span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>
<p><strong>try-finally :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    function()</span><br><span class="line"><span class="keyword">except</span> AssertionError <span class="keyword">as</span> error:</span><br><span class="line">    print(error)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.log&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            read_data = file.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> fnf_error:</span><br><span class="line">        print(fnf_error)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;This line will be executed regardless of whether an exception occurs.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>· Raising Exceptions</strong></p>
<p>The sole argument to <code>raise</code> indicates the exception to be raised. This must be either an exception instance or an exception class</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;x can not be greater than 5。x : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">     print(<span class="string">&#x27;An exception flew by!&#x27;</span>)</span><br><span class="line">     <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>
<p><strong>· User-defined Exceptions</strong></p>
<p>Programs may name their own exceptions by creating a new exception class</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">            self.value = value</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">repr</span>(self.value)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyError(<span class="number">2</span>*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> MyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;My exception occurred, value:&#x27;</span>, e.value) <span class="comment"># My exception occurred, value: 4</span></span><br></pre></td></tr></table></figure>
<p><strong>· Assert (prevent bugs)</strong></p>
<p>The <code>assert</code> keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> expression</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> expression:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">assert</span> (<span class="string">&#x27;linux&#x27;</span> <span class="keyword">in</span> sys.platform), <span class="string">&quot;This code can only be excuted in Linux.&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="part.7-standard-library">Part.7 Standard Library<a title="#part.7-standard-library" href="#part.7-standard-library"></a></h3>
<p><a href="https://docs.python.org/3/library/index.html" target="_blank"><u>For details</u></a></p>
<h3 id="part.-exercise">Part. Exercise<a title="#part.-exercise" href="#part.-exercise"></a></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;One card&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, suite, face</span>):</span></span><br><span class="line">        self._suite = suite</span><br><span class="line">        self._face = face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">face</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">suite</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._suite</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._face == <span class="number">1</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">11</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;J&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">12</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">13</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;K&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            face_str = <span class="built_in">str</span>(self._face)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (self._suite, face_str)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__str__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poker</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A deck of cards&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._cards = [Card(suite, face) </span><br><span class="line">                       <span class="keyword">for</span> suite <span class="keyword">in</span> <span class="string">&#x27;♠♥♣♦&#x27;</span></span><br><span class="line">                       <span class="keyword">for</span> face <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>)]</span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cards</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._cards</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shuffle</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Shuffle (random out of order)&quot;&quot;&quot;</span></span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line">        random.shuffle(self._cards)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Deal a card&quot;&quot;&quot;</span></span><br><span class="line">        card = self._cards[self._current]</span><br><span class="line">        self._current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_next</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;have card or not&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._current &lt; <span class="built_in">len</span>(self._cards)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Player&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._cards_on_hand = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cards_on_hand</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._cards_on_hand</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, card</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Draw a card&quot;&quot;&quot;</span></span><br><span class="line">        self._cards_on_hand.append(card)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrange</span>(<span class="params">self, card_key</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Arrange the cards in his hand&quot;&quot;&quot;</span></span><br><span class="line">        self._cards_on_hand.sort(key=card_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sorting rules-sort by suit and then by points</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">card</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (card.suite, card.face)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    p = Poker()</span><br><span class="line">    p.shuffle()</span><br><span class="line">    players = [Player(<span class="string">&#x27;1&#x27;</span>), Player(<span class="string">&#x27;2&#x27;</span>), Player(<span class="string">&#x27;3&#x27;</span>), Player(<span class="string">&#x27;4&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">        <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">            player.get(p.<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">        print(player.name + <span class="string">&#x27;:&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        player.arrange(get_key)</span><br><span class="line">        print(player.cards_on_hand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Basics 01</title>
    <url>/2020/20200917-Java-Basics-01/</url>
    <content><![CDATA[<h1 id="java-basics-01">Java Basics 01<a title="#java-basics-01" href="#java-basics-01"></a></h1>
<p><strong>· materials:</strong></p>
<p>· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a></p>
<p>· <a href="https://docs.oracle.com/javase/tutorial/" target="_blank">Java Tutorial</a></p>
<p>· <a href="https://www.oracle.com/java/technologies/language-environment.html" target="_blank">The Java Language Environment</a> by <em>James Gosling</em> and <em>Henry McGilton</em></p>
<p>· Wikipedia</p>
<p>· <a href="https://google.github.io/styleguide/javaguide.html" target="_blank">Google Java Style Guide</a></p>
<h2 id="part.1-general-view">Part.1 General View<a title="#part.1-general-view" href="#part.1-general-view"></a></h2>
<p>Java is the general term for Java object-oriented programming language and Java platform launched by Sun Microsystems in May 1995.</p>
<p>Java is divided into three systems:</p>
<p>JavaSE <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="33.856ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 14577 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Java2 Platform Standard Edition</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4A" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="633" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="1163" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1648" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="2178" y="0"/>
 <use xlink:href="#E1-MJMATHI-50" x="2678" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3430" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3728" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4258" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="4619" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5170" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="5655" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="6107" y="0"/>
 <use xlink:href="#E1-MJMATHI-53" x="6985" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7631" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7992" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="8522" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="9122" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="9646" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="10175" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="10627" y="0"/>
 <use xlink:href="#E1-MJMATHI-45" x="11150" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="11915" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="12438" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="12784" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="13145" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="13491" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="13976" y="0"/>
</g>
</svg> , JavaEE <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="36.553ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 15738.2 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Java 2 Platform, Enterprise Edition</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4A" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="633" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="1163" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1648" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="2178" y="0"/>
 <use xlink:href="#E1-MJMATHI-50" x="2678" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3430" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3728" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4258" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="4619" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5170" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="5655" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="6107" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="6985" y="0"/>
 <use xlink:href="#E1-MJMATHI-45" x="7430" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="8195" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="8795" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9157" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="9623" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="10075" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="10578" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11030" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="11375" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="11845" y="0"/>
 <use xlink:href="#E1-MJMATHI-45" x="12311" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="13076" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="13599" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="13945" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="14306" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="14652" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="15137" y="0"/>
</g>
</svg> , JavaME <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="30.611ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 13179.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Java 2 Platform Micro Edition</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4A" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="633" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="1163" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1648" y="0"/>
 <use xlink:href="#E1-MJMAIN-32" x="2178" y="0"/>
 <use xlink:href="#E1-MJMATHI-50" x="2678" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3430" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3728" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4258" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="4619" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5170" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="5655" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="6107" y="0"/>
 <use xlink:href="#E1-MJMATHI-4D" x="6985" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8037" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="8382" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="8816" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="9267" y="0"/>
 <use xlink:href="#E1-MJMATHI-45" x="9753" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="10517" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11041" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11386" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11748" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="12093" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="12579" y="0"/>
</g>
</svg>.</p>
<p><strong>Java Platform：</strong> A platform is the hardware or software environment in which a program runs but Java platform is a software-only platform that runs on top of other hardware-based platforms. As a platform-independent environment, the Java platform can be a bit slower than native code. However, advances in compiler and virtual machine technologies are bringing performance close to that of native code without threatening portability.</p>
<p>The Java platform has two components:</p>
<p><strong>· The Java Virtual Machine</strong> A Java virtual machine <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.701ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2454.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">JVM</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-56" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/>
<path stroke-width="1" id="E1-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4A" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-56" x="633" y="0"/>
 <use xlink:href="#E1-MJMATHI-4D" x="1403" y="0"/>
</g>
</svg> is a virtual machine that enables a computer to run Java programs as well as programs written in other languages that are also compiled to Java bytecode.</p>
<p><strong>· The Java Application Programming Interface <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.66ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2006.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">API</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E1-MJMATHI-50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-41" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-50" x="750" y="0"/>
 <use xlink:href="#E1-MJMATHI-49" x="1502" y="0"/>
</g>
</svg></strong> The API is a large collection of ready-made software components that provide many useful capabilities. It is grouped into libraries of related classes and interfaces; these libraries are known as <em>packages</em>.</p>
<h3 id="ⅰ.-main-features">Ⅰ. Main Features<a title="#ⅰ.-main-features" href="#ⅰ.-main-features"></a></h3>
<p><a href="https://www.oracle.com/java/technologies/language-environment.html" target="_blank">See more details here</a></p>
<p><strong>· Simple</strong></p>
<p>Easy to learn and use from the very beginning.</p>
<p><strong>· Object Oriented</strong></p>
<p>Java language is a pure object-oriented programming language and provides object-oriented features such as classes, interfaces, and inheritance. It only supports single inheritance between classes, but supports multiple inheritance between interfaces, and supports the implementation mechanism between classes and interfaces.</p>
<p><strong>· Portable and Architecture Neutral</strong></p>
<p>Java technology is designed to support applications that will be deployed into heterogeneous network environments which requires that applications must be capable of executing on a variety of hardware architectures. The Java Compiler generates <em>bytecodes</em> – an <em>architecture neutral</em> intermediate format designed to transport code efficiently to multiple hardware and software platforms. The architecture-neutral and portable language platform of Java technology is known as the <em>Java virtual machine</em>.</p>
<p>Also being strict in its definition of the basic language <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="79.739ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 34332 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">specifies the sizes of its basic data types and the behavior of its arithmetic operators</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-73" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="469" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="973" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="1439" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="1873" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="2218" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="2769" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3114" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="3581" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4050" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="4412" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4988" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5455" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5924" y="0"/>
 <use xlink:href="#E1-MJMATHI-7A" x="6270" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6738" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="7205" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="7674" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="8160" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8710" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9056" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="9417" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="9887" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="10316" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="10846" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11315" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="11661" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="12094" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="12618" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="13147" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="13509" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="14038" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="14400" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="14897" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="15401" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="15867" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="16337" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="16866" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="17467" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="17990" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="18352" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="18928" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="19395" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="19824" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="20291" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="20867" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="21397" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="21882" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="22228" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="22713" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="23165" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="23650" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="24201" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="24546" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="24908" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="25377" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="25907" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="26358" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="26704" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="27065" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="27642" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="28520" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="28987" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="29348" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="29694" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="30127" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="30613" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="31116" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="31583" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="32034" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="32564" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="32925" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="33411" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="33862" y="0"/>
</g>
</svg> makes the programs the same on every platform–there are no data type incompatibilities across hardware and software architectures.</p>
<p><strong>· Interpreted, Dynamic and Multithreaded</strong></p>
<p>The <em>Java interpreter</em> can execute Java bytecodes directly on any machine to which the interpreter and run-time system have been ported. The classes required by the Java program can be <em>dynamically</em> loaded into the run-time system, and the required classes can also be loaded through the network. While the Java Compiler is strict in its compile-time static checking, the language and run-time system are dynamic in their linking stages. Classes are linked only as needed.</p>
<p>The Java platform supports multithreading at the language level with the addition of sophisticated synchronization primitives: the language library provides the Thread class, and the run-time system provides monitor and condition lock primitives.</p>
<p><strong>· Distributed</strong></p>
<p>Java supports the development of Internet applications. There is a network application programming interface <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.89ex" height="2.509ex" style="vertical-align: -0.671ex; margin-left: -0.027ex;" viewbox="-11.5 -791.3 3397 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">java net</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6A" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="412" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="942" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1427" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="1957" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2557" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3024" y="0"/>
</g>
</svg> in the basic Java application programming interface, which provides a class library for network application programming, including URL,etc. Java’s RMI <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="26.9ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 11582 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Remote Method Activation</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-52" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="759" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1226" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="2104" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="2590" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2951" y="0"/>
 <use xlink:href="#E1-MJMATHI-4D" x="3418" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4469" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4936" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5297" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5874" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="6359" y="0"/>
 <use xlink:href="#E1-MJMATHI-41" x="6883" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="7633" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="8067" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8428" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="8774" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="9259" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9789" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="10150" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="10496" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="10981" y="0"/>
</g>
</svg> mechanism is also an important means of developing distributed applications.</p>
<p><strong>· Robust and Secure</strong></p>
<p>Java provides extensive compile-time checking, followed by a second level of run-time checking. Also there are no explicit programmer-defined pointer data types, no pointer arithmetic, and automatic garbage collection.</p>
<p>Java is designed to operate in distributed environments, which means that applications written in the Java programming language are secure from intrusion by unauthorized code attempting to get behind the scenes and create viruses or invade file systems.</p>
<p><strong>· High performance</strong></p>
<p>The Java platform achieves superior performance by adopting a scheme by which the interpreter can run at full speed without needing to check the run-time environment. The automatic garbage collector runs as a low-priority background thread, ensuring a high probability that memory is available when required, leading to better performance.</p>
<h3 id="ⅱ.-a-simple-example">Ⅱ. A Simple Example<a title="#ⅱ.-a-simple-example" href="#ⅱ.-a-simple-example"></a></h3>
<h4 id="1)-to-write-a-java-program,-you'll-need:">1) To write a java program, you’ll need:<a title="#1)-to-write-a-java-program,-you'll-need:" href="#1)-to-write-a-java-program,-you'll-need:"></a></h4>
<p><strong>· The JDK</strong></p>
<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank">Download the Windows version now</a>. <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="52.365ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 22545.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Make sure you download the **JDK**, _not_ the JRE.</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMAIN-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/>
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E1-MJMATHI-4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4D" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1051" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="1581" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2102" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2569" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="3038" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="3611" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4062" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="4529" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5026" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="5512" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="6084" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6608" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="7093" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7810" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="8410" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="8709" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="9194" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="9724" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="10247" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="10609" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="11185" y="0"/>
 <use xlink:href="#E1-MJMAIN-2217" x="11874" y="0"/>
 <use xlink:href="#E1-MJMAIN-2217" x="12596" y="0"/>
 <use xlink:href="#E1-MJMATHI-4A" x="13097" y="0"/>
 <use xlink:href="#E1-MJMATHI-44" x="13730" y="0"/>
 <use xlink:href="#E1-MJMATHI-4B" x="14559" y="0"/>
 <use xlink:href="#E1-MJMAIN-2217" x="15671" y="0"/>
 <use xlink:href="#E1-MJMAIN-2217" x="16393" y="0"/>
<g transform="translate(16894,0)">
 <use xlink:href="#E1-MJMAIN-2C" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="393" y="-213"/>
</g>
 <use xlink:href="#E1-MJMATHI-6F" x="17864" y="0"/>
<g transform="translate(18349,0)">
 <use xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-74" x="511" y="-213"/>
</g>
 <use xlink:href="#E1-MJMATHI-68" x="19066" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="19643" y="0"/>
 <use xlink:href="#E1-MJMATHI-4A" x="20109" y="0"/>
 <use xlink:href="#E1-MJMATHI-52" x="20743" y="0"/>
 <use xlink:href="#E1-MJMATHI-45" x="21502" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="22267" y="0"/>
</g>
</svg> Consult the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html" target="_blank">installation instructions</a>.</p>
<p>JDK: <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="22.334ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 9616 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Java Development Kit</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4A" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="633" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="1163" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1648" y="0"/>
 <use xlink:href="#E1-MJMATHI-44" x="2178" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3006" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="3473" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3958" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="4425" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="4723" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="5209" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="5712" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6591" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7057" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7658" y="0"/>
 <use xlink:href="#E1-MJMATHI-4B" x="8019" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8909" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9254" y="0"/>
</g>
</svg> It is an implementation of either one of the Java Platform and is the core of the entire Java development.The JDK integrates a private JVM and a few other resources<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="15.353ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 6610.3 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">such as javac...</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-73" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="469" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="1042" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="1475" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2052" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2581" y="0"/>
 <use xlink:href="#E1-MJMATHI-6A" x="3051" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3463" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="3993" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4478" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="5008" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="5441" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="5886" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="6331" y="0"/>
</g>
</svg> to finish the development of a Java application.</p>
<p>JRE: <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="28.343ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 12203 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Java Runtime Environment</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4A" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="633" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="1163" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1648" y="0"/>
 <use xlink:href="#E1-MJMATHI-52" x="2178" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="2937" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3510" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4110" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4472" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="4817" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5696" y="0"/>
 <use xlink:href="#E1-MJMATHI-45" x="6162" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="6927" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="7527" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8013" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="8358" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="8810" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="9295" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="9896" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="10774" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="11241" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11841" y="0"/>
</g>
</svg> It mainly contains two parts, the standard implementation of JVM and some basic Java libraries.</p>
<p><strong>· A text editor</strong></p>
<h4 id="2)-to-create-a-program,-you-will:">2) To create a program, you will:<a title="#2)-to-create-a-program,-you-will:" href="#2)-to-create-a-program,-you-will:"></a></h4>
<ul>
<li>
<p>Create a source file</p>
<p>A source file contains code, written in the Java programming language. You can use any text editor to create and edit source files.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The HelloWorldApp class implements an application that</span></span><br><span class="line"><span class="comment"> * simply prints &quot;Hello World!&quot; to standard output.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>); <span class="comment">// Display the string.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Compile the source file into a .class file</p>
<p>The Java programming language <em>compiler</em> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.846ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2947.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`javac`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6A" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="691" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="1220" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1706" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="2235" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="2669" y="0"/>
</g>
</svg> takes your source file and translates its text into instructions that the Java virtual machine can easily understand. The instructions contained within this file are known as <em>bytecodes</em>. .class file has been type checked.</p>
</li>
<li>
<p>Run the program</p>
<p>The Java application <em>launcher tool</em> uses the Java virtual machine to run your application.</p>
</li>
</ul>
<p><img 1999 src="https://i.loli.net/2020/09/17/Qdf4O7nWcZ2BsXu.gif" alt="<svg xmlns:xlink=" http: www.w3.org xlink" width="18.465ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 7950 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">from Java tutorial</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path>
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-66" x="0" y="0"></use>
 <use xlink:href="#E1-MJMATHI-72" x="550" y="0"></use>
 <use xlink:href="#E1-MJMATHI-6F" x="1002" y="0"></use>
 <use xlink:href="#E1-MJMATHI-6D" x="1487" y="0"></use>
 <use xlink:href="#E1-MJMATHI-4A" x="2366" y="0"></use>
 <use xlink:href="#E1-MJMATHI-61" x="2999" y="0"></use>
 <use xlink:href="#E1-MJMATHI-76" x="3529" y="0"></use>
 <use xlink:href="#E1-MJMATHI-61" x="4014" y="0"></use>
 <use xlink:href="#E1-MJMATHI-74" x="4544" y="0"></use>
 <use xlink:href="#E1-MJMATHI-75" x="4905" y="0"></use>
 <use xlink:href="#E1-MJMATHI-74" x="5478" y="0"></use>
 <use xlink:href="#E1-MJMATHI-6F" x="5839" y="0"></use>
 <use xlink:href="#E1-MJMATHI-72" x="6325" y="0"></use>
 <use xlink:href="#E1-MJMATHI-69" x="6776" y="0"></use>
 <use xlink:href="#E1-MJMATHI-61" x="7122" y="0"></use>
 <use xlink:href="#E1-MJMATHI-6C" x="7651" y="0"></use>
</g>
" class="φcx"></p>
<h4 id="3)-content-in-the-source-file">3) Content in the source file<a title="#3)-content-in-the-source-file" href="#3)-content-in-the-source-file"></a></h4>
<p>· Comment Comments are ignored by the compiler but are useful to other programmers. <code>/* text */</code> <code>/** documentation */</code> This indicates a documentation comment <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="22.349ex" height="2.843ex" style="vertical-align: -1.005ex;" viewbox="0 -791.3 9622.6 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">_doc comment_, for short</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-64" x="0" y="-213"/>
 <use xlink:href="#E1-MJMATHI-6F" x="470" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="955" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="1389" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="1822" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="2308" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="3186" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4065" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4531" y="0"/>
<g transform="translate(5132,0)">
 <use xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2C" x="511" y="-213"/>
</g>
 <use xlink:href="#E1-MJMATHI-66" x="5790" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6341" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="6826" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="7278" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="7747" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="8324" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="8809" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9261" y="0"/>
</g>
</svg>. The <code>javadoc</code> tool uses doc comments when preparing automatically generated documentation. For more information on <code>javadoc</code>, see the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/index.html" target="_blank">Javadoc™ tool documentation</a> . <code>// text</code></p>
<p>· Class definition</p>
<p>The file name must be consistent with the class name, every java file must contain a class declaration and all code live inside a class, even helper functions, global constant <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="16.927ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 7288 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">except interface.</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-65" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="466" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="1039" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1472" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="1939" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="2442" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="2804" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3149" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3750" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4111" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="4578" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="5029" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="5580" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="6109" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6543" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="7009" y="0"/>
</g>
</svg></p>
<p>· The <code>main</code> method</p>
<p>To run a Java program, every application must contain a <code>main</code> method whose signature is:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure>
<p>The <code>main</code> method accepts a single argument: an array of elements of type <code>String</code>. This array is the mechanism through which the runtime system passes information to your application.</p>
<h2 id="part.2-language-basics">Part.2 Language Basics<a title="#part.2-language-basics" href="#part.2-language-basics"></a></h2>
<h3 id="ⅰ.-variables">Ⅰ. Variables<a title="#ⅰ.-variables" href="#ⅰ.-variables"></a></h3>
<h4 id="·-different-kinds-of-variables">· Different kinds of variables<a title="#·-different-kinds-of-variables" href="#·-different-kinds-of-variables"></a></h4>
<p>1) Instance Variables <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="20.27ex" height="2.343ex" style="vertical-align: -0.505ex;" viewbox="0 -791.3 8727.4 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Non-Static Fields</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="888" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="1374" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="2196" y="0"/>
 <use xlink:href="#E1-MJMATHI-53" x="3197" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3842" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4204" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4733" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5095" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="5440" y="0"/>
 <use xlink:href="#E1-MJMATHI-46" x="5874" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="6623" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6969" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="7435" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="7734" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="8257" y="0"/>
</g>
</svg> Objects store their individual states in non-static fields. The values of instance variables are unique to each <em>instance</em> of a class.</p>
<p>2) Class Variables <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="12.844ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 5530 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">Static Fields</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-53" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="645" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1007" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1536" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="1898" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="2243" y="0"/>
 <use xlink:href="#E1-MJMATHI-46" x="2677" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="3426" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3772" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="4238" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="4537" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5060" y="0"/>
</g>
</svg> Any field declared with the <code>static</code> modifier is a class variable. It is a common variable that applies to all instances.</p>
<p>3) Local Variables Methods store their temporary states in local variables. Local variables are only visible to the methods in which they are declared and they are not accessible from the rest of the class.</p>
<p>4) Parameters</p>
<p>Variables in method declarations.</p>
<h4 id="·-naming">· Naming<a title="#·-naming" href="#·-naming"></a></h4>
<p>1) Case-sensitive</p>
<p>2) Subsequent characters may be letters, digits, dollar signs, or underscore characters.</p>
<p>3) Not a <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" target="_blank">keyword or reserved word</a>.</p>
<p>The convention is to always begin your variable names with a letter and use full words instead of cryptic abbreviations. If the name consists of only one word, spell that word in all lowercase letters. If it consists of more than one word, capitalize the first letter of each subsequent word. <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="15.803ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 6803.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title"> e.g. `gearRatio` </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-65" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="466" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="911" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="1392" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="1837" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="2115" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2596" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3062" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="3592" y="0"/>
 <use xlink:href="#E1-MJMATHI-52" x="4043" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4803" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="5332" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5694" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6039" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="6525" y="0"/>
</g>
</svg></p>
<h4 id="·-primitive-data-types">· Primitive Data Types<a title="#·-primitive-data-types" href="#·-primitive-data-types"></a></h4>
<p>The Java programming language is statically-typed, which means that all variables, parameters, expressions and methods must first be declared before they can be used. This involves stating the variable’s type and name. That type can never be changed. The compiler checks that all the types are compatible before the program ever runs.</p>
<p>A variable’s data type determines the values it may contain, plus the operations that may be performed on it.</p>
<p>Primitive types are special data types built into the language; they are not objects created from a class.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">Type</th>
<th style="text-align:left">Range</th>
<th style="text-align:left">Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">byte</td>
<td style="text-align:left">8-bit signed two’s complement integer, -128 ~ 127 <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="9.331ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 4017.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">inclusive</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-69" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="345" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="946" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1379" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="1678" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2250" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="2720" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="3065" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3551" y="0"/>
</g>
</svg></td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">16-bit signed two’s complement integer, -32,768 ~ 32,767 <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="9.331ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 4017.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">inclusive</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-69" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="345" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="946" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1379" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="1678" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2250" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="2720" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="3065" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3551" y="0"/>
</g>
</svg></td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">32-bit signed two’s complement integer, -2e31 ~ 2e31 - 1</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">64-bit signed two’s complement integer, -2e63 ~ 2e63-1</td>
<td style="text-align:left">0L</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">single-precision 32-bit IEEE 754 floating point</td>
<td style="text-align:left">0.0f</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">double-precision 64-bit IEEE 754 floating point</td>
<td style="text-align:left">0.0d</td>
</tr>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">8-bit, <code>true</code> and <code>false</code></td>
<td style="text-align:left">‘\u0000’</td>
</tr>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">single 16-bit Unicode character, <code>'\u0000'</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="3.339ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 1437.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">or 0</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6F" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="485" y="0"/>
 <use xlink:href="#E1-MJMAIN-30" x="937" y="0"/>
</g>
</svg> ~ <code>'\uffff'</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="18.353ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 7902.2 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">or 65,535 inclusive</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/>
<path stroke-width="1" id="E1-MJMAIN-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMAIN-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6F" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="485" y="0"/>
<g transform="translate(937,0)">
 <use xlink:href="#E1-MJMAIN-36"/>
 <use xlink:href="#E1-MJMAIN-35" x="500" y="0"/>
</g>
 <use xlink:href="#E1-MJMAIN-2C" x="1938" y="0"/>
<g transform="translate(2383,0)">
 <use xlink:href="#E1-MJMAIN-35"/>
 <use xlink:href="#E1-MJMAIN-33" x="500" y="0"/>
 <use xlink:href="#E1-MJMAIN-35" x="1001" y="0"/>
</g>
 <use xlink:href="#E1-MJMATHI-69" x="3884" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4230" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="4830" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="5264" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="5562" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="6135" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="6604" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="6950" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7435" y="0"/>
</g>
</svg>.</td>
<td style="text-align:left">false</td>
</tr>
</tbody>
</table></div></div><p>Fields<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="18.145ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 7812.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">instance variables</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-69" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="345" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="946" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1415" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1777" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="2306" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="2907" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3340" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="3807" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4292" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="4822" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5273" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="5619" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="6148" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="6578" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6876" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="7343" y="0"/>
</g>
</svg> that are declared but not initialized will be set to a reasonable default by the compiler. But compiler never assigns a default value to an uninitialized local variable. If you cannot initialize your local variable where it is declared, make sure to assign it a value before you attempt to use it. Accessing an uninitialized local variable will result in a compile-time error.</p>
<h4 id="·-literal">· Literal<a title="#·-literal" href="#·-literal"></a></h4>
<p>The value assigned to a primitive data type is called a literal. Literals of types <code>byte</code>, <code>short</code>, <code>int</code> and <code>long</code> can be expressed by these number systems: Decimal<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.325ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 1001 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">26</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32"/>
 <use xlink:href="#E1-MJMAIN-36" x="500" y="0"/>
</g>
</svg>, Hexadecimal<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.884ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2103 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">0x1a</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-30" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="500" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="1073" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1573" y="0"/>
</g>
</svg>, Binary<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.972ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 3432.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">0b11010</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-30" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="500" y="0"/>
<g transform="translate(930,0)">
 <use xlink:href="#E1-MJMAIN-31"/>
 <use xlink:href="#E1-MJMAIN-31" x="500" y="0"/>
 <use xlink:href="#E1-MJMAIN-30" x="1001" y="0"/>
 <use xlink:href="#E1-MJMAIN-31" x="1501" y="0"/>
 <use xlink:href="#E1-MJMAIN-30" x="2002" y="0"/>
</g>
</g>
</svg>.</p>
<p>A floating-point literal is of type <code>float</code> if it ends with the letter <code>F</code> or <code>f</code>; otherwise its type is <code>double</code> and it can optionally end with the letter <code>D</code> or <code>d</code>. Also it can use E or e <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="22.319ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 9609.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">for scientific notation</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-66" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="550" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="1036" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1487" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="1957" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="2390" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2736" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3202" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3803" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4164" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="4510" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5060" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="5406" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="5839" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6440" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="6925" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7287" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7816" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8178" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="8523" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="9009" y="0"/>
</g>
</svg>.</p>
<p>Literals of types <code>char</code> and <code>String</code> may contain any Unicode <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="10.325ex" height="2.343ex" style="vertical-align: -0.505ex;" viewbox="0 -791.3 4445.4 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">UTF-16</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-55" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/>
<path stroke-width="1" id="E1-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-55" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-54" x="767" y="0"/>
 <use xlink:href="#E1-MJMATHI-46" x="1472" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="2443" y="0"/>
<g transform="translate(3444,0)">
 <use xlink:href="#E1-MJMAIN-31"/>
 <use xlink:href="#E1-MJMAIN-36" x="500" y="0"/>
</g>
</g>
</svg> characters or you can use a “Unicode escape” such as <code>'\u0108'</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="25.003ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 10765 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">capital C with circumflex</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="433" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="963" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="1466" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1812" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2173" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="2703" y="0"/>
 <use xlink:href="#E1-MJMATHI-43" x="3001" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="3762" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4478" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4824" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5185" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="5762" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="6195" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="6541" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="6992" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="7426" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="7998" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="8877" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="9427" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9726" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="10192" y="0"/>
</g>
</svg>. Always use ‘single quotes’ for <code>char</code> literals and “double quotes” for <code>String</code> literals.</p>
<p>A special <code>null</code> literal that can be used as a value for any reference type. <code>null</code> may be assigned to any variable, except variables of primitive types.</p>
<p>The Java programming language also supports a few special escape sequences for <code>char</code> and <code>String</code> literals: <code>\b</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="10.025ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 4316.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">backspace</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-62" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="429" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="959" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="1392" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1914" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="2383" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2887" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="3416" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3850" y="0"/>
</g>
</svg>, <code>\t</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="3.067ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 1320.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">tab</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="361" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="891" y="0"/>
</g>
</svg>, <code>\n</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="8.635ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3718 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">line feed</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6C" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="298" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="644" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1244" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="1711" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2261" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2728" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="3194" y="0"/>
</g>
</svg>, <code>\f</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="10.157ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 4373 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">form feed</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-66" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="550" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="1036" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1487" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="2366" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2916" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3383" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="3849" y="0"/>
</g>
</svg>, <code>\r</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="15.311ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 6592 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">carriage return</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="433" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="963" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="1414" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="1866" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2211" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="2741" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3221" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="3688" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4139" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4606" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="4967" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="5540" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="5991" y="0"/>
</g>
</svg>, <code>\&quot;</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="11.897ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 5122.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">double quote</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-64" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="523" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="1009" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="1581" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="2011" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2309" y="0"/>
 <use xlink:href="#E1-MJMATHI-71" x="2776" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="3236" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3809" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4294" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4656" y="0"/>
</g>
</svg>, <code>\'</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="11.63ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 5007.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">single quote</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-73" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="469" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="815" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="1415" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1896" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2194" y="0"/>
 <use xlink:href="#E1-MJMATHI-71" x="2661" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="3121" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3694" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4179" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4541" y="0"/>
</g>
</svg>, and <code>\\</code> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="9.888ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 4257.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">backslash</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-62" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="429" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="959" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="1392" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1914" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="2383" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2682" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="3211" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="3681" y="0"/>
</g>
</svg>.</p>
<h4 id="·-reference-data-type">· Reference Data Type<a title="#·-reference-data-type" href="#·-reference-data-type"></a></h4>
<p>Reference datatypes in java are those which contains reference/address<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.329ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2725 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">8 bytes</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-38" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="930" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1427" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1789" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2255" y="0"/>
</g>
</svg> of dynamically created objects. These are not predefined like primitive data types. Default value of any reference variable is null. A reference variable can be used to refer any object of the declared type or any compatible type.</p>
<p>Following are the reference types in Java.</p>
<ul>
<li>
<p>class types</p>
<p>This reference type points to an object of a class. See Number and String class <a href="https://oreodu.github.io/2020/09/23/20200923-Java-Basics-02/" target="_blank">here</a>.</p>
</li>
<li>
<p>interface types</p>
<p>This reference type points to an object of a class which implements an interface. See interface <a href="https://oreodu.github.io/2020/09/23/20200923-Java-Basics-02/" target="_blank">here</a>.</p>
</li>
<li>
<p>array types − This reference type points to an array.</p>
<p>An <em>array</em> is a container object <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="38.176ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 16436.9 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">24 bytes + memory for each array entry</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMAIN-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32"/>
 <use xlink:href="#E1-MJMAIN-34" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="1001" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="1430" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1928" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2289" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2756" y="0"/>
 <use xlink:href="#E1-MJMAIN-2B" x="3447" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="4448" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5326" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="5793" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6671" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="7157" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="7608" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="8106" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="8656" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="9142" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9593" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="10060" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="10589" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="11023" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="11599" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="12129" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="12580" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="13032" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="13561" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14059" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="14525" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="15126" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="15487" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="15939" y="0"/>
</g>
</svg> that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed. We get one reference when it’s created and, unlike class, arrays don’t have methods.</p>
<p>Java prohibits generic array creation! The problem is due to the interaction of Java arrays, which are not statically sound but are dynamically checked, with generics, which are statically sound and not dynamically checked. <strong>Arrays are covariant</strong> and <strong>generics are invariant</strong>.</p>
<p>See more details <a href="https://www.quora.com/Why-does-Java-prohibit-generic-array-creation" target="_blank">here</a> or <a href="https://www.simplexacode.ch/en/blog/2018/08/the-problem-with-creating-generic-arrays/" target="_blank">here</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Covariant: Can assign subclass type array to its superclass array reference. </span></span><br><span class="line">Object objectArray[] = <span class="keyword">new</span> Integer[<span class="number">10</span>]; <span class="comment">// it will work fine</span></span><br><span class="line"><span class="comment">// Invariant: Cannot assign subclass type generic to its super class generic reference </span></span><br><span class="line"><span class="comment">// because in generics any two distinct types are neither a subtype nor a supertype. </span></span><br><span class="line">List&lt;Object&gt; objectList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">// won&#x27;t compile</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declares an array of integers</span></span><br><span class="line"><span class="keyword">int</span>[] anArray;</span><br><span class="line"><span class="comment">// create an array of integers</span></span><br><span class="line">anArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">// initialize first element</span></span><br><span class="line">anArray[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span>[] anotherArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">// copy the array;</span></span><br><span class="line">System.arraycopy(anArray,<span class="number">0</span>,anotherArray,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">// Create a multidimensional array</span></span><br><span class="line">String[][] names = &#123;</span><br><span class="line">  &#123;<span class="string">&quot;Mr. &quot;</span>, <span class="string">&quot;Mrs. &quot;</span>, <span class="string">&quot;Ms. &quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;Smith&quot;</span>, <span class="string">&quot;Jones&quot;</span>&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"> System.out.println(anArray.length); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>For your convenience, Java SE provides several methods for performing array manipulations <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="59.3ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 25531.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">common tasks, such as copying, sorting and searching arrays</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="433" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="919" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1797" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="2676" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3161" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3762" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4123" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4653" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="5122" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5644" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="6113" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="6558" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="7028" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="7600" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="8034" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="8610" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="9140" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="9609" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="10043" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="10528" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="11032" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11529" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="11875" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="12475" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="12956" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="13401" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="13870" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="14356" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="14807" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="15169" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="15514" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="16115" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="16595" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="17125" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="17725" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="18249" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="18718" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="19185" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="19714" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="20166" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="20599" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="21176" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="21521" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="22122" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="22602" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="23132" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="23583" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="24035" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="24564" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="25062" y="0"/>
</g>
</svg> in the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html" target="_blank">java.util.Arrays</a> class.</p>
<h4 id="·-enum-types">· Enum Types<a title="#·-enum-types" href="#·-enum-types"></a></h4>
<p>An <em>enum type</em> is a special data type that enables for a variable to be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Planet</span> </span>&#123;</span><br><span class="line">    MERCURY (<span class="number">3.303e+23</span>, <span class="number">2.4397e6</span>),</span><br><span class="line">    VENUS   (<span class="number">4.869e+24</span>, <span class="number">6.0518e6</span>),</span><br><span class="line">    EARTH   (<span class="number">5.976e+24</span>, <span class="number">6.37814e6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;   <span class="comment">// in kilograms</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius; <span class="comment">// in meters</span></span><br><span class="line">    Planet(<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mass = mass;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mass; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">radius</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> radius; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// universal gravitational constant  (m3 kg-1 s-2)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300E-11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> G * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">surfaceWeight</span><span class="params">(<span class="keyword">double</span> otherMass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> otherMass * surfaceGravity();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Usage: java Planet &lt;earth_weight&gt;&quot;</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> earthWeight = Double.parseDouble(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">double</span> mass = earthWeight/EARTH.surfaceGravity();</span><br><span class="line">        <span class="keyword">for</span> (Planet p : Planet.values())</span><br><span class="line">           System.out.printf(<span class="string">&quot;Your weight on %s is %f%n&quot;</span>,</span><br><span class="line">                             p, p.surfaceWeight(mass));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅱ.-operators">Ⅱ. Operators<a title="#ⅱ.-operators" href="#ⅱ.-operators"></a></h3>
<p>Operators are special symbols that perform specific operations on one, two, or three <em>operands</em>, and then return a result.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">Operators</th>
<th style="text-align:left">Precedence</th>
<th style="padding:0"></th>
<th style="padding:0"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">postfix</td>
<td style="text-align:left"><code>expr++</code> <code>expr--</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">unary</td>
<td style="text-align:left"><code>++expr</code> <code>--expr</code> <code>+expr</code> <code>-expr</code> <code>~</code> <code>!</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">multiplicative</td>
<td style="text-align:left"><code>* / %</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">additive</td>
<td style="text-align:left"><code>+ -</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">shift</td>
<td style="text-align:left"><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">relational</td>
<td style="text-align:left"><code>&lt; &gt; &lt;= &gt;= instanceof</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">equality</td>
<td style="text-align:left"><code>== !=</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">bitwise AND</td>
<td style="text-align:left"><code>&amp;</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">bitwise exclusive OR</td>
<td style="text-align:left"><code>^</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">bitwise inclusive OR</td>
<td style="text-align:left">`</td>
<td style="text-align:left">`</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">logical AND</td>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">logical OR</td>
<td style="text-align:left">`</td>
<td style="text-align:left"></td>
<td style="text-align:left">`</td>
</tr>
<tr>
<td style="text-align:left">ternary</td>
<td style="text-align:left"><code>? :</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">assignment</td>
<td style="text-align:left">`= += -= *= /= %= &amp;= ^=</td>
<td style="text-align:left">= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=`</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table></div></div><p>The operators in the table above are listed according to precedence order. Operators with higher precedence are evaluated before operators with relatively lower precedence.</p>
<p>Operators on the same line have equal precedence. When operators of equal precedence appear in the same expression, a rule must govern which is evaluated first.</p>
<p>All binary operators except for the assignment operators are evaluated from left to right; assignment operators are evaluated right to left.</p>
<h3 id="ⅲ.-expressions,-statements,-and-blocks">Ⅲ. Expressions, Statements, and Blocks<a title="#ⅲ.-expressions,-statements,-and-blocks" href="#ⅲ.-expressions,-statements,-and-blocks"></a></h3>
<h4 id="1)-expressions">1) Expressions<a title="#1)-expressions" href="#1)-expressions"></a></h4>
<p>An <em>expression</em> is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value. The data type of the value returned by an expression depends on the elements used in the expression.</p>
<h4 id="2)-statements">2) Statements<a title="#2)-statements" href="#2)-statements"></a></h4>
<p>A <em>statement</em> forms a complete unit of execution. The following types of expressions can be made into a statement by terminating the expression with a semicolon <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.328ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 1002.2 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`;`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMAIN-3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-3B" x="278" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="723" y="0"/>
</g>
</svg>.</p>
<ul>
<li>Assignment expressions</li>
<li>Any use of <code>++</code> or <code>--</code></li>
<li>Method invocations</li>
<li>Object creation expressions</li>
<li>Declaration statements</li>
<li>Control flow statements</li>
</ul>
<h4 id="3)-blocks">3) Blocks<a title="#3)-blocks" href="#3)-blocks"></a></h4>
<p>A <em>block</em> is a group of zero or more statements between balanced braces and can be used anywhere a single statement is allowed.</p>
<h3 id="ⅳ.-control-flow-statements">Ⅳ. Control Flow Statements<a title="#ⅳ.-control-flow-statements" href="#ⅳ.-control-flow-statements"></a></h3>
<p>This section describes the decision-making statements <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="38.639ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 16636.2 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`if-then`, `if-then-else`, `switch`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="624" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="1396" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="2397" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="2758" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3335" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3801" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="4402" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="4680" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="5126" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5404" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="5750" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="6522" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7523" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="7885" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8461" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="8928" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="9750" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="10751" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="11218" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="11516" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="11986" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="12452" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="12731" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="13176" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="13454" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="13924" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="14640" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="14986" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="15347" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="15781" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="16357" y="0"/>
</g>
</svg>, the looping statements <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="25.752ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 11087.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`for`, `while`, `do-while`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="829" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="1314" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="1766" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="2044" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="2489" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="2768" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="3484" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4061" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="4406" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4705" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="5171" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="5450" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="5895" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="6173" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6697" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="7405" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="8405" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="9122" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="9698" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="10044" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="10342" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="10809" y="0"/>
</g>
</svg>, and the branching statements <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="27.244ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 11729.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`break`, `continue`, `return`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="708" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1159" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1626" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="2155" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="2677" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="2955" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="3400" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="3679" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="4112" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4598" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="5198" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5560" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="5905" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="6506" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7078" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="7545" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="7823" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="8268" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="8547" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8998" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9465" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="9826" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="10399" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="10850" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="11451" y="0"/>
</g>
</svg></p>
<h4 id="1)-the-if-then-else-statement">1) The <code>if-then-else</code> Statement<a title="#1)-the-if-then-else-statement" href="#1)-the-if-then-else-statement"></a></h4>
<p>It tells your program to execute a certain section of code <em>only if</em> a particular test evaluates to <code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyBrakes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isMoving) &#123;</span><br><span class="line">        currentSpeed--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;The bicycle has already stopped!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="2)-the-switch-statement">2) The <code>switch</code> Statement<a title="#2)-the-switch-statement" href="#2)-the-switch-statement"></a></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> month = <span class="number">2</span>;</span><br><span class="line">        String monthString;</span><br><span class="line">        <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  monthString = <span class="string">&quot;January&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:  monthString = <span class="string">&quot;February&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:  monthString = <span class="string">&quot;March&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(monthString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>An <code>if-then-else</code> statement can test expressions based on ranges of values or conditions, whereas a <code>switch</code> statement tests expressions based only on a single integer, enumerated value, or <code>String</code> object.</p>
<h4 id="3)-the-while-and-do-while-statements">3) The while and do-while Statements<a title="#3)-the-while-and-do-while-statements" href="#3)-the-while-and-do-while-statements"></a></h4>
<p>The <code>while</code> statement evaluates <em>expression</em>, which must return a <code>boolean</code> value.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">11</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Count is: &quot;</span> + count);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Count is: &quot;</span> + count);</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (count &lt; <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4)-the-for-statement">4) The for Statement<a title="#4)-the-for-statement" href="#4)-the-for-statement"></a></h4>
<p>The <code>for</code> statement provides a compact way to iterate over a range of values.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;Count is: &quot;</span> + i);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>for</code> statement also has another form designed for iteration through <a href="https://docs.oracle.com/javase/tutorial/collections/index.html" target="_blank">Collections</a> and <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html" target="_blank">arrays</a> .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnhancedForDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="keyword">int</span>[] numbers = </span><br><span class="line">             &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> item : numbers) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;Count is: &quot;</span> + item);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5)-branching-statements">5) Branching Statements<a title="#5)-branching-statements" href="#5)-branching-statements"></a></h4>
<p><code>break</code> : An unlabeled <code>break</code> statement terminates the innermost <code>switch</code>, <code>for</code>, <code>while</code>, or <code>do-while</code> statement, but a labeled <code>break</code> terminates an outer statement.</p>
<p><code>continue</code>: The <code>continue</code> statement skips the current iteration of a <code>for</code>, <code>while</code> , or <code>do-while</code> loop. The unlabeled form skips to the end of the innermost loop’s body and evaluates the <code>boolean</code> expression that controls the loop. A labeled <code>continue</code> statement skips the current iteration of an outer loop marked with the given label.</p>
<p><code>return</code>: The <code>return</code> statement exits from the current method, and control flow returns to where the method was invoked.</p>
<h2 id="part.3-object-oriented-programming">Part.3 Object-Oriented Programming<a title="#part.3-object-oriented-programming" href="#part.3-object-oriented-programming"></a></h2>
<p>The principles of OOP can be found in the article <a href="https://oreodu.github.io/2020/09/06/20200906-Python-Basics-02/" target="_blank">Python Basics 02</a> .</p>
<h3 id="ⅰ.-class-and-object">Ⅰ. Class and Object<a title="#ⅰ.-class-and-object" href="#ⅰ.-class-and-object"></a></h3>
<p><em>Objects</em> consist of state and related behavior. An object stores its state in <em>fields</em> and exposes its behavior through <em>methods</em>. Methods operate on an object’s internal state and serve as the primary mechanism for object-to-object communication.</p>
<p>A <em>class</em> is the blueprint or prototype from which individual objects are created and includes fields <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="44.641ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 19220.3 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">class variables, constants, instance variables</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="433" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="732" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1261" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1731" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="2200" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2686" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="3215" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="3667" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4012" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="4542" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="4971" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5270" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5736" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="6206" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="6651" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="7084" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7570" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="8170" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="8640" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="9001" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="9531" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="10131" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="10493" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="10962" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11407" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="11753" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="12353" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="12823" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="13184" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="13714" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="14314" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14748" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="15214" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="15700" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="16229" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="16681" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="17026" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="17556" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="17985" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="18284" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="18750" y="0"/>
</g>
</svg>, nested classes and methods <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="33.524ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 14434 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">class methods, abstract method...</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-63" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="433" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="732" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1261" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1731" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="2200" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3079" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3545" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="3907" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="4483" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="4969" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5492" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="5962" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="6407" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="6936" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="7366" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7835" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="8197" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="8648" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="9178" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9611" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="9973" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="10851" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11318" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="11679" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="12256" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="12741" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="13265" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="13710" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="14155" y="0"/>
</g>
</svg>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The class body contains all the code that provides</span></span><br><span class="line"><span class="comment"> * for the life cycle of the objects created from the class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The class name, with the initial letter capitalized by convention.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// declarations for the fields that provide the state of the class and its objects</span></span><br><span class="line">    <span class="comment">// public modifier—the field is accessible from all classes.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cadence;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> speed;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// private modifier—the field is accessible only within its own class.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numberOfBicycles = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructors with or without arguments for initializing new objects</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cadence = <span class="number">20</span>;</span><br><span class="line">        speed = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bicycle</span><span class="params">(<span class="keyword">int</span> startCadence, <span class="keyword">int</span> startSpeed)</span> </span>&#123;</span><br><span class="line">        cadence = startCadence;</span><br><span class="line">        speed = startSpeed;</span><br><span class="line">        id = ++numberOfBicycles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// methods to implement the behavior of the class and its objects.</span></span><br><span class="line">    <span class="comment">// the first (or only) word in a method name should be a verb.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCadence</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        cadence = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use a construct called varargs to pass an arbitrary number of values to a method</span></span><br><span class="line">    <span class="comment">// The method can be called either with an array or with a sequence of arguments.</span></span><br><span class="line">    <span class="comment">// The code in the method body will treat the parameter as an array in either case.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speedUp</span><span class="params">(<span class="keyword">int</span>... increments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> increment:increments)&#123;</span><br><span class="line">            speed += increment;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumberOfBicycles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfBicycles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// access private fields indirectly by adding public methods that obtain them.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ClassDemo &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Bicycle myBike = <span class="keyword">new</span> Bicycle(<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// invokes the no-argument constructor and create a new object called yourBike</span></span><br><span class="line">        Bicycle yourBike = <span class="keyword">new</span> Bicycle(); </span><br><span class="line"></span><br><span class="line">        yourBike.speedUp(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1)-provide-a-constructor">1) Provide a constructor<a title="#1)-provide-a-constructor" href="#1)-provide-a-constructor"></a></h4>
<p>A class contains constructors that are invoked to create objects from the class blueprint. Constructor declarations look like method declarations—except that they use the name of the class and have no return type.</p>
<p>As with methods, the Java platform differentiates constructors on the basis of the number of arguments in the list and their types. We can create two different constructor with different arguments.</p>
<p>All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument constructor, called the <em>default constructor</em>. This default constructor calls the class parent’s no-argument constructor, or the <code>Object</code> constructor if the class has no other parent. If the parent has no constructor <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="20.856ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 8979.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`Object` does have one</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-4F" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-4F" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="1042" y="0"/>
 <use xlink:href="#E1-MJMATHI-6A" x="1471" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1884" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="2350" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="2784" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="3145" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="3424" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3947" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4433" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4899" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5369" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="5945" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="6475" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6960" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="7427" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7912" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8513" y="0"/>
</g>
</svg>, the compiler will reject the program.</p>
<p>There are two alternatives to using a constructor to initialize instance variables: initializer blocks and final methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// initializer blocks</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// whatever code is needed for initialization goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This approach can be used to share a block of code between multiple constructors.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// final method</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whatever</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> varType myVar = initializeInstanceVariable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> varType <span class="title">initializeInstanceVariable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// initialization code goes here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A <em>final method</em> cannot be overridden in a subclass. This is useful if subclasses might want to reuse the initialization method. The method is final because calling non-final methods during instance initialization can cause problems.</p>
<h4 id="2)-use-the-this-keyword">2) Use the <code>this</code> Keyword<a title="#2)-use-the-this-keyword" href="#2)-use-the-this-keyword"></a></h4>
<p>Within an instance method or a constructor, <code>this</code> is a reference to the <em>current object</em> — the object whose method or constructor is being called.</p>
<p>Using this with a Field: The most common reason for using the <code>this</code> keyword is because a field is shadowed<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="19.1ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 8223.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">with the same name</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-77" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="716" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1062" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="1423" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="2000" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="2361" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2938" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="3404" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3874" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="4403" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5282" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="5748" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="6349" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="6878" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7757" y="0"/>
</g>
</svg> by a method or constructor parameter.</p>
<p>Using this with a Constructor: From within a constructor, you can also use the this keyword to call another constructor in the same class which is called <em>explicit constructor invocation</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width, height;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3)-overloading-methods">3) Overloading Methods<a title="#3)-overloading-methods" href="#3)-overloading-methods"></a></h4>
<p>When we create a method that need various types of data <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="26.49ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 11405.3 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">strings, integers, and so on</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-73" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="469" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="831" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="1282" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="1628" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="2228" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2709" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="3178" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="3623" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3969" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4569" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4931" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="5397" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5878" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="6344" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="6796" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="7265" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7710" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="8240" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="8840" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="9364" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="9833" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="10319" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="10804" y="0"/>
</g>
</svg> in different situations, we can create methods with the same name but different parameter list. This can be supported by <em>overloading</em> methods in Java. They are differentiated by the number and the type of the arguments passed into the method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataArtist</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4)-covariant-return-type">4) Covariant return type<a title="#4)-covariant-return-type" href="#4)-covariant-return-type"></a></h4>
<p>A method returns to the code that invoked it when it completes all the statements in the method, reaches a return statement, or throws an exception. Any method declared <code>void</code> doesn’t return a value but we can use <code>return;</code> branch out of a control flow block and exit the method. The data type of the return value must match the method’s declared return type in the method that is not declared <code>void</code> .</p>
<p>When a method uses a class name as its return type, the class of the type of the returned object must be either a subclass of, or the exact class of, the return type. We can also override a method and define it to return a subclass of the original method. This technique, called <em>covariant return type</em>, means that the return type is allowed to vary in the same direction as the subclass.</p>
<h4 id="5)-pass-a-information-to-the-constructor-or-the-method">5) Pass a information to the constructor or the method<a title="#5)-pass-a-information-to-the-constructor-or-the-method" href="#5)-pass-a-information-to-the-constructor-or-the-method"></a></h4>
<p>When we declare a parameter to a method or a constructor, we provide a name for that parameter. This name is used within the method body to refer to the passed-in argument. If the name is the same with the field in the class, we can use <code>this</code> to access the field.</p>
<p>Primitive arguments, such as an <code>int</code> or a <code>double</code>, are passed into methods <em>by value</em>. This means that any changes to the values of the parameters exist only within the scope of the method. When the method returns, the parameters are gone and any changes to them are lost.</p>
<p>Reference data type parameters, such as objects, are also passed into methods <em>by value</em>. This means that when the method returns, the passed-in reference still references the same object as before. <em>However</em>, the values of the object’s fields <em>can</em> be changed in the method, if they have the proper access level.</p>
<p>If we want to pass a method into a method, then use a <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank">lambda expression</a> or a <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank">method reference</a>.</p>
<p>When invoke a method, the arguments used must match the declaration’s parameters in type and order.</p>
<h4 id="6)-creating-objects">6) Creating Objects<a title="#6)-creating-objects" href="#6)-creating-objects"></a></h4>
<p>· Declaring a Variable to Refer to an Object.</p>
<p><code>type name;</code> notifies the compiler that you will use <em>name</em> to refer to data whose type is <em>type</em>. With a primitive variable, this declaration also reserves the proper amount of memory for the variable.</p>
<p>· Instantiating a Class. Initializing an Object.</p>
<p>The <code>new</code> operator instantiates a class by allocating memory for a new object and returning a reference<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.329ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2725 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">8 bytes</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-38" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="930" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1427" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1789" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2255" y="0"/>
</g>
</svg> to that memory. The <code>new</code> operator also invokes the object constructor so it requires a single, postfix argument: a call to a constructor. Java first allocates a box of bits for each instance variable of class and fill them with a dfault value<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="10.056ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 4329.7 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">0, null, ... </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-30" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="945" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="1546" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="2118" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="2417" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="2715" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="3160" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="3605" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="4051" y="0"/>
</g>
</svg>. The construtor then fills every such box with some other value. The name of the constructor provides the name of the class to instantiate.</p>
<p>Typical memory usage for objects in java: Object overhead<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.492ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 3225.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">16 bytes</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/>
<path stroke-width="1" id="E1-MJMAIN-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-31"/>
 <use xlink:href="#E1-MJMAIN-36" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="1001" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="1430" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1928" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2289" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2756" y="0"/>
</g>
</svg>, memory for each instance variable, pointer to enclosing class<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.329ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 2725 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">8 bytes</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-38" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="500" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="930" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1427" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1789" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2255" y="0"/>
</g>
</svg> and padding<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="34.974ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 15058 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">each objects uses a multiple of 8 bytes</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMAIN-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-65" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="466" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="996" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="1429" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="2006" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="2491" y="0"/>
 <use xlink:href="#E1-MJMATHI-6A" x="2921" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3333" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="3800" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4233" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4595" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="5064" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5637" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6106" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="6573" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7042" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="7572" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="8450" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="9023" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9321" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="9683" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="10028" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="10532" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="10830" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="11297" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="11782" y="0"/>
 <use xlink:href="#E1-MJMAIN-38" x="12333" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="12833" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="13263" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="13760" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14122" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="14588" y="0"/>
</g>
</svg>.</p>
<p>Objects of the same type have their own copy of the same instance fields. So if we want to access the fields or methods outside the class we have to use them in such way: <code>objectReference.fieldName</code> and <code>objectReference.methodName(argumentList)</code></p>
<p>The Java runtime environment deletes objects when there are no more references to that object. This process is called <em>garbage collection</em>.</p>
<h4 id="7)-controlling-access-to-members-of-a-class">7) Controlling Access to Members of a Class<a title="#7)-controlling-access-to-members-of-a-class" href="#7)-controlling-access-to-members-of-a-class"></a></h4>
<p>Access level modifiers determine whether other classes can use a particular field or invoke a particular method.</p>
<p><strong>Access Levels</strong></p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">Modifier</th>
<th style="text-align:left">Class</th>
<th style="text-align:left">Package</th>
<th style="text-align:left">Subclass</th>
<th style="text-align:left">World</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>public</code></td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
</tr>
<tr>
<td style="text-align:left"><code>protected</code></td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">N</td>
</tr>
<tr>
<td style="text-align:left">no modifier<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="18.277ex" height="2.509ex" style="vertical-align: -0.671ex; margin-left: -0.089ex;" viewbox="-38.5 -791.3 7869.4 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">package-private</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-70" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="503" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="1033" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="1466" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1988" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="2517" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2998" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="3686" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="4687" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="5190" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5642" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="5987" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="6473" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7002" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7364" y="0"/>
</g>
</svg></td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">N</td>
<td style="text-align:left">N</td>
</tr>
<tr>
<td style="text-align:left"><code>private</code></td>
<td style="text-align:left">Y</td>
<td style="text-align:left">N</td>
<td style="text-align:left">N</td>
<td style="text-align:left">N</td>
</tr>
</tbody>
</table></div></div><h4 id="8)--static-keyword">8)  <code>static</code> keyword<a title="#8)--static-keyword" href="#8)--static-keyword"></a></h4>
<p>Fields that have the <code>static</code> modifier in their declaration are called <em>static fields</em> or <em>class variables</em>. They are associated with the class, rather than with any object. Every instance of the class shares a class variable, which is in one fixed location in memory. Any object can change the value of a class variable, but class variables can also be manipulated without creating an instance of the class. Class variables are referenced by the class name itself: <code>ClassName.fieldName</code></p>
<p>Complicated initialization of instance variables can be done through constructors, to provide the same capability for class variables, the Java programming language includes <em>static initialization blocks</em> or <em>private static method</em>. The advantage of private static methods is that they can be reused later if you need to reinitialize the class variable.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// static initialization block</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// whatever code is needed for initialization goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whatever</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> varType myVar = initializeClassVariable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> varType <span class="title">initializeClassVariable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// initialization code goes here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Static methods</em>, which have the <code>static</code> modifier in their declarations, should be invoked with the class name, without the need for creating an instance of the class. <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="34.973ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 15057.7 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`ClassName.methodName(args)`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-43" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1039" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1337" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1867" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2336" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="2806" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3694" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="4224" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5102" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="5569" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="6014" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6892" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7359" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="7720" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="8297" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="8782" y="0"/>
 <use xlink:href="#E1-MJMATHI-4E" x="9306" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="10194" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="10724" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="11602" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="12069" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="12458" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="12988" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="13439" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="13920" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="14389" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="14779" y="0"/>
</g>
</svg>. A common use for static methods is to access or initialize static fields. Class methods <strong>cannot</strong> access instance variables or instance methods directly—they must accesss instance variables via  a specific instance reference. Also, class methods cannot use the <code>this</code> keyword as there is no instance for <code>this</code> to refer to.</p>
<p>The <code>static</code> modifier, in combination with the <code>final</code> modifier, is also used to define constants. The <code>final</code> modifier indicates that the value of this field cannot change. By convention, the names of constant values are spelled in uppercase letters. If the name is composed of more than one word, the words are separated by an underscore <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="1.162ex" height="0.509ex" style="vertical-align: -0.338ex; margin-top: -0.227ex;" viewbox="0 -73.8 500.5 219.3" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">\_</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-5F" d="M0 -62V-25H499V-62H0Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-5F" x="0" y="0"/>
</g>
</svg>.</p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="199.881ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 86059.7 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">If a primitive type or a string is defined as a constant and the value is known at compile time, the compiler replaces the constant name everywhere in the code with its value. This is called a _compile-time constant_. </title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMATHI-54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-49" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="504" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1055" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="1584" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="2088" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="2539" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="2885" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="3763" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4109" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4470" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="4816" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5301" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="5768" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="6129" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="6627" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7130" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="7597" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="8082" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="8534" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="9063" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9533" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="9894" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="10346" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="10691" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="11292" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11772" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="12118" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="12587" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="13111" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="13577" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="14128" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="14473" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="15074" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="15540" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="16064" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="16593" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="17063" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="17592" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="18026" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="18511" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="19112" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="19581" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="19943" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="20472" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="21073" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="21434" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="21964" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="22564" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="23088" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="23449" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="24026" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="24492" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="24978" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="25507" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="25806" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="26378" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="26845" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="27190" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="27660" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="28181" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="28782" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="29267" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="29984" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="30584" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="31114" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="31475" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="31909" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="32394" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="33273" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="33776" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="34122" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="34420" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="34887" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="35248" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="35594" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="36472" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="36939" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="37384" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="37745" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="38322" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="38788" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="39222" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="39707" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="40586" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="41089" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="41435" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="41733" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="42200" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="42651" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="43103" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="43569" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="44073" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="44371" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="44901" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="45334" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="45801" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="46270" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="46632" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="47208" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="47675" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="48108" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="48594" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="49194" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="49664" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="50025" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="50555" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="51155" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="51517" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="52117" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="52647" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="53525" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="53992" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="54458" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="54944" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="55410" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="55862" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="56359" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="57076" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="57652" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="58119" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="58570" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="59037" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="59382" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="59983" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="60344" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="60921" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="61387" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="61821" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="62306" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="62830" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="63296" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="64013" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="64358" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="64720" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="65296" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="65642" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="66003" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="66473" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="66958" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="67488" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="67786" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="68359" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="68825" y="0"/>
 <use xlink:href="#E1-MJMATHI-54" x="69270" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="69975" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="70551" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="70897" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="71366" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="71712" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="72181" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="72615" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="73144" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="73443" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="73741" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="74208" y="0"/>
<g transform="translate(74731,0)">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-63" x="748" y="-213"/>
</g>
 <use xlink:href="#E1-MJMATHI-6F" x="75667" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="76153" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="77031" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="77535" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="77880" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="78179" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="78868" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="79868" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="80230" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="80575" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="81454" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="81920" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="82354" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="82839" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="83440" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="83909" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="84271" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="84800" y="0"/>
<g transform="translate(85401,0)">
 <use xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-2E" x="511" y="-213"/>
</g>
</g>
</svg></p>
<h3 id="ⅱ.-more-about-class">Ⅱ. More about class<a title="#ⅱ.-more-about-class" href="#ⅱ.-more-about-class"></a></h3>
<h4 id="1)--nested-class">1)  Nested Class<a title="#1)--nested-class" href="#1)--nested-class"></a></h4>
<p>Nested classes are divided into two categories: static and non-static.</p>
<p>Nested classes that are declared <code>static</code> are called <em>static nested classes</em>. As with class methods and variables, a static nested class is associated with its outer class so they do not have access to other instance members of the enclosing class. It can use them only through an object reference. To create an object for the static nested class: <code>OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();</code></p>
<p>Non-static nested classes are called <em>inner classes</em>. As with instance methods and variables, an inner class is associated with an instance of its enclosing class so they have access to other members of the enclosing class, even if they are declared private and it cannot define any static members itself. An instance of <code>InnerClass</code> can exist only within an instance of <code>OuterClass</code>. There are two special kinds of inner classes: local classes and anonymous classes. To instantiate an inner class: <code>OuterClass.InnerClass innerObject = outerObject.new InnerClass();</code></p>
<p>Nested class is a way of logically grouping classes that are only used in one place and increases encapsulation.</p>
<h4 id="2)-local-class">2) Local Class<a title="#2)-local-class" href="#2)-local-class"></a></h4>
<p>Local classes are classes that are defined in a <em>block</em>, which is a group of zero or more statements between balanced braces. For example, you can define a local class in a method body, a <code>for</code> loop, or an <code>if</code> clause.</p>
<p>Local classes has access to the members of its enclosing class. However, Local classes in static methods can only refer to static members of the enclosing class.</p>
<p>Because they have access to instance members of the enclosing block. Consequently, they cannot contain most kinds of static declarations. However, they can have static members provided that they are constant variables. <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="137.846ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 59350.3 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">A _constant variable_ is a variable of primitive type or type `String` that is declared final and initialized with a compile-time constant expression.</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-41" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-63" x="1061" y="-213"/>
 <use xlink:href="#E1-MJMATHI-6F" x="1157" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="1642" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2243" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="2712" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3074" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3603" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4204" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="4565" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="5051" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="5580" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="6032" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="6377" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="6907" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="7336" y="0"/>
<g transform="translate(7635,0)">
 <use xlink:href="#E1-MJMATHI-65" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-69" x="659" y="-213"/>
</g>
 <use xlink:href="#E1-MJMATHI-73" x="8445" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="8915" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="9444" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="9930" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="10459" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="10911" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="11256" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="11786" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="12215" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="12514" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="12980" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="13466" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="14016" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="14520" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="14971" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="15317" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="16195" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="16541" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="16902" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="17248" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="17733" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="18200" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="18561" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="19059" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="19562" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="20029" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="20514" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="20966" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="21327" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="21825" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="22328" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="22795" y="0"/>
 <use xlink:href="#E1-MJMATHI-53" x="23073" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="23719" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="24080" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="24532" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="24877" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="25478" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="25958" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="26237" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="26598" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="27175" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="27704" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="28066" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="28411" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="28881" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="29404" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="29871" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="30304" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="30603" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="31132" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="31584" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="32050" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="32574" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="33124" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="33470" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="34070" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="34600" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="34898" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="35428" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="36028" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="36552" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="36897" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="37498" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="37843" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="38205" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="38550" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="39080" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="39378" y="0"/>
 <use xlink:href="#E1-MJMATHI-7A" x="39724" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="40192" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="40659" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="41182" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="41899" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="42244" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="42606" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="43182" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="43712" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="44145" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="44631" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="45509" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="46013" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="46358" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="46657" y="0"/>
 <use xlink:href="#E1-MJMAIN-2212" x="47346" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="48346" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="48708" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="49053" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="49932" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="50398" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="50832" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="51317" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="51918" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="52387" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="52749" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="53278" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="53879" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="54240" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="54707" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="55279" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="55783" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="56234" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="56701" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="57170" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="57640" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="57985" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="58471" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="59071" y="0"/>
</g>
</svg></p>
<p>They also can access local variables of the enclosing block that are final or <em>effectively final</em> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="33.894ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 14593 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">never changed after it is initialized</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-7A" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="600" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="1067" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1552" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="2019" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="2470" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="2904" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3480" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4010" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="4610" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5091" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="5557" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="6081" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="6610" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7161" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7522" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="7989" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8440" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="8786" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="9147" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="9493" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="9962" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="10308" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="10908" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11254" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11615" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="11961" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="12490" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="12789" y="0"/>
 <use xlink:href="#E1-MJMATHI-7A" x="13134" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="13603" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="14069" y="0"/>
</g>
</svg> and can access the method’s parameters.</p>
<p>We cannot declare an interface inside a block; interfaces are inherently static.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inside a method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayGoodbyeInEnglish</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">EnglishGoodbye</span> </span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String farewell = <span class="string">&quot;Bye bye&quot;</span>;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayGoodbye</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             System.out.println(name + farewell);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     EnglishGoodbye myEnglishGoodbye = <span class="keyword">new</span> EnglishGoodbye();</span><br><span class="line">     myEnglishGoodbye.sayGoodbye();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="3)-anonymous-classes">3) Anonymous classes<a title="#3)-anonymous-classes" href="#3)-anonymous-classes"></a></h4>
<p>Anonymous classes enable us to declare and instantiate a class at the same time. They are like local classes except that they do not have a name. Use them if you need to use a local class only once.</p>
<p>An anonymous class has access to the members of its enclosing class and cannot access local variables in its enclosing scope that are not declared as <code>final</code> or effectively final. We cannot declare static initializers, member interfaces or <strong>constructors</strong> in an anonymous class but an anonymous class can have static members provided that they are constant variables.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAnonymousClasses</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// local class</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">EnglishGreeting</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">            String name = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HelloWorld englishGreeting = <span class="keyword">new</span> EnglishGreeting();</span><br><span class="line">        <span class="comment">// anonymous class</span></span><br><span class="line">        <span class="comment">// an interface to implement or a class to extend</span></span><br><span class="line">        HelloWorld frenchGreeting = <span class="keyword">new</span> HelloWorld() &#123;</span><br><span class="line">            String name = <span class="string">&quot;tout le monde&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;tout le monde&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greetSomeone</span><span class="params">(String someone)</span> </span>&#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Salut &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        englishGreeting.greet();</span><br><span class="line">        frenchGreeting.greetSomeone(<span class="string">&quot;Fred&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        HelloWorldAnonymousClasses myApp =</span><br><span class="line">            <span class="keyword">new</span> HelloWorldAnonymousClasses();</span><br><span class="line">        myApp.sayHello();</span><br><span class="line">    &#125;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4)-lambda-expressions">4) Lambda expressions<a title="#4)-lambda-expressions" href="#4)-lambda-expressions"></a></h4>
<p>Lambda expressions enable us to treat functionality as method argument, or code as data and express instances of single-method classes more compactly.</p>
<p>Lambda expressions are lexically scoped. This means that they do not inherit any names from a supertype or introduce a new level of scoping. Declarations in a lambda expression are interpreted just as they are in the enclosing environment. Consequently, you can directly access fields, methods, and local variables of the enclosing scope. Local variables referenced from a lambda expression must be final or effectively final.</p>
<p>To determine the type of a lambda expression, the Java compiler uses the target type<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="36.958ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 15912.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">the data type that these methods expect</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="361" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="938" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="1404" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1928" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="2457" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2819" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3348" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="3710" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="4207" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4711" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="5177" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5539" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="6115" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="6645" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7006" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="7368" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7944" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="8411" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8880" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="9347" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="10225" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="10692" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="11053" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="11630" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="12115" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="12639" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="13108" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="13575" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="14147" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14651" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="15117" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="15551" y="0"/>
</g>
</svg> of the context or situation in which the lambda expression was found. It follows that you can only use lambda expressions in situations in which the Java compiler can determine a target type: Variable declarations, Assignments, Return statements, Array initializers, Method or constructor arguments, Lambda expression bodies, Conditional expressions, <code>?:</code>, Cast expressions.</p>
<p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank">See more details.</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CheckPerson</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Specify Search Criteria Code in an Anonymous Class</span></span><br><span class="line">printPersons(</span><br><span class="line">    roster,</span><br><span class="line">    <span class="keyword">new</span> CheckPerson() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p.getGender() == Person.Sex.MALE</span><br><span class="line">                &amp;&amp; p.getAge() &gt;= <span class="number">18</span></span><br><span class="line">                &amp;&amp; p.getAge() &lt;= <span class="number">25</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Specify Search Criteria Code with a Lambda Expression</span></span><br><span class="line">printPersons(</span><br><span class="line">    roster,</span><br><span class="line">    (Person p) -&gt; p.getGender() == Person.Sex.MALE</span><br><span class="line">        &amp;&amp; p.getAge() &gt;= <span class="number">18</span></span><br><span class="line">        &amp;&amp; p.getAge() &lt;= <span class="number">25</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use Standard Functional Interfaces with Lambda Expressions</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printPersonsWithPredicate(</span><br><span class="line">    roster,</span><br><span class="line">    p -&gt; p.getGender() == Person.Sex.MALE</span><br><span class="line">        &amp;&amp; p.getAge() &gt;= <span class="number">18</span></span><br><span class="line">        &amp;&amp; p.getAge() &lt;= <span class="number">25</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Aggregate Operations That Accept Lambda Expressions as Parameters</span></span><br><span class="line">roster</span><br><span class="line">    .stream()</span><br><span class="line">    .filter(</span><br><span class="line">        p -&gt; p.getGender() == Person.Sex.MALE</span><br><span class="line">            &amp;&amp; p.getAge() &gt;= <span class="number">18</span></span><br><span class="line">            &amp;&amp; p.getAge() &lt;= <span class="number">25</span>)</span><br><span class="line">    .map(p -&gt; p.getEmailAddress())</span><br><span class="line">    .forEach(email -&gt; System.out.println(email));</span><br></pre></td></tr></table></figure>
<p>For more aggregate operations, see the <a href="https://docs.oracle.com/javase/tutorial/collections/streams/index.html" target="_blank">here</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Method References: refer to the existing method by name</span></span><br><span class="line">Person[] rosterAsArray = roster.toArray(<span class="keyword">new</span> Person[roster.size()]);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonAgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person a, Person b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.getBirthday().compareTo(b.getBirthday());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(rosterAsArray, <span class="keyword">new</span> PersonAgeComparator());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Arrays.sort(rosterAsArray,</span></span><br><span class="line"><span class="comment">    (Person a, Person b) -&gt; &#123;</span></span><br><span class="line"><span class="comment">        return a.getBirthday().compareTo(b.getBirthday());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Arrays.sort(rosterAsArray,</span></span><br><span class="line"><span class="comment">    (a, b) -&gt; Person.compareByAge(a, b)</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Arrays.sort(rosterAsArray, Person::compareByAge);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">IntegerMath</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operateBinary</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, IntegerMath op)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> op.operation(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Calculator myApp = <span class="keyword">new</span> Calculator();</span><br><span class="line">        IntegerMath addition = (a, b) -&gt; a + b;</span><br><span class="line">        IntegerMath subtraction = (a, b) -&gt; a - b;</span><br><span class="line">        System.out.println(<span class="string">&quot;40 + 2 = &quot;</span> +</span><br><span class="line">            myApp.operateBinary(<span class="number">40</span>, <span class="number">2</span>, addition));</span><br><span class="line">        System.out.println(<span class="string">&quot;20 - 10 = &quot;</span> +</span><br><span class="line">            myApp.operateBinary(<span class="number">20</span>, <span class="number">10</span>, subtraction));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When to Use Nested Classes, Local Classes, Anonymous Classes, and Lambda Expressions, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/whentouse.html" target="_blank">see more from here</a>.</p>
<p>A namespace that organizes classes and interfaces by functionality is called a <em>package</em>. And the Java platform provides an enormous class library <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="15.787ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 6797 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">a set of packages</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-61" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="529" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="999" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1465" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="1827" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="2312" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="2863" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3366" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="3896" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="4329" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4851" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="5380" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5861" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="6327" y="0"/>
</g>
</svg> suitable for use in applications. Application Programming Interface <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.66ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2006.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">API</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/>
<path stroke-width="1" id="E1-MJMATHI-50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/>
<path stroke-width="1" id="E1-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-41" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-50" x="750" y="0"/>
 <use xlink:href="#E1-MJMATHI-49" x="1502" y="0"/>
</g>
</svg> provided by the Java platform: <a href="https://docs.oracle.com/javase/8/docs/api/index.html" target="_blank">Java Platform API Specification</a> .</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Basics 02</title>
    <url>/2020/20200923-Java-Basics-02/</url>
    <content><![CDATA[<h1 id="java-basics-02">Java Basics 02<a title="#java-basics-02" href="#java-basics-02"></a></h1>
<p><strong>· materials:</strong></p>
<p>· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a></p>
<p>· <a href="https://docs.oracle.com/javase/tutorial/" target="_blank">Java Tutorial</a></p>
<p>· <a href="https://www.oracle.com/java/technologies/language-environment.html" target="_blank">The Java Language Environment</a> by <em>James Gosling</em> and <em>Henry McGilton</em></p>
<p>· Wikipedia</p>
<p>· <a href="https://google.github.io/styleguide/javaguide.html" target="_blank">Google Java Style Guide</a></p>
<h1 id="part.1-interfaces">Part.1 Interfaces<a title="#part.1-interfaces" href="#part.1-interfaces"></a></h1>
<p>A collection of methods with no implementation is called an <em>interface</em>. Methods form the object’s <em>interface</em> with the outside world. The interface is a blueprint of a class and is a mechanism to achieve abstraction.</p>
<h3 id="ⅰ.-defining-an-interface">Ⅰ. Defining an interface<a title="#ⅰ.-defining-an-interface" href="#ⅰ.-defining-an-interface"></a></h3>
<p>An <em>interface</em> is a reference type that can contain <em>only</em> constants, abstract methods, default methods, static methods, and nested types <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="25.665ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 11050.1 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">note: not including fields</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMAIN-3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="600" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1086" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1447" y="0"/>
 <use xlink:href="#E1-MJMAIN-3A" x="2191" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="2748" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3348" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3834" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4195" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4541" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="5141" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="5575" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="5873" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="6446" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="6969" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7315" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="7915" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="8396" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8946" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9292" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="9758" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="10057" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="10580" y="0"/>
</g>
</svg>. Method bodies exist only for default methods and static methods.</p>
<p>Empty interfaces<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="16.679ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 7181 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">without methods</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-77" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="716" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1062" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="1423" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="2000" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="2485" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3058" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="3419" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4298" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4764" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5126" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5702" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="6188" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="6711" y="0"/>
</g>
</svg> can be used as types and to mark classes without requiring any particular method implementations. For an example of a useful empty interface, see <code>java.io.Serializable.</code></p>
<p>All abstract, default, and static methods in an interface are implicitly <code>public</code> and all constant values defined are implicitly <code>public</code>, <code>static</code>, and <code>final</code>. Interfaces cannot be instantiated—they can only be <em>implemented</em> by classes or <em>extended</em> by other interfaces and they can extend any number of other interfaces.</p>
<p>Default method: defined in the interface with the keyword <code>defualt</code> and enable you to add new functionality with implementation to the interfaces and ensure binary compatibility with code written for older versions of those interfaces. Implementation class can override the default method.</p>
<p>For more information about default method <a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank">here</a> or <a href="https://blog.codefx.org/java/everything-about-default-methods/" target="_blank">here</a>.</p>
<p>Static method: defined in the interface with the keyword <code>static</code> and contain the complete definition of the function and cannot be overridden or changed in the implementation class.</p>
<p>Abstract method: declared without an implementation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestInterface</span> </span>&#123; </span><br><span class="line">    <span class="comment">// abstract method </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span> <span class="params">(<span class="keyword">int</span> a)</span></span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// static method </span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showStatic</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;Static Method Executed&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// default method </span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">showDefault</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;Default Method Executed&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> <span class="keyword">implements</span> <span class="title">TestInterface</span> </span>&#123; </span><br><span class="line">    <span class="comment">// Implementation of square abstract method </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span> <span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">        System.out.println(a*a); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; </span><br><span class="line">        TestClass d = <span class="keyword">new</span> TestClass(); </span><br><span class="line">        d.square(<span class="number">4</span>);  <span class="comment">// 16</span></span><br><span class="line">        d.showDefault(); <span class="comment">// Default Method Executed</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Static method executed </span></span><br><span class="line">        TestInterface.showStatic(); <span class="comment">// Static Method Executed</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅱ.-implementing-an-interface">Ⅱ. Implementing an Interface<a title="#ⅱ.-implementing-an-interface" href="#ⅱ.-implementing-an-interface"></a></h3>
<p>To declare a class that implements an interface, we should include an <code>implements</code> clause in the class declaration. The class can implement more than one interface. By convention, the <code>implements</code> clause follows the <code>extends</code> clause, if there is one.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Relatable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this (object calling isLargerThan) and other must be instances of </span></span><br><span class="line">    <span class="comment">// the same class returns 1, 0, -1 if this is greater than, </span></span><br><span class="line">    <span class="comment">// equal to, or less than other</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">isLargerThan</span><span class="params">(Relatable other)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectanglePlus</span> <span class="keyword">implements</span> <span class="title">Relatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> Point origin;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RectanglePlus</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        origin = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        width = w;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RectanglePlus</span><span class="params">(Point p, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        origin = p;</span><br><span class="line">        width = w;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a method for computing the area of the rectangle</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a method required to implement the Relatable interface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">isLargerThan</span><span class="params">(Relatable other)</span> </span>&#123;</span><br><span class="line">        RectanglePlus otherRect = (RectanglePlus)other;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getArea() &lt; otherRect.getArea())</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getArea() &gt; otherRect.getArea())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;               </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we want to be able to compare the size of similar objects instantiated from the class and there is some way to compare the relative “size” of them, the class that instantiates them should and can implement <code>Relatable</code> interface.</p>
<h3 id="ⅲ.-using-an-interface-as-a-type">Ⅲ. Using an Interface as a Type<a title="#ⅲ.-using-an-interface-as-a-type" href="#ⅲ.-using-an-interface-as-a-type"></a></h3>
<p>Because interface is a reference data type so we can use the interface name as a data type, However if a reference variable whose type is an interface, any objects assigned to it should be an instance of the class that implements the interface and its value can reference any object that is instantiated from any class that implements the interface. This also means that an object can have multiple types: the type of its own class and the types of all the interfaces that the class implements.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Any objects that are instantiated from a class that implements Relatable.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">findLargest</span><span class="params">(Object object1, Object object2)</span> </span>&#123;</span><br><span class="line">   Relatable obj1 = (Relatable)object1;</span><br><span class="line">   Relatable obj2 = (Relatable)object2;</span><br><span class="line">   <span class="keyword">if</span> ((obj1).isLargerThan(obj2) &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> object1;</span><br><span class="line">   <span class="keyword">else</span> </span><br><span class="line">      <span class="keyword">return</span> object2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When the classes implement <code>Relatable</code>, objects instantiated from those classes can be of both their own class <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="13.009ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 5601 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">or superclass</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6F" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="485" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="937" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="1406" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="1979" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2482" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="2949" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="3400" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3834" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4132" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4662" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5131" y="0"/>
</g>
</svg> type and a <code>Relatable</code> type. This gives them some of the advantages of multiple inheritance, where they can have behavior from both a superclass and an interface.</p>
<h3 id="ⅳ.-evolving-interfaces">Ⅳ. Evolving Interfaces<a title="#ⅳ.-evolving-interfaces" href="#ⅳ.-evolving-interfaces"></a></h3>
<p>Normally, once we finished developing the interface we cannot modify it because all the classes that implemented the interface will break. So try to anticipate all uses for the interface and specify it completely from the beginning. However, you have several other options.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a DoItPlus interface that extends DoIt</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DoItPlus</span> <span class="keyword">extends</span> <span class="title">DoIt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">didItWork</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">double</span> x, String s)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// define new methods as default methods or static methods.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DoIt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">double</span> x)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">doSomethingElse</span><span class="params">(String s)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">didItWork</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">double</span> x, String s)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Method body </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Users who have classes that implement interfaces enhanced with new default or static methods do not have to modify or recompile them to accommodate the additional methods.</p>
<h3 id="ⅴ.-enhance-the-interface">Ⅴ. Enhance the interface<a title="#ⅴ.-enhance-the-interface" href="#ⅴ.-enhance-the-interface"></a></h3>
<p>Interface can be enhanced with default methods, static methods, lambda expressions, and method references to create more expressive library methods whose functionality programmers can quickly deduce by looking at how they are invoked. See more details <a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank">here</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardDeck</span> <span class="keyword">implements</span> <span class="title">Deck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Card&gt; entireDeck;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;Card&gt; c)</span> </span>&#123;</span><br><span class="line">    Collections.sort(entireDeck, c);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortByRankThenSuit</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Card</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Card firstCard, Card secondCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> compVal =</span><br><span class="line">            firstCard.getRank().value() - secondCard.getRank().value();</span><br><span class="line">        <span class="keyword">if</span> (compVal != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> compVal;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> firstCard.getSuit().value() - secondCard.getSuit().value(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">StandardDeck myDeck = <span class="keyword">new</span> StandardDeck();</span><br><span class="line">myDeck.shuffle();</span><br><span class="line">myDeck.sort(<span class="keyword">new</span> SortByRankThenSuit());</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StandardDeck myDeck = <span class="keyword">new</span> StandardDeck();</span><br><span class="line">myDeck.shuffle();</span><br><span class="line">myDeck.sort(</span><br><span class="line">    (firstCard, secondCard) -&gt;</span><br><span class="line">        firstCard.getRank().value() - secondCard.getRank().value()</span><br><span class="line">); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// static method comparing in the Comparator interface</span></span><br><span class="line"><span class="comment">// compares any object that can return a numerical value from a method</span></span><br><span class="line"><span class="comment">myDeck.sort(Comparator.comparing((card) -&gt; card.getRank()));  </span></span><br><span class="line"><span class="comment">myDeck.sort(Comparator.comparing(Card::getRank));  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StandardDeck myDeck = <span class="keyword">new</span> StandardDeck();</span><br><span class="line">myDeck.shuffle();</span><br><span class="line">myDeck.sort(</span><br><span class="line">    (firstCard, secondCard) -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> compare =</span><br><span class="line">            firstCard.getRank().value() - secondCard.getRank().value();</span><br><span class="line">        <span class="keyword">if</span> (compare != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> compare;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> firstCard.getSuit().value() - secondCard.getSuit().value();</span><br><span class="line">    &#125;      </span><br><span class="line">); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// the default method thenComparing</span></span><br><span class="line"><span class="comment">myDeck.sort(</span></span><br><span class="line"><span class="comment">    Comparator</span></span><br><span class="line"><span class="comment">        .comparing(Card::getRank)</span></span><br><span class="line"><span class="comment">        .thenComparing(Comparator.comparing(Card::getSuit)));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//  the default method reversed      </span></span><br><span class="line"><span class="comment">myDeck.sort(</span></span><br><span class="line"><span class="comment">    Comparator.comparing(Card::getRank)</span></span><br><span class="line"><span class="comment">        .reversed()</span></span><br><span class="line"><span class="comment">        .thenComparing(Comparator.comparing(Card::getSuit)));</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="part.2-inheritance">Part.2 Inheritance<a title="#part.2-inheritance" href="#part.2-inheritance"></a></h1>
<p>Common behavior can be defined in a superclass and <em>inherited</em> into a subclass using the <code>extends</code> keyword. Every class has one and only one direct superclass <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="110.773ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 47693.6 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">[why single inheritance?](https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html)</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMAIN-3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"/>
<path stroke-width="1" id="E1-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMAIN-3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMAIN-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMAIN-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-5B" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="995" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="1571" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2069" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="2538" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="2884" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="3484" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3965" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="4263" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4730" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="5075" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5676" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="6252" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="6719" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="7170" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7516" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7877" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="8407" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="9007" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9441" y="0"/>
 <use xlink:href="#E1-MJMAIN-3F" x="9907" y="0"/>
 <use xlink:href="#E1-MJMAIN-5D" x="10380" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="10658" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="11048" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11624" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11986" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="12347" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="12851" y="0"/>
 <use xlink:href="#E1-MJMAIN-3A" x="13598" y="0"/>
 <use xlink:href="#E1-MJMAIN-2F" x="14154" y="0"/>
 <use xlink:href="#E1-MJMAIN-2F" x="14655" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="15155" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="15679" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="16164" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="16598" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="17067" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="17512" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="17998" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="18449" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="18979" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="19412" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="19711" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="20177" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="20622" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="21056" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="21541" y="0"/>
 <use xlink:href="#E1-MJMAIN-2F" x="22420" y="0"/>
 <use xlink:href="#E1-MJMATHI-6A" x="22920" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="23333" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="23862" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="24348" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="24877" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="25347" y="0"/>
 <use xlink:href="#E1-MJMAIN-2F" x="25813" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="26314" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="26675" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="27248" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="27609" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="28095" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="28546" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="28892" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="29421" y="0"/>
 <use xlink:href="#E1-MJMAIN-2F" x="29720" y="0"/>
 <use xlink:href="#E1-MJMATHI-6A" x="30220" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="30633" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="31162" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="31648" y="0"/>
 <use xlink:href="#E1-MJMAIN-2F" x="32177" y="0"/>
 <use xlink:href="#E1-MJMATHI-49" x="32678" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="33182" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="33712" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="34312" y="0"/>
 <use xlink:href="#E1-MJMATHI-49" x="34836" y="0"/>
 <use xlink:href="#E1-MJMAIN-2F" x="35340" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="35841" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="36719" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="37292" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="37590" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="37952" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="38297" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="38801" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="39099" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="39566" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="39911" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="40512" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="41088" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="41555" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="42006" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="42352" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="42713" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="43243" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="43843" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="44277" y="0"/>
 <use xlink:href="#E1-MJMAIN-2E" x="44743" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="45189" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="45765" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="46127" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="47005" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="47304" y="0"/>
</g>
</svg>. In the absence of any other explicit superclass, every class is implicitly a subclass of <code>Object</code>, and each superclass has the potential for an unlimited number of <em>subclasses</em>.</p>
<p><img src="https://i.loli.net/2020/09/24/WegZxS3bOYwk5R4.gif" alt="classes-object" class="φcx"></p>
<p><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="20.814ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 8961.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">From Java Tutorials</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-46" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="749" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="1201" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1686" y="0"/>
 <use xlink:href="#E1-MJMATHI-4A" x="2565" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3198" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="3728" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4213" y="0"/>
 <use xlink:href="#E1-MJMATHI-54" x="4743" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="5447" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="6020" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6381" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="6867" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="7318" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7664" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="8193" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="8492" y="0"/>
</g>
</svg></p>
<p>A subclass inherits all of the <em>public</em> and <em>protected</em> members<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="34.801ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 14983.8 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">fields, methods, and nested classes</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-66" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="550" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="896" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1362" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="1661" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2184" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="2654" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="3099" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3977" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4444" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="4805" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5382" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="5867" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="6391" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="6860" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7305" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7835" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="8435" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="8959" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9559" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="10026" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="10495" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="10857" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="11323" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="11847" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="12280" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="12579" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="13108" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="13578" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14047" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="14514" y="0"/>
</g>
</svg> from its superclass, no matter what package the subclass is in. If the subclass is in the same package as its parent, it also inherits the <em>package-private</em> members of the parent. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.</p>
<p>A subclass does not inherit the <code>private</code> members of its parent class. However, if the superclass has public or protected methods for accessing its private fields, these can also be used by the subclass. A nested class has access to all the private members of its enclosing class—both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass.</p>
<h3 id="ⅰ.-multiple-inheritance-of-state,-implementation,-and-type">Ⅰ. Multiple Inheritance of State, Implementation, and Type<a title="#ⅰ.-multiple-inheritance-of-state,-implementation,-and-type" href="#ⅰ.-multiple-inheritance-of-state,-implementation,-and-type"></a></h3>
<p>Multiple Inheritance of State: the ability to inherit fields from multiple classes, which is not supported by Java because only single inheritance is allowed between and interface don’t have fields.</p>
<p>Multiple Inheritance of Implementation: the ability to inherit method definitions from multiple classes. In Java, a class can implement more than one interface, which can contain default methods that have the same name. The Java compiler provides some rules to determine which default method a particular class uses.</p>
<p>Multiple Inheritance of Type: the ability of a class to implement more than one interface. An object can have multiple types: the type of its own class and the types of all the interfaces that the class implements. This is more detailed in Part.1.Ⅲ.</p>
<h3 id="ⅱ.-overriding-and-hiding-methods">Ⅱ. Overriding and Hiding Methods<a title="#ⅱ.-overriding-and-hiding-methods" href="#ⅱ.-overriding-and-hiding-methods"></a></h3>
<p>Inherited fields and methods can be used directly. Subclass can declare new fields and methods in the subclass that are not in the superclass.</p>
<p>Within a class, a field that has the same name as a field in the superclass hides the superclass’s field, even if their types are different.</p>
<h4 id="1）instance-methods">1）Instance Methods<a title="#1）instance-methods" href="#1）instance-methods"></a></h4>
<p>An instance method in a subclass with the same signature <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="50.575ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 21775.2 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">name, plus the number and the type of its parameters</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6E" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="600" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1130" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2008" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="2475" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="2920" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3423" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="3722" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4294" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4764" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5125" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5702" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="6168" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="6769" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="7341" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="8220" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8649" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="9116" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="9567" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="10097" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="10697" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11221" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="11582" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="12159" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="12625" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="12987" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="13484" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="13988" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="14454" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="14940" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="15490" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="15836" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="16197" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="16667" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="17170" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="17700" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="18151" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="18681" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="19559" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="20026" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="20387" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="20854" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="21305" y="0"/>
</g>
</svg> and return type<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="43.658ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 18797 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">or the subclass of the return type in super class</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6F" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="485" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="937" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="1298" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1875" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="2341" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="2811" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="3383" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="3813" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="4246" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4545" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5074" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5544" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="6013" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="6499" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7049" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="7411" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7987" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="8454" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8905" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="9372" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="9733" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="10306" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="10757" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11358" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="11719" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="12217" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="12720" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="13187" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="13532" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="14133" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="14602" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="15175" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="15678" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="16145" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="16596" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="17030" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="17328" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="17858" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="18327" y="0"/>
</g>
</svg> as an instance method in the superclass <em>overrides</em> the superclass’s method.</p>
<h4 id="2)-static-methods">2) Static Methods<a title="#2)-static-methods" href="#2)-static-methods"></a></h4>
<p>If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass <em>hides</em> the one in the superclass.</p>
<p>The distinction between hiding a static method and overriding an instance method has important implications:</p>
<ul>
<li>The version of the overridden instance method that gets invoked is the one in the subclass.</li>
<li>The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testClassMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The static method in Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInstanceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The instance method in Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testClassMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The static method in Cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInstanceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The instance method in Cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat myCat = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal myAnimal = myCat;</span><br><span class="line">        Animal.testClassMethod();</span><br><span class="line">        myAnimal.testInstanceMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The static method in Animal</span></span><br><span class="line"><span class="comment">// The instance method in Cat</span></span><br></pre></td></tr></table></figure>
<h4 id="3)-interface-methods">3) Interface Methods<a title="#3)-interface-methods" href="#3)-interface-methods"></a></h4>
<p>Static methods in interfaces are never inherited.</p>
<p>Default methods and abstract methods in interfaces are inherited like instance methods. However, when the supertypes of a class or interface provide multiple default methods with the same signature, the Java compiler follows inheritance rules to resolve the name conflict. These rules are driven by the following those principles:</p>
<ul>
<li>· If two or more independently defined default methods conflict, or a default method conflicts with an abstract method, then the Java compiler produces a compiler error and we must explicitly override the supertype methods. Instance methods are preferred over interface default methods.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OperateCar</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">startEngine</span><span class="params">(EncryptedKey key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Implementation</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyCar</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">startEngine</span><span class="params">(EncryptedKey key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Implementation</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyingCar</span> <span class="keyword">implements</span> <span class="title">OperateCar</span>, <span class="title">FlyCar</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">startEngine</span><span class="params">(EncryptedKey key)</span> </span>&#123;</span><br><span class="line">        FlyCar.<span class="keyword">super</span>.startEngine(key);</span><br><span class="line">        OperateCar.<span class="keyword">super</span>.startEngine(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>· When supertypes share a common ancestor，methods that are already overridden by other candidates are ignored.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> String <span class="title">identifyMyself</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am an animal.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EggLayer</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> String <span class="title">identifyMyself</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am able to lay eggs.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FireBreather</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> <span class="keyword">implements</span> <span class="title">EggLayer</span>, <span class="title">FireBreather</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        Dragon myApp = <span class="keyword">new</span> Dragon();</span><br><span class="line">        System.out.println(myApp.identifyMyself());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// I am able to lay eggs.</span></span><br></pre></td></tr></table></figure>
<ul>
<li>· Inherited instance methods from classes can override abstract interface methods.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">identifyMyself</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Horse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">identifyMyself</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a horse.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mustang</span> <span class="keyword">extends</span> <span class="title">Horse</span> <span class="keyword">implements</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        Mustang myApp = <span class="keyword">new</span> Mustang();</span><br><span class="line">        System.out.println(myApp.identifyMyself());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You will get a compile-time error if you attempt to change an instance method in the superclass to a static method in the subclass, and vice versa.</p>
<p>We could use use the <code>@Override</code> annotation that instructs the compiler that you intend to override a method in the superclass.</p>
<h3 id="ⅲ.-using-the-keyword-super">Ⅲ. Using the Keyword super<a title="#ⅲ.-using-the-keyword-super" href="#ⅲ.-using-the-keyword-super"></a></h3>
<h4 id="1)-accessing-superclass-members">1) Accessing Superclass Members<a title="#1)-accessing-superclass-members" href="#1)-accessing-superclass-members"></a></h4>
<p>We can use the key word <code>super</code> to access the members in the superclass, either a overridden method or hidden field.</p>
<p><code>super.overriddenMethod();</code></p>
<h4 id="2)-subclass-constructors">2) Subclass Constructors<a title="#2)-subclass-constructors" href="#2)-subclass-constructors"></a></h4>
<p>We can also use the <code>super</code> keyword to invoke a superclass’s constructor and invocation of a superclass constructor must be the first line in the subclass constructor.</p>
<p><code>super(parameter list);</code></p>
<p><em>Constructor chaining</em>: If a subclass constructor invokes a constructor of its superclass, there will be a whole chain of constructors called, all the way back to the constructor of <code>Object</code>.</p>
<h3 id="ⅳ.-object-class">Ⅳ. <code>Object</code> Class<a title="#ⅳ.-object-class" href="#ⅳ.-object-class"></a></h3>
<p>The <code>Object</code> class, in the <code>java.lang</code> package, sits at the top of the class hierarchy tree. Every class is a descendant, direct or indirect, of the <code>Object</code> class. Every class you use or write inherits the instance methods of <code>Object</code>.</p>
<p>Some methods inherited from <code>Object</code> :</p>
<ul>
<li>
<p><code>protected Object clone() throws CloneNotSupportedException</code></p>
<p>Creates and returns a copy of this object.</p>
</li>
<li>
<p><code>public boolean equals(Object obj)</code></p>
<p>Indicates whether some other object is “equal to” this one.</p>
</li>
<li>
<p><code>protected void finalize() throws Throwable</code></p>
<p>Called by the garbage collector on an object when garbage</p>
<p>collection determines that there are no more references to the object</p>
</li>
<li>
<p><code>public final Class getClass()</code></p>
<p>Returns the runtime class of an object.</p>
</li>
<li>
<p><code>public int hashCode()</code></p>
<p>Returns a hash code value for the object.</p>
</li>
<li>
<p><code>public String toString()</code></p>
<p>Returns a string representation of the object.</p>
</li>
</ul>
<p>The <code>notify</code>, <code>notifyAll</code>, and <code>wait</code> methods of <code>Object</code> all play a part in synchronizing the activities of independently running threads in a program. There are five of these methods:</p>
<ul>
<li>
<p><code>public final void notify()</code></p>
</li>
<li>
<p><code>public final void notifyAll()</code></p>
</li>
<li>
<p><code>public final void wait()</code></p>
</li>
<li>
<p><code>public final void wait(long timeout)</code></p>
</li>
<li>
<p><code>public final void wait(long timeout, int nanos)</code></p>
<p>See more details about the method <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html" target="_blank">here</a> .</p>
</li>
</ul>
<h3 id="ⅴ.-final-and-abstract">Ⅴ. <code>final</code> and <code>abstract</code><a title="#ⅴ.-final-and-abstract" href="#ⅴ.-final-and-abstract"></a></h3>
<h4 id="1）final">1）Final<a title="#1）final" href="#1）final"></a></h4>
<p>If it has an implementation that should not be changed and it is critical to the consistent state of the object, we use the <code>final</code> keyword in a method declaration to indicate that the method cannot be overridden by subclasses.</p>
<p>Methods called from constructors should generally be declared final. If a constructor calls a non-final method, a subclass may redefine that method with surprising or undesirable results.</p>
<p>We can also declare an entire class final. A class that is declared final cannot be subclassed. This is particularly useful, for example, when creating an immutable class like the <code>String</code> class.</p>
<h4 id="2)-abstract">2) Abstract<a title="#2)-abstract" href="#2)-abstract"></a></h4>
<p>An <em>abstract class</em> is a class that is declared <code>abstract</code>—it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed. When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared <code>abstract</code>.</p>
<p>An <em>abstract method</em> is a method that is declared without an implementation <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="41.907ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 18043.2 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">without braces, and followed by a semicolon</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-77" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="716" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1062" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="1423" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="2000" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="2485" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3058" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="3419" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="3849" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4300" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="4830" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5263" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5730" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="6199" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="6644" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7174" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="7774" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="8298" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="8848" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="9334" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="9632" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="9931" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="10416" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="11133" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="11599" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="12123" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="12552" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="13050" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="13579" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14049" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="14515" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="15394" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="15739" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="16173" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="16658" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="16957" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="17442" y="0"/>
</g>
</svg>. If a class includes abstract methods, then the class itself <em>must</em> be declared <code>abstract</code>.</p>
<p>Difference between the abstract class and interface: Abstract class can declare fields that are not static and final and define public, protected, and private concrete methods .But we can extend only one class. See more details <a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html" target="_blank">here</a>.</p>
<p>A class that implements an interface must implement <em>all</em> of the interface’s methods. It is possible, however, to define a class that does not implement all of the interface’s methods, provided that the class is declared to be <code>abstract</code>.</p>
<h3 id="ⅵ.-casting-objects">Ⅵ. Casting Objects<a title="#ⅵ.-casting-objects" href="#ⅵ.-casting-objects"></a></h3>
<p>Normally, an object is of the data type of the class from which it was instantiated.</p>
<p><em>Casting</em> shows the use of an object of one type in place of another type, among the objects permitted by inheritance and implementations.</p>
<p>Implicit casting: <code>Object obj = new MountainBike();</code> Explicit casting: <code>MountainBike myBike = (MountainBike)obj;</code></p>
<h1 id="part.3-annotation">Part.3 Annotation<a title="#part.3-annotation" href="#part.3-annotation"></a></h1>
<p><em>Annotations</em>, a form of metadata, provide data about a program that has no direct effect on the operation of the code they annotate. Annotations can be applied to any <em>type use</em>.</p>
<p>The use of annotations: · Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings. · Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth. · Runtime processing — Some annotations are available to be examined at runtime.</p>
<p>The annotation type can be one of the types that are defined in the <code>java.lang</code> or <code>java.lang.annotation</code> packages of the Java SE API or custom annotation types.</p>
<p>See predefined annotation types and annotations that apply to other annotations <a href="https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html" target="_blank">here</a>.</p>
<h3 id="ⅰ.-declaring-an-annotation-type">Ⅰ. Declaring an Annotation Type<a title="#ⅰ.-declaring-an-annotation-type" href="#ⅰ.-declaring-an-annotation-type"></a></h3>
<p>Annotation types are a form of <em>interface</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> ClassPreamble &#123;</span><br><span class="line">   <span class="function">String <span class="title">author</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">currentRevision</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">   <span class="function">String <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">default</span> &quot;N/A&quot;</span>;</span><br><span class="line">   <span class="function">String <span class="title">lastModifiedBy</span><span class="params">()</span> <span class="keyword">default</span> &quot;N/A&quot;</span>;</span><br><span class="line">   <span class="comment">// Note use of array</span></span><br><span class="line">   String[] reviewers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make the information in @ClassPreamble appear in Javadoc-generated documentation</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@ClassPreamble</span> (</span><br><span class="line">   author = <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">   date = <span class="string">&quot;3/17/2002&quot;</span>,</span><br><span class="line">   currentRevision = <span class="number">6</span>,</span><br><span class="line">   lastModified = <span class="string">&quot;4/12/2004&quot;</span>,</span><br><span class="line">   lastModifiedBy = <span class="string">&quot;Jane Doe&quot;</span>,</span><br><span class="line">   <span class="comment">// Note array notation</span></span><br><span class="line">   reviewers = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Cindy&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generation3List</span> <span class="keyword">extends</span> <span class="title">Generation2List</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class code goes here</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ⅱ.-apply-the-annotations">Ⅱ. Apply the annotations<a title="#ⅱ.-apply-the-annotations" href="#ⅱ.-apply-the-annotations"></a></h3>
<p>Annotations can be applied to declarations <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="67.824ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 29202 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">declarations of classes, fields, methods, and other program elements</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-64" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="523" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="990" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="1423" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1722" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="2251" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2703" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3232" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="3594" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3939" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4425" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="5025" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5495" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="5980" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="6531" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="6964" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7263" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="7792" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="8262" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8731" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="9198" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="9667" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="10112" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="10663" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="11008" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="11475" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="11773" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="12297" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="12766" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="13211" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14090" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="14556" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="14918" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="15494" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="15980" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="16503" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="16973" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="17418" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="17948" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="18548" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="19072" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="19557" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="19919" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="20495" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="20962" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="21413" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="21917" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="22368" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="22854" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="23334" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="23786" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="24315" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="25194" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="25660" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="25959" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="26425" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="27304" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="27770" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="28371" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="28732" y="0"/>
</g>
</svg> and any <em>type use</em> <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="15.629ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 6729 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">type annotation</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="361" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="859" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1362" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="1829" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="2358" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="2959" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3559" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4045" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4406" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4936" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="5297" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="5643" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="6128" y="0"/>
</g>
</svg> as follows : · class instance creation expression ： <code>new @Interned MyObject();</code> · type cast： <code>myString = (@NonNull String) str;</code> · <code>implements</code> clause： <code>class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; &#123; ... &#125;</code> · thrown exception declaration： <code>void monitorTemperature() throws @Critical TemperatureException &#123; ... &#125;</code>). · …</p>
<p>Type annotations were created to support improved analysis of Java programs way of ensuring stronger type checking. The Java SE 8 release does not provide a type checking framework, but it allows you to write <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="11.845ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 5100 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">or download</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6F" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="485" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="937" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="1460" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="1946" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="2662" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3263" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3561" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="4047" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="4576" y="0"/>
</g>
</svg> a type checking framework that is implemented as one or more pluggable modules that are used in conjunction with the Java compiler.</p>
<p>For more information about the framework provided by third parties, see the <a href="http://types.cs.washington.edu/checker-framework/" target="_blank">Checker Framework</a> created by the University of Washington.</p>
<h3 id="ⅲ.-repeating-annotations">Ⅲ. Repeating Annotations<a title="#ⅲ.-repeating-annotations" href="#ⅲ.-repeating-annotations"></a></h3>
<p><em>Repeating annotations</em> enable you to apply the same annotation to a declaration or type use.</p>
<p>For compatibility reasons, repeating annotations are stored in a <em>container annotation</em> that is automatically generated by the Java compiler.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Schedule(dayOfMonth=&quot;last&quot;)</span></span><br><span class="line"><span class="meta">@Schedule(dayOfWeek=&quot;Fri&quot;, hour=&quot;23&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPeriodicCleanup</span><span class="params">()</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<h4 id="1)-declare-a-repeatable-annotation">1) Declare a Repeatable Annotation<a title="#1)-declare-a-repeatable-annotation" href="#1)-declare-a-repeatable-annotation"></a></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Schedule &#123;</span><br><span class="line">  <span class="function">String <span class="title">dayOfMonth</span><span class="params">()</span> <span class="keyword">default</span> &quot;first&quot;</span>;</span><br><span class="line">  <span class="function">String <span class="title">dayOfWeek</span><span class="params">()</span> <span class="keyword">default</span> &quot;Mon&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">hour</span><span class="params">()</span> <span class="keyword">default</span> 12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The value of the <code>@Repeatable</code> meta-annotation, in parentheses, is the type of the container annotation that the Java compiler generates to store repeating annotations. In this example, the containing annotation type is <code>Schedules</code>, so repeating <code>@Schedule</code> annotations is stored in an <code>@Schedules</code> annotation.</p>
<h4 id="2)-declare-the-containing-annotation-type">2) Declare the Containing Annotation Type<a title="#2)-declare-the-containing-annotation-type" href="#2)-declare-the-containing-annotation-type"></a></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Schedules &#123;</span><br><span class="line">    Schedule[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>See the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html" target="_blank">AnnotatedElement</a> class specification for information on all of the available methods to retrieve annotations.</p>
<h1 id="part.4-numbers-and-strings">Part.4 Numbers and Strings<a title="#part.4-numbers-and-strings" href="#part.4-numbers-and-strings"></a></h1>
<h3 id="ⅰ.-numbers">Ⅰ. Numbers<a title="#ⅰ.-numbers" href="#ⅰ.-numbers"></a></h3>
<h4 id="1）numbers-classes">1）Numbers classes<a title="#1）numbers-classes" href="#1）numbers-classes"></a></h4>
<p>The Java platform provides <em>wrapper</em> classes for each of the primitive data types. The Java compiler automatically wraps <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="5.629ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2423.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">boxes</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-62" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="429" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="915" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1487" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1954" y="0"/>
</g>
</svg> primitives for you when necessary and unboxes them, again when necessary. All of the numeric wrapper classes are subclasses of the abstract class <code>Number</code>:</p>
<p><img src="https://i.loli.net/2020/09/26/aRLIWc4fjeoBviJ.png" alt="11" class="φcx"></p>
<p><code>BigDecimal</code> and <code>BigInteger</code> are used for high-precision calculations. <code>AtomicInteger</code> and <code>AtomicLong</code> are used for multi-threaded applications.</p>
<p>There are three reasons that you might use a <code>Number</code> object rather than a primitive: <a href="http://1.As">1.As</a> an argument of a method that expects an object <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="52.225ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 22485.5 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">often used when manipulating collections of numbers</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-6F" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="485" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="1036" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1397" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="1864" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="2464" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="3037" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3506" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="3973" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="4496" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="5213" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5789" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="6256" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="6856" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="7735" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="8264" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="8865" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="9210" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="9714" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="10286" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="10585" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="11114" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="11476" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="11821" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="12422" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="12902" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="13336" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="13821" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="14120" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="14418" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="14885" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="15318" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="15680" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="16025" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="16511" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="17111" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="17581" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="18066" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="18617" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="19217" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="19790" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="20668" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="21098" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="21564" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="22016" y="0"/>
</g>
</svg>. <a href="http://2.To">2.To</a> use constants defined by the class, such as <code>MIN_VALUE</code> and <code>MAX_VALUE</code>, that provide the upper and lower bounds of the data type. <a href="http://3.To">3.To</a> use class methods for converting values to and from other primitive types, for converting to and from strings, and for converting between number systems <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="35.754ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 15394 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">decimal, octal, hexadecimal, binary</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-64" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="523" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="990" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="1423" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1769" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2647" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="3177" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="3475" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="3920" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="4406" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="4839" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="5201" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="5730" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="6029" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="6474" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="7050" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="7517" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="8089" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="8619" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9142" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="9609" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="10042" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="10388" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="11266" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="11796" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="12094" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="12539" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="12969" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="13314" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="13915" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="14444" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="14896" y="0"/>
</g>
</svg>.</p>
<p>The instance methods that all the subclasses of the <code>Number</code> class implement: <a href="https://docs.oracle.com/javase/tutorial/java/data/numberclasses.html" target="_blank">here</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">byte</span> <span class="title">byteValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Byte anotherByte)</span></span></span><br><span class="line"><span class="function"><span class="comment">// Return true if they have the same type and with the same numeric value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&#x27;12.1&#x27;</span>;</span><br><span class="line">String s2 = <span class="string">&#x27;13.2&#x27;</span>;</span><br><span class="line"><span class="keyword">float</span> a = (Float.valueOf(s1)).floatValue(); </span><br><span class="line"><span class="keyword">float</span> b = Float.parseFloat(s2);</span><br><span class="line">System.out.println(<span class="string">&quot;a + b =  &quot;</span> + (a + b));  <span class="comment">// --&gt; 25.3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">858.48</span>;</span><br><span class="line">String s = Double.toString(d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">String s1 = <span class="string">&quot;&quot;</span> + i;</span><br><span class="line">String s2 = String.valueOf(i);</span><br></pre></td></tr></table></figure>
<h4 id="2)-formatting-numeric-print-output">2) Formatting Numeric Print Output<a title="#2)-formatting-numeric-print-output" href="#2)-formatting-numeric-print-output"></a></h4>
<p><strong>· The printf and format Methods</strong></p>
<p>The <code>java.io</code> package includes a <code>PrintStream</code> class that has two formatting methods <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="45.849ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 19740.7 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`format` and `printf`, equivalent to one another</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="278" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="829" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="1314" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1766" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2644" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3174" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="3535" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="3814" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="4343" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="4944" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="5467" y="0"/>
 <use xlink:href="#E1-MJMATHI-70" x="5746" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="6249" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="6701" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="7046" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7647" y="0"/>
 <use xlink:href="#E1-MJMATHI-66" x="8008" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="8559" y="0"/>
 <use xlink:href="#E1-MJMAIN-2C" x="8837" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="9282" y="0"/>
 <use xlink:href="#E1-MJMATHI-71" x="9749" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="10209" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="10782" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="11127" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="11613" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="12142" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="12441" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="12907" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="13508" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="13869" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="14231" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="14716" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="15202" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="15802" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="16269" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="16798" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="17399" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="17884" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="18246" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="18822" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="19289" y="0"/>
</g>
</svg> that you can use to replace <code>print</code> and <code>println</code>. The familiar <code>System.out</code> is a <code>PrintStream</code> object, so we can invoke <code>PrintStream</code> methods on <code>System.out</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">long</span> n = <span class="number">461012</span>;</span><br><span class="line">      System.out.format(<span class="string">&quot;%08d%n&quot;</span>, n);    <span class="comment">//  --&gt;  &quot;00461012&quot;</span></span><br><span class="line">      System.out.format(<span class="string">&quot;%+,8d%n%n&quot;</span>, n); <span class="comment">//  --&gt;  &quot;+461,012&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">double</span> pi = Math.PI;</span><br><span class="line"></span><br><span class="line">      System.out.format(<span class="string">&quot;%f%n&quot;</span>, pi);       <span class="comment">// --&gt;  &quot;3.141593&quot;</span></span><br><span class="line">      System.out.format(<span class="string">&quot;%.3f%n&quot;</span>, pi);     <span class="comment">// --&gt;  &quot;3.142&quot;</span></span><br><span class="line">      System.out.format(<span class="string">&quot;%10.3f%n&quot;</span>, pi);   <span class="comment">// --&gt;  &quot;     3.142&quot;</span></span><br><span class="line">      System.out.format(Locale.FRANCE,</span><br><span class="line">                        <span class="string">&quot;%-10.4f%n%n&quot;</span>, pi); <span class="comment">// --&gt;  &quot;3,1416&quot;</span></span><br><span class="line"></span><br><span class="line">      Calendar c = Calendar.getInstance();</span><br><span class="line">      System.out.format(<span class="string">&quot;%tB %te, %tY%n&quot;</span>, c, c, c); <span class="comment">// --&gt;  &quot;May 29, 2006&quot;</span></span><br><span class="line">      System.out.format(<span class="string">&quot;%tl:%tM %tp%n&quot;</span>, c, c, c);  <span class="comment">// --&gt;  &quot;2:34 am&quot;</span></span><br><span class="line">      System.out.format(<span class="string">&quot;%tD%n&quot;</span>, c);    <span class="comment">// --&gt;  &quot;05/29/06&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Format specifiers begin with a percent sign <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0.343ex" style="vertical-align: -0.171ex;" viewbox="0 -73.8 0 147.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">%</title>
<defs aria-hidden="true"/>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"/>
</svg> and end with a <em>converter</em>. The converter is a character indicating the type of argument to be formatted. In between the percent sign <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0.343ex" style="vertical-align: -0.171ex;" viewbox="0 -73.8 0 147.5" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">%</title>
<defs aria-hidden="true"/>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"/>
</svg> and the converter you can have optional flags and specifiers. There are many converters, flags, and specifiers, which are documented in <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html" target="_blank">java.util.Formatter</a> or <a href="https://docs.oracle.com/javase/tutorial/java/data/numberformat.html" target="_blank">here</a>.</p>
<p><strong>· The DecimalFormat Class</strong></p>
<p>You can use the <a href="https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html" target="_blank">java.text.DecimalFormat</a> class to control the display of leading and trailing zeros, prefixes and suffixes, grouping <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="10.657ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 4588.5 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">thousands</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-74" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="361" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="938" y="0"/>
 <use xlink:href="#E1-MJMATHI-75" x="1423" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="1996" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="2465" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="2995" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="3595" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4119" y="0"/>
</g>
</svg> separators, and the decimal separator.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecimalFormatDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customFormat</span><span class="params">(String pattern, <span class="keyword">double</span> value )</span> </span>&#123;</span><br><span class="line">      DecimalFormat myFormatter = <span class="keyword">new</span> DecimalFormat(pattern);</span><br><span class="line">      String output = myFormatter.format(value);</span><br><span class="line">      System.out.println(value + <span class="string">&quot;  &quot;</span> + pattern + <span class="string">&quot;  &quot;</span> + output);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      customFormat(<span class="string">&quot;000000.000&quot;</span>, <span class="number">123.78</span>);</span><br><span class="line">      customFormat(<span class="string">&quot;$###,###.##&quot;</span>, <span class="number">1212345.679</span>);  <span class="comment">// 1212345.679 $###,###.## $1212,345.67</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3)-beyond-basic-arithmetic">3) Beyond Basic Arithmetic<a title="#3)-beyond-basic-arithmetic" href="#3)-beyond-basic-arithmetic"></a></h4>
<p>The <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html" target="_blank">Math</a> class in the <code>java.lang</code> package provides methods and constants for doing more advanced mathematical computation. The methods in the <code>Math</code> class are all static, so you call them directly from the class.</p>
<p>· Constants and Basic Methods</p>
<p><code>Math.E</code>, <code>Math.PI</code></p>
<p><code>type abs(type t)</code>, <code>type ceil(type t)</code>, <code>type floor(type t)</code>, <code>type rint(type t)</code>, <code>int round(float t)</code>, <code>type min(type t1, type t2)</code>, <code>type max(type t1, type t2)</code>,</p>
<p>· Exponential and Logarithmic Methods</p>
<p><code>double exp(double d)</code>, <code>double log(double d)</code>, <code>double pow(double base, double exponent)</code>, <code>double sqrt(double d)</code>,</p>
<p>· Trigonometric Methods</p>
<p><code>double sin(double d)</code>, …</p>
<p>· Random Numbers</p>
<p>The <code>random()</code> method returns a pseudo-randomly selected number \(0.0 &lt;= Math.random\(\) &lt; 1.0).</p>
<p>Using <code>Math.random</code> works well when you need to generate a single random number. If you need to generate a series of random numbers, you should create an instance of <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html" target="_blank"><code>java.util.Random</code></a> and invoke methods on that object to generate numbers.</p>
<h3 id="ⅱ.-characters">Ⅱ. Characters<a title="#ⅱ.-characters" href="#ⅱ.-characters"></a></h3>
<p>When we use a char as an object—for example, as a method argument where an object is expected. The Java programming language provides a <em>wrapper</em> class that “wraps” the <code>char</code> in a <code>Character</code> object.</p>
<p><code>Character ch = new Character('a');</code></p>
<p>For the methods in this class, refer to the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html" target="_blank">java.lang.Character</a> API specification.</p>
<p><code>boolean isLetter(char ch)</code>, <code>boolean isDigit(char ch)</code>, <code>boolean isUpperCase(char ch)</code>, …</p>
<p>· Escape Sequences</p>
<p>A character preceded by a backslash () is an <em>escape sequence</em> and has special meaning to the compiler.</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">Escape Sequence</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\t</code></td>
<td style="text-align:left">Insert a tab in the text at this point.</td>
</tr>
<tr>
<td style="text-align:left"><code>\b</code></td>
<td style="text-align:left">Insert a backspace in the text at this point.</td>
</tr>
<tr>
<td style="text-align:left"><code>\n</code></td>
<td style="text-align:left">Insert a newline in the text at this point.</td>
</tr>
<tr>
<td style="text-align:left"><code>\f</code></td>
<td style="text-align:left">Insert a formfeed in the text at this point.</td>
</tr>
<tr>
<td style="text-align:left"><code>\\</code></td>
<td style="text-align:left">Insert a backslash character in the text at this point.</td>
</tr>
</tbody>
</table></div></div><h3 id="ⅲ.-string">Ⅲ. String<a title="#ⅲ.-string" href="#ⅲ.-string"></a></h3>
<p>Strings are a sequence of characters. The Java platform provides the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html" target="_blank">String</a> class to create and manipulate strings. Whenever it encounters a string literal in your code, the compiler creates a <code>String</code> object with its value. The <code>String</code> class is immutable, so that once it is created a <code>String</code> object cannot be changed.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String greeting = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] helloArray = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;.&#x27;</span> &#125;;</span><br><span class="line">String helloString = <span class="keyword">new</span> String(helloArray);</span><br></pre></td></tr></table></figure>
<p>The <code>String</code> class has a number of methods:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String palindrome = <span class="string">&quot;Dot saw I was Tod&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> len = palindrome.length(); <span class="comment">// --&gt; 17</span></span><br><span class="line"><span class="keyword">char</span> c = palindrome.charAt(<span class="number">2</span>); <span class="comment">// --&gt; &#x27;t&#x27;</span></span><br><span class="line"><span class="comment">// convert a string, or a portion of a string, into an array of characters </span></span><br><span class="line"><span class="keyword">char</span>[] ca = palindrome.getChars(<span class="number">0</span>, len, tempCharArray, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">String s = <span class="string">&quot;My name is &quot;</span>.concat(<span class="string">&quot;Rumplestiltskin&quot;</span>); <span class="comment">// My name is Rumplestiltskin</span></span><br><span class="line"><span class="comment">// Breaking strings between lines using the + concatenation operator</span></span><br><span class="line">String quote = </span><br><span class="line">    <span class="string">&quot;Now is the time for all good &quot;</span> +</span><br><span class="line">    <span class="string">&quot;men to come to the aid of their country.&quot;</span>;</span><br><span class="line"></span><br><span class="line">String fs;</span><br><span class="line"><span class="comment">// return a String object</span></span><br><span class="line">fs = String.format(<span class="string">&quot;The value of the float variable is %f&quot;</span>,floatVar);</span><br><span class="line">System.out.println(fs);</span><br><span class="line"><span class="comment">// return a PrintStream object</span></span><br><span class="line">System.out.printf(<span class="string">&quot;The value of the float variable is %f&quot;</span>,floatVar);</span><br></pre></td></tr></table></figure>
<h4 id="1)-manipulating-characters-in-a-string">1) Manipulating Characters in a String<a title="#1)-manipulating-characters-in-a-string" href="#1)-manipulating-characters-in-a-string"></a></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Get the elemment in the string</span></span><br><span class="line">String anotherPalindrome = <span class="string">&quot;Niagara. O roar again!&quot;</span>; </span><br><span class="line"><span class="keyword">char</span> aChar = anotherPalindrome.charAt(<span class="number">9</span>);  <span class="comment">// O</span></span><br><span class="line">String roar = anotherPalindrome.substring(<span class="number">11</span>, <span class="number">15</span>)  <span class="comment">// roar</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Searches for a match as specified by the string argument and splits this string into an array of strings accordingly.</span></span><br><span class="line">String[] split(String regex, <span class="keyword">int</span> limit)</span><br><span class="line"><span class="comment">// Returns a new character sequence</span></span><br><span class="line"><span class="function">CharSequence <span class="title">subSequence</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"><span class="comment">// Returns a copy of this string with leading and trailing white space removed.</span></span></span><br><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span></span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span></span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Search forward from the begainning</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span></span></span><br><span class="line"><span class="function"><span class="comment">// Search backward form the ending </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// CharSequence is an interface that is implemented by the String class.   </span></span></span><br><span class="line"><span class="function"><span class="comment">// Therefore, we can use a string as an argument for the contains() method.</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span></span></span><br><span class="line"><span class="function">String <span class="title">replaceAll</span><span class="params">(String regex, String replacement)</span></span></span><br><span class="line"><span class="function">String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="2)-comparing-strings-and-portions-of-strings">2) Comparing Strings and Portions of Strings<a title="#2)-comparing-strings-and-portions-of-strings" href="#2)-comparing-strings-and-portions-of-strings"></a></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> offset)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> compareToIgnoreCase(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// Returns true if and only if the argument is a String object </span></span></span><br><span class="line"><span class="function"><span class="comment">// that represents the same sequence of characters</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">int</span> toffset, String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">boolean</span> ignoreCase, <span class="keyword">int</span> toffset, String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="3)-the-stringbuilder-class">3) The <code>StringBuilder</code> Class<a title="#3)-the-stringbuilder-class" href="#3)-the-stringbuilder-class"></a></h4>
<p><code>StringBuilder</code> objects are like String objects, except that they can be modified. We hardly use it unless it has the advantages over the String objects, like when we concatenate a large number of strings.</p>
<p>For more details <a href="https://docs.oracle.com/javase/tutorial/java/data/buffers.html" target="_blank">here</a>.</p>
<p>There is also a <code>StringBuffer</code> class that is <em>exactly</em> the same as the <code>StringBuilder</code> class, except that it is thread-safe by virtue of having its methods synchronized.</p>
<h3 id="ⅳ.-autoboxing-and-unboxing">Ⅳ. Autoboxing and Unboxing<a title="#ⅳ.-autoboxing-and-unboxing" href="#ⅳ.-autoboxing-and-unboxing"></a></h3>
<p><em>Autoboxing</em> is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. If the conversion goes the other way, this is called <em>unboxing</em>.</p>
<p>The Java compiler applies autoboxing when a primitive value is:</p>
<ul>
<li>Passed as a parameter to a method that expects an object of the corresponding wrapper class.</li>
<li>Assigned to a variable of the corresponding wrapper class.</li>
</ul>
<p>The Java compiler applies unboxing when an object of a wrapper class is:</p>
<ul>
<li>Passed as a parameter to a method that expects a value of the corresponding primitive type.</li>
<li>Assigned to a variable of the corresponding primitive type.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">s.push(<span class="number">17</span>); <span class="comment">// s.push(Integer.valueOf(17));</span></span><br><span class="line"><span class="keyword">int</span> a = s.pop(); <span class="comment">// int a = s.pop().intValue();</span></span><br></pre></td></tr></table></figure>
<h1 id="part.5-generics">Part.5 Generics<a title="#part.5-generics" href="#part.5-generics"></a></h1>
<p>Generics enable <em>types</em> to be parameters when defining classes, interfaces and methods. Type parameters provide a way for you to re-use the same code with different inputs.</p>
<p>The benefits of code that use generics: · Stronger type checks at compile time. · Elimination of casts · Enabling programmers to implement generic algorithms.</p>
<h3 id="ⅰ.-generic-types">Ⅰ. Generic Types<a title="#ⅰ.-generic-types" href="#ⅰ.-generic-types"></a></h3>
<p>A <em>generic type</em> is a generic class or interface that is parameterized over types.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A generic sclass</span></span><br><span class="line"><span class="comment">// angle brackets (&lt;&gt;) specifies the type parameters (also called type variables) </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, ..., <span class="title">Tn</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<p>A type variable can be any <strong>non-primitive</strong> type you specify: any class type, any interface type, any array type, or even another type variable.</p>
<h4 id="1)-type-parameter-naming-conventions">1) Type Parameter Naming Conventions<a title="#1)-type-parameter-naming-conventions" href="#1)-type-parameter-naming-conventions"></a></h4>
<p>By convention, type parameter names are single, uppercase letters. The most commonly used type parameter names are: · E - Element <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="50.697ex" height="2.509ex" style="vertical-align: -0.671ex;" viewbox="0 -791.3 21828 1080.4" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">used extensively by the Java Collections Framework</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/>
<path stroke-width="1" id="E1-MJMATHI-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/>
<path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/>
<path stroke-width="1" id="E1-MJMATHI-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/>
<path stroke-width="1" id="E1-MJMATHI-68" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/>
<path stroke-width="1" id="E1-MJMATHI-4A" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/>
<path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-43" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/>
<path stroke-width="1" id="E1-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/>
<path stroke-width="1" id="E1-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-75" x="0" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="572" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="1042" y="0"/>
 <use xlink:href="#E1-MJMATHI-64" x="1508" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="2032" y="0"/>
 <use xlink:href="#E1-MJMATHI-78" x="2498" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="3071" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="3432" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3899" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="4499" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="4969" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="5314" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="5800" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="6266" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="6565" y="0"/>
 <use xlink:href="#E1-MJMATHI-62" x="7062" y="0"/>
 <use xlink:href="#E1-MJMATHI-79" x="7492" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="7989" y="0"/>
 <use xlink:href="#E1-MJMATHI-68" x="8351" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="8927" y="0"/>
 <use xlink:href="#E1-MJMATHI-4A" x="9394" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="10027" y="0"/>
 <use xlink:href="#E1-MJMATHI-76" x="10557" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="11042" y="0"/>
 <use xlink:href="#E1-MJMATHI-43" x="11572" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="12332" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="12818" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="13116" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="13415" y="0"/>
 <use xlink:href="#E1-MJMATHI-63" x="13881" y="0"/>
 <use xlink:href="#E1-MJMATHI-74" x="14315" y="0"/>
 <use xlink:href="#E1-MJMATHI-69" x="14676" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="15022" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="15507" y="0"/>
 <use xlink:href="#E1-MJMATHI-73" x="16108" y="0"/>
 <use xlink:href="#E1-MJMATHI-46" x="16577" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="17327" y="0"/>
 <use xlink:href="#E1-MJMATHI-61" x="17778" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="18308" y="0"/>
 <use xlink:href="#E1-MJMATHI-65" x="19186" y="0"/>
 <use xlink:href="#E1-MJMATHI-77" x="19653" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="20369" y="0"/>
 <use xlink:href="#E1-MJMATHI-72" x="20855" y="0"/>
 <use xlink:href="#E1-MJMATHI-6B" x="21306" y="0"/>
</g>
</svg> · K - Key · N - Number · T - Type · V - Value · S,U,V etc. - 2nd, 3rd, 4th types</p>
<h4 id="2)-invoking-and-instantiating-a-generic-type">2) Invoking and Instantiating a Generic Type<a title="#2)-invoking-and-instantiating-a-generic-type" href="#2)-invoking-and-instantiating-a-generic-type"></a></h4>
<p>To reference the generic class we must perform a <em>generic type invocation</em>, which replaces <code>T</code> with some concrete value(use reference type), such as <code>Integer</code>. To instantiate this class, use the <code>new</code> keyword.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T is the type parameter and Integer is the type arguement.</span></span><br><span class="line">Name&lt;Integer&gt; integerClass = <span class="keyword">new</span> Name&lt;Integer&gt;();</span><br><span class="line">Name&lt;Integer&gt; integerClass = <span class="keyword">new</span> Name&lt;&gt;();</span><br><span class="line">Name&lt;String, Integer&gt; pairClass = <span class="keyword">new</span> Name&lt;&gt;(<span class="string">&quot;Even&quot;</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">//substitute a type parameter with a parameterized type (i.e., List&lt;String&gt;)</span></span><br><span class="line">Name&lt;String, List&lt;String&gt;&gt; p = <span class="keyword">new</span> Name&lt;&gt;(<span class="string">&quot;primes&quot;</span>, <span class="keyword">new</span> List&lt;String&gt;(...));</span><br></pre></td></tr></table></figure>
<p>One provides type arguments in order to create a parameterized type.</p>
<h4 id="3)-raw-types">3) Raw Types<a title="#3)-raw-types" href="#3)-raw-types"></a></h4>
<p>A <em>raw type</em> is the name of a generic class or interface without any type arguments. Assigning a parameterized type to its raw type is allowed, but assigning a raw type to a parameterized type or using a raw type to invoke generic method will get warning. The warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, it’s better avoiding using raw types.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a parameterized type of Name&lt;T&gt; with arguement.</span></span><br><span class="line">Name&lt;Integer&gt; integerClass = <span class="keyword">new</span> Name&lt;Integer&gt;();</span><br><span class="line"><span class="comment">// a raw type without actual arguements</span></span><br><span class="line">Name rawName = <span class="keyword">new</span> Name();</span><br></pre></td></tr></table></figure>
<h4 id="4)-generic-methods">4) Generic Methods<a title="#4)-generic-methods" href="#4)-generic-methods"></a></h4>
<p><em>Generic methods</em> are methods that introduce their own type parameters. This is similar to declaring a generic type, but the type parameter’s scope is limited to the method where it is declared. Static and non-static generic methods are allowed, as well as generic class constructors.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Pair&lt;K, V&gt; p1, Pair&lt;K, V&gt; p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp;</span><br><span class="line">               p1.getValue().equals(p2.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pair&lt;Integer, String&gt; p1 = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">1</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line">Pair&lt;Integer, String&gt; p2 = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">2</span>, <span class="string">&quot;pear&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> same = Util.&lt;Integer, String&gt;compare(p1, p2);</span><br></pre></td></tr></table></figure>
<h4 id="5)-bounded-type-parameters">5) Bounded Type Parameters<a title="#5)-bounded-type-parameters" href="#5)-bounded-type-parameters"></a></h4>
<p>When we want to restrict the types that can be used as type arguments in a parameterized type, we can use <em>bounded type parameters</em>. To declare a bounded type parameter, list the type parameter’s name, followed by the <code>extends</code> keyword, followed by its <em>upper bound</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function"><span class="keyword">int</span> <span class="title">countGreaterThan</span><span class="params">(T[] anArray, T elem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (T e : anArray)</span><br><span class="line">        <span class="keyword">if</span> (e.compareTo(elem) &gt; <span class="number">0</span>)</span><br><span class="line">            ++count;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In addition to limiting the types you can use to instantiate a generic type, bounded type parameters allow you to invoke methods defined in the bounds.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NaturalNumber</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NaturalNumber</span><span class="params">(T n)</span>  </span>&#123; <span class="keyword">this</span>.n = n; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEven</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n.intValue() % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A type parameter can have <em>multiple bounds</em>. A type variable with multiple bounds is a subtype of all the types listed in the bound. If one of the bounds is a class, it must be specified first.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class A &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">A</span> &amp; <span class="title">B</span> &amp; <span class="title">C</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="6)-inheritance-and-subtypes">6) Inheritance and Subtypes<a title="#6)-inheritance-and-subtypes" href="#6)-inheritance-and-subtypes"></a></h4>
<p><code>Name&lt;A&gt;</code> has no relationship to <code>Name&lt;B&gt;</code> even when class A is the parents of class B. The common parent of <code>Name&lt;A&gt;</code> and <code>Name&lt;B&gt;</code> is <code>Object</code>.</p>
<p>We can subtype a generic class or interface by extending or implementing it. The relationship between the type parameters of one class or interface and the type parameters of another are determined by the <code>extends</code> and <code>implements</code> clauses.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PayloadList</span>&lt;<span class="title">E</span>,<span class="title">P</span>&gt; <span class="keyword">extends</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setPayload</span><span class="params">(<span class="keyword">int</span> index, P val)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The following parameterizations of <code>PayloadList</code> are subtypes of <code>List&lt;String&gt;</code>: <code>PayloadList&lt;String,String&gt;</code>, <code>PayloadList&lt;String,Integer&gt;</code>, <code>PayloadList&lt;String,Exception&gt;</code></p>
<h4 id="7)-type-inference">7) Type Inference<a title="#7)-type-inference" href="#7)-type-inference"></a></h4>
<p><em>Type inference</em> is a Java compiler’s ability to look at each method invocation and corresponding declaration to determine the types of the arguments and, if available, the type that the result is being assigned, or returned.</p>
<p>Type inference enables us to invoke a generic method without specifying a type between angle brackets. Java compiler can infer the type parameters of a generic method call.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">addBox</span><span class="params">(U u, java.util.List&lt;Box&lt;U&gt;&gt; boxes)</span> </span>&#123;</span><br><span class="line">    Box&lt;U&gt; box = <span class="keyword">new</span> Box&lt;&gt;();</span><br><span class="line">    box.set(u);</span><br><span class="line">    boxes.add(box);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">java.util.ArrayList&lt;Box&lt;Integer&gt;&gt; listOfIntegerBoxes = <span class="keyword">new</span> java.util.ArrayList&lt;&gt;();</span><br><span class="line">BoxDemo.&lt;Integer&gt;addBox(Integer.valueOf(<span class="number">10</span>), listOfIntegerBoxes);</span><br><span class="line">BoxDemo.addBox(Integer.valueOf(<span class="number">20</span>), listOfIntegerBoxes);</span><br></pre></td></tr></table></figure>
<p>We can replace the type arguments required to invoke the constructor of a generic class with an empty set of type parameters <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.91ex" height="2.176ex" style="vertical-align: -0.338ex;" viewbox="0 -791.3 2114 936.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`&lt;&gt;`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMAIN-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/>
<path stroke-width="1" id="E1-MJMAIN-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
<g transform="translate(278,0)">
 <use xlink:href="#E1-MJMAIN-3C"/>
 <use xlink:href="#E1-MJMAIN-3E" x="778" y="0"/>
</g>
 <use xlink:href="#E1-MJMAIN-2018" x="1835" y="0"/>
</g>
</svg> as long as the compiler can infer the type arguments from the context.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p>Constructors can be generic in both generic and non-generic classes. The compiler infers the type <code>Integer</code> for the formal type parameter, <code>X</code>, of the generic class <code>MyClass&lt;X&gt;</code>. It infers the type <code>String</code> for the formal type parameter, <code>T</code>, of the constructor of this generic class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">X</span>&gt; </span>&#123;</span><br><span class="line">  &lt;T&gt; MyClass(T t) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass&lt;Integer&gt; myObject = <span class="keyword">new</span> MyClass&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>The <em>target type</em> of an expression is the data type that the Java compiler expects depending on where the expression appears.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">emptyList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// Expect an instance of List&lt;String&gt;, so this data type is the target type.</span></span><br><span class="line">List&lt;String&gt; listOne = Collections.emptyList();</span><br><span class="line"><span class="comment">// Or use a type witness and specify the value of T.</span></span><br><span class="line">List&lt;String&gt; listOne = Collections.&lt;String&gt;emptyList();</span><br></pre></td></tr></table></figure>
<p>Inference algorithm uses only invocation arguments, target types, and possibly an obvious expected return type to infer types.</p>
<h3 id="ⅱ.-wildcards">Ⅱ. Wildcards<a title="#ⅱ.-wildcards" href="#ⅱ.-wildcards"></a></h3>
<p>In generic code, the question mark <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.391ex" height="2.009ex" style="vertical-align: -0.171ex;" viewbox="0 -791.3 1029.5 865.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">`?`</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-2018" d="M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z"/>
<path stroke-width="1" id="E1-MJMAIN-3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-2018" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-3F" x="278" y="0"/>
 <use xlink:href="#E1-MJMAIN-2018" x="751" y="0"/>
</g>
</svg>, called the <em>wildcard</em>, represents an unknown type. The wildcard can be used in a variety of situations: as the type of a parameter, field, or local variable; sometimes as a return type. The wildcard is never used as a type argument for a generic method invocation, a generic class instance creation, or a supertype.</p>
<h4 id="1)-bounded-wildcards">1) Bounded Wildcards<a title="#1)-bounded-wildcards" href="#1)-bounded-wildcards"></a></h4>
<p>You can use an upper bounded wildcard to relax the restrictions on a variable.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// matches a list of type Number or any of its subclasses.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sumOfList</span><span class="params">(List&lt;? extends Number&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> s = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Number n : list)</span><br><span class="line">        s += n.doubleValue();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Double&gt; ld = Arrays.asList(<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">3.5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sum = &quot;</span> + sumOfList(ld)); <span class="comment">// 7.0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Basics</title>
    <url>/2020/20201023-Linux-Basics/</url>
    <content><![CDATA[<h1 id="linux-basics">Linux Basics<a title="#linux-basics" href="#linux-basics"></a></h1>
<h2 id="part.1-history">Part.1 History<a title="#part.1-history" href="#part.1-history"></a></h2>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gjyai1ptkcj30q60j0tc5.jpg" alt="截屏2020-10-22 下午5.10.17" style="zoom: 67%;">
<p>​            (From Advanced Operating Systems in The University of Tokyo)</p>
<p>Unix:</p>
<p>Unix is very popular and ported to multiple architectures due to its simple design and ease of use.</p>
<p>Simplicity:<br>
➢ Small number of system calls with clearly defined design.<br>
➢ Everything is a file.<br>
➢ Written in C for portability.<br>
➢ Easy and fast process creation (fork()).<br>
➢ Simple and efficient Inter-Process Communication mechanisms (IPC).</p>
<h2 id="part.2-linux-open-source-model">Part.2 Linux open source model<a title="#part.2-linux-open-source-model" href="#part.2-linux-open-source-model"></a></h2>
<p>Benefits of open source vs closed development:</p>
<p>➢ Security, stability: Given enough eyeballs, all bugs are shallow.<br>
➢ Code quality.<br>
➢ Freely modifiable by anyone having an interest to do so.<br>
➢ Education, research:  We can PEEK at the code to understand how it works and we can POKE it to experiment and build new systems.</p>
<h2 id="part.3-linux-kernel">Part.3 Linux Kernel<a title="#part.3-linux-kernel" href="#part.3-linux-kernel"></a></h2>
<p>Sources are freely <a href="https://www.kernel.org/" target="_blank">available</a>.</p>
<p>Manages the hardware and provides <strong>interfaces</strong> or user space processes to access the hardware and perform privileged operations.</p>
<p>Monolithic Model: Opposed to the <em>microkernel</em> model, Linux is monolithic. All the OS services run in kernel, privileged mode. System calls are the one and only way an application can enter the kernel to request OS services and privileged operations such as accessing the hardware.</p>
<p>Kernel vs user level programming:<br>
➢ No C library mostly because of speed and size. However, the kernel implements lots of usefull functions from the C library.<br>
➢ 2% assembly, the rest in GNU C (GCC extensions).<br>
➢ No memory protection.<br>
➢ Highly concurrent: Preemption, interrupts, running on SMP (Symmetric Multiprocessor System). Race conditions without proper synchronization.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gjybtotr4sj30vu0mqaib.jpg" alt="截屏2020-10-22 下午7.17.10" style="zoom: 50%;">
<p>​      								      (From Advanced Operating Systems in The University of Tokyo)</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gjyfieodezj30ys0hsk0q.jpg" alt="Screen Shot 2020-10-22 at 21.24.39" style="zoom: 55%;">
<p>​        							       (From Advanced Operating Systems in The University of Tokyo)</p>
<h3 id="system-calls">System calls<a title="#system-calls" href="#system-calls"></a></h3>
<p>Syscalls can be classified into groups:<br>
➢ <strong>Process management/scheduling:</strong> fork, exit, execve, nice,{<em>get|set</em>}priority,{get|set}pid, etc.<br>
➢ <strong>Memory management:</strong> brk, mmap, swap{on|of}, etc.<br>
➢ <strong>File system</strong>: open, read, write, lseek, stat, etc.<br>
➢ <strong>Inter-Process Communication</strong>: pipe, shmget, semget, etc.<br>
➢ <strong>Time management</strong>: {get|set}timeofday, time, timer create, etc.<br>
➢ Others: *{<em>get|set</em>}*uid, syslog, connect, etc.</p>
<p>System calls table syscall identifier(unique integer).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 common read sys_read</span><br><span class="line">1 common write sys_write</span><br><span class="line">2 common open sys_open</span><br><span class="line">3 common close sys_close</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure>
<h3 id="syscall-invocation(user-space-side)">Syscall invocation(user space side)<a title="#syscall-invocation(user-space-side)" href="#syscall-invocation(user-space-side)"></a></h3>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gjz28nljggj30xi06uabg.jpg" alt="Screen Shot 2020-10-23 at 10.30.07" style="zoom:50%;">
<p>​										   (From Advanced Operating Systems in The University of Tokyo)</p>
<p>Syscalls are rarely invoked directly. Most of them are wrapped by the C library. The programmer uses the C library Application Programming Interface (API).</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gjz2kopy4lj30zo04oabx.jpg" alt="Screen Shot 2020-10-23 at 10.42.38" class="φcx"></p>
<p>​								 		 (From Advanced Operating Systems in The University of Tokyo)</p>
<p>System calls behavior is documented in man pages.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">man &lt;syscall name&gt;</span><br></pre></td></tr></table></figure>
<p>Some syscalls does not have a wrapper in the C library. A syscall can be called directly through syscall man syscall.(invocation without the wrapper)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">bytes_written = syscall(SYS_write, <span class="number">1</span>, message, <span class="number">14</span>);</span><br></pre></td></tr></table></figure>
<p>On x86 64, syscalls can be used directly through thesyscall assembly instruction.(invocation without the C library)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># syscall_asm.s</span><br><span class="line">			.global _start</span><br><span class="line">      .text </span><br><span class="line">_start:</span><br><span class="line">				<span class="meta"># write(1, message, 14) </span></span><br><span class="line">				mov $<span class="number">1</span>, %rax</span><br><span class="line">				mov $<span class="number">1</span>, %rdi</span><br><span class="line">				mov $message, %rsi </span><br><span class="line">        mov $<span class="number">14</span>, %rdx </span><br><span class="line">        syscall</span><br><span class="line">				</span><br><span class="line">        <span class="meta"># exit(0)</span></span><br><span class="line">				mov $<span class="number">60</span>, %rax x</span><br><span class="line">        <span class="keyword">or</span> %rdi, %rdi </span><br><span class="line">        syscall</span><br><span class="line">message:</span><br><span class="line">				.ascii <span class="string">&quot;Hello, world!¥n&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="syscall-execution(kernel-space-side)">Syscall execution(kernel space side)<a title="#syscall-execution(kernel-space-side)" href="#syscall-execution(kernel-space-side)"></a></h3>
<p>When an interrupt is received by the CPU, it stops whatever it is doing and <strong>the kernel executes the interrupt handler</strong>.</p>
<p>Interrupts:<br>
Asynchronous: <strong>hardware interrupts</strong>, issued from devices.<br>
Synchronous: <strong>exceptions</strong>, triggered involuntarily by the program Itself.<br>
Synchronous, programmed exceptions: <strong>software interrupts</strong>, issued voluntarily by the code of the program itself.</p>
<p>How is a syscall invoked from user space:<br>
➢ User space put the <strong>syscall identifier and parameters values into registers</strong> (x86)<br>
➢ Then issues a <strong>software interrupt</strong><br>
➢ The kernel executes the interrupt handler, <strong>system call handler</strong>.<br>
Puts the registers values into a data structure placed on the stack<br>
Checks the validity of the syscall (number of arguments)<br>
Then execute the system call implementation.</p>
<p>How to exchange data between user and memory areas with pointers:<br>
➢When a kernel function gets a pointer to some memory in user space it needs to use: The kernel copies it into its memory area (<code>copy from user</code>) .<br>
➢ When the kernel wants to write in a user space buffer: It uses <code>copy to user</code>.</p>
<h3 id="implementing-a-new-system-call">Implementing a new system call<a title="#implementing-a-new-system-call" href="#implementing-a-new-system-call"></a></h3>
<ol>
<li>Write your syscall function<br>
In an existing file if it makes sense. Is it related to time management ? <em>→</em> kernel/time/time.c<br>
Or, if the implementation is large and self-contained: in a new file. You will have to edit the kernel <code>Makefiles</code> to integrate it in the compilation process.</li>
<li>Add it to the syscall table and give it an identifier<br>
<code>arch/x86/syscalls/syscall 64.tbl</code>for Linux 4.0</li>
<li>Add the prototype in <code>include/linux/syscalls.h</code>.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_gettimeofday</span><span class="params">(struct timeval_user *tv, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 struct timezone_user *tz)</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Recompile, reboot and run. Touching the syscall table will trigger the entire kernel compilation</li>
</ol>
<p>➢ <strong>Pros:</strong> Easy to implement and use, fast<br>
➢ <strong>Cons</strong>:<br>
Needs an official syscall number<br>
Interface cannot change after implementation<br>
Must be registered for each architecture<br>
Probably too much work for small exchanges of information<br>
➢ <strong>Alternative</strong>:<br>
Device or virtual file:User/kernel space communication through <code>read,write,ioctl</code>.</p>
<h2 id="part.4-virtual-machine">Part.4 Virtual machine<a title="#part.4-virtual-machine" href="#part.4-virtual-machine"></a></h2>
<blockquote>
<p>I would classify virtual machine technologies into three categories (not all products fit clearly into one category):</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Full_virtualization" target="_blank">Full virtualization</a>, i.e., complete hardware emulation. Examples: <a href="http://en.wikipedia.org/wiki/QEMU" target="_blank">Qemu</a>, <a href="http://en.wikipedia.org/wiki/DOSBox" target="_blank">Dosbox</a>. Pro: you can potentially emulate any architecture on any hardware. Con: it’s the slowest way to do it.</li>
<li>Hardware-assisted virtualization, where you can emulate machine X on machine X. This can be a lot faster than full virtualization, because most instructions are executed natively, but you lose the ability to run a foreign architecture. There are two sub-categories:</li>
<li>Hypervisor-based VMs: you run several OSes alongside each other. The bottom layer, called the hypervisor, is a special-purpose OS that runs the VMs and nothing else. Examples: <a href="http://en.wikipedia.org/wiki/Xen" target="_blank">Xen</a>, <a href="http://en.wikipedia.org/wiki/VMware_ESX" target="_blank">VMware ESX</a>.</li>
<li>Hosted VMs: there is a main OS, the VM is an application on this main OS. Examples: <a href="http://en.wikipedia.org/wiki/VirtualBox" target="_blank">VirtualBox</a>, <a href="http://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine" target="_blank">KVM</a>.</li>
<li><a href="http://en.wikipedia.org/wiki/Operating_system-level_virtualization" target="_blank">OS-level virtualization</a>: you run several instances of the same OS. This can be in turn a lot more lightweight than hardware virutalization, but you lose some isolation and of course the ability to run different OSes. Examples: <a href="http://en.wikipedia.org/wiki/OpenVZ" target="_blank">OpenVZ</a>, <a href="http://en.wikipedia.org/wiki/FreeBSD_jail" target="_blank">FreeBSD jails</a>.</li>
</ul>
<p>(From <a href="https://unix.stackexchange.com/questions/5741/what-are-the-differences-between-various-vm-software" target="_blank">here</a>.)</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gjyzldca2dj30b40bsgmh.jpg" alt="image1" style="zoom:80%;">
<p>​                                      				           (KVM + Qemu. From <a href="https://www.packetflow.co.uk/what-is-the-difference-between-qemu-and-kvm/" target="_blank">here</a>)</p>
<p>GDB server: more details from <a href="https://www.gnu.org/software/gdb/" target="_blank">here</a>.</p>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>Process Management</title>
    <url>/2020/20201024-Process-Management/</url>
    <content><![CDATA[<h1 id="process-management">Process Management<a title="#process-management" href="#process-management"></a></h1>
<h2 id="part.1-process">Part.1 Process<a title="#part.1-process" href="#part.1-process"></a></h2>
<p>Every application(program) comes into execution through means of process, <strong>process</strong> is a running instance of a program. Processes are created through different system calls, most popular are <strong>fork()</strong> and <strong>exec()</strong>.</p>
<p>The fork() creates a new process by duplicating the calling process, The new process, referred to as child, is an exact duplicate of the calling process, referred to as parent.</p>
<p>In computing, exec is a functionality of an operating system that runs an executable file in the context of an already existing process, replacing the previous executable.  As a new process is not created, the process identifier (PID) does not change, but the machine code, data, heap, and stack of the process are replaced by those of the new program.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk082r4imbj30bq0kg40e.jpg" alt="Screen Shot 2020-10-24 at 10.38.27" style="zoom:33%;">
<p>Tutorial on [<code>fork()</code>](<a href="http://www.csl.mtu.edu/cs4411.ck/www/NOTES/">http://www.csl.mtu.edu/cs4411.ck/www/NOTES/</a> process/fork/create.html) usage.<br>
Combining <a href="https://ece.uwaterloo.ca/dwharder/icsrts/Tutorials/fork_exec/" target="_blank"> <code>fork()</code> and <code>exec()</code></a>. (execl(), execlp(), execle(), execv(), execvp(), execve())</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fork() == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//child process</span></span><br><span class="line">		<span class="keyword">char</span> * execve_str[] = &#123;<span class="string">&quot;env&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">		<span class="keyword">char</span> * env[] = &#123;<span class="string">&quot;PATH=/tmp&quot;</span>, <span class="string">&quot;USER=lei&quot;</span>, <span class="string">&quot;STATUS=testing&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">		<span class="keyword">if</span> (execve(<span class="string">&quot;/usr/bin/env&quot;</span>,execve_str,env) &lt;<span class="number">0</span> )&#123;</span><br><span class="line">			perror(<span class="string">&quot;error on exec&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//parent process</span></span><br><span class="line">		wait(&amp;childpid);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;execve done\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.2-the-process-descriptor">Part.2 The process descriptor<a title="#part.2-the-process-descriptor" href="#part.2-the-process-descriptor"></a></h2>
<p>See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/task_struct" target="_blank">here</a> or <a href="http://www.science.smith.edu/~nhowe/262/oldlabs/sched.html" target="_blank">here</a>.</p>
<p>In the Linux kernel, processes are defined as <code>task_struct</code> structures in <code>include/linux/sched.h</code>, line 281. This structure contains every relevant information about a process.</p>
<p>List of processes implemented as a linked list of <code>task struct</code>. It is dynamically allocated (heap) through the slab allocator.</p>
<p>Quick access to <code>task struct</code> of the task currently running on a core: arch/x86/include/asm/current.h.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk0iv2pigvj30b60degmo.jpg" alt="Screen Shot 2020-10-24 at 16.51.34" style="zoom: 50%;">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Full structure definition in linux/sched.h */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tastk_struct</span> &#123;</span> </span><br><span class="line">	<span class="keyword">volatile</span> <span class="keyword">long</span> state; </span><br><span class="line">  <span class="keyword">void</span> *<span class="built_in">stack</span>;</span><br><span class="line">	<span class="comment">/* ... */</span></span><br><span class="line">	<span class="keyword">int</span> prio; </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">	<span class="keyword">cpumask_t</span> cpus_allowed;</span><br><span class="line">	<span class="comment">/* ... */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tasks</span>;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">	<span class="keyword">pid_t</span> pid;</span><br><span class="line">	<span class="comment">/* ... */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">parent</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">children</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling</span>;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="process-states">Process states<a title="#process-states" href="#process-states"></a></h3>
<p>State field of the task struct:</p>
<p>· <code>TASK_RUNNING</code>:<br>
Process is runnable (running or in a CPU run queue) In user or kernel space.</p>
<p>· <code>TASK_INTERRUPTIBLE</code>:<br>
Process is sleeping waiting for some condition.<br>
Switched to TASK RUNNING on condition true or signal received.</p>
<p>· <code>TASK_UNINTERRUPTIBLE</code>:<br>
Same as TASK INTERRUPTIBLE but does not wake up on signal.</p>
<p>· <code>TASK_TRACED</code>:<br>
Traced by another process(ex:debugger)</p>
<p>· <code>TASK_STOPPED</code>:<br>
Not running nor waiting,result of the reception of some signals to pause the process.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk0jhtmibbj319m0o0gv2.jpg" alt="Screen Shot 2020-10-24 at 17.12.52" style="zoom: 33%;">
<h3 id="process-hierarchy">Process hierarchy<a title="#process-hierarchy" href="#process-hierarchy"></a></h3>
<p>· Root: init, PID 1<br>
Launched by the kernel as the last step of the boot process.<br>
· fork-based process creation:<br>
Each process has aparent: parent pointer in the <code>task_struct</code>.<br>
· Processes may have children: children field(list head).<br>
· Processes may have siblings: siblings field.<br>
· List of all tasks: tasks field.<br>
Easy manipulation through <code>next task(t)</code> and <code>for eachprocess(t)</code>.</p>
<h2 id="part.3-process-creation">Part.3 Process creation<a title="#part.3-process-creation" href="#part.3-process-creation"></a></h2>
<p>Linux does not implements creating a tasks from nothing.</p>
<p><code>fork()</code> &amp; <code>exec()</code></p>
<p>· <code>fork()</code> creates a child, copy of the parent process. Only PID, PPID and some resources/stats differ. Linux duplicates the parent page tables and creates a new process descriptor.</p>
<p>Page table access bits: read-only.<br>
Copy-On-Write (COW): memory pages are copied only when they are referenced for write operations.</p>
<p>· <code>exec()</code> loads into a process address space a new executable.</p>
<h3 id="forking-:-fork()-and-vfork()">Forking : <code>fork()</code> and <code>vfork()</code><a title="#forking-:-fork()-and-vfork()" href="#forking-:-fork()-and-vfork()"></a></h3>
<p><code>fork()</code> is implemented by the <code>clone()</code> system call. <code>sys_clone()</code> calls <code>do_fork()</code>, which calls <code>copy_process()</code> and starts the new task.</p>
<p><code>copy_process()</code>:</p>
<ol>
<li>Calls <code>dup_tasks_truct()</code>. Duplicates kernel stack, <code>task_struct</code> and <code>thread_info</code>.</li>
<li>Checks that we do not overflow the processes number limit.</li>
<li>Small amount of values are modified in the <code>task_struct</code>.</li>
<li>Calls <code>sched_fork()</code> to set the child <code>state</code> set to <code>TASK_NEW</code> .</li>
<li>Copies parent info: files, signal handlers, etc.</li>
<li>Gets a new PID through <code>alloc_pid()</code>.</li>
<li>Returns a pointer to the created child <code>task_struct</code>.</li>
</ol>
<p>Finally, <code>do_fork()</code> calls wake up <code>new_task()</code>. State becomes <code>TASK_RUNNING</code></p>
<p><code>vfork()</code>: alternative without copy of the address space.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ProcessCreation.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* This is the child process.  print my student id. */</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;My student id is : 31206833\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* The fork failed.  Report failure.  */</span></span><br><span class="line">      perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">/* This is the parent process.  Wait for the child to complete.  */</span></span><br><span class="line">     <span class="keyword">if</span> (waitpid (pid, &amp;status, <span class="number">0</span>) != pid)</span><br><span class="line">       status = <span class="number">-1</span>;</span><br><span class="line">     <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.4-threads">Part.4 Threads<a title="#part.4-threads" href="#part.4-threads"></a></h2>
<p>Threads are concurrent flows of execution belonging to the same program sharing the same address space.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk0qkit41ej30f20eggnv.jpg" alt="Screen Shot 2020-10-24 at 21.18.20" style="zoom:50%;">
<p>In Linux there is no concept of a thread.</p>
<ol>
<li>No scheduling particularity.</li>
<li>A thread is just another process sharing some information with other processes.</li>
<li>Each thread has its own <code>task_struct</code>.</li>
<li>Created through <code>clone()</code> with specific flags indicating sharing. More information form <a href="https://man7.org/linux/man-pages/man2/clone.2.html" target="_blank">here</a>.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ThreadCreation.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> errExit(msg)    do &#123; perror(msg); exit(EXIT_FAILURE);&#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">childFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;My student id is : 312. \n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Terminating func...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In the main.&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">stack</span>;</span><br><span class="line">    <span class="keyword">char</span> *stackTop;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">stack</span> = <span class="built_in">malloc</span>(STACK_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>)</span><br><span class="line">        errExit(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">    stackTop = <span class="built_in">stack</span> + STACK_SIZE;  </span><br><span class="line"></span><br><span class="line">    pid = clone(&amp;childFunc, stackTop, CLONE_VM｜CLONE_VFORK， <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;clone&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;clone() returned %ld\n&quot;</span>, (<span class="keyword">long</span>) pid);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="kernel-threads">Kernel threads<a title="#kernel-threads" href="#kernel-threads"></a></h3>
<p>Kernel threads are schedulable entities (like regular processes) and do not have their own address space( <code>mm</code>  in <code>task_struct</code> is NULL).</p>
<p>Kernel threads are all forked from the <code>kthread </code> kernel thread (PID 2), using <code>clone()</code>. To create a kernel thread, use <code>kthread_create() </code>.</p>
<p>When created through <code>kthread_create()</code>, the thread is not in a runnable state and need to call <code>wake_up_process()</code> or use <code>kthread run()</code>.</p>
<p>Thread runs until it calls do <code>exit()</code> or until another part of the kernel calls <code>kthread_stop()</code>.</p>
<h2 id="part.5-process-termination">Part.5 Process termination<a title="#part.5-process-termination" href="#part.5-process-termination"></a></h2>
<p>Termination on invoking the <code>exit()</code> system call which can be implicitly inserted by the compiler on <code>return</code> from <code>main</code>. <code>sys_exit()</code> calls <code>do_exit()</code>.</p>
<h3 id="do-exit()-(kernel/exit.c):"><code>do exit()</code> (kernel/exit.c):<a title="#do-exit()-(kernel/exit.c):" href="#do-exit()-(kernel/exit.c):"></a></h3>
<ol>
<li>Call <code>exit_signals()</code> which set the <code>PF EXITING</code> flag in the <code>task_struct</code></li>
<li>Set the exit code in the <code>exit_code</code> field of the <code>task_struct</code>. (To be retrieved by the parent.)</li>
<li>Call <code>exit_mm()</code> to release the <code>mm_struct</code> for the task. If it is not shared with any other process, it is destroyed.</li>
<li>Call <code>exit_sem()</code>:process dequeued from potential semaphores queues.</li>
<li>Call <code>exit_fs()</code> and <code>exit_files()</code> to update accounting information. Potential data structures that are not used anymore are freed.</li>
<li>Call <code>exit_notify()</code>. Send signals to parent and reparent potential children. Set the <code>exit_state</code> of the <code>task_struct</code> to <code>EXIT ZOMBIE</code> .</li>
<li>Call <code>do_taskdead()</code>. Set the <code>state</code> to <code>TASK DEAD</code> ,  call <code>schedule()</code> and never returns.</li>
</ol>
<p>At that point, what is left is the <code>task_struct</code>, <code>thread info</code> and kernel stack. To provide information to the parent. Parent notifies the kernel when everything can be freed.</p>
<h3 id="task_struct-cleanup:"><code>task_struct</code> cleanup:<a title="#task_struct-cleanup:" href="#task_struct-cleanup:"></a></h3>
<ol>
<li>
<p>Separated from the process of exiting because of the need to pass exit information to the parent. Until the parent grab the exit information through <code>wait4()</code>.</p>
</li>
<li>
<p>Cleanup implemented in <code>release_task()</code> called from the <code>wait4()</code> implementation.</p>
<p>Remove the task from the task list. Release and free remaining resources.</p>
</li>
</ol>
<p>A parent exits before its child. Child must be reparented(To another process in the current thread group or <code>init</code> if that fails).</p>
<p><code>exit notify()</code> calls <code>forget_original_parent()</code>, that calls <code>find_newreaper()</code>. Returns the <code>task_struct</code> of another task in the thread group if it exists, otherwise the one from init. Then, all the children of the currently dying task are reparented to the reaper.</p>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>Memory Management</title>
    <url>/2020/20201025-Memory-Management/</url>
    <content><![CDATA[<h1 id="memory-management">Memory Management<a title="#memory-management" href="#memory-management"></a></h1>
<h2 id="part.1-address-space-and-memory-descripter">Part.1 Address space and memory descripter<a title="#part.1-address-space-and-memory-descripter" href="#part.1-address-space-and-memory-descripter"></a></h2>
<h3 id="address-space">Address space<a title="#address-space" href="#address-space"></a></h3>
<p>The memory that a process can access is called its address space.  It is defined by the process page table and set up by the kernel.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk19i68q35j30zu0akwi3.jpg" alt="Screen Shot 2020-10-25 at 08.13.37" style="zoom:45%;">
<p>Each process is given a flat(as opposed to segmented) 32/64-bits address space and a memory address is an index within the address space.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk19oatz2gj30ly07q40h.jpg" alt="Screen Shot 2020-10-25 at 08.19.30" style="zoom: 67%;">
<p>Interval of addresses that the process has the right to access: virtual memory areas (VMAs).</p>
<p>VMAs can be dynamically added or removed to the process address space and have associated permissions: read, write, execute. When a process try to access an address outside of valid VMAs, or access a VMA with wrong permissions: segmentation fault.</p>
<p>VMAs cancontain:<br>
Mapping of the executable file code (text section)<br>
Mapping of the executable file initialized variables (data section)<br>
Mapping of the zero page for uninitialized variables (bss section)<br>
Mapping of the zero page for the user-space stack<br>
Text, data, bss for each shared library used<br>
Memory-mapped files, shared memory segment, anonymous mappings (used by malloc)</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk1ah62rodj310g0bygny.jpg" alt="Screen Shot 2020-10-25 at 08.47.11" style="zoom: 40%;">
<h3 id="memory-descriptor">Memory descriptor<a title="#memory-descriptor" href="#memory-descriptor"></a></h3>
<ol>
<li>
<p>The kernel represent a process address space through a struct <code>mm_struct</code> object, the memory descriptor which is defined in <code>include/linux/mm_types.h</code>.</p>
<p>All <code>mm_struct</code> are linked together in a doubly linked list. Through the <code>mmlist </code> field if the <code>mm_struct</code>.</p>
<p>See more from <a href="https://elixir.bootlin.com/linux/latest/ident/mm_struct" target="_blank">here</a>.</p>
</li>
<li>
<p>Memory descriptor allocation</p>
<p>A task memory descriptor is located in the <code>mm_field</code> of the corresponding <code>task_struct</code>. Current task memory descriptor: <code>current-&gt;m</code>. During <code>fork()</code>,<code>copy_mm()</code> is making a copy of the parent memory descriptor for the child. <code>copy_mm()</code>calls <code>dup_mm()</code> which calls <code>allocate_mm()</code> which allocates a <code>mm_struct</code> object from a slab cache.</p>
<p>Two threads sharing the same address space have the <code>mm_field</code> of their <code>task_struct</code> pointing to the same <code>mm_struc</code> object. Threads are created using the <code>CLONE_VM</code> flag passed to <code>clone()</code> → <code>allocate_mm()</code> is not called.</p>
</li>
<li>
<p>Memory descriptor destruction</p>
<p>When a process exits, <code>do_exit()</code> is called. It calls <code>exit_mm()</code>. Performs some housekeeping/statistics updates.</p>
<p>Call <code>mm_put()</code>. <code>mm_put()</code> decrements the <code>users</code> field and calls <code>_mmput()</code> if it reaches 0. <code>_mmput()</code> calls <code>mmdrop()</code>, that decrements the <code>count</code> field and calls <code>mm_drop()</code> if it reaches 0. <code>_mmdrop()</code> calls <code>free_mm()</code> which return the memory for the <code>mm_struct()</code> to the slab cache (i.e. free).</p>
</li>
<li>
<p>Memory descriptor and kernel threads</p>
<p>Kernel threads do not have a user-space address space. <code>mm</code> field of a kernel thread <code>task_struct</code> is <code>NULL</code>. When a kernel thread is scheduled, the kernel notice its <code>mm</code> is <code>NULL</code> so it keeps the previous address space loaded (page tables) and makes  the <code>active_mm</code> field of the kernel thread to point on the borrowed <code>mm_struct</code>.</p>
</li>
</ol>
<h2 id="part.2-virtual-memory-area">Part.2 Virtual Memory Area<a title="#part.2-virtual-memory-area" href="#part.2-virtual-memory-area"></a></h2>
<h3 id="vm_area_struct"><code>vm_area_struct</code><a title="#vm_area_struct" href="#vm_area_struct"></a></h3>
<p>Each VMA is represented by an object of type <code>vm_area_struct</code> and defined in <code>include/linux/mm_types.h</code>. See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/vm_area_struct" target="_blank">here</a>. Each VMA is unique to the associated <code>mm_struct</code>. Two processes mapping the same file will have two different <code>mm_struct</code> objects, and two different vm area struct objects. Two threads sharing a <code>mm_struct</code> object also share the <code>vm_area_struct</code> objects.</p>
<h3 id="flags">Flags<a title="#flags" href="#flags"></a></h3>
<p>Flags specify properties and information for all the pages contained in the VMA.</p>
<p><code>VM READ</code>: pages can be read from<br>
<code>VM WRITE</code>: pages can be written to<br>
<code>VM EXEC</code>: code inside pages can be executed<br>
<code>VM SHARED</code>: pages are shared between multiple processes (if unset the mapping is private)</p>
<p><code>VM MAYREAD</code>: the <code>VM READ</code> flag can be set<br>
<code>VM MAYWRITE</code>: the <code>VM WRITE</code> flag can be set<br>
<code>VM MAYEXEC</code>: the <code>VM EXEC</code> flag can be set<br>
<code>VM MAYSHARE</code>: the <code>VM SHARED</code> flag can be set</p>
<p><code>VM GROWSDOWN</code>: area can grow downwards<br>
<code>VM GROWSUP</code>: area can grow upwards<br>
<code>VM SHM</code>: area can be used for shared memory<br>
<code>VM DENYWRITE</code>: area maps an unwritable file<br>
<code>VM EXECUTABLE</code>: area maps an executable file<br>
… …</p>
<h3 id="vma-operations">VMA operations<a title="#vma-operations" href="#vma-operations"></a></h3>
<p><code>vm ops</code>  in <code>vm_area_struct</code> points to a <code>vm_operations_struct</code> object which contains function pointers to operate on a specific VMAs and is defined in include/linux/mm.h. See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/vm_operations_struct" target="_blank">here</a>.</p>
<p>Function pointers in vm operations struct:<br>
<code>open()</code>: called when the area is added to an address space.<br>
<code>close()</code>: called when the area is removed from an address space.<br>
<code>fault()</code>: invoked by the page fault handler when a page that is not present in physical memory is accessed.<br>
<code>page_mkwrite()</code>:invoked by the page fault handler when a previously read-only page is made writable.</p>
<h3 id="vmas-in-real-life">VMAs in real life<a title="#vmas-in-real-life" href="#vmas-in-real-life"></a></h3>
<p>From userspace, one can observe the VMAs map for a given process: <code>cat /proc/&lt;pid&gt;/maps</code>.</p>
<p>· <code>/proc/&lt;pid&gt;/maps</code>  columnsdescription:<br>
Address range Permissions<br>
Start offset of file mapping<br>
Device containing the mapped file<br>
Mapped file inode number<br>
Mapped file pathname</p>
<p>Can also use the command <code>pmap &lt;pid&gt;</code>.</p>
<h2 id="part.3-vma-manipulation">Part.3 VMA manipulation<a title="#part.3-vma-manipulation" href="#part.3-vma-manipulation"></a></h2>
<h3 id="finding-a-vma">Finding a VMA<a title="#finding-a-vma" href="#finding-a-vma"></a></h3>
<p><code>find_vma()</code>: used to find a VMA in which a specific memory address resides, its prototype in include/linux/mm.h and  it is defined in mm/mmap.c. See more details from <a href="https://elixir.bootlin.com/linux/latest/C/ident/find_vma" target="_blank">here</a>.</p>
<p><code>find_vma_prev()</code>: returns in addition the last VMA before a given address.</p>
<p><code>find_vma_intersection()</code>: returns the first VMA overlapping a given address range.</p>
<h3 id="creating-an-address-interval">Creating an address interval<a title="#creating-an-address-interval" href="#creating-an-address-interval"></a></h3>
<p><code>do_mmap()</code> is used to create a new linear address interval which can result in the creation of a new VMAs<br>
or a merge of the create area with an adjacent one when they have the same permissions.</p>
<p>On error <code>do_mmap()</code> returns a negative value.</p>
<p>On success:<br>
The kernel tries to merge the new interval with an adjacent one having same permissions.<br>
Otherwise, create a new VMA.<br>
Returns a pointer to the start of the mapped memory area.</p>
<p><code>do_mmap()</code> is exported to user-space through <code>mmap2()</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">externunsignedlong <span class="title">do_mmap</span><span class="params">(struct file *file, unsignedlong addr, unsignedlong len, unsignedlong prot, unsignedlong flags,<span class="keyword">vm_flags_t</span> vm_flags, unsignedlong pgoff, unsignedlong *populate)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Caller must hold <code>mm-&gt;mmap_sem</code> (RW semaphore). Maps the file <code>file</code> in the address space at address <code>addr</code> for length <code>len</code>. Mapping starts at offset <code>pgoff</code> in the file. <code>prot</code> specifies access permissions for the memory pages: <code>PROT READ</code>, <code>PROT WRITE</code>, <code>PROT EXEC</code>, <code>PROT NONE</code>.</p>
<p><code>flags</code> specifies the rest of the <code>VMAoptions</code>:<br>
<code>MAP SHARED</code>: mapping can be shared<br>
<code>MAP PRIVATE</code>: mapping cannot be shared<br>
<code>MAP FIXED</code>: created interval must start at addr<br>
<code>MAP ANONYMOUS</code>: mapping is not file-backed<br>
<code>MAP GROWSDOWN</code>: corresponds to VM GROWSDOWN<br>
… …</p>
<h3 id="removing-an-address-interval">Removing an address interval<a title="#removing-an-address-interval" href="#removing-an-address-interval"></a></h3>
<p>Removing an address interval is done through <code>do_munmap()</code> and <code>0</code> returned on success.</p>
<p>Exported to user-space through <code>munmap()</code>.</p>
<h2 id="part.4-page-tables">Part.4 Page Tables<a title="#part.4-page-tables" href="#part.4-page-tables"></a></h2>
<p>All memory accesses made by the CPU are virtual and translated to physical addresses through the page tables. Linux kernel set the page tables and the translation is made automatically by the hardware (MMU) according to the page tables content. Page size is machine dependent. Typical values for x86 are <strong>4K</strong>, 2M, and 1G. Most of the pages are used for (1) kernel/userspace memory (<em>anonymous mapping</em>) or (2) file mapping.</p>
<p>The address space is defined by VMAs and is sparsely populated(One address space per process → one page table per process). A hierarchical tree structure is used to define the page table.</p>
<img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-10-25 at 11.07.47.png" alt="Screen Shot 2020-10-25 at 11.07.47" style="zoom:50%;">
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk1el0seruj30ta0c6gmv.jpg" alt="Screen Shot 2020-10-25 at 11.09.15" style="zoom:50%;">
<p>Each <strong>physical page</strong> is represented by a struct page. Assuming 8GB of RAM and 4K-sized pages: 128MB reserved for struct page objects(<em>∼</em>1.5%).</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The kernel uses struct page to keep track of the owner of the page */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;            <span class="comment">/* page status (permission,etc.) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> counters;              <span class="comment">/* usage count */</span></span><br><span class="line">  <span class="keyword">atomic_t</span> _mapcount;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">private</span>;          <span class="comment">/* private mapping */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">mapping</span>;</span>  <span class="comment">/* file mapping */</span></span><br><span class="line">  <span class="keyword">pgoff_t</span> index;                  <span class="comment">/* offset within mapping */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lru</span>;</span></span><br><span class="line">  <span class="keyword">void</span> *<span class="keyword">virtual</span>;                  <span class="comment">/* virtualaddres */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="zones">Zones<a title="#zones" href="#zones"></a></h3>
<p>Because of hardware limitations, only certain physical pages can be used in certain contexts. Physical memory is divided into <strong>zones</strong>. Zones layout is completely architecture dependent.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk2g0o5aojj30u80ecwgj.jpg" alt="Screen Shot 2020-10-26 at 08.44.18" style="zoom:33%;">
<p><code>ZONE DMA</code>: pages with which DMA(Direct Memory Access) can be used.<br>
<code>ZONE DMA32</code>: memory for other DMA limited devices.<br>
<code>ZONE NORMAL</code>: page always mapped in the address space.<br>
<code>ZONE HIGHMEM:</code> pages only mapped temporary.</p>
<p>Each zone is represented by a struct zone object and is defined in <code>include/linux/mmzone.h</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zone</span> &#123;</span></span><br><span class="line">  <span class="comment">/* minimum,lowandhighwatermarksusedforper-area memory allocation. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span>      watermark[NR_WMARK];</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>         *name;</span><br><span class="line">  spinlook           lock;     <span class="comment">/* protects against concurrent access */</span></span><br><span class="line">  <span class="comment">/* list of free pages to serve memory allocation requests */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">free_area</span>   <span class="title">free_area</span>[<span class="title">MAX_ORDER</span>];</span></span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.5-low-level-memory-allocator">Part.5 Low-level memory allocator<a title="#part.5-low-level-memory-allocator" href="#part.5-low-level-memory-allocator"></a></h2>
<p>Low-level mechanisms allocating memory with page-sized granularity. Interface is in <code>include/linux/gfp.h</code>. For more details from <a href="https://elixir.bootlin.com/linux/latest/source/include/linux/gfp.h" target="_blank">here</a>.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk2g8sh7hej30oa0iy77k.jpg" alt="Screen Shot 2020-10-26 at 08.52.18" style="zoom:50%;">
<p>· Allocates 2^<em>order</em> contiguous pages (1 <em>&lt; &lt; order</em> )<br>
· Returns the address of the first allocated struct page.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct page * <span class="title">alloc_pages</span><span class="params">(<span class="keyword">gfp_t</span> gfp_mask, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>;</span><br></pre></td></tr></table></figure>
<p>To actually use the allocated memory, need to convert to virtual address.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">page_address</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Or we can allocate and get the virtual address directly.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">get_free_pages</span><span class="params">(<span class="keyword">gfp_t</span> gfp_mask, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>;</span><br></pre></td></tr></table></figure>
<p>To get a page filled with zeros.</p>
<p>A page containing user space data (process A) that is freed can be later given to another process (process B) and we don’t want process B to read information from process A.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">get_zeroed_page</span><span class="params">(<span class="keyword">gfp_t</span> gfp_mask)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Free pages, only free the pages you allocate!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_pages</span><span class="params">(struct page *page, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_pages</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_page</span><span class="params">(struct page *page)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_page</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> addr)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Buddy system :</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk2zog05xij30ta0jatco.jpg" alt="Screen Shot 2020-10-26 at 20.04.44" style="zoom:50%;">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Low-level memory allocator, Usage example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gfp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREE <span class="meta-string">&quot;[LOWLEVEL]:&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAEG_ORDER_REQUESTED 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTS_IN_PAGE (PAGE_SIZE/sizeof(int))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> virt_addr;</span><br><span class="line"></span><br><span class="line"><span class="function">struct <span class="keyword">int</span> _int <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *int_array;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  printk(PRINT_PREE <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  virt_addr =get_free_pages(GFP_KERNEL,</span><br><span class="line">                            PAGES_ORDER_REQUESTED); </span><br><span class="line">  <span class="keyword">if</span>(!virt_addr) &#123;</span><br><span class="line">    printk(PRINT_PREF <span class="string">&quot;Error in allocation¥n &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  int_array = (<span class="keyword">int</span> *)virt_addr;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) int_array[i] = i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) printk(PRINT_PREF <span class="string">&quot;array[%d] = %d¥n&quot;</span>, </span><br><span class="line">                                       i, int_array[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  free_pages(virt_addr,</span><br><span class="line">            PAGES_ORDER_REQUESTED);</span><br><span class="line">  printk(PRINT_PREE <span class="string">&quot;Exiting module ¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br></pre></td></tr></table></figure>
<h2 id="part.6-kmalloc()-and-vmalloc()">Part.6 <code>kmalloc()</code> and <code>vmalloc()</code><a title="#part.6-kmalloc()-and-vmalloc()" href="#part.6-kmalloc()-and-vmalloc()"></a></h2>
<p><code>kmalloc()</code> (declared in <code>includes/linux/slab.h</code>)  allocates byte-sized chunks of memory which is physically contiguous and return a pointer to the first allocated byte on success.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">kmalloc</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">gfp_t</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="kmalloc-flags"><code>kmalloc</code> flags<a title="#kmalloc-flags" href="#kmalloc-flags"></a></h3>
<p><code>gfp_t</code> is an unsigned int defined in <code>include/linux/types.h</code> and other types and modifier are declared and documented in <code>include/linux/gfp.h</code>.</p>
<p>Specify options for the allocated memory:<br>
·  Action modifiers ( How should the memory be allocated? )</p>
<img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-10-26 at 20.58.40.png" alt="Screen Shot 2020-10-26 at 20.58.40" style="zoom: 33%;">
<p>· Zone modifiers ( From which zone should the allocated memory come )</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk31gtxbzzj30tg058aay.jpg" alt="Screen Shot 2020-10-26 at 21.01.52" style="zoom:40%;">
<p>Kernel allocates from <code>ZONE_NORMAL</code> or <code>ZONE_DMA</code> with a strong preference for <code>ZONE NORMAL</code> when there is no flag specified.</p>
<p>· Type flags ( Combination of action and zone modifiers )</p>
<p><code>GFP_ATOMIC</code>, <code>GEP_NOWAIT</code>, <code>GFP_NOIO</code>, <code>GFP_NOFS</code>, <code>GFP_KERNEL</code>, <code>GFP_USER</code>, <code>GFP_DMA</code>, <code>GFP_HIGHUSER</code></p>
<p>Which flag to use.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk31vx5ps8j30vk0g2go6.jpg" alt="Screen Shot 2020-10-26 at 21.21.10" style="zoom:40%;">
<h3 id="kfree"><code>kfree</code><a title="#kfree" href="#kfree"></a></h3>
<p>Memory allocated with <code>kmalloc()</code> needs to be freed with <code>kfree()</code>(declared in <code>include/linux/slab.h</code>).</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">ptr</span>;</span></span><br><span class="line">ptr = kmalloc(<span class="keyword">sizeof</span>(struct my_struct), GEP_KERNEL);</span><br><span class="line"><span class="keyword">if</span>(!ptr)&#123;</span><br><span class="line">  <span class="comment">/* handle error. */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* work with ptr. */</span></span><br><span class="line">kfree(ptr);</span><br></pre></td></tr></table></figure>
<h3 id="vmalloc()"><code>vmalloc()</code><a title="#vmalloc()" href="#vmalloc()"></a></h3>
<p><code>vmalloc()</code>  allocates virtually contiguous pages that are not guarantee to map to physically contiguous ones.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">vmalloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> s i z e )</span> </span>; <span class="function"><span class="keyword">void</span> <span class="title">vfree</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *addr)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">ptr</span>;</span></span><br><span class="line"></span><br><span class="line">ptr = vmalloc(<span class="keyword">sizeof</span>(struct my_struct));</span><br><span class="line"><span class="keyword">if</span>(!ptr) &#123;</span><br><span class="line">  <span class="comment">/* handler error. */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* work with ptr. */</span></span><br><span class="line"></span><br><span class="line">vfree(ptr);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* kmalloc() allocatedsizelimitation */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[KMALLOC_TEST]: &quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> i ; <span class="keyword">void</span> *ptr;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;;i*=<span class="number">2</span>) &#123;</span><br><span class="line">		ptr = kmalloc(i, GFP_KERNEL); </span><br><span class="line">    <span class="keyword">if</span>(!ptr) &#123;</span><br><span class="line">			printk(PRINT_PREF <span class="string">&quot;could not allocate %lu bytes¥n&quot;</span>, i);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		kfree(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit); </span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="part.7-slab-layer">Part.7 Slab layer<a title="#part.7-slab-layer" href="#part.7-slab-layer"></a></h2>
<p>Allocating/freeing data structures is done very often in the kernel and the data should be cached. An allocator aware of data structure size, page size, and total cache size is more efficient and should be <a href="https://en.wikipedia.org/wiki/Non-uniform_memory_access" target="_blank">NUMA-aware</a> and implement <a href="https://en.wikipedia.org/wiki/Cache_coloring" target="_blank">cache-coloring</a>.</p>
<p>Slab layer/slab allocator: Linux’s generic allocation caching interface. Each cache contains one or several slabs( physically contiguous pages). Slabs contain objects(actual data structure slots). In order to reduce the fragmentation, allocation requests are served from partial slabs if present and a new empty slab is actually allocated in case the cache is full.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* a new cache is crested using: */</span></span><br><span class="line"><span class="function">struct kmem_cache *<span class="title">kmem_cache_create</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">size_t</span> size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">size_t</span> align, </span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">unsigned</span> <span class="keyword">long</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">void</span> (*ctor)(<span class="keyword">void</span> *))</span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>Flags</li>
</ol>
<p><code>SLAB_HW_CACHEALIGN</code>: Each object in a slab is aligned to a cache line.</p>
<p><code>SLAB_POISON</code> : Fill the slab with know values (a5a5a5a5) to detect accesses to uninitialized memory.</p>
<p><code>SLAB_PANIC</code>: Slab layer panics if the allocation fails.</p>
<p><code>SLAB_CACHE_DMA</code>: Allocation made from DMA-enabled memory.</p>
<p><code>SLAB_RED_ZONE</code> : Extra padding around objects to detect buffer overflows.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk3lnszab3j30pe0c4tag.jpg" alt="Screen Shot 2020-10-27 at 08.45.15" style="zoom:33%;">
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk3ln8s2vyj30py0c075q.jpg" alt="Screen Shot 2020-10-27 at 08.44.45" style="zoom:33%;">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Slab layer usage example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SLAB_TEST] &quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> &#123;</span> </span><br><span class="line">  <span class="keyword">int</span> int_param;</span><br><span class="line">  <span class="keyword">long</span> long_param; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">ptr1</span>, *<span class="title">ptr2</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">my_cache</span>;</span></span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	my_cache = kmem_cache_create(<span class="string">&quot;pierre-cache&quot;</span>, </span><br><span class="line">                               <span class="keyword">sizeof</span>(struct my_struct), <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span>(!my_cache) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  ptr1 = kmem_cache_alloc(my_cache, GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span>(!ptr1)&#123;</span><br><span class="line">    ret = -ENOMEM;</span><br><span class="line">		<span class="keyword">goto</span> destroy_cache;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">	ptr2 = kmem_cache_alloc(my_cache, GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span>(!ptr2)&#123;</span><br><span class="line">    ret = -ENOMEM; </span><br><span class="line">    <span class="keyword">goto</span> freeptr1;</span><br><span class="line">	&#125;</span><br><span class="line">	ptr1-&gt;int_param =<span class="number">42</span>; </span><br><span class="line">  ptr1-&gt;long_param = <span class="number">42</span>; </span><br><span class="line">  ptr2-&gt;int_param =<span class="number">43</span>;</span><br><span class="line">  ptr2-&gt;long_param = <span class="number">43</span>;</span><br><span class="line">  </span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;ptr1 = &#123;%d, %ld&#125; ; ptr2 = &#123;%d, %ld&#125;¥n&quot;</span>, </span><br><span class="line">         ptr1-&gt;int_param, ptr1-&gt;long_param, ptr2-&gt;int_param, </span><br><span class="line">         ptr2-&gt;long_param);</span><br><span class="line">  </span><br><span class="line">  kmem_cache_free(my_cache, ptr2);</span><br><span class="line">  freeptr1:</span><br><span class="line">  		kmem_cache_free(my_cache, ptr1);</span><br><span class="line">  destroy_cache: </span><br><span class="line">  		kmem_cache_destroy(my_cache);</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="part.8-stack,-high-memory-and-per-cpu-allocation">Part.8 Stack, high memory and per-cpu allocation<a title="#part.8-stack,-high-memory-and-per-cpu-allocation" href="#part.8-stack,-high-memory-and-per-cpu-allocation"></a></h2>
<h3 id="stack">Stack<a title="#stack" href="#stack"></a></h3>
<p>A user-space stack for execution in user space and it is is large and grows dynamically.</p>
<p>A kernel stack for execution in the kernel and it is small and has a fixed-size (Generally 8KB on 32-bit architectures and 16KB on 64-bit).</p>
<p>Use a per-cpu stack (1 single page) dedicated to interrupt handlers.</p>
<h3 id="high-memory-allocation">High memory allocation<a title="#high-memory-allocation" href="#high-memory-allocation"></a></h3>
<p>On x86_32, physical memory above 896MB is not permanently mapped within the kernel address space. Because of the limited size of the address space and the 1G/3G kernel/user-space physical memory split. Before usage, pages from highmem must be mapped after allocation.</p>
<p>Permanent mapping (<code>include/linux/highmem.h</code>):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmap</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure>
<p>· Works on low and high memory.<br>
· Maps (update the page table) and return the given<br>
· May sleep, use only in process context<br>
· Number of permanent mappings is limited, unmap when done:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kunmap</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gfp.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/highmem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[HIGHMEM]: &quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTS_IN_PAGE (PAGE_SIZE/sizeof(int))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">my_page</span>;</span> </span><br><span class="line">  <span class="keyword">void</span> *my_ptr;</span><br><span class="line">	<span class="keyword">int</span> i, *int_array;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>); </span><br><span class="line">  </span><br><span class="line">  my_page = alloc_page(GFP_HIGHUSER);</span><br><span class="line">	<span class="keyword">if</span>(!my_page) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">	my_ptr = kmap(my_page); </span><br><span class="line">  int_array = (<span class="keyword">int</span> *)my_ptr;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) &#123; </span><br><span class="line">    int_array[i] = i;</span><br><span class="line">    printk(PRINT_PREF <span class="string">&quot;array[%d] = %d¥n&quot;</span>, i, int_array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  kunmap(my_page); </span><br><span class="line">  free_pages(my_page, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br></pre></td></tr></table></figure>
<p>Temporary mappings: Also called atomic mappings as they can be used from interrupt context and uses a per-cpu pre-reserved slot. Do not sleep while holding a temporary mapping.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmap_atomic</span><span class="params">(struct page *page)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kunmap_atomic</span><span class="params">(<span class="keyword">void</span> *addr)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/gfp.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/highmem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[HIGHMEM_ATOMIC]: &quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTS_IN_PAGE (PAGE_SIZE/sizeof(int))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">my_page</span>;</span> </span><br><span class="line">  <span class="keyword">void</span> *my_ptr;</span><br><span class="line">	<span class="keyword">int</span> i, *int_array;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  my_page = alloc_page(GFP_HIGHUSER);</span><br><span class="line">	<span class="keyword">if</span>(!my_page) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  my_ptr = kmap_atomic(my_page); </span><br><span class="line">  int_array = (<span class="keyword">int</span> *)my_ptr;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;INTS_IN_PAGE; i++) &#123;</span><br><span class="line">    int_array[i] = i;</span><br><span class="line">		printk(PRINT_PREF <span class="string">&quot;array[%d] = %d¥n&quot;</span>, i , int_array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">	kunmap_atomic(my_ptr); </span><br><span class="line">  __free_pages(my_page, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br></pre></td></tr></table></figure>
<h3 id="per-cpu">Per-cpu<a title="#per-cpu" href="#per-cpu"></a></h3>
<p>Per-cpu data: data that is unique to each CPU (i.e. each core)  and is implemented through arrays in which each index corresponds to a CPU.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> my_percpu[NR_CPUS]; <span class="comment">/* NR_CPUS contains the number of cores */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cpu;</span><br><span class="line"></span><br><span class="line">cpu = get_cpu(); <span class="comment">/* get current CPU, disable kernel preemption */</span></span><br><span class="line">my_percpu[cpu]++; <span class="comment">/* access the data */</span></span><br><span class="line">put_cpu(); <span class="comment">/* re-enable kernel preemption */</span></span><br></pre></td></tr></table></figure>
<p>Disabling kernel preemption(<code>get cpu()</code>/<code>put cpu()</code>) while accessing per-cpu data is necessary.<br>
Preemption then reschedule on another core <em>→</em> cpu not valid anymore.<br>
Another task preempting the current one might access the per-cpu data <em>→</em> race condition.</p>
<p>Linux provides an API to manipulate per-cpu data: <code>percpu</code> in <code> include/linux/percpu.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Compile-time per-cpu data structure usage: */</span></span><br><span class="line">DEFINE_PER_CPU(type, name) ; <span class="comment">/* Creation */</span></span><br><span class="line"><span class="comment">/* To refer to a per-cpu data structure declared elsewhere */</span></span><br><span class="line">DECLARE_PER_CPU(name, type); </span><br><span class="line"><span class="comment">/* Data manipulation */</span></span><br><span class="line">get_cpu_var(name)++; <span class="comment">/* increment name on this CPU */</span> </span><br><span class="line">put_cpu_var(name);  <span class="comment">/* Done, disable kernel preemption */</span></span><br><span class="line"><span class="comment">/* Access another CPU data */</span></span><br><span class="line">per_cpu(name, cpu)++; <span class="comment">/* increment name on the given CPU */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Per-cpu data at runtime */</span></span><br><span class="line"><span class="comment">/* Allocation */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">my_var</span> =</span> alloc_percpu(struct my_struct); </span><br><span class="line"><span class="keyword">if</span>(!my_var) &#123;</span><br><span class="line"><span class="comment">/* allocation error */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Manipulation: */</span></span><br><span class="line">get_cpu_var(my_var)++;</span><br><span class="line">put_cpu_var(my_var);</span><br><span class="line"><span class="comment">/* Deallocation: */</span></span><br><span class="line">free_percpu(my_var);</span><br></pre></td></tr></table></figure>
<p>Benefits of per-cpu data:<br>
· Removes/minimizes the need for locking.<br>
· Reduces cache thrashing.Processor access local data so there is less cache coherency overhead (invalidation) in multicore systems.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Per-CPU allocation: usage example (static) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/percpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/smp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[PERCPU] &quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">thread1</span>, *<span class="title">thread2</span>, *<span class="title">thread3</span>;</span></span><br><span class="line">DEFINE_PER_CPU(<span class="keyword">int</span>, my_var) ; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">thread_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!kthread_should_stop()) &#123;</span><br><span class="line">    <span class="keyword">int</span> cpu;</span><br><span class="line">    get_cpu_var(my_var)++;</span><br><span class="line">    cpu = smp_processor_id();</span><br><span class="line">		printk(<span class="string">&quot;cpu[%d] = %d¥n&quot;</span>,</span><br><span class="line">           cpu, get_cpu_var(my_var)); </span><br><span class="line">    put_cpu_var(my_var);</span><br><span class="line">    msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cpu;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(cpu=<span class="number">0</span>; cpu&lt;NR_CPUS; cpu++) per_cpu(my_var, cpu) = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">  wmb();</span><br><span class="line">	thread1 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread1&quot;</span>);</span><br><span class="line">	thread2 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread2&quot;</span>);</span><br><span class="line">	thread3 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread3&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">exit</span> <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  kthread_stop(thread1); </span><br><span class="line">  kthread_stop(thread2); </span><br><span class="line">  kthread_stop(thread3);</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init); </span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Per-CPU allocation: usage example (dynamic) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/percpu.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/smp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[PERCPU] &quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">thread1</span>, *<span class="title">thread2</span>, * <span class="title">thread3</span>;</span></span><br><span class="line"><span class="keyword">void</span> my_var2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">thread_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!kthread_should_stop()) &#123;</span><br><span class="line">    <span class="keyword">int</span> *local_ptr, cpu;</span><br><span class="line">    local_ptr = get_cpu_ptr(my_var2); </span><br><span class="line">    cpu = smp_processor_id(); </span><br><span class="line">    (*local_ptr)++;</span><br><span class="line">		printk(<span class="string">&quot;cpu[%d] = %d¥n&quot;</span>, cpu, *local_ptr); </span><br><span class="line">    put_cpu_ptr(my_var2); </span><br><span class="line">    msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *local_ptr;</span><br><span class="line">	<span class="keyword">int</span> cpu;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">	my_var2 = alloc_percpu(<span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">if</span>(!my_var2) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(cpu=<span class="number">0</span>; cpu&lt;NR_CPUS; cpu++) &#123;</span><br><span class="line">    local_ptr = per_cpu_ptr(my_var2, cpu);</span><br><span class="line">    *local_ptr = <span class="number">0</span>;</span><br><span class="line">		put_cpu();</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">	wmb();</span><br><span class="line">	thread1 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread1&quot;</span>);</span><br><span class="line">	thread2 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread2&quot;</span>);</span><br><span class="line">	thread2 = kthread_run(thread_function, <span class="literal">NULL</span>, <span class="string">&quot;percpu-thread2&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">exit</span> <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  kthread_stop(thread1);</span><br><span class="line">  kthread_stop(thread2);</span><br><span class="line">  kthread_stop(thread3);</span><br><span class="line">  free_percpu(my_var2);</span><br><span class="line">  printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit); </span><br><span class="line"></span><br><span class="line">sMODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="choosing-the-right-allocation-method">Choosing the right allocation method<a title="#choosing-the-right-allocation-method" href="#choosing-the-right-allocation-method"></a></h3>
<p>Need physically contiguous memory?<br>
· <code>kmalloc()</code> or low-level allocator, with flags:<br>
GFP_KERNELif sleeping is allowed.<br>
GFP_ATOMIC otherwise.</p>
<p>Need large amount of memory, not physically contiguous:<br>
· <code>vmalloc()</code></p>
<p>Frequently creating/destroying large amount of the same data structure:<br>
· Use the slab layer</p>
<p>Need to allocate from high memory?<br>
· Use <code>alloc_page()</code> then <code>kmap()</code> or <code>kmap_atomic()</code>.</p>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>Process Scheduling</title>
    <url>/2020/20201026-Process-Scheduling/</url>
    <content><![CDATA[<h1 id="process-scheduling">Process Scheduling<a title="#process-scheduling" href="#process-scheduling"></a></h1>
<h2 id="part.1-general-information">Part.1 General information<a title="#part.1-general-information" href="#part.1-general-information"></a></h2>
<h3 id="scheduling">Scheduling<a title="#scheduling" href="#scheduling"></a></h3>
<p>When in the system there are more ready-to-run processes than the number of cores. The scheduler is responsible for making the best use of the resource that is the CPU time and decides which process should run,  when, and for how long.</p>
<p>Now: <strong>Completely Fair Scheduler (CFS)</strong> is used in Linux.</p>
<h3 id="multitasking">Multitasking<a title="#multitasking" href="#multitasking"></a></h3>
<p>Single core: gives the illusion that multiple processes are running concurrently.<br>
Multi-cores: enable true parallelism.</p>
<p>2 types of multitasking OS:<br>
· Cooperative multitasking: a process does not stop running until it decides to do so (yield the CPU).<br>
· Preemptive multitasking: The OS can interrupt the execution of a process: preemption. Generally after the process expires its timeslice. It is based on tasks priorities.</p>
<h3 id="scheduling-policy">Scheduling policy<a title="#scheduling-policy" href="#scheduling-policy"></a></h3>
<p>Scheduling policy are the set of rules determining the choices made by a given model of scheduler.</p>
<p>· I/O-bound processes<br>
Spend most of their time <em>waiting for I/O</em>: disk, network, but also keyboard, mouse, etc. Should run often and for a small time frame.</p>
<p>· Compute-bound processes<br>
Heavy use of the CPU. Should not run often, but for a long time.</p>
<ol>
<li>Priority</li>
</ol>
<p>Order process according to their ”importance” from the scheduler standpoint.</p>
<p>Linux has 2 priority ranges:</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk2i0y1dnpj30za05a0uq.jpg" alt="Screen Shot 2020-10-26 at 09.53.58" style="zoom: 33%;">
<p>· Nice value : ranges from <code>-20 to +19</code>, default is 0 (High values of nice means lower priority)<br>
List process and their nice values with <code>ps ax -o pid,ni,cmd</code></p>
<p>· Real-time priority : range configurable (default 0 to 99) (Higher values mean higher priority）<br>
Processes labeled real-time always execute before standard (nice) processes.<br>
List processes and their real-time priority using <code>ps ax -o pid,rtprio,cmd</code></p>
<ol start="2">
<li>Timeslice</li>
</ol>
<p>How much time a process should execute before being preempted. The timeslice a process receives is function of the load of the systems and is also weighted by the process priority. It is <em>a proportion</em> of the CPU.</p>
<h2 id="part.2-linux-completely-fair-scheduler-(cfs)">Part.2 Linux Completely Fair Scheduler (CFS)<a title="#part.2-linux-completely-fair-scheduler-(cfs)" href="#part.2-linux-completely-fair-scheduler-(cfs)"></a></h2>
<h3 id="scheduling-classes">Scheduling classes<a title="#scheduling-classes" href="#scheduling-classes"></a></h3>
<p>· CPU classes : coexisting CPU algorithms. Each task belongs to a class.</p>
<p>CFS: <code>SCHED_OTHER</code>, implemented in <code>kernel/sched/fair.c</code>.</p>
<p>· Real-time classes : For predictable schedule. <code>SCHED_RR</code>, <code>SCHED_FIFO</code>, <code>SCHED_DEADLINE</code></p>
<p><code>sched_class</code> data structure :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> &#123;</span></span><br><span class="line">   <span class="comment">/* Called when a task enters a runnable stat */</span></span><br><span class="line">  <span class="keyword">void</span> (*enqueue_task) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Called when a task becomes unrunnable */</span></span><br><span class="line">	<span class="keyword">void</span> (*dequeue_task) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Yield the processor (dequeue then enqueue back immediatly) */</span></span><br><span class="line">	<span class="keyword">void</span> (*yield_task) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Checks if a task that entered the runnable state should preempt the currently running task */</span></span><br><span class="line">	<span class="keyword">void</span> (*check_preempt_curr) (<span class="comment">/* . . . */</span>);</span><br><span class="line">  <span class="comment">/* Chooses the next task to run */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * (*<span class="title">pick_next_task</span>) (/* . . . */);</span> </span><br><span class="line">  <span class="comment">/* Called when the currentluy running task changes its scheduling class or task group to the related scheduler */</span></span><br><span class="line">  <span class="keyword">void</span> (*set_cur_task) (<span class="comment">/* 	...*/</span>);</span><br><span class="line">  <span class="comment">/* Called regularly (default: 10 ms) from the system timer tick handler, might lead to context switch */</span></span><br><span class="line">	<span class="keyword">void</span> (*task_tick) (<span class="comment">/* . . . */</span>);</span><br><span class="line">	<span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fair-scheduling">Fair scheduling<a title="#fair-scheduling" href="#fair-scheduling"></a></h3>
<p>3 main (high-level) CFS concepts;<br>
· CFS runs a process for some times, then swaps it for the runnable process that has run the least.<br>
· No default timeslice, CFS calculates how long a process should run according to the number of runnable processes.<br>
· No default timeslice, CFS calculates how long a process should run according to the number of runnable processes.</p>
<p><strong>Targeted latency</strong> : period during which all runnable processes should be scheduled at least once.</p>
<h2 id="part.3-cfs-implementation">Part.3 CFS implementation<a title="#part.3-cfs-implementation" href="#part.3-cfs-implementation"></a></h2>
<h3 id="time-accounting">Time accounting<a title="#time-accounting" href="#time-accounting"></a></h3>
<p><code>sched_entity</code> structure in the <code>task_struct</code> (se field).</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">load_weight</span> <span class="title">load</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">run_node</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">group_node</span>;</span> </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> on_rq;</span><br><span class="line">  </span><br><span class="line">  u64 exec_start;</span><br><span class="line">	u64 sum_exec_runtime;</span><br><span class="line">	u64 vruntime;</span><br><span class="line">	u64 prev_sum_exec_runtime;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* additional statistics not shown here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Virtual runtime: How much time a process has been executed (ns).</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_curr</span><span class="params">(struct cfs_rq * cfs_rq)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> *<span class="title">curr</span> =</span> cfs_rq -&gt; curr;</span><br><span class="line">  u64 now  = rq_clock_task(rq_of(cfs_rq));</span><br><span class="line">  u64 delta_exec;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (unlikely(!curr)) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  delta_exec = now - curr-&gt;exec_start;</span><br><span class="line">  <span class="keyword">if</span> (unlikely(s64)delta_exec &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  curr-&gt;exec_start = now;</span><br><span class="line">  </span><br><span class="line">  schedstat_set(curr-&gt;statistics.exec_max, max(delta_exec, curr-&gt;statistics.exec_max));</span><br><span class="line">  curr-&gt;sum_exec_runtime += delta_exec;</span><br><span class="line">  schedstat_add(cfs_rq-&gt;exec_clock, delta_exec);</span><br><span class="line">  </span><br><span class="line">  curr-&gt;vruntome += calc_delta_fair(delta_exec,curr);</span><br><span class="line">  update_min_vruntme(cfs_rq);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(entity_is_task(curr)) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">currtask</span> =</span> task_of(curr);</span><br><span class="line">    </span><br><span class="line">    trace_sched_stat_runtime(curtask, delta_exec, curr-&gt;vruntime);</span><br><span class="line">    cpuacct_charge(curtask, delta_exec);</span><br><span class="line">    account_group_exec_runtime(curtask, delta_exec);</span><br><span class="line">    </span><br><span class="line">    account_cfs_rq_runtime(cfs_rq, delta_exec);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Invoked regularly by the system timer, and when a process becomes runnable/unrunnable.</p>
<h3 id="process-selection">Process selection<a title="#process-selection" href="#process-selection"></a></h3>
<p>When CFS needs to choose which runnable process to run next:<br>
The process with the smallest runtime is selected. It is the leftmost node in the tree.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct sched_entity * <span class="title">pick_first_entity</span><span class="params">(struct cfs_rq *cfs_rq)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">left</span> =</span>cfs_rq-&gt;rb_leftmost;</span><br><span class="line">	<span class="keyword">if</span> (!left) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> rb_entry(left, struct sched_entity, run_node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>adding a process to the tree</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Aprocess is added through enqueue entity. */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue_entity</span><span class="params">(struct cfs_rq *cfs_rq, </span></span></span><br><span class="line"><span class="function"><span class="params">                           struct sched_entity *se, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> renorm = ! (flags &amp; ENQUEUE_WAKEUP) || (flags &amp; ENQUEUE_MIGRATED); </span><br><span class="line">  <span class="keyword">bool</span> curr = cfs_rq-&gt;curr == se;</span><br><span class="line">  <span class="keyword">if</span> (renorm &amp;&amp;curr) se-&gt;vruntime += cfs_rq-&gt;min_vruntime;</span><br><span class="line">	</span><br><span class="line">  update_curr(cfs_rq);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (renorm &amp;&amp;!curr) se-&gt;vruntime += cfs_rq-&gt;min_vruntime;</span><br><span class="line">  </span><br><span class="line">	update_load_avg(se, UPDATE_TG);</span><br><span class="line">  enqueue_entity_load_avg(cfs_rq, se);</span><br><span class="line">  account_entity_enqueue(cfs_rq, se);</span><br><span class="line">  update_cfs_shares(cfs_rq);</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">if</span>(flags &amp; ENQUEUE_WAKEUP) place_entity(cfs_rq, se, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  check_schedstat_required(); </span><br><span class="line">  update_stats_enqueue(cfs_rq, se, flags); </span><br><span class="line">  check_spread(cfs_rq, se);</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">if</span>(!curr) enqueue_entity(cfs_rq, se);</span><br><span class="line">  se-&gt;on_rq = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (cfs_rq-&gt;nr_running == <span class="number">1</span>) &#123;</span><br><span class="line">    list_add_leaf_cfs_rq(cfs_rq);</span><br><span class="line">    check_enqueue_throttle(cfs_rq);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue_entity</span><span class="params">(struct cfs_rq, *cfs_rq, </span></span></span><br><span class="line"><span class="function"><span class="params">                           struct sched_entity *se)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> **<span class="title">link</span> =</span> &amp;cfs_rq-&gt;tasks_timeline.rb_node; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">parent</span> =</span> <span class="literal">NULL</span>; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> *<span class="title">entry</span>;</span></span><br><span class="line">	<span class="keyword">int</span> leftmost = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* Find the right place in the rbtree: </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">while</span> (*link) &#123;</span><br><span class="line">    parent = *link;</span><br><span class="line">	  entry = rb_entry(parent, struct sched_entity, run_node);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* Wedont care about collisions. </span></span><br><span class="line"><span class="comment">	* Nodes with	the same key stay together. </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">if</span> (entity_before(se, entry)) &#123;</span><br><span class="line">    link = &amp;parent-&gt;rb_left;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    link =&amp;parent-&gt;rb_right;</span><br><span class="line">    leftmost = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Maintain a cache of leftmost tree </span></span><br><span class="line"><span class="comment">* entries (it is frequently used): </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (leftmost) cfs_rq-&gt;rb_leftmost = &amp;se-&gt;run_node; </span><br><span class="line">rb_link_node(&amp;se-&gt;run_node, parent, link);</span><br><span class="line">rb_insert_color(&amp;se-&gt;run_node, &amp;cfs_rq-&gt;tasks_timeline);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<ol start="2">
<li>removing a process from the tree</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct <span class="keyword">void</span> <span class="title">dequeue_entity</span><span class="params">(struct cfs_rq *cfs_rq, </span></span></span><br><span class="line"><span class="function"><span class="params">                           struct sched_entity *se, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">  update_curr(cfs_rq); </span><br><span class="line">  dequeue_entity_load_avg(cfs_rq, se);</span><br><span class="line">  update_stats_dequeue(cfs_rq, se, flags );</span><br><span class="line">  </span><br><span class="line">  clear_buddies(cfs_rq, se);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (se != cfs_rq-&gt;curr) dequeue_entity(cfs_rq, se);</span><br><span class="line">  se-&gt;on_rq = <span class="number">0</span>;</span><br><span class="line">  account_entity_dequeue(cfs_rq, se);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!(flags &amp; DEQUEUE_SLEEP)) se-&gt;vruntime -= cfs_rq-&gt;min_vruntime; </span><br><span class="line">  </span><br><span class="line">  return_cfs_rq_runtime(cfs_rq);</span><br><span class="line">  update_cfs_shares(cfs_rq);</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">if</span> ((flags &amp;(DEQUEUE_SAVE| DEQUEUE_MOVE)) == DEQUEUE_SAVE)</span><br><span class="line">    update_min_vruntime(cfs_rq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dequeue_entity</span><span class="params">(struct cfs_rq *cfs_rq, s</span></span></span><br><span class="line"><span class="function"><span class="params">                           truct sched_entity *se)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cfs_rq-&gt;rb_leftmost == &amp;se-&gt;run_node) &#123; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">next_node</span>;</span></span><br><span class="line">    next_node = rb_next(&amp;se-&gt;run_node);</span><br><span class="line">    cfs_rq-&gt;rb_leftmost = next_node;</span><br><span class="line">  &#125;</span><br><span class="line">	rb_erase(&amp;se-&gt;run_node, &amp;cfs_rq-&gt;tasks_timeline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Entry point: <code>schedule()</code></li>
</ol>
<p>The kernel calls <code>schedule()</code> anytime it wants to invoke the scheduler. Calls <code>pick_next_task()</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> struct task_struct * <span class="title">pick_next_task</span><span class="params">(struct rq *rq, struct</span></span></span><br><span class="line"><span class="function"><span class="params">task_struct *prev, struct pin_cookie cookie)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> *<span class="keyword">class</span> =</span> &amp; fair_sched_class; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">  </span><br><span class="line">	<span class="keyword">if</span> (likely(prev-&gt;sched_class ==class &amp;&amp; </span><br><span class="line">             rq-&gt;nr_running == rq-&gt;cfs.h_nr_running)) &#123;</span><br><span class="line">    p = fair_sched_class.pick_next_task(rq, prev, cookie);</span><br><span class="line">    </span><br><span class="line">		<span class="keyword">if</span> (unlikely(p == RETRY_TASK)) <span class="keyword">goto</span> again;</span><br><span class="line">		<span class="keyword">if</span> (unlikely(!p)) p = idle_sched_class.pick_next_task(rq, prev, cookie);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">again: </span><br><span class="line">  for_each_class(class) &#123;</span><br><span class="line">    p =class-&gt;pick_next_task(rq, prev, cookie);</span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">      <span class="keyword">if</span> (unlikely(p == RETRY_TASK)) <span class="keyword">goto</span> again; </span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> BUG(); </span><br><span class="line"> <span class="comment">/* the idle class will always have a runnable task */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sleeping-and-waking-up">Sleeping and waking up<a title="#sleeping-and-waking-up" href="#sleeping-and-waking-up"></a></h3>
<p>Multiple reasons for a task to sleep:<br>
Specified amount of time, waiting for I/O, blocking on a mutex, etc.</p>
<p>Going to sleep - steps:<br>
· Task marks itself as sleeping<br>
· Task enters a waitqueue<br>
· Task leaves the rbtree of runnable processes<br>
· Task calls <code>schedule()</code>  to select a new process to run</p>
<p>Two states associated with sleeping:<br>
<code>TASK INTERRUPTIBLE</code>: Will be awaken on signal reception<br>
<code>TASK UNINTERRUPTIBLE</code>: Ignore signals</p>
<p>Wait queue: List of processes waiting for an event to occur.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span> <span class="title">wait_queue_head_t</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue_head</span> &#123;</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> lock;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">task_list</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Some simple interfaces used to go to sleep have races: It is possible to go to sleep <em>after</em> the event we are waiting for has occurred.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We assume the wait queue we want to wait on is accessible through a variable q */</span> </span><br><span class="line">DEFINE_WAIT(wait); <span class="comment">/* initialize a wait queue entry */</span></span><br><span class="line">add_wait_queue(q, &amp;wait);</span><br><span class="line"><span class="keyword">while</span> (!condition) &#123; </span><br><span class="line">  <span class="comment">/* event weare waiting for */</span></span><br><span class="line">  prepare_to_wait(&amp;q, &amp;wait, TASK_INTERRUPTIBLE);</span><br><span class="line">  <span class="keyword">if</span>(signal_pending(current))</span><br><span class="line">   <span class="comment">/* handle signal */</span></span><br><span class="line">    schedule();</span><br><span class="line">&#125;</span><br><span class="line">finish_wait(&amp;q, &amp;wait);</span><br></pre></td></tr></table></figure>
<p><strong>Steps for waiting on a waitqueue:</strong><br>
· Create a wait queue entry (<code>DEFINE_WAIT()</code>).<br>
· Add the calling process to a wait queue (<code>add_wait_queue()</code>).<br>
· Call <code>prepare_to_wait()</code> to change the  process state.<br>
· If the state is <code>TASK_INTERRUPTIBLE</code>, a signal can wake the task up <em>→</em> need to check.<br>
· Executes another process with <code>schedule()</code>.<br>
· When the task awakens, check the condition.<br>
· When the condition is true, get out of the wait queue and set the state accordingly using <code>finish_wait()</code>.</p>
<p><strong>Waking up</strong> is taken care of by <code>wake_up()</code>. Awakes all the processes on a wait queue by default.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up(x) wake_up(x, TASK_NORMAL, 1 , NULL)</span></span><br><span class="line"> <span class="comment">/* type of x i s wait_queue_head_t */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wake_up_common</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, </span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">unsigned</span> <span class="keyword">int</span> mode, <span class="keyword">int</span> nr_exclusive, </span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> wake_flags, <span class="keyword">void</span> *key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">wait_queue_t</span> *curr, *next;</span><br><span class="line">  </span><br><span class="line">  list_for_each_entry_safe(curr, next, &amp;q-&gt;task_list, task_list) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> flags = curr-&gt;flags;</span><br><span class="line">    <span class="keyword">if</span> (curr-&gt;func(curr, mode, wake_flags, key) &amp;&amp; (flags &amp; WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">/* wakes up only a subset of ’exclusive’ tasks */</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Exclusive tasks are added through <code>prepare_to_wait_exclusive()</code>.</p>
<p>A wait queue entry contains a pointer to a wake-up function : <code>include/linux/wait.h</code>.</p>
<p><code>default_wake_function()</code>  calls <code>try_to_wake up()</code> -&gt; which calls ttwu_queue() -&gt; which calls <code>ttwu_do_activate()</code>  (put the task back on runqueue)  -&gt; which calls <code>ttwu_do_wakeup</code> which sets the task state to TASK RUNNING.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">typedefstruct wait_queue <span class="keyword">wait_queue_t</span>;</span><br><span class="line">typedefint (*<span class="keyword">wait_queue_func_t</span>)(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> flags, <span class="keyword">void</span> *key); </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">default_wake_function</span><span class="params">(*<span class="keyword">wait_queue_func_t</span>)</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode,<span class="keyword">int</span> flags, <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wait_queue</span> &#123;</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="keyword">wait_queue_func_t</span> func;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>· Per-CPU runqueues (rbtrees): To avoid costly accesses to shared data structures.</p>
<p>· Runqueues must be kept balanced.<br>
Ex: dual-core with one large runqueue of high-priority processes, and a small one with low-priority processes. High-priority processes get less CPU time than low-priority ones.<br>
A load balancing algorithm is run periodically. Balances the queues based on processes priorities and their actual CPU usage.</p>
<h2 id="part.4-preemptions-and-context-switching">Part.4 Preemptions and context switching<a title="#part.4-preemptions-and-context-switching" href="#part.4-preemptions-and-context-switching"></a></h2>
<h3 id="context-switch">Context switch<a title="#context-switch" href="#context-switch"></a></h3>
<p>A <strong>context switch</strong> is the action of swapping the process currently running on the CPU to another one which is performed by the <code>context_switch()</code> function. The function is called by <code>schedule()</code>.</p>
<p>1.Switch the address space through <code>switch_mm()</code>.<br>
2.Switch the CPU state (registers) through <code>switch_to()</code>.</p>
<p>A task can voluntarily relinquish the CPU by calling <code>schedule()</code>.</p>
<p>The kernel check if there is a need of preemption based on the <code>need_resched</code> flag.</p>
<p><code>need_resched</code> is set by:<br>
1.<code>scheduler_tick()</code> when the currently running task needs to be preempted.<br>
2.<code>try_to_wake_up()</code> when a process with higher priority wakes up.</p>
<p><code>need_resched</code> flag is checked:<br>
Upon returning to user space (from a syscall or an interrupt).<br>
Upon returning from an interrupt.</p>
<p>If the flag is set, <code>schedule()</code> is called.</p>
<p>User preemption happens:<br>
When return to user space from a syscall.<br>
When return to user space from an interrupt.<br>
With Linux,  the kernel is also subject to preemption.</p>
<h3 id="kernel-preemption">Kernel preemption<a title="#kernel-preemption" href="#kernel-preemption"></a></h3>
<p>In linux, a task can be preempted in the kernel as long as execution is in a safe state (Not holding any lock (kernel is SMP safe)).</p>
<p>If <code>need_resched &amp;&amp; !preempt_count</code> <em>→</em> safe to preempt. <code>preempt_count</code> in the <code>thread_info</code> structure (Indicates the current lock depth).</p>
<p>Checked when returning to the kernel from interrupt. <code>need_resched</code> is also checked when releasing a lock and preempt count is 0.</p>
<p>Kernel code can also call directly <code>schedule()</code>.</p>
<p>Kernel preemption can occur :<br>
1.On return from interrupt to kernel space.<br>
2.When kernel code becomes preemptible again.<br>
3.If a task explicitly calls <code>schedule()</code> from the kernel.<br>
4.If a task in the kernel blocks (ex: mutex, result in a call to <code>schedule()</code>)</p>
<h3 id="real-time-scheduling-policies">Real-time scheduling policies<a title="#real-time-scheduling-policies" href="#real-time-scheduling-policies"></a></h3>
<p>Real-time task of any scheduling class will always run before non-real time ones (<code>CFS</code>, <code>SCHED_OTHER</code>). <code>schedule()</code> → <code>pick next task()</code> → <code>for_each_class()</code>.</p>
<p>Two classical RT scheduling policies (<code>kernel/sched/rt.c</code>):<br>
· <code>SCHED_FIFO</code>:<br>
Tasks run until it blocks/yield, only a higher priority RT task can preempt it.<br>
Round-robin for tasks of same priority.<br>
· <code>SCHED_RR</code>:<br>
Same as <code>SCHED_FIFO</code>, but with a fixed timeslice.</p>
<h3 id="scheduling-related-syscalls">Scheduling-related syscalls<a title="#scheduling-related-syscalls" href="#scheduling-related-syscalls"></a></h3>
<p>See more details from <a href="https://www.informit.com/articles/article.aspx?p=101760&amp;seqNum=5" target="_blank">here</a>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt; #include &lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_err</span><span class="params">(<span class="keyword">int</span> ret, <span class="keyword">char</span> *func)</span> </span>&#123; </span><br><span class="line">  perror(func);</span><br><span class="line">	<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span> pid = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">sp</span>;</span></span><br><span class="line">  <span class="keyword">int</span> max_rr_prio, min_rr_prio = <span class="number">-42</span>; </span><br><span class="line">  <span class="keyword">size_t</span> cpu_set_size = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">cpu_set_t</span> cs;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* GetthePIDofthecallingprocess */</span></span><br><span class="line">  pid = getpid();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Mypidis:%d¥n&quot;</span>, pid); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Gettheschedulingclass */</span></span><br><span class="line">	ret = sched_getscheduler(pid); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getscheduler&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;sched_getschedulerreturns:&quot;</span><span class="string">&quot;%d¥n&quot;</span>, ret);</span><br><span class="line">  assert(ret == SCHED_OTHER);</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/* Getthepriority(nice/RT) */</span></span><br><span class="line">	sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">	ret = sched_getparam(pid, &amp;sp);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">	sp.sched_priority);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Setthepriority(nicevalue) */</span></span><br><span class="line">	ret = nice(<span class="number">1</span>); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>)	handle_err(ret,<span class="string">&quot;nice&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Getthepriority */</span></span><br><span class="line">	sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">	ret = sched_getparam(pid, &amp;sp); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">	sp.sched_priority);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* SwtichscheduleingclasstoFIFOandthepriorityto99 */</span></span><br><span class="line">  sp.sched_priority = <span class="number">99</span>;</span><br><span class="line">	ret = sched_setscheduler(pid, SCHED_FIFO, &amp;sp); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_setscheduler&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Gettheschedulingclass */</span></span><br><span class="line">	ret = sched_getscheduler(pid); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getscheduler&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;sched_getschedulerreturns:&quot;</span><span class="string">&quot;%d¥n&quot;</span>, ret);</span><br><span class="line">  assert(ret == SCHED_FIFO);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Getthepriority */</span></span><br><span class="line">	sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">	ret = sched_getparam(pid, &amp;sp); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">         sp.sched_priority);</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/* SettheRTpriority */</span></span><br><span class="line">	sp.sched_priority = <span class="number">42</span>;</span><br><span class="line">	ret = sched_setparam(pid, &amp;sp);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_setparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Prioritychangedto%d¥n&quot;</span>,</span><br><span class="line">	sp.sched_priority);</span><br><span class="line">	</span><br><span class="line">  <span class="comment">/* Getthepriority */</span></span><br><span class="line">	sp.sched_priority = <span class="number">-1</span>;</span><br><span class="line">	ret = sched_getparam(pid, &amp;sp);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_getparam&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Mypriorityis:%d¥n&quot;</span>,</span><br><span class="line">	sp.sched_priority);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* GetthemaxpriorityvalueforSCHED_RR */</span></span><br><span class="line">	max_rr_prio = sched_get_priority_max(SCHED_RR); </span><br><span class="line">  <span class="keyword">if</span>(max_rr_prio == <span class="number">-1</span>)</span><br><span class="line">    handle_err(max_rr_prio,<span class="string">&quot;sched_get_priority_max&quot;</span>); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;MaxRRprio:%d¥n&quot;</span>, max_rr_prio);</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/* GettheminpriorityvalueforSCHED_RR */</span></span><br><span class="line">	min_rr_prio = sched_get_priority_min(SCHED_RR); </span><br><span class="line">  <span class="keyword">if</span>(min_rr_prio == <span class="number">-1</span>)</span><br><span class="line">    handle_err(min_rr_prio,<span class="string">&quot;sched_get_priority_min&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;MinRRprio:%d¥n&quot;</span>, min_rr_prio);</span><br><span class="line">  cpu_set_size = <span class="keyword">sizeof</span>(<span class="keyword">cpu_set_t</span>);</span><br><span class="line">  CPU_ZERO(&amp;cs); <span class="comment">/* clearthemask */</span></span><br><span class="line">  CPU_SET(<span class="number">0</span>, &amp;cs);</span><br><span class="line">  CPU_SET(<span class="number">1</span>, &amp;cs);</span><br><span class="line">  <span class="comment">/* SettheaffinitytoCPUs0and1only */</span></span><br><span class="line">	ret = sched_setaffinity(pid, cpu_set_size, &amp;cs);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret,<span class="string">&quot;sched_setaffinity&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GettheCPUaffinity */</span></span><br><span class="line">	CPU_ZERO(&amp;cs);</span><br><span class="line">	ret = sched_getaffinity(pid,cpu_set_size, &amp;cs);</span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret, <span class="string">&quot;sched_getaffinity&quot;</span>);</span><br><span class="line">  assert(CPU_ISSET(<span class="number">0</span>, &amp;cs));</span><br><span class="line">  assert(CPU_ISSET(<span class="number">1</span>, &amp;cs));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;AffinitytestsOK¥n&quot;</span>);</span><br><span class="line">  <span class="comment">/* YieldtheCPU */</span></span><br><span class="line">  ret = sched_yield(); </span><br><span class="line">  <span class="keyword">if</span>(ret == <span class="number">-1</span>) handle_err(ret, <span class="string">&quot;sched_yield&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>Device Drivers</title>
    <url>/2020/20201109-Device-Drivers/</url>
    <content><![CDATA[<h1 id="device-drivers">Device Drivers<a title="#device-drivers" href="#device-drivers"></a></h1>
<p>Abstracting Devices – Modules and Interrupts</p>
<h2 id="part.1-kernel-modules:-presentation">Part.1 Kernel modules: presentation<a title="#part.1-kernel-modules:-presentation" href="#part.1-kernel-modules:-presentation"></a></h2>
<p>Modules are pieces of kernel code that can be dynamically loaded and unloaded at runtime.</p>
<h3 id="modules-benefits:">Modules benefits:<a title="#modules-benefits:" href="#modules-benefits:"></a></h3>
<p>· No reboot</p>
<p>Saves a lot of time when developing/debugging</p>
<p>· No need to compile the entire kernel</p>
<p>· Saves memory and CPU time by running on-demand</p>
<p>· No performance difference between module and built-in kernel code</p>
<p>· Help identifying buggy code</p>
<p>Ex: identifying a buggy driver compiled as a module by selectively running them.</p>
<h2 id="part.2-writing-a-kernel-module">Part.2 Writing a kernel module<a title="#part.2-writing-a-kernel-module" href="#part.2-writing-a-kernel-module"></a></h2>
<p>The module is linked against the entire kernel, it is visible on all of the kernel global variables. To avoid  namespace pollution and involuntary reuse of variable names, we can use a well defined naming convention and use <code>static</code> as much as possible.</p>
<p>Kernel symbols list is generally present in <code>/proc/kallsys</code> .</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Create a C file anywhere on the filesystem. (No need to be inside the kernel sources).  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; /* Needed by all modules */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt; /* KERN_INFO */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt; /* init and exit macros */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> answer initdata = <span class="number">42</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> init <span class="title">lkp_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Moduele loaded ...¥n&quot;</span>);</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;The answer is %d...¥n&quot;</span>, answer);</span><br><span class="line">  <span class="comment">/* Return 0 on success, something else on error */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">staticvoid <span class="built_in">exit</span> <span class="title">lkp_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Module exiting...¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* `init. &amp; exit` functions launched at the load /unload time.  */</span></span><br><span class="line">module_init(lkp_init);</span><br><span class="line">module_exit(lkp_exit);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* `MODULE_* macros`:  General info about the module. */</span></span><br><span class="line">MODULE_LICENCE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;PierreOlivier&lt;polivier@vt.edu&gt;&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Sample kernel module&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="part.3-compiling-a-kernel-module">Part.3 Compiling a kernel module<a title="#part.3-compiling-a-kernel-module" href="#part.3-compiling-a-kernel-module"></a></h2>
<p>Create a <code>Makeflie</code> in the same directory as the module source fie. After the compilation, the complied module is the file with <code>.ko</code>. extension.</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `KERNELRELEASE` is defined in the top-level makefile in the linux kernel source code.</span></span><br><span class="line"><span class="keyword">ifneq</span>  (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">obj-m := hello.o</span><br><span class="line"><span class="comment"># multiple source files. </span></span><br><span class="line"><span class="comment"># obj-m += file1.c</span></span><br><span class="line"><span class="comment"># obj-m += file2.c</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">KDIR := /lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build  <span class="comment"># path to kernel sources root directory</span></span><br><span class="line">PWD:= <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<p><code>shell pwd</code>: Get the path of current working directory.</p>
<p><code>shell uname -r</code>: Get the version of the current kernel.</p>
<p><code>KDIR</code>: The source code directory of the current kernel.<br>
(<code>/lib/modules/$(shell uname -r)/build</code> or <code>/usr/src/linux-header-$(shell uname -r)/</code>)</p>
<p><code>make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modules</code>:</p>
<p>First change the directory to the location specified by the <code>-C</code> option ( kernel source code directory), where the top-level makefile of the kernel is stored. Then, the <code>M=</code> option makes the makefile return to the module source code directory before constructing the modules target and the modules target points to the module set in the <code>obj-m</code> variable(<code>hello.o</code>).</p>
<h2 id="part.4-launching-a-kernel-module">Part.4 Launching a kernel module<a title="#part.4-launching-a-kernel-module" href="#part.4-launching-a-kernel-module"></a></h2>
<p>When we launch a kernel module, we need administrator privileges(root).</p>
<h3 id="insmod/rnmode"><code>insmod/rnmode</code><a title="#insmod/rnmode" href="#insmod/rnmode"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo insmod file.ko <span class="comment">/* the module is loaded and init function is executed. */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo rmmod file.ko <span class="comment">/* remove the module and exit function is called. */</span></span><br></pre></td></tr></table></figure>
<p>Note that a module is compiled against a specific kernel version and will not load on the another kernel.</p>
<h3 id="modprobe"><code>modprobe</code><a title="#modprobe" href="#modprobe"></a></h3>
<p><code>make modules_install</code> from the kernel sources install the modules in a standard location on the filesystem.(Generally <code>/lib/modules/&lt;kernel version&gt;</code>) and those modules can be inserted through <code>modprobe</code>. Such installed modules can be loaded automatically at boot time by editing <code>/etc/modules</code> or the files in <code>/ets/modprobe.d</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo modprobe &lt;<span class="keyword">module</span> name&gt;</span><br></pre></td></tr></table></figure>
<p><code>Insmod</code> handles modules dependencies. (Dependency list generated in <code>/lib/modules/&lt;kernel version/modules.dep&gt;</code>)</p>
<h2 id="part.5-modules:-miscellaneous-information">Part.5 Modules: miscellaneous information<a title="#part.5-modules:-miscellaneous-information" href="#part.5-modules:-miscellaneous-information"></a></h2>
<p>Modules parameters can be entered from the command line at the launch time.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt; /* ... */</span></span></span><br><span class="line">staticint int_param = <span class="number">42</span>;</span><br><span class="line">staticchar *string_param =<span class="string">&quot;defaultvalue&quot;</span>;</span><br><span class="line"></span><br><span class="line">module_param(int_param, <span class="keyword">int</span>, <span class="number">0</span>); </span><br><span class="line">MODULE_PARM_DESC(int_param,<span class="string">&quot;Asampleintegerkernelmoduleparameter&quot;</span>);</span><br><span class="line">module_param(string_param, charp, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH); MODULE_PARM_DESC(string_param,<span class="string">&quot;Anotherparameter,astring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">staticint init <span class="title">lkp_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Intparam:%d¥n&quot;</span>, int_param);</span><br><span class="line">  printk(KERN_INFO<span class="string">&quot;Stringparam:%s¥n&quot;</span>, string_param); <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo insmod lkp.ko int_param&#x3D;12 string_param&#x3D;&quot;hello&quot;</span><br></pre></td></tr></table></figure>
<p><code>modinfo</code>: info about a kernel module.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">modinfo my_module.ko</span><br><span class="line">filename:        /tmp/test/my_module.ko</span><br><span class="line">description:     Sample kernel <span class="keyword">module</span></span><br><span class="line">author:  				 Pierre Olivier &lt;polivier@vt.edu GPL</span><br><span class="line">license: 				 A5ADE92B1C81DCC4F774A37</span><br><span class="line">srcversion: </span><br><span class="line">depends: </span><br><span class="line">vermagic: 			<span class="number">4.8</span><span class="number">.0</span><span class="number">-34</span>-generic SMP mod_unload modversions</span><br><span class="line">parm:						int_param:<span class="function">A sample integer kernel <span class="keyword">module</span> <span class="title">parameter</span> <span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line">parm:						 string_param:Another parameter, a string (charp)</span><br></pre></td></tr></table></figure>
<p><code>lsmod</code>: list currently running modules. (Can also look in <code>/proc/modules</code>)</p>
<h2 id="part.6-memory-allocation">Part.6 Memory allocation<a title="#part.6-memory-allocation" href="#part.6-memory-allocation"></a></h2>
<h3 id="kmalloc"><code>kmalloc</code><a title="#kmalloc" href="#kmalloc"></a></h3>
<p>Allocate memory that is virtually and physically contiguous. (Maximum allocated size : 4MB on x86 (architecture dependent)).</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">char</span> *my_string = (<span class="keyword">char</span> *)kmalloc(<span class="number">128</span>, GFP_KERNEL);</span><br><span class="line">my_struct my_struct_ptr = (my_struct *)kmalloc(<span class="keyword">sizeof</span>(my_struct), GFP_KERNEL);</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">kfree(my_string); kfree(my_struct_ptr);</span><br></pre></td></tr></table></figure>
<h3 id="vmalloc"><code>vmalloc</code><a title="#vmalloc" href="#vmalloc"></a></h3>
<p>Allocate memory that is virtually contiguous, but not physically contiguous. No size limit other than the amount of free RAM (at least on 64 bit architectures.  Might sleep.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/vmalloc.h&gt;</span></span></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">char</span> *my_string = (<span class="keyword">char</span> *)vmalloc(<span class="number">128</span>);</span><br><span class="line">my_struct my_struct_ptr = (my_struct *)vmalloc(<span class="keyword">sizeof</span>(my_struct)); <span class="comment">/* ... */</span></span><br><span class="line">vfree(my_string); </span><br><span class="line">vfree(my_struct_ptr);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>File Systems</title>
    <url>/2020/20201118-File-Systems/</url>
    <content><![CDATA[<h1 id="file-systems">File Systems<a title="#file-systems" href="#file-systems"></a></h1>
<p>Abstracting Files – Virtual File Systems (VFS)</p>
<h2 id="part.1-general-presentation">Part.1 General Presentation<a title="#part.1-general-presentation" href="#part.1-general-presentation"></a></h2>
<h3 id="the-virtual-file-system(vfs)">The virtual File System(VFS)<a title="#the-virtual-file-system(vfs)" href="#the-virtual-file-system(vfs)"></a></h3>
<p>Abstract all the filesystems models supported by Linux and allow them to coexitst and cooperate.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwj9zjaq2j30lk0aedhi.jpg" alt="Screen Shot 2020-11-21 at 09.24.08" style="zoom:50%;">
<h3 id="common-filesystem-interface">Common filesystem interface<a title="#common-filesystem-interface" href="#common-filesystem-interface"></a></h3>
<p>VFS allows user-space to access files independently of the concrete filesystem they are stored on, with a common interface. Interface can work transparently between filesystems.</p>
<h3 id="filesystem-abstraction-layer">Filesystem abstraction layer<a title="#filesystem-abstraction-layer" href="#filesystem-abstraction-layer"></a></h3>
<p>VFS redirect user-space requests to the corresponding concrete filesystem. Developing a new filesystem for Linux means conforming with the bottom interface.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwjybnua2j30tq086wgd.jpg" alt="Screen Shot 2020-11-21 at 09.47.36" style="zoom: 50%;">
<h3 id="unix-filesystems">Unix filesystems<a title="#unix-filesystems" href="#unix-filesystems"></a></h3>
<p>Filesystem can refer to a filesystem type or a partition. Hierarchical tree of files organized into directories.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwk64e3hdj30qq0cw76o.jpg" alt="Screen Shot 2020-11-21 at 09.55.06" style="zoom:50%;">
<p>File: ordered string bytes from file address @0 to address @file_size-1. The associated metadata (name, assess permissions, modification date, etc) is separated from the file data into specific objects(<code>inodes</code>, <code>dentries)</code>.</p>
<p>Directory: Folder containing files or other directories(sub-directories). Sub-directories can be nested to create path.</p>
<h2 id="part.2-vfs-data-structures">Part.2 VFS data structures<a title="#part.2-vfs-data-structures" href="#part.2-vfs-data-structures"></a></h2>
<h3 id="generalities">Generalities<a title="#generalities" href="#generalities"></a></h3>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkwkksu6qtj310w0ju79j.jpg" alt="Screen Shot 2020-11-21 at 10.09.12" style="zoom: 33%;">
<p><code>dentry</code>: it is associated with a file or a directory and store the file/directory name and its location in the directory tree. It performs directory specific operations and constructed on the fly as files and directories are accessed: generally no on-disk representation.</p>
<h4 id="dentry-states">Dentry states<a title="#dentry-states" href="#dentry-states"></a></h4>
<p>A dentry can be used , unused or negative.<br>
Used: corresponds to a valid inode(pointed by d_inode) with one or more users(d_count)<br>
Unused: valid inode, but no current users.(kept in RAM for caching, can be discarded)<br>
Negative: does not point to a valid inode.(kept around for caching and can be discarded)</p>
<h4 id="the-dentry-cache">The dentry cache<a title="#the-dentry-cache" href="#the-dentry-cache"></a></h4>
<p>Dentries are constructed on demand and kept in RAM for quick future pathname lookups.<br>
There are three parts:</p>
<ol>
<li>Linked list of used dentries linked by the <code>i_dentry</code> field of their inode. (One inode can have multiple links, thus multiple dentries)</li>
<li>Linked list of LRU sorted unused and negative dentries.(LRU: quick reclamation from the tail of the list.)</li>
<li>Hash table + hash function to quickly resolve a path into the corresponding dentry present in the dcache.<br>
Hash table:  <code>dentry_hashtable</code> array, each element is a pointer to a list of dentries hashing to the same value.<br>
Hashing function: <code>d_hash()</code>, filesystem can provide its own hshing function.<br>
Dentry lookup in the dcache: <code>d_lookup()</code>, returns dentry on success, NULL on failure.<br>
Inodes are similarly cached in RAM, in the inode cache, dentries in the dcache are pining inodes in the node cache.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/dcache.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> &#123;</span></span><br><span class="line">  <span class="keyword">atmoic_t</span> d_conut; <span class="comment">/* usage count */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> d_flags; <span class="comment">/* dentry flags */</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> d_lock; <span class="comment">/* per-dentry lock */</span></span><br><span class="line">  <span class="keyword">int</span> d_mounted; <span class="comment">/* indicated if it is a mount point */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">d_inode</span>;</span> <span class="comment">/* assoociated inode */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">d_dash</span>;</span> <span class="comment">/* list of hash table entries */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `inculde/linux/dcache.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> &#123;</span></span><br><span class="line">  <span class="comment">/* determine if an entry to use from the dcache is valid, generally set to NULL */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_revalidate)(struct dentry*, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">int</span> (*d_weak_revalidate)(struct dentry *, unsighned <span class="keyword">int</span>);</span><br><span class="line">  <span class="comment">/* Create a hash value for entry to insert in the dcache */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_hash)(<span class="keyword">const</span> struct dentry *, struct qstr *);</span><br><span class="line">  <span class="comment">/* compare two filenames, requires `dcache_lock` */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_compare)(<span class="keyword">const</span> struct dentry *,</span><br><span class="line">               , <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> struct qstr *);</span><br><span class="line">  <span class="comment">/* called by VFS when `d_count` reaches zero, requires `dcache_lock` and `d_lock` */</span></span><br><span class="line">  <span class="keyword">int</span> (*d_delete)(<span class="keyword">const</span> struct dentry);</span><br><span class="line">  <span class="keyword">int</span> (*d_init)(struct dentry *);</span><br><span class="line">  <span class="comment">/* called when the dentry is going to be freed */</span></span><br><span class="line">  <span class="keyword">void</span> (*d_release)(struct dentry *);</span><br><span class="line">  <span class="keyword">void</span> (*d_prune)(struct dentry *);</span><br><span class="line">  <span class="comment">/* called when the dentry looses its inode and calls `input()` */</span></span><br><span class="line">	<span class="keyword">void</span> (*d_iput)(struct dentry *, struct inode *);</span><br><span class="line">	<span class="keyword">char</span> *(*d_dname)(struct dentry *, <span class="keyword">char</span> *, <span class="keyword">int</span>);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *(*<span class="title">d_automount</span>)(<span class="keyword">struct</span> <span class="title">path</span> *);</span></span><br><span class="line">	<span class="keyword">int</span> (*d_manage)(<span class="keyword">const</span> struct path *, <span class="keyword">bool</span>);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *(*<span class="title">d_real</span>)(<span class="keyword">struct</span> <span class="title">dentry</span> *</span></span><br><span class="line"><span class="class">                           , <span class="title">const</span> <span class="keyword">struct</span> <span class="title">inode</span> *, <span class="title">unsigned</span> <span class="title">int</span>);</span></span><br><span class="line">&#125;__cacheline_aligned;</span><br></pre></td></tr></table></figure>
<p><code>inode</code>: it is related to file or directory and contains metadata(file size, owner id/group, etc) plus information about how to manipulate the file/directory. It must be produced by the filesystem on-demand when a file/directory is accessed.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `inculde/linux/fs.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">i_hash</span>;</span> <span class="comment">/* hash list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">i_list</span>;</span> <span class="comment">/* list of nodes */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">i_sb_list</span>;</span> <span class="comment">/* list of superblock */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">i_dentry</span>;</span> <span class="comment">/* list of dentries */</span></span><br><span class="line">  unsighned <span class="keyword">long</span> i_ino; <span class="comment">/* inode number */</span></span><br><span class="line">  <span class="keyword">atomic_t</span> i_count; <span class="comment">/* reference counter */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i_nlink; <span class="comment">/* number of hard links */</span></span><br><span class="line">  <span class="keyword">uid_t</span> i_uid; <span class="comment">/* uer id of owner */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/fs.h` */</span></span><br><span class="line"><span class="comment">/* invoke on an innode object */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode_operations</span> &#123;</span></span><br><span class="line">  <span class="comment">/* create a new node with access mode `mode` */</span></span><br><span class="line">  <span class="comment">/* call from `creat()` and `open()` syscalls */</span></span><br><span class="line">  <span class="keyword">int</span> (*creat) (struct inode *, struct dentry *, <span class="keyword">umode_t</span>, <span class="keyword">bool</span>);</span><br><span class="line">  <span class="comment">/* create a hard link with name `dentry` in the directory `dir`, pointing to old_dentry */</span></span><br><span class="line">  <span class="keyword">int</span> (*link) (struct dentry *, struct inode *, struct dentry *);</span><br><span class="line">  <span class="comment">/* remove an inode from the directory `dir` */</span></span><br><span class="line">  <span class="keyword">int</span> (*unlink) (struct inode *, struct dentry);</span><br><span class="line">  <span class="comment">/* creates a symbolic link named `symname`, to the file `dentry` in directory `dir` */</span></span><br><span class="line">  <span class="keyword">int</span> (*symlink) (struct inode *, struct dentry *, <span class="keyword">const</span> <span class="keyword">char</span>*);</span><br><span class="line">  <span class="comment">/* create a directory inside `dir` with name `dentry` */</span></span><br><span class="line">  <span class="keyword">int</span> (*mkdir) (struct inode *, struct dentry *, <span class="keyword">umode_t</span>);</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>superblock</code>: it contains global information about the filesystem(partition) and created by filesystem and given to VFS at mount time. Disk-based filesystem store it in a special location and other filesystems have a way to generate it at mount time.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/fs.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">s_list</span>;</span>    <span class="comment">/* list of all superblocks */</span></span><br><span class="line">  <span class="keyword">dev_t</span> s_dev;                <span class="comment">/* identifier */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> s_blocksize; <span class="comment">/* block size (bytes) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> s_blocksize_bits <span class="comment">/* block size (bits) */</span></span><br><span class="line">  <span class="keyword">loff_t</span> s_maxbytes; <span class="comment">/* max file size */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> *<span class="title">s_type</span>;</span> <span class="comment">/* filesystem type */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span> *<span class="title">s_op</span>;</span> <span class="comment">/* superblock operations */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span> *<span class="title">dq_op</span>;</span> <span class="comment">/* quota methods */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span> *<span class="title">s_qcop</span>;</span> <span class="comment">/* quota control methods */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/fs.h` */</span></span><br><span class="line"><span class="comment">/* each field is a function pointer operating on a struct super_block */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span> &#123;</span></span><br><span class="line">  <span class="comment">/* creats and initialize a new inode */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *(*<span class="title">alloc_inode</span>) (<span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">sb</span>);</span></span><br><span class="line">  <span class="comment">/* deallocate an inode */</span></span><br><span class="line">  <span class="keyword">void</span> (*destory_inode) (struct inode *);</span><br><span class="line">  <span class="comment">/* marks an inode as dirty(ext filesystems) */</span></span><br><span class="line">  <span class="keyword">void</span> (*dirty_inode) (struct inode *, <span class="keyword">int</span> flags);</span><br><span class="line">  <span class="comment">/* writes the inode to disk, wait specifies if the wirte should be synchronoous */</span></span><br><span class="line">  <span class="keyword">int</span> (*write_inode) (struct inode *, struct writeback_control *wbc);</span><br><span class="line">  <span class="comment">/* called by VFS when the last reference to the inode is dropped */</span></span><br><span class="line">  <span class="keyword">int</span> (*drop_inode) (struct inode *);</span><br><span class="line">  <span class="keyword">void</span> (*evict_inode) (struct inode*);</span><br><span class="line">  <span class="comment">/* called by VFS on unmoount(holding s lock) */</span></span><br><span class="line">  <span class="keyword">void</span> (*put_super) (struct super_block *);</span><br><span class="line">  <span class="comment">/* synchronize filesystem metadata with on-disk filesystem, wait specifies if the operation should be synchronous */</span></span><br><span class="line">  <span class="keyword">int</span> (*sync_fs) (struct super_block *sb, <span class="keyword">int</span> wait);</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>file</code>: it contains information about a file opened by a process and is created on <code>open()</code> and destroyed on <code>close()</code>.<br>
Two processes opening the same file: Two file objects, pointing to the same unique dentry, that points itself on a unique inode.<br>
No corresponding on-disk data structure.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in inculde/linux/fs.h */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">f_path</span>;</span> <span class="comment">/* contains the dentry */</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> f_lock; <span class="comment">/* lock */</span></span><br><span class="line">  <span class="keyword">atomic_t</span> f_count; <span class="comment">/* usage count */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> f_flags; <span class="comment">/* open flags */</span></span><br><span class="line">  <span class="keyword">mode_t</span> f_mode; <span class="comment">/* file access mode */</span></span><br><span class="line">  <span class="keyword">logg_t</span> f_pos; <span class="comment">/* file offset */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fown_struct</span> <span class="title">f_owner</span>;</span> <span class="comment">/* owner data for signals */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">f_cred</span>;</span> <span class="comment">/* file credentials */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file_ra_state</span> <span class="title">f_ra</span>;</span> <span class="comment">/* read-ahead state */</span></span><br><span class="line">  u64 f_version; <span class="comment">/* version number */</span></span><br><span class="line">  <span class="keyword">void</span> *private_data; <span class="comment">/* private data */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">f_ep_link</span>;</span> <span class="comment">/* list of epoll links */</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> f_ep_lock; <span class="comment">/* epoll lock */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">f_mapping</span>;</span> <span class="comment">/* page cache mapping */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">  <span class="comment">/* update file offset */</span></span><br><span class="line">	<span class="keyword">loff_t</span> (*llseek) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</span><br><span class="line">  <span class="comment">/* read operation */</span></span><br><span class="line">	<span class="keyword">ssize_t</span> (*read) (struct file *, <span class="keyword">char</span> user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *); </span><br><span class="line">  <span class="comment">/* write operation */</span></span><br><span class="line">  <span class="keyword">ssize_t</span> (*write) (struct file *, <span class="keyword">const</span> <span class="keyword">char</span> user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line">  <span class="keyword">ssize_t</span> (*read_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">  <span class="keyword">ssize_t</span> (*write_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">  <span class="keyword">int</span> (*iterate) (struct file *, struct dir_context *);</span><br><span class="line">  <span class="keyword">int</span> (*iterate_shared) (struct file *, struct dir_context *);</span><br><span class="line">  <span class="comment">/* sleeps waiting for activity on a given file */</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(struct file *, struct poll_table_struct *)</span></span>;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>VFS implemented in a manner very close to object-oriented programming.</p>
<h2 id="part.3-filesystem-and-process-data-structures">Part.3 Filesystem and process data structures<a title="#part.3-filesystem-and-process-data-structures" href="#part.3-filesystem-and-process-data-structures"></a></h2>
<h3 id="filesystem-data-structures">Filesystem data structures<a title="#filesystem-data-structures" href="#filesystem-data-structures"></a></h3>
<p><code>struct file_system_type</code>: information about a specific concrete filesystem type.<br>
One per filesystem supported (chosen at compile time) independently of the mounted filesystem.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `incule/linux/fs.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> &#123;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *name; <span class="comment">/* name */</span></span><br><span class="line">	<span class="keyword">int</span> fs_flags; <span class="comment">/* flags */</span></span><br><span class="line">	<span class="comment">/* mount a partition */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *(*<span class="title">mount</span>) (<span class="keyword">struct</span> <span class="title">file_system_type</span> *</span></span><br><span class="line"><span class="class">                           , <span class="title">int</span>, <span class="title">const</span> <span class="title">char</span> *, <span class="title">void</span> *);</span></span><br><span class="line">	<span class="comment">/* terminate access to the superblock */</span></span><br><span class="line">	<span class="keyword">void</span> (*kill_sb) (struct super_block *); <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> * <span class="title">next</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">fs_supers</span>;</span></span><br><span class="line">	<span class="comment">/* runtime lock validation */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_lock_key</span>;</span></span><br><span class="line">	<span class="comment">/* module owning the fs */</span></span><br><span class="line">	<span class="comment">/* linked list of fs types */</span></span><br><span class="line">	<span class="comment">/* linked list of superblocks */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_umount_key</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_vfs_rename_key</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_writers_key</span>[<span class="title">SB_FREEZE_LEVELS</span>];</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_lock_key</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_mutex_key</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_mutex_dir_key</span>;</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>When a filesystem is mounted, a <code>vfsmount</code> structure is created which represents a specific instance of the filesystem: a mount point.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defined in `include/linux/mount.h` */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_root</span>;</span> <span class="comment">/* root of the mounted tree */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">mnt_sb</span>;</span> <span class="comment">/* pointer to superblock */</span></span><br><span class="line">	<span class="keyword">int</span> mnt_flags; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="process-data-structure">Process data structure<a title="#process-data-structure" href="#process-data-structure"></a></h3>
<p><code>struct_files_struct</code>: contains per-process information about opened files and file descriptors. ( defined in <code>include/linux/fdtable.h</code>)<br>
<code>struct_fs_struct</code>: filesystem information related to a process.(defined in <code>include/linux/fs struct.h</code>)<br>
<code>struct_mnt_namespace</code>: provide processes with unique views of a mounted filesystem.(defined in <code>fs/mount.h</code>)</p>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
        <tag>Linux</tag>
        <tag>File Systems</tag>
      </tags>
  </entry>
  <entry>
    <title>Interrupts</title>
    <url>/2020/20201109-Interrupts/</url>
    <content><![CDATA[<h1 id="interrupts">Interrupts<a title="#interrupts" href="#interrupts"></a></h1>
<h2 id="part.1-general-information">Part.1 General information<a title="#part.1-general-information" href="#part.1-general-information"></a></h2>
<p>Because the device is slow compared to the CPU, we can have hardware devices signal the CPU that they are ready.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj75qsgrcj313y08uacn.jpg" alt="Screen Shot 2020-11-09 at 20.32.05" style="zoom: 33%;">
<p><strong>Exceptions</strong> are interrupt issued by the CPU executing some code which happen synchronously with respect to the CPU clock. (Software interrupts, as opposed to hardware devices.) They are also managed by the kernel the same way as hardware interrupts.<br>
Program faults: divide-by-zero, page fault, general protection fault, etc.<br>
Voluntary exceptions: <code>INT</code> assembly instruction, for example for syscall invocation</p>
<p>Interrupts are electrical signals multiplexed by the interrupt controller. They can be received in a completely non-deterministic way. The kernel/user space can be interrupted at (nearly) any time to process an interrupt.</p>
<p><strong>Device identifier</strong>: interrupt line or Interrupt ReQuest (IRQ)<br>
<strong>Function executed by the CPU</strong>: interrupt handler or Interrupt Service Routine (ISR)</p>
<p>The interrupt handlers (ISR) are kernel C fuctions associated to interrupt lines.<br>
Specific prototype, run in interrupt context, opposite to process context (system call).<br>
Also called atomic context as one cannot sleep in an ISR. It is not a schedulable entity.</p>
<p>Managing an interrupt involves two high-level steps:<br>
· Acknowledging the reception (mandatory, fast)<br>
· Potentially performing additional work (possibly slow)</p>
<p>Processing an interrupt is broken down between:<br>
· Top-half: time-critical operations (ex: ack), run immediately upon reception.<br>
· Bottom-half: less critical/time-consuming work, run later with other interrupts enabled</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* (block 1) */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">omap_kp_probe</span><span class="params">(struct platform_device *pdev)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  omap_kp-&gt;irq = platform_get_irq(pdev, <span class="number">0</span>); </span><br><span class="line">  <span class="keyword">if</span>(omap_kp-&gt;irq &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(request_irq(omap_kp-&gt;irq, omap_kp_interrupt, <span class="number">0</span>,<span class="string">&quot;omap-keypad&quot;</span>, omap_kp) &lt; <span class="number">0</span>) </span><br><span class="line">      <span class="keyword">goto</span> err4;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (block 2) */</span></span><br><span class="line"><span class="comment">/* Tophalf: interrupt handler (ISR) */</span> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">irqreturn_t</span> <span class="title">omap_kp_interrupt</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* disable keyboard interrupt */</span> </span><br><span class="line">  omap_writew(<span class="number">1</span>, <span class="comment">/* . . . */</span>);</span><br><span class="line">  tasklet_schedule(&amp;kp_tasklet);</span><br><span class="line">  <span class="keyword">return</span> IRQ_HANDLED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (block 3) */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DECLARE_TASKLET_DISABLED</span><span class="params">(kp_tasklet, omap_kp_tasklet, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (block 4) */</span> </span><br><span class="line"><span class="comment">/* Bottom half */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">omap_kp_tasklet</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> data)</span> </span>&#123;</span><br><span class="line"> <span class="comment">/* performs lot of work */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.2-registering-&amp;-writing-an-interrupt-handler">Part.2 Registering &amp; writing an interrupt handler<a title="#part.2-registering-&amp;-writing-an-interrupt-handler" href="#part.2-registering-&amp;-writing-an-interrupt-handler"></a></h2>
<h3 id="interrupt-handler-registration:-request_irq()">Interrupt handler registration: <code>request_irq()</code><a title="#interrupt-handler-registration:-request_irq()" href="#interrupt-handler-registration:-request_irq()"></a></h3>
<p>Return 0 on success or standard error code and can sleep.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* in the includes/linux/interrupt.h */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> must_check</span><br><span class="line">request_irq(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq, <span class="keyword">irq_handler_t</span> handler, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags,<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">void</span> *dev)</span><br></pre></td></tr></table></figure>
<p><code>irp</code>: interrupt number.<br>
<code>handler</code>: function pointer to the actual handler.<br>
<code>name</code>: String describing the associated device.<br>
<code>dev</code>: unique value identifying a device among a set of devices sharing an interrupt line.<br>
<code>flag</code>:  IRQF_DISABLED, IRQF_SAMPLE_RANDOM, IRQF_TIMER, IRQF_SHARED</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// registration</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">omap_kp_probe</span><span class="params">(struct platform_device *pdev)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  <span class="keyword">if</span>(request_irq(omap_kp-&gt;irq, omap_kp_interrupt, <span class="number">0</span>, <span class="string">&quot;omap-keypad&quot;</span>, omap_kp) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> err4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// handler</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">irqreturn_t</span> <span class="title">omap_kp_interrupt</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id)</span> </span>&#123;</span><br><span class="line">  omap_writew(<span class="number">1</span>, OMAP1_MPUIO_BASE+ OMAP_MPUIO_KBD_MASKIT);</span><br><span class="line">  tasklet_schedule(&amp;kp_tasklet);</span><br><span class="line">  <span class="keyword">return</span> IRQ_HANDLED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// free an irq </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">omap_kp_remove</span><span class="params">(struct platform_device *pdev)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  free_irq(omap_kp-&gt;irq, omap_kp);</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="inside-the-interrupt">Inside the interrupt<a title="#inside-the-interrupt" href="#inside-the-interrupt"></a></h3>
<p>prototype:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">irqreturn_t</span> <span class="title">handler_name</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>dev</code> parameter:<br>
Must be unique between handlers sharing an interrupt line. Set when registering the handler and can be accessed by the handler.</p>
<p>Return value:<br>
<code>IRQ_NONE</code>: the expected device was not the source of the interrupt.<br>
<code>IRQ_HANDLED</code>: correct invocation</p>
<h3 id="shared-handlers">Shared handlers<a title="#shared-handlers" href="#shared-handlers"></a></h3>
<p>On registration: <code>IRQ_SHARED</code> flag, <code>dev</code> must be unique (ex: a pointer to a data structure representing the device in question).</p>
<p>Handler must be able to detect that the device actually generated the interrupt it is called from. When an interrupt occurs on a shared line, the kernel executes sequentially all the handlers sharing this line. Need hardware support at the device level and detection code in the handler.</p>
<h2 id="part.3-interrupt-context">Part.3 Interrupt context<a title="#part.3-interrupt-context" href="#part.3-interrupt-context"></a></h2>
<p>The kernel can execute in Interrupt vs process context.<br>
· In process context following a syscall/an exception<br>
· In interrupt context upon a hardware interrupt reception</p>
<p>In interrupt context, sleeping/blocking is not possible.<br>
· The handler is not a schedulable entity (user/kernel thread)<br>
· No kmalloc(x, GFP KERNEL). Use GFP ATOMIC<br>
· No use of blocking synchronization primitives (ex: mutex). Use spinlocks</p>
<p>Interrupt context is time-critical. Other code is interrupted.</p>
<p>Interrupt handler stack: 1 dedicated stack per core for handlers (1 page)</p>
<h2 id="part.4-interrupt-handling-internals-in-linux">Part.4 Interrupt handling internals in Linux<a title="#part.4-interrupt-handling-internals-in-linux" href="#part.4-interrupt-handling-internals-in-linux"></a></h2>
<h3 id="interrupt-processing-path">Interrupt processing path<a title="#interrupt-processing-path" href="#interrupt-processing-path"></a></h3>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj948fvn5j317g0hk0z6.jpg" alt="Screen Shot 2020-11-09 at 21.39.58" style="zoom:33%;">
<p>Specific entry point for each interrupt line.<br>
· Saves the interrupt number and the current registers.<br>
· call <code>do_IRQ()</code>.</p>
<p>do IRQ():<br>
· Acknowledge interrupt reception and disable the line.<br>
· calls architecture specific functions.</p>
<p>Call chain ends up by calling <code>_handle_irq_event_percpu()</code><br>
· Re-enable interrupts on the line if IRQF DISABLED was not, specified during handler registration.<br>
· Call the handler if the line is not shared.<br>
· Otherwise iterate over all the handlers registered on that line.<br>
· Disable interrupts on the line again if they were previously enabled.</p>
<p><code>do_IRQ()</code> returns to entry point that call <code>ret_from_intr()</code>.<br>
· Checks if reschedule is needed (need resched).<br>
· Restore register values.</p>
<h2 id="part.5-/proc/interrupts">Part.5 /proc/interrupts<a title="#part.5-/proc/interrupts" href="#part.5-/proc/interrupts"></a></h2>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkj9dtp630j312c08eq53.jpg" alt="Screen Shot 2020-11-09 at 21.49.17" style="zoom:33%;">
<p>Columns:<br>
· Interrupt line (not showed if no handler installed).<br>
· Per-cpu occurrence count.<br>
· Related interrupt controller name.<br>
·  Edge/level (fasteoi): way the interrupt is triggered.<br>
· Associated device name.</p>
<h2 id="part.6-interrupt-control">Part.6 Interrupt control<a title="#part.6-interrupt-control" href="#part.6-interrupt-control"></a></h2>
<p>Kernel code sometimes needs to disable interrupts to ensure atomic execution of a section of code.</p>
<p>The kernel provides an API to disable/enable interrupts:<br>
· Disable interrupts for the current CPU.<br>
· Mask an interrupt line for the entire machine.</p>
<p>Note that disabling interrupts does not protect against concurrent access from other cores. Need locking, often used in conjunction with interrupts disabling.</p>
<h3 id="disabling-interrupts-on-the-local-core">Disabling interrupts on the local core<a title="#disabling-interrupts-on-the-local-core" href="#disabling-interrupts-on-the-local-core"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">local_irq_disable();</span><br><span class="line"><span class="comment">/*...*/</span></span><br><span class="line">local_irq_enable();</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Need to save the interrupts state in order not to disable them twice */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags; </span><br><span class="line">local_irq_save(flags);     <span class="comment">/* disable interrupts if needed */</span></span><br><span class="line">local_irq_restore(flags); <span class="comment">/* restores interrupts to the previous state */</span> </span><br><span class="line"><span class="comment">/* flags is passed as value but both functions are actually macros */</span></span><br></pre></td></tr></table></figure>
<h3 id="disabling-/-enabling-a-specific-interrupt-line">Disabling / enabling a specific interrupt line<a title="#disabling-/-enabling-a-specific-interrupt-line" href="#disabling-/-enabling-a-specific-interrupt-line"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disable_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>;        <span class="comment">/* Does not return until any currently running handler finishe */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disable_irq_nosync</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>; <span class="comment">/* Do not wait for handler termination */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enable_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>;      <span class="comment">/* Enables interrupt line */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">synchronize_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq)</span></span>; <span class="comment">/* Wait for a specific line handler to terminate before returning */</span></span><br></pre></td></tr></table></figure>
<p>These enable/disable calls can nest. Must enable as much times as the previous disabling call number.<br>
These functions do not sleep. They can be called from interrupt context.</p>
<h3 id="querying-the-status-of-the-interrupt-system">Querying the status of the interrupt system<a title="#querying-the-status-of-the-interrupt-system" href="#querying-the-status-of-the-interrupt-system"></a></h3>
<p><code>in_interrupt()</code> returns nonzero if the calling code is in interrupt context. Handler or bottom-half.<br>
<code>in_irq()</code> returns nonzero only if in a handler.<br>
To check if the code is in process context: <code>!in_interrupt()</code>.</p>
<p>Interrupts: <a href="http://www.mathcs.emory.edu/~jallen/Courses/355/Syllabus/6-io/0-External/interupt.html">http://www.mathcs.emory.edu/~jallen/Courses/355/Syllabus/6-io/0-External/interupt.html</a><br>
More details on Linux interrupt management (v3.18): <a href="https://0xax.gitbooks.io/linux-insides/content/interrupts/">https://0xax.gitbooks.io/linux-insides/content/interrupts/</a></p>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>Associative array</title>
    <url>/2020/20201202-Associative-arrays/</url>
    <content><![CDATA[<h1 id="associative-array">Associative array<a title="#associative-array" href="#associative-array"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>
· Wikipedia</p>
<p>In many applications, we have to associative a value with a key.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gljwlvpo2yj30ui0c8tem.jpg" alt="Screen Shot 2020-12-11 at 14.33.22" style="zoom: 50%;">
<p>The associative array (map, symbol table, or dictionary) is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. The client can insert key-value pairs into the symbol table and search for the value associated with a given key later.</p>
<h2 id="part.1-api">Part.1 API<a title="#part.1-api" href="#part.1-api"></a></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolTable</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">SymbolTable</span>()                // <span class="title">create</span> <span class="title">a</span> <span class="title">symbol</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">put</span>(<span class="title">Key</span> <span class="title">key</span>, <span class="title">Value</span> <span class="title">val</span>) // <span class="title">put</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pair</span> <span class="title">into</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">delete</span>(<span class="title">Key</span> <span class="title">key</span>)         // <span class="title">remove</span> <span class="title">key</span>(<span class="title">and</span> <span class="title">its</span> <span class="title">value</span>) <span class="title">from</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">get</span>(<span class="title">Key</span> <span class="title">key</span>)            // <span class="title">get</span> <span class="title">the</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span> (<span class="title">null</span> <span class="title">if</span> <span class="title">key</span> <span class="title">is</span> <span class="title">absent</span>)</span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">contains</span>(<span class="title">Key</span> <span class="title">key</span>)    // <span class="title">whether</span> <span class="title">it</span> <span class="title">contains</span> <span class="title">a</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">isEmpty</span>()            // <span class="title">whether</span> <span class="title">table</span> <span class="title">is</span> <span class="title">empty</span></span></span><br><span class="line"><span class="class">  <span class="title">int</span> <span class="title">size</span>()                   // <span class="title">number</span> <span class="title">of</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pairs</span> <span class="title">in</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">Iterable</span>&lt;<span class="title">key</span>&gt; <span class="title">keys</span>()         // <span class="title">all</span> <span class="title">the</span> <span class="title">keys</span> <span class="title">in</span> <span class="title">the</span> <span class="title">table</span></span></span><br></pre></td></tr></table></figure>
<p>As for ordered symbol tables where keys are <code>Comparable</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolTable</span>&lt;<span class="title">Key</span>&lt;<span class="keyword">extends</span> <span class="title">COmparable</span>&lt;<span class="title">Key</span>&gt;&gt;, <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">SymbolTable</span>()                // <span class="title">create</span> <span class="title">a</span> <span class="title">symbol</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">put</span>(<span class="title">Key</span> <span class="title">key</span>, <span class="title">Value</span> <span class="title">val</span>) // <span class="title">put</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pair</span> <span class="title">into</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">delete</span>(<span class="title">Key</span> <span class="title">key</span>)         // <span class="title">remove</span> <span class="title">key</span>(<span class="title">and</span> <span class="title">its</span> <span class="title">value</span>) <span class="title">from</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">get</span>(<span class="title">Key</span> <span class="title">key</span>)            // <span class="title">get</span> <span class="title">the</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span> (<span class="title">null</span> <span class="title">if</span> <span class="title">key</span> <span class="title">is</span> <span class="title">absent</span>)</span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">contains</span>(<span class="title">Key</span> <span class="title">key</span>)    // <span class="title">whether</span> <span class="title">it</span> <span class="title">contains</span> <span class="title">a</span> <span class="title">value</span> <span class="title">paired</span> <span class="title">with</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">boolean</span> <span class="title">isEmpty</span>()            // <span class="title">whether</span> <span class="title">table</span> <span class="title">is</span> <span class="title">empty</span></span></span><br><span class="line"><span class="class">  <span class="title">int</span> <span class="title">size</span>()                   // <span class="title">number</span> <span class="title">of</span> <span class="title">key</span>-<span class="title">value</span> <span class="title">pairs</span> <span class="title">in</span> <span class="title">the</span> <span class="title">table</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">min</span>()                    // <span class="title">smallest</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">max</span>()                    // <span class="title">largest</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">floor</span>(<span class="title">Key</span> <span class="title">key</span>)           // <span class="title">the</span> <span class="title">largest</span> <span class="title">key</span> <span class="title">which</span> <span class="title">is</span> <span class="title">smaller</span> <span class="title">than</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">ceiling</span>(<span class="title">Key</span> <span class="title">key</span>)         // <span class="title">the</span> <span class="title">smallest</span> <span class="title">key</span> <span class="title">which</span> <span class="title">is</span> <span class="title">gretaer</span> <span class="title">than</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">int</span> <span class="title">rank</span>(<span class="title">Key</span> <span class="title">key</span>)            // <span class="title">number</span> <span class="title">of</span> <span class="title">keys</span> <span class="title">that</span> <span class="title">is</span> <span class="title">strictly</span> <span class="title">less</span> <span class="title">than</span> <span class="title">the</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">Key</span> <span class="title">select</span>(<span class="title">int</span> <span class="title">k</span>)            // <span class="title">key</span> <span class="title">of</span> <span class="title">rank</span> <span class="title">k</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">deleteMin</span>()             // <span class="title">delete</span> <span class="title">the</span> <span class="title">smallest</span> <span class="title">key</span></span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">deleteMax</span>()             // <span class="title">delete</span> <span class="title">the</span> <span class="title">largest</span> <span class="title">key</span></span></span><br><span class="line">  int size(Key lo, Key hi)     // number of keys in[lo...hi]</span><br><span class="line">  <span class="function">Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span>  <span class="comment">// keys in [lo...hi] with sorted order</span></span></span><br><span class="line"><span class="function">  Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span>         <span class="comment">// all keys in the table with sorted order</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client example</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrequencyCounter</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FrequencyCounter</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> distinct = <span class="number">0</span>, words = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minlen = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        ST&lt;String, Integer&gt; st = <span class="keyword">new</span> ST&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compute frequency counts</span></span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            String key = StdIn.readString();</span><br><span class="line">            <span class="keyword">if</span> (key.length() &lt; minlen) <span class="keyword">continue</span>;</span><br><span class="line">            words++;</span><br><span class="line">            <span class="keyword">if</span> (st.contains(key)) &#123;</span><br><span class="line">                st.put(key, st.get(key) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                st.put(key, <span class="number">1</span>);</span><br><span class="line">                distinct++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find a key with the highest frequency count</span></span><br><span class="line">        String max = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        st.put(max, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : st.keys()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.get(word) &gt; st.get(max))</span><br><span class="line">                max = word;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StdOut.println(max + <span class="string">&quot; &quot;</span> + st.get(max));</span><br><span class="line">        StdOut.println(<span class="string">&quot;distinct = &quot;</span> + distinct);</span><br><span class="line">        StdOut.println(<span class="string">&quot;words    = &quot;</span> + words);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.2-implementations">Part.2 Implementations<a title="#part.2-implementations" href="#part.2-implementations"></a></h2>
<h3 id="sequential-search-in-an-unordered-linked-list.">Sequential search in an unordered linked list.<a title="#sequential-search-in-an-unordered-linked-list." href="#sequential-search-in-an-unordered-linked-list."></a></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequentialSearchST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Key key;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SequentialSearchST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;arguement to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to get() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) <span class="keyword">return</span> x.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to put() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) &#123;</span><br><span class="line">                x.val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        first = <span class="keyword">new</span> Node(key, val, first);</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Arguement to delete() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(first.key)) first = first.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x.next != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.next.key)) &#123;</span><br><span class="line">                x.next = x.next.next;</span><br><span class="line">                n--;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            queue.add(x.key);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SequentialSearchST&lt;String, Integer&gt; st = <span class="keyword">new</span> SequentialSearchST&lt;String, Integer&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;w&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;a&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;e&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.delete(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(st.size());</span><br><span class="line">        <span class="keyword">for</span> (String s : st.keys()) &#123;</span><br><span class="line">            System.out.println(s + <span class="string">&quot; &quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Unsuccessful search and insert in an (unordered) linked-list symbol table both use N compares, and successful search uses N compares in the worst case.</p>
<p>In particular, inserting N keys into an initially empty linked-list symbol table uses ~N^2/2 compares.</p>
<h3 id="binary-search-in-an-ordered-array">Binary search in an ordered array<a title="#binary-search-in-an-ordered-array" href="#binary-search-in-an-ordered-array"></a></h3>
<p>The underlying data structure is two parallel array, with the keys kept in order.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_CAPACITY = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Key[] keys;</span><br><span class="line">    <span class="keyword">private</span> Value[] vals;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinarySearchST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(INIT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinarySearchST</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        keys = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        vals = (Value[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> capacity &gt;= n;</span><br><span class="line">        Key[] tempk = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        Value[] tempv = (Value[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tempk[i] = keys[i];</span><br><span class="line">            tempv[i] = vals[i];</span><br><span class="line">        &#125;</span><br><span class="line">        vals = tempv;</span><br><span class="line">        keys = tempk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to get() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) <span class="keyword">return</span> vals[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to rank() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>, hi = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid  = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) hi = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) lo = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to put() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) &#123;</span><br><span class="line">            vals[i] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == keys.length) resize(<span class="number">2</span> * keys.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt; i; j--) &#123;</span><br><span class="line">            keys[j] = keys[j - <span class="number">1</span>];</span><br><span class="line">            vals[j] = vals[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        keys[i] = key;</span><br><span class="line">        vals[i] = val;</span><br><span class="line">        n++;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to delete is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == n || keys[i].compareTo(key) != <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            keys[j] = keys[j + <span class="number">1</span>];</span><br><span class="line">            vals[j] = vals[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n--;</span><br><span class="line">        keys[n] = <span class="keyword">null</span>;</span><br><span class="line">        keys[n] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; n == keys.length / <span class="number">4</span>) resize(keys.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Symbol table underflow error&quot;</span>);</span><br><span class="line">        delete(min());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Symbol table underflow error&quot;</span>);</span><br><span class="line">        delete(max());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     *  Ordered symbol table methods.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;called max() with empty symbol table&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> keys[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;called min() with empty symbol table&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> keys[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span> || k &gt;= size()) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;called select() with invalid argument: &quot;</span> + k);</span><br><span class="line">        <span class="keyword">return</span> keys[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to floor() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n &amp;&amp; key.compareTo(keys[i]) == <span class="number">0</span>) <span class="keyword">return</span> keys[i];</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> keys[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">ceiling</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (i == n) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> keys[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;decond argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) <span class="keyword">return</span> rank(hi) - rank(lo) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> rank(hi) - rank(lo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to keys() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to keys() is null&quot;</span>);</span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> queue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rank(lo); i &lt; rank(hi); i++) queue.add(keys[i]);</span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) queue.add(keys[rank(hi)]);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     *  Check internal invariants.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isSorted() &amp;&amp; rankCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (keys[i].compareTo(keys[i-<span class="number">1</span>]) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rankCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (i != rank(select(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (keys[i].compareTo(select(rank(keys[i]))) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BinarySearchST&lt;String, Integer&gt; st = <span class="keyword">new</span> BinarySearchST&lt;&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;w&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;e&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.put(<span class="string">&quot;y&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        st.put(<span class="string">&quot;q&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        st.put(<span class="string">&quot;o&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;k&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        st.put(<span class="string">&quot;p&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rank: &quot;</span> + st.rank(<span class="string">&quot;h&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;select: &quot;</span> + st.select(<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;floor: &quot;</span> + st.floor(<span class="string">&quot;m&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Ceiling: &quot;</span> + st.ceiling(<span class="string">&quot;k&quot;</span>));</span><br><span class="line">        st.delete(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        st.deleteMin();</span><br><span class="line">        st.deleteMax();</span><br><span class="line">        <span class="keyword">for</span> (String s: st.keys(<span class="string">&quot;i&quot;</span>,<span class="string">&quot;z&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(s + <span class="string">&quot; &quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Inserting a new key into an ordered array uses ~ 2N array accesses in the worst case, so inserting N keys into an initially empty table uses ~ N^2 array accesses in the worst case.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gls6tyaqnlj30hm0iyq48.jpg" alt="Screen Shot 2020-12-18 at 18.28.25" style="zoom:50%;">
<h3 id="binary-search-trees">Binary search trees<a title="#binary-search-trees" href="#binary-search-trees"></a></h3>
<p>See more details about binary search tree <a href="https://oreodu.github.io/2020/20201005-Tree" target="_blank">here</a>.</p>
<p>We implement the symbol-table in  a way that combines the flexibility of insertion in linked lists with the efficiency of search in an ordered array.</p>
<p>The running times of algorithms on binary search trees depend on the shapes of the trees, which, in turn, depends on the order in which keys are inserted.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Key key;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> Node left, right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">// number of nodes in subtree</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to contains() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> get(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> get(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls to put() with a null key&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = put(root, key, val);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = put(x.left, key, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = put(x.right, key, val);</span><br><span class="line">        <span class="keyword">else</span>  x.val = val;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST unberflow&quot;</span>);</span><br><span class="line">        root = deleteMin(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">        x.left = deleteMin(x.left);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;BST underflow&quot;</span>);</span><br><span class="line">        root = deleteMax(root);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMax</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">        x.right = deleteMax(x.right);</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;calls delete() with a null key&quot;</span>);</span><br><span class="line">        root = delete(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = delete(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = delete(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">            <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">            Node t = x;</span><br><span class="line">            x = min(t.right);</span><br><span class="line">            x.right = deleteMin(t.right);</span><br><span class="line">            x.left = t.left;</span><br><span class="line">        &#125;</span><br><span class="line">        x.size = <span class="number">1</span> + size(x.right) + size(x.left);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls min() with empty BST&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> min(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">min</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls max() with empty BTS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> max(root).key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">max</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to floor is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to floor with empty BST&quot;</span>);</span><br><span class="line">        Node x = floor(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node x,Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor(x.left, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = floor(x.right, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Key x = floor2(root, key, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too small&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor2</span><span class="params">(Node x, Key key, Key best)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> best;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.left, key, best);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> floor2(x.right, key, x.key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">ceiling</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to ceiling() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;calls to ceiling() with empty BTS&quot;</span>);</span><br><span class="line">        Node x = ceiling(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;argument to floor() is too large&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> ceiling(x.right, key);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = ceiling(x.left, key);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rank &lt; <span class="number">0</span> || rank &gt;= size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to select() is invaild: &quot;</span> + rank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> select(root, rank);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Key <span class="title">select</span><span class="params">(Node x, <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> leftsize = size(x.left);</span><br><span class="line">        <span class="keyword">if</span> (leftsize &gt; rank) <span class="keyword">return</span> select(x.left, rank);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (leftsize &lt; rank) <span class="keyword">return</span> select(x.right, rank - leftsize - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to rank() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> rank(key, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key, Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> rank(key, x.left);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> + size(x.left) + rank(key, x.right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> size(x.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Key&gt;();</span><br><span class="line">        <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to keys() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to keys() is null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Queue&lt;Key&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        keys(root, queue, lo, hi);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> cmplo = lo.compareTo(x.key);</span><br><span class="line">        <span class="keyword">int</span> cmphi = hi.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt; <span class="number">0</span>) keys(x.left, queue, lo, hi);</span><br><span class="line">        <span class="keyword">if</span> (cmplo &lt;= <span class="number">0</span> &amp;&amp; cmphi &gt;= <span class="number">0</span>) queue.add(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmphi &gt; <span class="number">0</span>) keys(x.right, queue, lo, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Key lo, Key hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;first argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hi == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;second argument to size() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (lo.compareTo(hi) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contains(hi)) <span class="keyword">return</span> rank(hi) - rank(lo) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> rank(hi) - rank(lo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(height(x.left), height(x.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">levelorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; keys = <span class="keyword">new</span> LinkedList&lt;Key&gt;();</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            Node x = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            keys.offer(x.key);</span><br><span class="line">            queue.offer(x.left);</span><br><span class="line">            queue.offer(x.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; q = <span class="keyword">new</span> Queue&lt;Key&gt;();</span><br><span class="line">			  inorder(root, q);</span><br><span class="line"> 			  <span class="keyword">return</span> q;</span><br><span class="line">	  &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node x, Queue&lt;Key&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inorder(x.left, q);</span><br><span class="line">        q.enqueue(x.key);</span><br><span class="line">        inorder(x.right, q);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isBST()) System.out.println(<span class="string">&quot;Not in symmetric order!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isSizeConsistent()) System.out.println(<span class="string">&quot;Subtree counts not consistent!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isRankConsistent()) System.out.println(<span class="string">&quot;Ranks not consistent&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> isBST() &amp;&amp; isSizeConsistent() &amp;&amp; isRankConsistent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isBST(root, <span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBST</span><span class="params">(Node x, Key min, Key max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (min != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(min) &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="keyword">null</span> &amp;&amp; x.key.compareTo(max) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBST(x.left, min, x.key) &amp;&amp; isBST(x.right, x.key, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> isSizeConsistent(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSizeConsistent</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (x.size != size(x.left) + size(x.right) + <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSizeConsistent(x.left) &amp;&amp; isSizeConsistent(x.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRankConsistent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (i != rank(select(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Key key : keys())</span><br><span class="line">            <span class="keyword">if</span> (key.compareTo(select(rank(key))) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BST&lt;String, Integer&gt; st = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">        st.put(<span class="string">&quot;J&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        st.put(<span class="string">&quot;A&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        st.put(<span class="string">&quot;S&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        st.put(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        st.put(<span class="string">&quot;K&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        st.put(<span class="string">&quot;L&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        st.put(<span class="string">&quot;Q&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        st.put(<span class="string">&quot;M&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;The height of the tree is :&quot;</span> + st.height());</span><br><span class="line">        System.out.println(<span class="string">&quot;The Ceiling of the key C is :&quot;</span> + st.ceiling(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The floor of the key N is :&quot;</span> + st.floor(<span class="string">&quot;N&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The rank of the key J is :&quot;</span> + st.rank(<span class="string">&quot;J&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Select :&quot;</span> + st.select(<span class="number">4</span>));</span><br><span class="line">        st.deleteMax();</span><br><span class="line">        st.deleteMin();</span><br><span class="line">        <span class="keyword">for</span> (String s: st.keys()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s: st.levelorder()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key:&quot;</span> + s + <span class="string">&quot;, Value&quot;</span> + st.get(s));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glyzekktvoj30qk0ny764.jpg" alt="Screen Shot 2020-12-24 at 15.33.12" style="zoom: 33%;">
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glyzndqivzj313y0dgq5g.jpg" alt="Screen Shot 2020-12-24 at 15.42.04" class="φcx"></p>
<h2 id="part.3-applications">Part.3 Applications<a title="#part.3-applications" href="#part.3-applications"></a></h2>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>binary search tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Priority Queue</title>
    <url>/2020/20201202-Priority-Queues/</url>
    <content><![CDATA[<h1 id="priority-queue">Priority Queue<a title="#priority-queue" href="#priority-queue"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· <i>Algorithms</i>  by Dasgupta, C. H. Papadimitriou, U. V. Vazirani<br>
· <i>Efficient Algorithms and Intractable Problems</i>  (CS170 2018 Fall at UCB)<br>
· <i>Algorithm Design</i> by John Kleinberg, Eva Tardos<br>
· <a href="https://sp19.datastructur.es/" target="_blank">CS61B Spring 2019 at UCB</a><br>
· <a href="https://www.coursera.org/learn/algorithms-part1" target="_blank">Algorithms, Part I,Ⅱ by Princeton University</a><br>
· Wikipedia</p>
<p>Often, we collect a set of items, then process the one with the largest key, then perhaps collect more items, then process the one with the current largest key, and so forth. We don’t need to have all keys in full sorted order. Two important operations during the process are insert and remove the maximum.</p>
<p>As for many abstract data structure they have limited operations so that they can maintain some features of the data that stored in it and provide some required results more efficiently. So does priority queue. Different from the stack(remove the item most recently added) or queue(remove the item least recently added), priority queue can remove the element based on the priority (Max: the largest item, Min: the smallest item) and also insert items in a very efficient way.</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhfo4e6igj30v00hiwgf.jpg" alt="Screen Shot 2020-12-09 at 11.16.08" style="zoom:33%;">
<h2 id="part.1-api-for-priority-queue">Part.1 API for priority queue<a title="#part.1-api-for-priority-queue" href="#part.1-api-for-priority-queue"></a></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the key in the priority queue must be Comparable and immutable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt;</span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>()                   // <span class="title">create</span> <span class="title">an</span> <span class="title">empty</span> <span class="title">priority</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>(<span class="title">Comparator</span>&lt;<span class="title">Key</span>&gt; <span class="title">comparator</span>) </span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>(<span class="title">int</span> <span class="title">capacity</span>)       // <span class="title">create</span> <span class="title">a</span> <span class="title">priority</span> <span class="title">of</span> <span class="title">initial</span> <span class="title">capacity</span></span></span><br><span class="line"><span class="class">  <span class="title">MaxPQ</span>(<span class="title">int</span> <span class="title">capacity</span>, <span class="title">Comparator</span>&lt;<span class="title">Key</span>&gt; <span class="title">comparator</span>)</span></span><br><span class="line">  MaxPQ(Key[] a)            // create a priority with given keys</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(key v)</span>        <span class="comment">// insert a key into the priority queue</span></span></span><br><span class="line"><span class="function">  Key <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span>         <span class="comment">// delete the arbitary value in the pq with index i </span></span></span><br><span class="line"><span class="function">  Key <span class="title">delMax</span><span class="params">()</span>              <span class="comment">// return and remove the largest key</span></span></span><br><span class="line"><span class="function">  Key <span class="title">max</span><span class="params">()</span>                 <span class="comment">// return the largest key</span></span></span><br><span class="line"><span class="function">  <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>         <span class="comment">// is the priority quque empty</span></span></span><br><span class="line"><span class="function">  <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                <span class="comment">// number of entries in the priority queue</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  MinPQ&lt;Transaction&gt; pq = <span class="keyword">new</span> MinPQ&lt;Transaction&gt;();</span><br><span class="line">  <span class="keyword">while</span> (StdIn.hasNextLine()) &#123;</span><br><span class="line">    String line = StdIn.readLine();</span><br><span class="line">    Transaction item = <span class="keyword">new</span> Transaction(line);</span><br><span class="line">    pq.insert(item);</span><br><span class="line">    <span class="keyword">if</span> (pq.size() &gt; M)</span><br><span class="line">      pq.delMin();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.2-implementations">Part.2 Implementations<a title="#part.2-implementations" href="#part.2-implementations"></a></h2>
<p>Attention: The key in the priority queue should be immutable!</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhqc3jpzwj30v20n20v3.jpg" alt="Screen Shot 2020-12-09 at 17.25.11" style="zoom: 40%;">
<h3 id="1.-unordered-or-ordered-array-implementation">1. Unordered or ordered array implementation<a title="#1.-unordered-or-ordered-array-implementation" href="#1.-unordered-or-ordered-array-implementation"></a></h3>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhez1hlqoj31180gw0w7.jpg" alt="Screen Shot 2020-12-09 at 10.52.03" style="zoom: 40%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnorderedMaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Key[] pq;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> N;     <span class="comment">// number of the pq</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UnorderedMaxPQ</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    pq = (Key[] <span class="keyword">new</span> Comparable[capacity];)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">    pq[N++] = x;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (less(max,i)) max = i;</span><br><span class="line">    &#125;</span><br><span class="line">    exch(max, N - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> pq[--N];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>See ordered max priority queue code <a href="https://algs4.cs.princeton.edu/24pq/OrderedArrayMaxPQ.java.html" target="_blank">here</a>.</p>
<p>Except array, we can also use linked list(unordered and reverse-ordered) to store the data.</p>
<p>All of the elementary implementations just discussed have the property that <em>either</em> the <em>insert</em> or the <em>remove the maximum</em> operation takes linear time in the worst case.</p>
<h3 id="2.-binary-heap">2. Binary heap<a title="#2.-binary-heap" href="#2.-binary-heap"></a></h3>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhm2c13loj30n60maacz.jpg" alt="Screen Shot 2020-12-09 at 14.57.27" style="zoom:33%;">
<p>We can see the implementations of binary heap and more details <a href="https://oreodu.github.io/2020/20201005-Tree" target="_blank">here</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> DataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Key</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key[] pq;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFACTOR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;Key&gt; comparator;  <span class="comment">// optional comparator</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>, comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Comparable[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> capacity, Comparator&lt;Key&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Object[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(Key[] a)</span> </span>&#123;</span><br><span class="line">        N = a.length;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Comparable[N + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(a,<span class="number">0</span>, pq, <span class="number">1</span>, N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = N/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            sink(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxPQ</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;The heap is underflow!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pq[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* pq maintains the smallest N items</span></span><br><span class="line"><span class="comment">        if (N == pq.length) &#123;</span></span><br><span class="line"><span class="comment">            if (x.compareTo(max()) &lt; 0) delete(1);</span></span><br><span class="line"><span class="comment">            else return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The key can&#x27;t be null!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (N == pq.length - <span class="number">1</span>) resize(REFACTOR * pq.length);</span><br><span class="line">        pq[++N] = x;</span><br><span class="line">        swim(N);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxPQ</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delete(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Priority queue underflow&quot;</span>);</span><br><span class="line">        Key max = pq[i];</span><br><span class="line">        exch(i, N--);</span><br><span class="line">        sink(i);</span><br><span class="line">        pq[N + <span class="number">1</span>] = <span class="keyword">null</span>;  <span class="comment">// prevent loitering</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isMaxPQ</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> capacity &gt; N;</span><br><span class="line">        Key[] newArray = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        System.arraycopy(pq,<span class="number">0</span>, newArray, <span class="number">0</span>, N + <span class="number">1</span>);</span><br><span class="line">        pq = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions to restore the heap invariant.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k)) &#123;</span><br><span class="line">            exch(k, k/<span class="number">2</span>);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Helper functions for compares and swaps.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Comparable&lt;Key&gt;) pq[i]).compareTo(pq[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> comparator.compare(pq[i], pq[j]) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Key tmp = pq[i];</span><br><span class="line">        pq[i] = pq[j];</span><br><span class="line">        pq[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is heap[1..n] a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxPQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pq[i] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N+<span class="number">1</span>; i &lt; pq.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pq[i] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pq[<span class="number">0</span>] != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxPQOrdered(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is subtree of heap[1..n] rooted at k a max heap?</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMaxPQOrdered</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; N) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span>*k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left  &lt;= N &amp;&amp; less(k, left))  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= N &amp;&amp; less(k, right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isMaxPQOrdered(left) &amp;&amp; isMaxPQOrdered(right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">     * Iterator.</span></span><br><span class="line"><span class="comment">     ***************************************************************************/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Key&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeapIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Key</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> BinaryMaxHeap&lt;Key&gt; copy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeapIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (comparator == <span class="keyword">null</span>) copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size());</span><br><span class="line">            <span class="keyword">else</span> copy = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(size(), comparator);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">                copy.insert(pq[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !copy.isEmpty(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Key <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> copy.delMax();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        BinaryMaxHeap&lt;Integer&gt; bh = <span class="keyword">new</span> BinaryMaxHeap&lt;&gt;(a);</span><br><span class="line">        System.out.println(bh.max());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>See the implementation of MinPQ <a href="https://algs4.cs.princeton.edu/24pq/MinPQ.java.html" target="_blank">here</a>.</p>
<p>See more different priority queue: <a href="IndexMaxPQ">IndexMaxPQ</a>, <a href="https://algs4.cs.princeton.edu/24pq/IndexMinPQ.java.html" target="_blank">IndexMinPQ</a>, <a href="https://algs4.cs.princeton.edu/24pq/Multiway.java.html" target="_blank">Multiway</a>.</p>
<h2 id="part.3-applications">Part.3 Applications<a title="#part.3-applications" href="#part.3-applications"></a></h2>
<p><strong>·</strong> <strong>Event-driven simulation (customers in a line, colliding particles)</strong><br>
<strong>·</strong> Numerical computation (reducing roundoff error)<br>
<strong>·</strong> Data compression (Huffman codes)<br>
<strong>·</strong> Graph searching (Dijkstra’s algorithm, Prim’s algorithm)<br>
<strong>·</strong> Number theory (sum of powers)<br>
<strong>·</strong> Artificial intelligence (A* search)<br>
<strong>·</strong> Statistics (maintain largest M values in a sequence)<br>
<strong>·</strong> Operating systems (loading balancing, interrupt handling)<br>
<strong>·</strong> Discrete optimization (bin packing, scheduling)<br>
<strong>·</strong> Spam filtering (Bayesian spam filter)</p>
<h3 id="example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)">Example : Molecular dynamics simulation of hard discs (Event-driven simulation)<a title="#example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)" href="#example-:-molecular-dynamics-simulation-of-hard-discs-(event-driven-simulation)"></a></h3>
<p>Goal: Simulate the motion of N moving particles that behave according to the laws of elastic collision.</p>
<p>Hard disc model<br>
・Moving particles interact via elastic collisions with each other and walls.<br>
・Each particle is a disc with known position, velocity, mass, and radius.<br>
・No other forces.</p>
<p>Event-driven simulation (Change state only when something happens.)<br>
・Between collisions, particles move in straight-line trajectories.<br>
・Focus only on times when collisions occur.<br>
・Collision prediction.<br>
・Maintain PQ of collision events, prioritized by time.<br>
・Collision resolution.<br>
・Remove the min = get next collision.</p>
<p>See more details <a href="https://algs4.cs.princeton.edu/61event/" target="_blank">here</a>.</p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Heapsort</tag>
        <tag>binary heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap</title>
    <url>/2020/2020-12-09-Heap/</url>
    <content><![CDATA[<h1 id="heap">Heap<a title="#heap" href="#heap"></a></h1>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:center">Operation</th>
<th style="text-align:center">find-min</th>
<th style="text-align:center">delete-min</th>
<th style="text-align:center">insert</th>
<th style="text-align:center">decrease-key</th>
<th style="text-align:center">meld</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Binary_heap" target="_blank">Binary</a></td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(<em>n</em>)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Leftist_tree" target="_blank">Leftist</a></td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Binomial_heap" target="_blank">Binomial</a></td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)[<a href="https://en.wikipedia.org/wiki/Binary_heap#cite_note-amortized-21" target="_blank">c]</a></td>
<td style="text-align:center"><em>Θ</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Fibonacci_heap" target="_blank">Fibonacci</a></td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Pairing_heap" target="_blank">Pairing</a></td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>o</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Brodal_queue" target="_blank">Brodal</a></td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/w/index.php?title=Rank-pairing_heap&amp;action=edit&amp;redlink=1" target="_blank">Rank-pairing</a></td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Fibonacci_heap" target="_blank">Strict Fibonacci</a>]</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://en.wikipedia.org/wiki/2%E2%80%933_heap" target="_blank">2–3 heap</a></td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>O</em>(log <em>n</em>)</td>
<td style="text-align:center"><em>Θ</em>(1)</td>
<td style="text-align:center"><em>?</em></td>
</tr>
</tbody>
</table></div></div><h2 id="prat.1-basis">Prat.1 Basis<a title="#prat.1-basis" href="#prat.1-basis"></a></h2>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronization</title>
    <url>/2020/20201217-Synchronization/</url>
    <content><![CDATA[<h1 id="synchronization">Synchronization<a title="#synchronization" href="#synchronization"></a></h1>
<p>The kernel is programmed using the shared memory model  and shared data must be protected against concurrent access.</p>
<p>Causes of Concurrency:<br>
• For a single core :<br>
• interleaving asynchronousexecution threads (Interruption/preemption)<br>
• In the kernel:<br>
• Interrupts<br>
• Softirqs<br>
• Kernel preemption<br>
• Sleeping and synchronization<br>
• Symmetrical multiprocessing<br>
In order to understand and prepare for these, we have to identify shared data and related critical regions. And this needs to be done from the start as concurrency bugs are difficult to detect and solve.</p>
<p>Critical region/section: part of the code manipulating shared data<br>
• must execute atomically, i.e. without interruption<br>
• should not be executed in parallel on SMP<br>
Race condition: two threads concurrently executing the same critical region.</p>
<p>• Code safe from access from an interrupt handler: interrupt-safe. This code can be interrupted by an interrupt handler and this will not cause any issue.<br>
• Code safe from access from multiple cores: SMPsafe. This code can be executed on multiple cores at the same time without issue.<br>
• Code safe from concurrency with kernel preemption: preempt-safe. This code can be preempted without issue</p>
<p>Need a mechanism to assure a critical region is executed atomically by only one core at the same time → locks.<br>
When writing some code, observe the data manipulated by the code. If anyone else (thread/handler) can see it, lock it.<br>
Locking is implemented by the programmer voluntarily (own willing)<br>
• No indication from the compiler!<br>
• No protection generally ends up in data corruption<br>
• → inconsistent behavior for the program<br>
• → difficult to debug and trace back the source of the issue<br>
• Locking/unlocking primitives are implemented through atomic operations</p>
<p>Deadlocks:<br>
Situations in which one or several threads are waiting on locks for one or several resources that will never be freed.</p>
<p>Prevent deadlocks:<br>
• Implement lock ordering.<br>
• Do not double-acquire the same lock.</p>
<p>A lock is said to be contented when there are often threads waiting for it. A highly contented lock can become a bottleneck for the system performance.</p>
<p>• Coarse lock example: protecting an entire subsystem’s shared data structures<br>
• Simple Implementation<br>
• Low Scalability<br>
• Fine-grained locks:<br>
• Complex Implementation<br>
• High Scalability</p>
<h2 id="part.1-atomic-operations">Part.1 Atomic Operations<a title="#part.1-atomic-operations" href="#part.1-atomic-operations"></a></h2>
<p>It performs (simple) operations in memory and either succeed or fail in their entirety.<br>
• Regardless of what operations are executed on other cores<br>
• Without interruption</p>
<p>Examples:<br>
• Fetch-and-add: does atomic increment.<br>
• Test-and-set: sets a value at a memory location and returns the previous value.<br>
• Compare-and-swap: modifies the content of a memory location only if the previous content is equal to a given value.</p>
<p>Linux provides two APIs:<br>
• Integers atomic operations (<code>include/linux/types.h</code>)<br>
(API defined in <code>include/asm/atomic.h</code>)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> counter;</span><br><span class="line">&#125; <span class="keyword">atomic_t</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">atomic_t</span> v; <span class="comment">/* define v */</span></span><br><span class="line"><span class="keyword">atomic_t</span> u = ATOMIC_INIT(<span class="number">0</span>); <span class="comment">/* define and initialize u to 0 */</span></span><br><span class="line">atomic_set(&amp;v, <span class="number">4</span>); <span class="comment">/* v = 4 (atomically) */</span></span><br><span class="line">atomic_add(<span class="number">2</span>, &amp;v); <span class="comment">/* v = v + 2 == 6 (atomically) */</span></span><br><span class="line">atomic_inc(&amp;v); <span class="comment">/* v = v + 1 == 7 (atomically) */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Atomic Integer Operations: Usage Example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_ATOMIC] &quot;</span></span></span><br><span class="line"><span class="keyword">atomic_t</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">  atomic_inc(&amp;counter);</span><br><span class="line">  msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">  printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, atomic_read(&amp;counter));</span><br><span class="line">  msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	atomic_set(&amp;counter, <span class="number">0</span>);</span><br><span class="line">	read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">	write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	kthread_stop(read_thread);</span><br><span class="line">	kthread_stop(write_thread);</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>• Bitwise atomic operations (<code>include/linux/bitops.h</code>)<br>
(API functions operate on generic pointers (<code>void *</code>)</p>
<p>​    Example with long on 32-bits systems:<br>
​      • Bit 31 is the most significant bit<br>
​     • Bit 0 is the least significant bit</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> word = <span class="number">0</span>; <span class="comment">/* 32 / 64 bits according to the system */</span></span><br><span class="line"></span><br><span class="line">set_bit(<span class="number">0</span>, &amp;word); <span class="comment">/* bit zero is set atomically */</span></span><br><span class="line">set_bit(<span class="number">1</span>, &amp;word); <span class="comment">/* bit one is set atomically */</span></span><br><span class="line">printk(<span class="string">&quot;&amp;ul¥n&quot;</span>, word); <span class="comment">/* print &quot;3&quot; */</span></span><br><span class="line">clear_bit(<span class="number">1</span>, &amp;word); <span class="comment">/* bit one is unset atomically */</span></span><br><span class="line">change_bit(<span class="number">0</span>, &amp;word); <span class="comment">/* flip bit zero atomically (now unset) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* set bit as zero and return its previous value (atomically) */</span></span><br><span class="line"><span class="keyword">if</span> (test_and_set_bit(<span class="number">0</span>, &amp;word)) &#123;</span><br><span class="line"><span class="comment">/* not true in the case of our example */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* you can mix atomic bit operations and normal C */</span></span><br><span class="line">word = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<h2 id="part.2-spin-locks">Part.2 Spin Locks<a title="#part.2-spin-locks" href="#part.2-spin-locks"></a></h2>
<p>The most common lock used in the kernel which can be held by at most one thread of execution.</p>
<p>When a thread tries to acquire an already held lock:<br>
• Active waiting (spinning)<br>
Hurts performance when spinning for too long. However spin-locks are needed in context where one cannot sleep (interrupt)<br>
• As opposed to putting the thread to sleep (semaphores/mutexes)</p>
<p>In process context, do not sleep while holding a spin-lock. Another thread trying to acquire the spin-lock hangs the CPU, preventing you to wake up.</p>
<p>Usage: (API in <code>include/linux/spinlock.h</code>)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DEFINE_SPINLOCK(my_lock);</span><br><span class="line">spin_lock(&amp;my_lock);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">spin_unlock(&amp;my_lock);</span><br></pre></td></tr></table></figure>
<p>Lock/unlock methods disable/enable kernel preemption and acquire/release the lock. Lock is compiled away on uniprocessor systems and still needs do disabled/re-enable preemption.</p>
<p>For Interrupt Handlers:<br>
Spin locks do not sleep: it is safe to use them in interrupt context. In an interruption handler, need to disable local interrupts before taking the lock!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spinlock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_SPINLOCK] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line">DEFINE_SPINLOCK(counter_lock);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	spin_lock(&amp;counter_lock);</span><br><span class="line">	counter++;</span><br><span class="line">	spin_unlock(&amp;counter_lock);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	spin_lock(&amp;counter_lock);</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">	spin_unlock(&amp;counter_lock);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	counter = <span class="number">0</span>;</span><br><span class="line">	read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">	write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	kthread_stop(read_thread);</span><br><span class="line">	kthread_stop(write_thread);</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Reader-Writer Spin Locks:<br>
When entities accessing shared data can be clearly divided into readers and writers.</p>
<p>Example: list updated (write) and searched (read)<br>
• When updated, no other entity should update nor search<br>
• When searched, no other entity should update<br>
• Safe to allow multiple readers in parallel</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DEFINE_RWLOCK(my_rwlock); <span class="comment">/* declaration &amp; initialization */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reader code</span></span><br><span class="line">read_lock(&amp;my_rwlock);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">read_unlock(&amp;my_rwlock);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Writer code</span></span><br><span class="line">write_lock(&amp;my_rwlock);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">write_unlock(&amp;my_rwlock);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Deadlock</span></span><br><span class="line">read_lock(&amp;my_rwlock);</span><br><span class="line">write_lock(&amp;my_rwlock);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/spinlock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_RWSPINLOCK] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line">DEFINE_RWLOCK(counter_lock);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread1</span>, *<span class="title">read_thread2</span>,</span></span><br><span class="line"><span class="class">*<span class="title">read_thread3</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	write_lock(&amp;counter_lock);</span><br><span class="line">	counter++;</span><br><span class="line">	write_unlock(&amp;counter_lock);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	read_lock(&amp;counter_lock);</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">	read_unlock(&amp;counter_lock);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	counter = <span class="number">0</span>;</span><br><span class="line">	read_thread1 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread1&quot;</span>);</span><br><span class="line">	read_thread2 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread2&quot;</span>);</span><br><span class="line">	read_thread3 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread3&quot;</span>);</span><br><span class="line">	write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part.3-semaphores-and-mutexes">Part.3 Semaphores and Mutexes<a title="#part.3-semaphores-and-mutexes" href="#part.3-semaphores-and-mutexes"></a></h2>
<p>Semaphores: sleeping locks (API in <code>include/linux/semaphore.h</code>)<br>
• A thread trying to acquire an already held lock is put on a waitqueue. When the semaphore becomes available, one task on the waitqueue is awaken.<br>
• Well suited towards locks held for a long time. On the contrary, large overhead for locks held for short periods.<br>
• No usable in interrupt context.<br>
• A thread can sleep while holding a semaphore. Another thread trying to acquire it will sleep and let you continue.<br>
• A thread cannot hold a spinlock while trying to acquire a semaphore. Might sleep!</p>
<p>• Contrary to spin locks, semaphores allow multiples holders.<br>
• Counter initialized to a given value. Decremented each time a thread acquires the<br>
semaphore. The semaphore becomes unavailable when the counter reaches 0.<br>
• In the kernel, most of the semaphores used are binary semaphores<br>
Counter initialized to:  1 -&gt; initially available, 0 -&gt; initially disabled.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> *<span class="title">sem1</span>;</span></span><br><span class="line"></span><br><span class="line">sem1 = kmalloc(<span class="keyword">sizeof</span>(struct semaphore),</span><br><span class="line">GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!sem1)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* counter == 1: binary semaphore */</span></span><br><span class="line">sema_init(&amp;sema, <span class="number">1</span>);</span><br><span class="line">down(sem1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">up(sem1);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Binary semaphore static declaration */</span></span><br><span class="line">DECLARE_MUTEX(sem2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (down_interruptible(&amp;sem2)) &#123;</span><br><span class="line"><span class="comment">/* signal received, semaphore not acquired */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">up(sem2);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DECLARE_RWSEM(rwsem1);</span><br><span class="line"></span><br><span class="line">init_rwsem(&amp;rwsem1);</span><br><span class="line">down_read(rwsem1);</span><br><span class="line"><span class="comment">/* critical (read) region */</span></span><br><span class="line">up_read(&amp;rwsem1);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> *<span class="title">rwsem2</span>;</span></span><br><span class="line">rwsem2 = kmalloc(<span class="keyword">sizeof</span>(struct rw_semaphore),</span><br><span class="line">GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!rwsem2)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">init_rwsem(rwsem2);</span><br><span class="line">down_write(rwsem2);</span><br><span class="line"><span class="comment">/* critical (write) region */</span></span><br><span class="line">up_write(rwsem2);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/rwsem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_SEM] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* shared data: */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> *<span class="title">counter_rwsemaphore</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">read_thread2</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	down_write(counter_rwsemaphore);</span><br><span class="line">	counter++;</span><br><span class="line">  downgrade_write(counter_rwsemaphore);</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;(writer) counter: %d¥n&quot;</span>, counter);</span><br><span class="line">	up_read(counter_rwsemaphore);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	down_read(counter_rwsemaphore);</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">	up_read(counter_rwsemaphore);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">	counter_rwsemaphore = kmalloc(<span class="keyword">sizeof</span>(struct rw_semaphore), GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!counter_rwsemaphore)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">	init_rwsem(counter_rwsemaphore);</span><br><span class="line">	read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">	read_thread2 = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread2&quot;</span>);</span><br><span class="line">	write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	kthread_stop(read_thread);</span><br><span class="line">	kthread_stop(write_thread);</span><br><span class="line">	kthread_stop(read_thread2);</span><br><span class="line">	kfree(counter_rwsemaphore);</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Mutexes are binary semaphore with stricter use cases: (API in <code>include/linux/mutex.h</code>)<br>
• Only one thread can hold the mutex at a time.<br>
• A thread locking a mutex must unlock it.<br>
• No recursive lock and unlock operations.<br>
• A thread cannot exit while holding a mutex.<br>
• A mutex cannot be acquired in interrupt context.<br>
• A mutex can be managed only through the API.</p>
<p>With special debugging mode: (CONFIG_DEBUG_MUTEXES)<br>
The kernel can check and warn if these constraints are not met.</p>
<p>If these constraints disallow the use of mutexes, use semaphores. Otherwise always use mutexes.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DEFINE_MUTEX(mut1); <span class="comment">/* static */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> *<span class="title">mut2</span> =</span> kmalloc(<span class="keyword">sizeof</span>(struct mutex), GFP_KERNEL); <span class="comment">/* dynamic */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mut2)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">mutex_init(mut2);</span><br><span class="line">mutex_lock(&amp;mut1);</span><br><span class="line"><span class="comment">/* critical region */</span></span><br><span class="line">mutex_unlock(&amp;mut1);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_MUTEX]: &quot;</span></span></span><br><span class="line"><span class="comment">/* shared data: */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> *<span class="title">mut</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	mutex_lock(mut);</span><br><span class="line">	counter++;</span><br><span class="line">	mutex_unlock(mut);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (!kthread_should_stop()) &#123;</span><br><span class="line">	mutex_lock(mut);</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">	mutex_unlock(mut);</span><br><span class="line">	msleep(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">	mut = kmalloc(<span class="keyword">sizeof</span>(struct mutex), GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!mut)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	mutex_init(mut);</span><br><span class="line">	read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">	write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	kthread_stop(read_thread);</span><br><span class="line">	kthread_stop(write_thread);</span><br><span class="line">	kfree(mut);</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Spin Lock vs Mutex Usage<br>
• Low overhead locking needed? use spin lock<br>
• Short lock hold time? use spin lock<br>
• Long lock hold time? use mutex<br>
• Need to lock in interrupt context? use spin lock<br>
• Need to sleep while holding? use mutex</p>
<h2 id="part.4-other-synchronization-mechanisms">Part.4 Other Synchronization Mechanisms<a title="#part.4-other-synchronization-mechanisms" href="#part.4-other-synchronization-mechanisms"></a></h2>
<h3 id="completion-variables:">Completion Variables:<a title="#completion-variables:" href="#completion-variables:"></a></h3>
<p>(API in <code>include/linux/completion.h</code>)<br>
Completion variables are used when a thread needs to signal another one of some event. Waiting thread sleeps.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DECLARE_COMPLETION(comp1); <span class="comment">/* static */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">comp2</span> =</span> kmalloc(<span class="keyword">sizeof</span>(struct completion), GFP_KERNEL); <span class="comment">/* dynamic */</span></span><br><span class="line"><span class="keyword">if</span> (!comp2)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">init_completion(comp2);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Thread A</span></span><br><span class="line"><span class="comment">/* signal event: */</span></span><br><span class="line">complete(comp1);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Thread B</span></span><br><span class="line"><span class="comment">/* wait for signal: */</span></span><br><span class="line">wait_for_completion(comp1);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/completion.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_PREF <span class="meta-string">&quot;[SYNC_COMP] &quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> counter; <span class="comment">/* shared data: */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">comp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">read_thread</span>, *<span class="title">write_thread</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writer_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (counter != <span class="number">1234</span>)</span><br><span class="line">		counter++;</span><br><span class="line">	complete(comp);</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">	wait_for_completion(comp);</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;counter: %d¥n&quot;</span>, counter);</span><br><span class="line">	do_exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">my_mod_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	printk(PRINT_PREF <span class="string">&quot;Entering module.¥n&quot;</span>);</span><br><span class="line">	counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">	comp = kmalloc(<span class="keyword">sizeof</span>(struct completion), GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!comp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">	init_completion(comp);</span><br><span class="line">	read_thread = kthread_run(read_function, <span class="literal">NULL</span>, <span class="string">&quot;read-thread&quot;</span>);</span><br><span class="line">	write_thread = kthread_run(writer_function, <span class="literal">NULL</span>, <span class="string">&quot;write-thread&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">my_mod_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	kfree(comp);</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Exiting module.¥n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(my_mod_init);</span><br><span class="line">module_exit(my_mod_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="preemption-disabling:">Preemption Disabling:<a title="#preemption-disabling:" href="#preemption-disabling:"></a></h3>
<p>When a spin lock is held and preemption is disabled. Some situations require preemption disabling without involving spin locks.</p>
<p>API to disable kernel preemption<br>
• can nest and be implemented through a counter<br>
• preempt_disable(). Disable kernel preemption, increment preemption counter<br>
• preempt_enable(). Decrement counter and enable preemption if it reaches 0<br>
• preempt_enable_no_resched(). Enables kernel preemption and does not check for any pending reschedule.<br>
• preempt_count(). Returns preemption counter.<br>
• get_cpu(). Disables preemption and return the current CPU id.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cpu = get_cpu(); <span class="comment">/* disable preemption and return current CPU id */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> *<span class="title">my_struct</span> <span class="title">my_variable</span> =</span> per_cpu_structs_array[cpu];</span><br><span class="line"><span class="comment">/* manipulate my_variable */</span></span><br><span class="line">put_cpu(); <span class="comment">/* re-enable preemption */</span></span><br></pre></td></tr></table></figure>
<h3 id="sequential-locks">Sequential Locks<a title="#sequential-locks" href="#sequential-locks"></a></h3>
<p>(API in <code>include/linux/seqlock.h</code>)<br>
Reader-writer spinlock scaling to many readers and favoring writers.<br>
• Implemented with a counter (sequence number).<br>
• Before and after reading the data, the counter is checked.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">seqlock_t</span> my_seq_lock = DEFINE_SEQLOCK(my_seq_lock);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Write path</span></span><br><span class="line">write_seqlock(&amp;my_seq_lock);</span><br><span class="line"><span class="comment">/* critical (write) region */</span></span><br><span class="line">write_sequnlock(&amp;my_seq_lock);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Read path</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> seq;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	seq = read_seqbegin(&amp;my_seq_lock);</span><br><span class="line">	<span class="comment">/* read data here ... */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (read_seqretry(&amp;my_seq_lock, seq));</span><br></pre></td></tr></table></figure>
<p>Seq locks are useful when:<br>
• There are many readers and few writers.<br>
• Writers should be favored over readers.</p>
<p>Example: jiffies.</p>
<h2 id="part.5-ordering-and-memory-barriers">Part.5 Ordering and Memory Barriers<a title="#part.5-ordering-and-memory-barriers" href="#part.5-ordering-and-memory-barriers"></a></h2>
<p>Memory reads (load) and write (store) operations can be reordered.<br>
• By the compiler (compile time)<br>
• By the CPU (run time)</p>
<p>CPU/compiler are not aware about code in other context.<br>
• Communication with hardware<br>
• Symmetric multiprocessing</p>
<p>Memory barriers instruction allows to force the actual execution of load and stores at some point in the program.</p>
<p>• rmb() (read memory barrier):<br>
• No load prior to the code will be reordered after the call<br>
• No load after the call will be reordered before the call<br>
• i.e. commit all pending loads before continuing<br>
• wmb() (write memory barrier):<br>
• Same as rmb() with stores instead of loads<br>
• mb(): Concerns loads and stores<br>
• barrier(): Same as mb() but only for the compiler<br>
• read_barrier_depends(). Prevent data-dependent loads (b = a) to be reordered across the barrier. Less costly than rmb() as we block only on a subset of pending loads</p>
<p>Usage: SMP Optimizations<br>
• smp_rmb(): rmb() on SMP and barrier() on UP<br>
• smp_read_barrier_depends(): read_barrier_depends() on SMP and barrier() on UP<br>
• smp_wmb(): wmb() on SMP and barrier() on UP<br>
• smp_mb(): mb() on SMP and barrier() on UP</p>
]]></content>
      <categories>
        <category>Operating System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
        <tag>Synchronization</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie</title>
    <url>/2020/20201219-Trie/</url>
    <content><![CDATA[<h1 id="trie">Trie<a title="#trie" href="#trie"></a></h1>
<h3 id="overview">Overview<a title="#overview" href="#overview"></a></h3>
<p>(概略图)</p>
<p><strong>· materials:</strong><br>
· Wikipedia<br>
· Leetcode - <a href="https://leetcode.com/problems/implement-trie-prefix-tree/solution/" target="_blank">Trie</a></p>
<p>Trie (which pronounces “try”)  or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings.</p>
<p>There are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie? Although hash table has O(1) time complexity for looking for a key, it is not efficient in the following operations :</p>
<ul>
<li>Finding all keys with a common prefix.</li>
<li>Enumerating a dataset of strings in lexicographical order.</li>
</ul>
<p>Another reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to O(n) where <em>n</em> is the number of keys inserted. Trie could use less space compared to Hash Table when storing many keys with the same prefix. In this case using trie has only O(m) time complexity, where m is the key length. Searching for a key in a balanced tree costs <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="9.955ex" height="2.843ex" style="vertical-align: -0.838ex;" viewbox="0 -863.1 4286 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">O(mlogn)</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMATHI-4F" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/>
<path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/>
<path stroke-width="1" id="E1-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMATHI-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/>
<path stroke-width="1" id="E1-MJMATHI-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/>
<path stroke-width="1" id="E1-MJMATHI-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
<path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMATHI-4F" x="0" y="0"/>
 <use xlink:href="#E1-MJMAIN-28" x="763" y="0"/>
 <use xlink:href="#E1-MJMATHI-6D" x="1153" y="0"/>
 <use xlink:href="#E1-MJMATHI-6C" x="2031" y="0"/>
 <use xlink:href="#E1-MJMATHI-6F" x="2330" y="0"/>
 <use xlink:href="#E1-MJMATHI-67" x="2815" y="0"/>
 <use xlink:href="#E1-MJMATHI-6E" x="3296" y="0"/>
 <use xlink:href="#E1-MJMAIN-29" x="3896" y="0"/>
</g>
</svg> time complexity.</p>
<h2 id="part.1-trie-node-structure">Part.1 Trie node structure<a title="#part.1-trie-node-structure" href="#part.1-trie-node-structure"></a></h2>
<p>Trie is a rooted tree. Its nodes have the following fields:</p>
<ul>
<li>Maximum of R links to its children, where each link corresponds to one of R character values from dataset alphabet. In this article we assume that R is 26, the number of lowercase latin letters.</li>
<li>Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// R links to node children</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode[] links;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        links = <span class="keyword">new</span> TrieNode[R];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> links[ch -<span class="string">&#x27;a&#x27;</span>] != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">get</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> links[ch -<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">char</span> ch, TrieNode node)</span> </span>&#123;</span><br><span class="line">        links[ch -<span class="string">&#x27;a&#x27;</span>] = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isEnd = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Two of the most common operations in a trie are insertion of a key and search for a key.</p>
<h4 id="insertion-of-a-key-to-a-trie">Insertion of a key to a trie<a title="#insertion-of-a-key-to-a-trie" href="#insertion-of-a-key-to-a-trie"></a></h4>
<img src="/Users/Mori/Library/Application Support/typora-user-images/Screen Shot 2020-12-29 at 20.44.45.png" alt="Screen Shot 2020-12-29 at 20.44.45" style="zoom: 33%;">
<p>We insert a key by searching into the trie. We start from the root and search a link, which corresponds to the first key character. There are two cases :</p>
<ul>
<li>A link exists. Then we move down the tree following the link to the next child level. The algorithm continues with searching for the next key character.</li>
<li>A link does not exist. Then we create a new node and link it with the parent’s link matching the current key character. We repeat this step until we encounter the last character of the key, then we mark the current node as an end node and the algorithm finishes.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Inserts a word into the trie.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  TrieNode node = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> currentChar = word.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (!node.containsKey(currentChar)) &#123;</span><br><span class="line">      node.put(currentChar, <span class="keyword">new</span> TrieNode());</span><br><span class="line">    &#125;</span><br><span class="line">    node = node.get(currentChar);</span><br><span class="line">  &#125;</span><br><span class="line">  node.setEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : O(m), where m is the key length.</li>
</ul>
<p>In each iteration of the algorithm, we either examine or create a node in the trie till we reach the end of the key. This takes only m operations.</p>
<ul>
<li>Space complexity : O(m).</li>
</ul>
<p>In the worst case newly inserted key doesn’t share a prefix with the the keys already inserted in the trie. We have to add m new nodes, which takes us O(m) space.</p>
<h4 id="search-for-a-key-in-a-trie">Search for a key in a trie<a title="#search-for-a-key-in-a-trie" href="#search-for-a-key-in-a-trie"></a></h4>
<p>Each key is represented in the trie as a path from the root to the internal node or leaf. We start from the root with the first key character. We examine the current node for a link corresponding to the key character. There are two cases :</p>
<ul>
<li>A link exist. We move to the next node in the path following this link, and proceed searching for the next key character.</li>
<li>A link does not exist. If there are no available key characters and current node is marked as <code>isEnd</code> we return true. Otherwise there are possible two cases in each of them we return false :
<ul>
<li>There are key characters left, but it is impossible to follow the key path in the trie, and the key is missing.</li>
<li>No key characters left, but current node is not marked as <code>isEnd</code>. Therefore the search key is only a prefix of another key in the trie.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// search a prefix or whole key in trie and</span></span><br><span class="line"><span class="comment">// returns the node where search ends</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TrieNode <span class="title">searchPrefix</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  TrieNode node = root;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> curLetter = word.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (node.containsKey(curLetter)) &#123;</span><br><span class="line">      node = node.get(curLetter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns if the word is in the trie.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">  TrieNode node = searchPrefix(word);</span><br><span class="line">  <span class="keyword">return</span> node != <span class="keyword">null</span> &amp;&amp; node.isEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : O(m) In each step of the algorithm we search for the next key character. In the worst case the algorithm performs m<em>m</em> operations.</li>
<li>Space complexity : O(1)</li>
</ul>
<h4 id="search-for-a-key-prefix-in-a-trie">Search for a key prefix in a trie<a title="#search-for-a-key-prefix-in-a-trie" href="#search-for-a-key-prefix-in-a-trie"></a></h4>
<p>The approach is very similar to the one we used for searching a key in a trie. We traverse the trie from the root, till there are no characters left in key prefix or it is impossible to continue the path in the trie with the current key character. The only difference with the mentioned above <code>search for a key</code> algorithm is that when we come to an end of the key prefix, we always return true. We don’t need to consider the <code>isEnd</code> mark of the current trie node, because we are searching for a prefix of a key, not for a whole key.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns if there is any word in the trie</span></span><br><span class="line"><span class="comment">// that starts with the given prefix.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">  TrieNode node = searchPrefix(prefix);</span><br><span class="line">  <span class="keyword">return</span> node != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : O(m)</li>
<li>Space complexity : O(1)</li>
</ul>
<h2 id="part.2-applications">Part.2 Applications<a title="#part.2-applications" href="#part.2-applications"></a></h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Autocomplete" target="_blank">Autocomplete</a></li>
<li><a href="https://en.wikipedia.org/wiki/Spell_checker" target="_blank">Spell checker</a></li>
<li><a href="https://en.wikipedia.org/wiki/Longest_prefix_match" target="_blank">IP routing (Longest prefix matching)</a></li>
<li><a href="https://en.wikipedia.org/wiki/T9_(predictive_text)" target="_blank">T9 predictive text</a></li>
<li><a href="https://en.wikipedia.org/wiki/Boggle" target="_blank">Solving word games</a></li>
</ol>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Bit Manipulation</title>
    <url>/2020/20201231-Bit-Manipulation/</url>
    <content><![CDATA[<h1 id="bit-manipulation">Bit Manipulation<a title="#bit-manipulation" href="#bit-manipulation"></a></h1>
<p>Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.</p>
<h2 id="part.1-bitwise-operators">Part.1 Bitwise Operators<a title="#part.1-bitwise-operators" href="#part.1-bitwise-operators"></a></h2>
<p><strong>NOT ( ~ ):</strong> Bitwise NOT is a unary operator that flips the bits of the number.</p>
<p><strong>AND ( &amp; ):</strong> Bitwise AND is a binary operator that operates on two equal-length bit patterns.<br>
If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.</p>
<p><strong>OR ( | ):</strong> Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND.<br>
If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.</p>
<p><strong>XOR ( ^ ):</strong> Bitwise XOR also takes two equal-length bit patterns.<br>
If both bits in the compared position of the bit patterns are the same, the bit in the resulting bit pattern is 0, otherwise 1.</p>
<p><strong>Left Shift ( &lt;&lt; ):</strong> Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end.<br>
Left shift is equivalent to multiplying the bit pattern with <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.251ex" height="2.676ex" style="vertical-align: -0.338ex;" viewbox="0 -1006.6 969.3 1152.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^k</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6B" x="707" y="583"/>
</g>
</svg> ( if we are shifting k bits ).</p>
<p><strong>Right Shift ( &gt;&gt; ):</strong> Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end.<br>
Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).</p>
<h2 id="part.2-algorithms-based-on-bitwise-operations">Part.2 Algorithms based on bitwise operations<a title="#part.2-algorithms-based-on-bitwise-operations" href="#part.2-algorithms-based-on-bitwise-operations"></a></h2>
<h3 id><a title="#" href="#"></a></h3>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Tricks</title>
    <url>/2021/20210104-Java-Tricks/</url>
    <content><![CDATA[<h1 id="java-tricks">Java Tricks<a title="#java-tricks" href="#java-tricks"></a></h1>
<h2 id="no.1-methods-to-determine-whether-a-string-is-a-number">No.1 Methods to determine whether a string is a number<a title="#no.1-methods-to-determine-whether-a-string-is-a-number" href="#no.1-methods-to-determine-whether-a-string-is-a-number"></a></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">  Pattern pattern = Pattern.compile(<span class="string">&quot;[0-9]*&quot;</span>);</span><br><span class="line">  Matcher isNum = pattern.matcher(str);</span><br><span class="line">  <span class="keyword">if</span>(!isNum.matches())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Character.isDigit(str.charAt(i))) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://jakarta.apache.org/commons/lang/api-release/index.html</span></span><br><span class="line">org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isNunicodeDigits=StringUtils.isNumeric(<span class="string">&quot;aaa123456789&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric0</span><span class="params">(String str)</span> </span>&#123;　　　　</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; str.length(); i++) &#123;</span><br><span class="line">   　　<span class="keyword">int</span> chr=str.charAt(i);</span><br><span class="line">   　　<span class="keyword">if</span>(chr&lt;<span class="number">48</span> || chr&gt;<span class="number">57</span>)</span><br><span class="line">    　　　　<span class="keyword">return</span> <span class="keyword">false</span>;　　</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric3</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> String number = <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; number.length; i ++)  &#123;</span><br><span class="line">    <span class="keyword">if</span>(number.indexOf(str.charAt(i)) == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric00</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Integer.parseInt(str);</span><br><span class="line">   　<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(NumberFormatException e) &#123;</span><br><span class="line"> 　　System.out.println(<span class="string">&quot;Exception：\&quot;&quot;</span> + str + <span class="string">&quot;\&quot;is not a number...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Topological Sort</title>
    <url>/2021/20210103-Topological-Sort/</url>
    <content><![CDATA[<h1 id="topological-sort">Topological Sort<a title="#topological-sort" href="#topological-sort"></a></h1>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Topological Sort</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
</search>
