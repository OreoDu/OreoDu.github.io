<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阿里云直播鉴权算法</title>
    <url>/2017/ali-cloud-live-authentication-algorithm/</url>
    <content><![CDATA[<blockquote>
<p>阿里云官方给出的文档：<a href="https://help.aliyun.com/document_detail/45210.html?spm=5176.2020520107.108.2.kYdTTA" target="_blank">用户指南-直播鉴权</a></p>
</blockquote>
<a id="more"></a>
<h2 id="鉴权原理">鉴权原理<a title="#鉴权原理" href="#鉴权原理"></a></h2>
<p>URL 鉴权功能是通过阿里云 CDN 加速节点与客户资源站点配合实现的一种更为安全可靠的源站资源防盗方法。由客户站点提供给用户加密 URL（包含权限验证信息），用户使用加密后的 URL 向加速节点发起请求，加速节点对加密 URL 中的权限信息进行验证以判断请求的合法性，对合法请求给予正常响应，拒绝非法请求，从而有效保护客户站点资源。</p>
<p>鉴权仅会在推流或者播流开始的时候进行验证，在推流或者播流过程中即不会验证，也就是说推流或者播流过程中如果超过了鉴权时间戳也可以继续播放。</p>
<h2 id="参数描述">参数描述<a title="#参数描述" href="#参数描述"></a></h2>
<p>要配置出正确的鉴权，需要明确以下几个参数：</p>
<p><strong>推流地址</strong></p>
<p>完整的推流地址，形如：</p>
<p><code>rtmp://video-center.alivecdn.com/&#123;AppName&#125;/&#123;StreamName&#125;?vhost=&#123;yourdomain&#125;</code></p>
<p><strong>鉴权类型</strong></p>
<p>阿里云 CDN 兼容并支持 A、B、C 三种鉴权方式，具体见 <a href="https://intl.aliyun.com/help/zh/doc-detail/27135.htm" target="_blank">URL 鉴权方式</a>。这里选择的是 A 类型</p>
<p><strong>鉴权 KEY</strong></p>
<p><code>privatekey</code> 字段用户可以自行设置。</p>
<p><strong>时间戳</strong></p>
<p>时间戳是指格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒(北京时间 1970 年 01 月 01 日 08 时 00 分 00 秒)起至现在的总秒数。</p>
<p><strong>有效时间</strong></p>
<p>以秒为单位的整数时间，用来控制直播推流时效。</p>
<h2 id="鉴权方法">鉴权方法<a title="#鉴权方法" href="#鉴权方法"></a></h2>
<p>用户访问加密 URL ：</p>
<blockquote>
<p>rtmp://video-center.alivecdn.com/{AppName}/{StreamName}?vhost={yourdomain}&amp;auth_key={timestamp}-{rand}-{uid}-{hashvalue}</p>
</blockquote>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>auth_key 字段</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>timestamp</td>
<td>失效时间=时间戳+有效时间，CDN 服务器拿到请求后，首先会判断请求中的失效时间是否小于当前时间，如果小于，则认为过期失效并返回 HTTP 403 错误。</td>
</tr>
<tr>
<td>rand</td>
<td>随机数，一般设成 0</td>
</tr>
<tr>
<td>uid</td>
<td>暂未使用（设置成 0)</td>
</tr>
<tr>
<td>hashvalue</td>
<td>通过 md5 加密算法计算出的 32 位验证串</td>
</tr>
</tbody>
</table></div></div><p><code>hashvalue</code> 计算方式如下：</p>
<blockquote>
<p>sstring = /{AppName}/{StreamName}-{timestamp}-{rand}-{uid}-{privatekey}<br>
hashvalue = md5(sstring)</p>
</blockquote>
<p>输入 OBS 中的鉴权内容如下：</p>
<blockquote>
<p>rtmpURL：rtmp://video-center.alivecdn.com/{AppName}<br>
流密钥：{StreamName}?vhost={yourdomain}&amp;auth_key={timestamp}-{rand}-{uid}-{hashvalue}</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>直播</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 购物车设计模式浅析及代码实现</title>
    <url>/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/</url>
    <content><![CDATA[<h2 id="前言">前言<a title="#前言" href="#前言"></a></h2>
<p>早期以淘宝为代表的 C2C 网站以“<strong>入驻店铺</strong>”模式强势打破了纯线下的商品交易格局，而近年来，通过不断的尝试与改进，各大电商平台也趋于成熟并自成体系。以京东、聚美优品、网易考拉海购、唯品会、小红书为代表 B2C 平台也以“<strong>自营+入驻店铺</strong>”的垂直销售模式进入消费者的视野。但也有不少企业和商家为了避免缴纳高额的入驻保证金和平台年费等，选择开发自己的商城 App 产品，也就是“<strong>自营</strong>”模式。</p>
<a id="more"></a>
<p>购物车作为大多数商城中不可或缺的部分，其逻辑和设计往往也取决于商城本身的交易模式与商品的性质。以美团外卖、饿了么为例，作为一个主张快捷消费产品，加上配送的问题，跨店购物的模式显然不适用它，因此购物车的入口并不在一级菜单下，而是在每家店铺商品列表底部。其购物车显示的内容也相对简单，只需包括已选商品信息（名称、价格、数量、增减按钮）、餐盒费、配送费、总价即可。而对于一个功能完善的商城来说，购物车的逻辑显然会复杂许多，下文中将模仿淘宝购物车的需求，对逻辑功能进行整理和编码。</p>
<h2 id="基本需求设计">基本需求设计<a title="#基本需求设计" href="#基本需求设计"></a></h2>
<h3 id="1、购物车入口">1、购物车入口<a title="#1、购物车入口" href="#1、购物车入口"></a></h3>
<ul>
<li>
<p>点击 App 底部菜单的购物车 TabbarItem 进入</p>
</li>
<li>
<p>从商品详情页的购物车按钮进入</p>
</li>
</ul>
<p>这里要注意区分购物车列表高度的问题。</p>
<h3 id="2、店铺分区">2、店铺分区<a title="#2、店铺分区" href="#2、店铺分区"></a></h3>
<p>当商城支持跨店购物，那么购物车内的所有商品需要按照不同的店铺分区显示，这个分类逻辑的步骤通常由后端完成，我们 iOS 端只需获取输出的数据在 tableView 中展示即可。店铺信息在 section 的 headerView 中展示，另外还会显示一个店铺选择按钮。</p>
<h3 id="3、商品-cell-中展示的信息">3、商品 cell 中展示的信息<a title="#3、商品-cell-中展示的信息" href="#3、商品-cell-中展示的信息"></a></h3>
<p>我们通常将商品 cell 分为 <em>normal</em>、<em>edit</em>两类状态，当然商品信息比较简单的情况下，也可以选择只有 Edit 状态。购物车中显示的商品信息包括：</p>
<ul>
<li>商品基本信息（展示图片、名称、规格、选择数量、价格（或现价、原价））</li>
<li>限购信息/降价信息</li>
<li>购物券满减信息、凑单按钮、活动标志（如狂欢节等）</li>
<li>选择按钮</li>
<li>其他</li>
</ul>
<p>以上信息在显示的时候遵从一定上下顺序，cell 的布局会根据以上信息的有无适当调整。</p>
<h3 id="4、底部核算界面">4、底部核算界面<a title="#4、底部核算界面" href="#4、底部核算界面"></a></h3>
<p>底部界面上功能比较明确——全选按钮、合计标签、结算按钮。</p>
<p>这部分的关键在于，合计价格和全选按钮的状态都会表单上面的商品选中情况变化。下文中将会分析一下其中的逻辑。</p>
<h3 id="5、商品的增删改">5、商品的增删改<a title="#5、商品的增删改" href="#5、商品的增删改"></a></h3>
<ul>
<li>
<p>商品的<strong>添加</strong>：1）从商城中添加；2）在购物车列表中增加。添加时需要考虑购物车列表是否已有相同的或是相同店铺的商品。</p>
</li>
<li>
<p>商品的<strong>删除</strong>：1）<em>normal</em> 状态下侧滑删除；2）点击编辑按钮进入<em>edit</em> 状态，点击删除按钮；3）点击右下角的批量删除。</p>
</li>
<li>
<p>商品的<strong>修改</strong>：1）批量编辑修改；2）店铺编辑修改。修改内容包括商品数量和规格。</p>
</li>
</ul>
<p>以上五条涵盖了购物车的基本的功能需求，根据业务需要自行拓展。</p>
<p><img src="/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/shopping-cart-rendering.png" alt="购物车效果图" class="φcx"></p>
<h2 id="解决思路">解决思路<a title="#解决思路" href="#解决思路"></a></h2>
<h3 id="1、单选/店铺选择/全选联动模式">1、单选/店铺选择/全选联动模式<a title="#1、单选/店铺选择/全选联动模式" href="#1、单选/店铺选择/全选联动模式"></a></h3>
<p>解决思路：</p>
<p>i）将全选按钮标记为<code>A</code>；</p>
<p>ii）购物车中<code>m</code>个店铺的选中按钮一次标记为<code>A(0),A(1),...,A(m-1)</code>；</p>
<p>iii）第<code>x</code>家店铺（<code>x∈(0,m-1)</code>）下的 n 个商品的选中按钮依次标记为<code>A(x,0),A(x,1),...,A(x,n-1)</code>。</p>
<p>那么：</p>
<p><code>A(x,0),A(x,1),...,A(x,n-1)</code>全部选中可推导出<code>A(x)</code>选中；</p>
<p><code>A(0),A(1),...,A(m-1)</code>全部选中可以推导出<code>A</code>选中。</p>
<p>点击某商品选择按钮<code>A(m,n)</code>的<strong>伪代码</strong>如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">A(m,n).selected = !A(m,n).selected;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BOOL</span> shopAllChoose = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">        shopAllChoose &amp;= A(m,i).selected;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(m).selected = shopAllChoose;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BOOL</span> allChoose = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"></span><br><span class="line">        allChoose &amp;= A(j).selected;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.selected = allChoose;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>点击某店铺全选和所有商品全选的代码原理相似。</p>
<h3 id="2、编辑模式">2、编辑模式<a title="#2、编辑模式" href="#2、编辑模式"></a></h3>
<p>购物车设计中，出现两类编辑按钮：</p>
<ul>
<li>
<p>导航栏上的全选编辑</p>
</li>
<li>
<p>每个 section 右上角的批量编辑</p>
</li>
</ul>
<p>点击①类按钮，①文本变为“完成”，同时②类按钮隐藏，所有的 cell 进入 <em>edit</em> 状态；</p>
<p>点击②类按钮，当前按钮文本变为“完成”，该 section 下所有 cell 进入 <em>edit</em> 状态。</p>
<p>修改商品数量可以通过加减按钮，也可以通过手动输入修改。当然，修改前需要对当前的数量做出判断，是否还能进行加减，或是输入的数据是否合理，如出现限购信息等。</p>
<p>由于整个购物车的逻辑关系比较多，我们可以考虑将这部分功能单独放在一个 UIView 中处理，数量变化的具体实现可借鉴<a href="https://github.com/jkpang/PPNumberButton" target="_blank">PPNumberButton</a>。</p>
<h3 id="3、删除模式">3、删除模式<a title="#3、删除模式" href="#3、删除模式"></a></h3>
<p>除了上文提到的<em>edit</em> 状态下点击删除按钮以外，还有一种就是在<em>normal</em> 状态左滑删除。</p>
<p><img src="/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/edit-delete.png" alt="edit 状态时的删除" class="φcx"></p>
<p><img src="/2017/analysis-of-ios-shopping-cart-design-pattern-and-code-implementation/normal-delete.png" alt="normal 状态时的删除" class="φcx"></p>
<p>cell 在 <em>normal</em> 状态时可以左滑删除，而在 <em>edit</em> 状态下点击删除，要在下面方法中做出<code>return YES/NO;</code>的判断和区分。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>假如要自定义删除键，可以在<code>UITableViewRowAction</code>初始化时在<code>title</code>的定义部分，使用多个空格作为占位符，然后在<code>layoutSubviews</code>中找到 cell 图层上的<code>UITableViewCellDeleteConfirmationView</code>层添加上新定义的删除键。</p>
<p>点击<code>navigationItem</code>上的“编辑”后，结算按钮变成删除按钮，可以对选中的商品进行删除，由于是店铺模式的存储形式，需要对模型的更新时机进行区分。</p>
<h3 id="4、总价计算">4、总价计算<a title="#4、总价计算" href="#4、总价计算"></a></h3>
<p>总价计算公式很简单： <code> 总价=Σ选中的商品的数量 * 选中的商品的单价</code></p>
<p>但这个公式中存在两个变化量，一个是“<strong>是否选中</strong>”，一个是“<strong>数量</strong>”，也就是说总价刷新出现在以下场景：</p>
<ul>
<li>
<p>有商品的<strong>选中状态</strong>发生了改变： 点击了<strong>单选/店铺选择/全选按钮</strong></p>
</li>
<li>
<p>有选中的商品的<strong>数量</strong>发生改变：点击了<strong>增加/减少</strong>或者<strong>编辑</strong>了数量文本</p>
</li>
</ul>
<hr>
<p>欢迎评论，最后-&gt; <a href="https://github.com/fiteen/HTCart" target="_blank">Demo 传送门</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>购物车</tag>
      </tags>
  </entry>
  <entry>
    <title>『2017』去年今日此门中</title>
    <url>/2017/annual-summary-2017/</url>
    <content><![CDATA[<p>步入职场的第二年，做一个简单的总结。</p>
<a id="more"></a>
<h2 id="工作">工作<a title="#工作" href="#工作"></a></h2>
<p>2017 年在职业成长上的几点收获：</p>
<ul>
<li>年初，获得年度优秀员工</li>
<li>年中，考出《系统集成项目管理工程师》证书</li>
<li>年底，入职挖财</li>
</ul>
<p>考证准备了两三个月，看了好久教学视频，刷了厚厚的一沓题，感觉当初可以直接尝试一下高级证书的考试，怕准备时间不够就报了中级，也许对自己要求高一点，会得到更好的结果。</p>
<p>接触地更多，才会发现外面的世界越精彩，进步的空间越大。无论什么年纪，都不能停止学习的脚步。每次看到小区外浙大的孩子们意气风发充满朝气的脸，越后悔自己当初没有更用功一点。因为原公司放弃了互联网医疗的项目，顺其自然地换了个工作环境，新公司的大佬很多，从分享会上会发现自己更多不足，我应该更努力地充实自己，无论是技术上还是性格上。</p>
<h2 id="生活">生活<a title="#生活" href="#生活"></a></h2>
<p>这一年，在生活中遇到了一次严重的打击，堪称价值观的崩塌——一位认识了很久的朋友 X 介入了别人的家庭。这件事情确实令我相当震惊和难以接受，X 在我曾经的认知里，是一个非常善良的女孩：</p>
<p>她经济条件不佳，自小节俭，掉了纽扣的衣服和洗不干净的发卡都舍不得换，别人向她借钱却从无二话，自己骑破烂二手自行车，也要给男友买死飞；</p>
<p>她朋友很多，对谁都热情似火，助人为乐，甚至愿意牺牲自己的利益去成全一个刚认识不久的人的请求；</p>
<p>她总是信任别人，几乎无条件的信任，哪怕知道对方可能在骗人，依然说自己愿意相信一切是好的那面。</p>
<p>也许这是她说服自己接受这个男人的理由，明知对方在老婆孕期出轨时来招惹她，愿意相信他前言不搭后语的说辞。</p>
<p>我很生气，也很难过，她还有千万个理由说自己没有错，我不知道她为何会作出这样的选择。也许因为她只因她太过纯真，被突如其来的爱情冲昏了头脑；也许真的如她所说的那般，对方的妻子无比的坏，她是在拯救那个男人脱离苦海；也许她本就心知肚明，知道自己想要的究竟是什么，一切不过是她手段高明的伪装……我不知道，也开始怀疑，只愿她早日迷途知返。</p>
<p>也许是她变了，也许她一直没变，她本就那样追求热烈的女子，喜欢轰轰烈烈的人生，但无论怎样，我想我们再也做不了朋友了，几年的相识最后化作一抹悲凉。想起那句人们常说的话——愿你出走半生，归来仍是少年。可是去年今日此门中，已是回不去的记忆了。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>『2016』莫愁前路无知己</title>
    <url>/2016/annual-summary-2016/</url>
    <content><![CDATA[<p>城西银泰喧闹的跨年倒计时还在进行，明晃晃的照灯和兴奋的人群。</p>
<a id="more"></a>
<h2 id="往日不可追">往日不可追<a title="#往日不可追" href="#往日不可追"></a></h2>
<p>2016，我终于向四年的大学生活告别，同时也为十六年的学生生涯画上了句点。高考失利后我放弃了复读，又在父母的声声抗议中坚持填报了数学类。我知道自己表面上文静顺从，骨子里却住着一颗叛逆的灵魂。我敏感又骄傲，低调却好强，正义还心软，别扭的性格也使我前行的道路上真的走了许多弯路。</p>
<p>并不喜欢指挥和领导，却意外接任了校报负责人；</p>
<p>因为是学院文艺部部长的室友拜托着凑名额参加的校运会，竟也拿到了奖牌；</p>
<p>毫无数学建模经验，第一次参加美赛，却成为了当年唯一的获奖队伍；</p>
<p>在学科竞赛、学生工作、志愿者活动之间连轴忙碌着，还要保住专业第一…</p>
<p>看起来幸运的人生，自己却知道到底有很辛苦，数不清多少个凌晨，一遍遍修改文案、校正排版、调整样式，不厌其烦地翻遍资料去接触理解陌生的领域。我不喜欢投机取巧，想到坚持自己的初心。</p>
<p>大学的第一张奖状是军训优秀学员，最后一本证书是浙江省优秀毕业生，某种意义上也算完成了善始善终。感恩每段经历，感恩遇到过的人。我不够左右逢源，也不情愿为了迎合别人的眼光停滞自己的脚步。这个世界上优秀的人数不胜数，有人说强者都是孤独的，弱者才需要成群结队，但我想，强者也总能找到自己的队伍吧。</p>
<h2 id="来日犹可期">来日犹可期<a title="#来日犹可期" href="#来日犹可期"></a></h2>
<p>得不到的永远在骚动，被偏爱的都有恃无恐。</p>
<p>还在考研的好友说，好羡慕你，都工作赚钱了。我却对她说，还是读书时候好啊。我当然知道这世界，不会完美无瑕，可我们无法阻止时光的流转，长大了就需要去纠结工资开销、租房买房、柴米油盐、婚姻家庭，也需要足够强大去抵挡诱惑。</p>
<p>人生很漫长，起码现在的我还热爱着敲击键盘的感觉，热爱每次 run 出美丽图案的惊叹，热爱每个 warning 和 error 被消除的喜悦，那就享受此刻的热爱。</p>
<p>人生也很短暂，感谢所有的 exception 和 not found，感恩让我选择今天的每一次 switch 和 if。前进的路上，难免孤独，但请记得莫愁前路无知己，天下谁人不识君。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>『2018』勿忘初心</title>
    <url>/2018/annual-summary-2018/</url>
    <content><![CDATA[<p>时间飞逝，又到了写小作文的时候。2018 年用一个词语概括，就是“忙碌”。</p>
<a id="more"></a>
<h2 id="工作">工作<a title="#工作" href="#工作"></a></h2>
<p>关键词——“尝试”。</p>
<p>受到整个金融大环境的影响，公司里的大量移动端产品（尤其是 iOS 端）遇到了上架难的问题，和公司里很多的 iOSer 一样，开始转型大前端，参与 Android、h5、小程序的产品开发。由于没有完整的学习周期来过渡，基本上都是被直接排期启动开发，这段时间的压力还是比较大。为了保证开发进度，只能通过模仿项目里原有的代码的风格和写法去进行快速迭代，期间一度出现“我能实现这个功能，但我不清楚为什么这么做”的情况，很没有成就感。不过经历了三四个月的适应和学习，也慢慢弄清楚各种技术的框架和逻辑，也能独立完成项目并解决一些棘手的遗留问题。</p>
<p>因为资质、监管的影响，产品的设计受到了极大的限制，团队也一直在找寻合适的方向。希望接下来的时间，我可以利用自己的专业为产品的进步提一些建设性的意见。</p>
<p>最近和领导聊了一写东西，他说公司有的时候更愿意招聘 1-3 年经验的开发，因为这些人脑子灵活，开发速度快，“性价比”高，能够被提拔，给予高薪的，一定不只是因为他能够开发。本身女性在行业里会处于劣势一些，曾经的同学、幼年的伙伴，很多也已经迈入婚姻和家庭。学无止尽，我希望自己对工作和生活的热爱还能持续下去，也相信能为自己创造一片天地。</p>
<h2 id="投资">投资<a title="#投资" href="#投资"></a></h2>
<p>关键词——“惨烈”。</p>
<p>基金跌、股票跌、p2p 暴雷，吃一堑、长一智。磨难让人成长，打不倒我们的才会令我们更强大！</p>
<h2 id="买房">买房<a title="#买房" href="#买房"></a></h2>
<p>关键词——“迷茫”。</p>
<p>杭州的房价在 G20 前后开始呈现节节攀升的态势，虽然政府一再提出限价，还是抑不住房价放飞的趋势。今天杭州开始实行摇号买房政策，身边一些朋友，也在万人摇中分到一杯羹。不过我参与了好几个红盘的摇号，也并没有摇到，但其实有的红盘位置并不是我目前以及未来很长一段时间的生活和工作情况，回过头来想一想，我为什么要摇这个房子呢？不了解楼面价、容积率、得房率，甚至连样板房都没有看过，就登记报名了，仅仅为了所谓的差价，为了实现买房的目标，为了凑个热闹，看看自己运气好不好？也许也有很多人像我这样，也许这个社会就是这样，人性就是这样，模仿是人类的本能，但是我想我真的要知道自己是什么样，想要的到底是什么，自我认知是一辈子长久的修行，但愿我们都能修好这门课。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>『2019』未来可期</title>
    <url>/2019/annual-summary-2019/</url>
    <content><![CDATA[<p>年纪越大，越感受到时光易逝。</p>
<a id="more"></a>
<h2 id="经历">经历<a title="#经历" href="#经历"></a></h2>
<h3 id="工作">工作<a title="#工作" href="#工作"></a></h3>
<p>随着 ReactNative、Weex 与 Flutter 等跨端框架的发展，大前端渐渐成为了我们客户端开发者的转型之路，由于近年来过审情况严峻、金融合规转型等问题，我司大部分的 iOS 开发工程师都或多或少地兼任了 Android 、前端和小程序的开发工作，或者直接转型成前端开发工程师。所以这一年，我的主要工作内容也就涵盖了 App 的主导开发上架和部分前端项目的开发维护，与此同时，接触了 Flutter 混编、H5 首屏加载优化、重签名、多渠道包方案、抓包与防抓包技术等。</p>
<h3 id="买房">买房<a title="#买房" href="#买房"></a></h3>
<p>从 2018 年 10 月份准备买房以来，前前后后参加了二十多次摇号，就在准备放弃摇号选择二手房的时候，终于在今年十月底摇到比较心仪的房子，在父母的帮助下多付了一些首付，贷款也顺利办理下来。中签那天，有一种不可言喻的预感，相信玄学，听了一早上的“好运来”，果然就看到了摇中的结果。实现了人生的一件大事，总算可以舒一口气，参加工作以来，一直抠抠索索，想要尽可能多地去攒些首付，如今竟然有了财务自由的感觉。</p>
<h3 id="理财">理财<a title="#理财" href="#理财"></a></h3>
<p>考虑到买房的时候，需要不定时进行验资登记，加之去年 P2P 暴雷至今没有兑付的惨痛经历，今年没有分配太多的资产放在基金股票上面，基本上还是选择保本的活期/短期低收益理财。值得欣慰的是，年中还负百分之十几的基金理财的如今终于回本了。</p>
<p>有人说，理财是最好的副业。希望接下来能多抽一些时间来修习好这门功课。</p>
<h3 id="游戏">游戏<a title="#游戏" href="#游戏"></a></h3>
<p>游戏方面，自我感觉不是很有天赋的人，为了和朋友同事有更多共同语言，开始打王者荣耀，关注电竞行业。精打细算的我，居然也成为了氪金玩家，为了不浪费花钱升级的战令，S16 赛季排位打上了一次最强王者。谈及王者荣耀的火爆，很多人认为不过是抄袭英雄联盟，但不得不说，腾讯在这款游戏的产品设计和运营上确实是非常成功的。它很大程度上弥补了竞技对战类游戏在 MOBA 类手游的空缺，游戏内的丰富场景、排位机制、氪金模式，以及游戏社交更是保证了玩家的持续活跃和留存。</p>
<p>因为欣赏职业选手 Cat，今年九月份还去上海现场看了 KPL 秋季赛 eStarPro 和 RW 侠的揭幕战。这个刚满 21 岁的男孩，颜值并不高，操作不是顶尖，英雄池也常被诟病，却是联盟里现役选手中人气最高的。三年职业生涯，他去过巅峰，也曾坠入低谷，外界对他的质疑从未间断。但是三百六十行，行行出状元，只要有恒心有毅力，总有看到光明的一天。</p>
<h3 id="旅游">旅游<a title="#旅游" href="#旅游"></a></h3>
<p>这个命题，对于我来说，几年间基本上都是接近空白的，今年除了去上海看比赛的时候顺道去外滩和南京步行街逛了逛，就是 Outing 时去千岛湖感受了一下五星级酒店。没错，贫穷限制了我的消费欲望。但是，我一直相信眼界决定胸怀，胸怀决定高度。希望下一年，有时间多去看看外面的风景，多尝试新的挑战。</p>
<h2 id="感悟">感悟<a title="#感悟" href="#感悟"></a></h2>
<p>2019 年的成长，最多地来源于心态和思维方式上的成长。</p>
<p>很多领悟是经历带给我的，我开始学会思考，过去的人生里，到底做错了什么选择，到底遗失过什么，到底想到什么样的生活。</p>
<h3 id="选择">选择<a title="#选择" href="#选择"></a></h3>
<p>有人说，选择比努力更重要。从前，我对这个说法嗤之以鼻，一度傻傻地认为努力可以弥补所有的缺憾。可以回过头来看看，发现自己已然因为一些目光短浅的选择，需要付出成倍的努力去弥补。比如实习期为了一个月多五百元的薪资放弃了大公司，而选择了一家没有太大上升空间的小公司；比如以为房地产行业会继续下行，而错过了置业的最佳时机。</p>
<p>没有方向的船，任何方向都是逆风。那时的我只是愚蠢地想着要比同学的工资高一些，却忘记了，大学里辛辛苦苦熬夜写的论文、做的视频、写的项目、获的奖项，不过是第一份实习工作的敲门砖，做错了选择，很多努力就失去了价值。</p>
<p>人生的岔路口上，如果明确知道自己想要什么，那就筚路蓝缕，以启山林，如果感到迷茫和困惑，不如沉下心来好好思考，或者多听取他人的经验，世事总不能万般如意，有舍才有得。</p>
<h3 id="忧患">忧患<a title="#忧患" href="#忧患"></a></h3>
<p>《论语》里说道：人无远虑，必有近忧。在经历资本狂欢以后，烧钱、补贴、大跃进的扩张模式，互联网的寒冬真的来了。身边的朋友、同事也相继产生了强烈的危机感，受到影响的我也开始谨慎思考自己现在应该何去何从，等五年后步入而立未来又将去往哪里。</p>
<p>做技术的这几年，我深切地感受到了持续学习和自我驱动的重要性。人生就是一个不断学习的过程，有时候工作促使你不得不开始学习，而学习又能令你不断进步，从而遇到更好的工作，只有在这样的良性循环中，才能找到更适合自己的位置。但愿新的一年，能够不辜负曾经的辛苦，实现心中的愿景。</p>
<h2 id="flag">Flag<a title="#flag" href="#flag"></a></h2>
<p>往年都不立 Flag，因为妈妈从小告诉我，想要的东西说出来就不灵了。现在想想也没什么玄学的东西，不敢立 Flag 可能是害怕实现不了，被打脸，但人不应该害怕挫折和失败，能勇敢面对失误和不足的时候，才能真正独立地站起来。</p>
<ul class="φcz">
<li><input type="checkbox" disabled><i></i>进入心仪的新公司，事业上有所突破</li>
<li><input type="checkbox" disabled><i></i>输出技术博客 15 篇以上</li>
<li><input type="checkbox" disabled><i></i>运营一个技术微信公众号</li>
<li><input type="checkbox" disabled><i></i>业余时间学习一门其它技能</li>
<li><input type="checkbox" disabled><i></i>减肥，体重回到两位数</li>
<li><input type="checkbox" disabled><i></i>学会化妆</li>
<li><input type="checkbox" disabled><i></i>养一只小猫咪</li>
<li><input type="checkbox" disabled><i></i>汽车摇号中签（努力实现不了的，希望老天保佑🙏）</li>
</ul>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>Mac 下避免 rm 引发的血案</title>
    <url>/2018/avoid-rm-induced-bloody-cases/</url>
    <content><![CDATA[<p>习惯使用终端的用户，常会用 <code>rm -fr</code> 命令执行删除操作，但是这种删除的方式不会出现在废纸篓中，一旦误删，要想找回就比较麻烦。近期听说的此类血案也比较多，为了避免造成悲剧，推荐使用 trash 命令来执行删除。</p>
<a id="more"></a>
<h2 id="安装-trash">安装 trash<a title="#安装-trash" href="#安装-trash"></a></h2>
<p>通过 Homebrew 安装 <a href="https://github.com/ali-rantakari/trash" target="_blank">Trash</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install trash</span><br></pre></td></tr></table></figure>
<p>安装成功后，可以通过 <code>trash -fr filename </code>命令删除文件，且文件会移到废纸篓中。</p>
<h2 id="用-trash-替换-rm-命令">用 trash 替换 rm 命令<a title="#用-trash-替换-rm-命令" href="#用-trash-替换-rm-命令"></a></h2>
<p>打开 ~/.bash_profile 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>在文件中加入以下代码后保存文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> rm=<span class="string">&quot;trash&quot;</span></span><br></pre></td></tr></table></figure>
<p>使命令生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>这时执行 rm 命令，被删除的文件就会存放在废纸篓中了，废纸篓里的文件虽无法执行“放回原处”的方法，但可以通过鼠标拖拽恢复。</p>
]]></content>
      <categories>
        <category>程序员必备</category>
      </categories>
      <tags>
        <tag>rm</tag>
      </tags>
  </entry>
  <entry>
    <title>一次搞懂时间复杂度和空间复杂度</title>
    <url>/2017/asymptotic-time-complexity-and-space-complexity/</url>
    <content><![CDATA[<p>学习数据结构和算法时，难免提到时间复杂度（asymptotic time complexity）和空间复杂度（space complexity）的概念。</p>
<a id="more"></a>
<h2 id="时间复杂度">时间复杂度<a title="#时间复杂度" href="#时间复杂度"></a></h2>
<p>概念：描述一个算法<strong>执行时间</strong>与数据规模的增长关系，记作：T(n) = O(f(n))。</p>
<p>计算时间复杂度时，需要遵循这一条原则：<strong>如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时时间复杂度就是 O(f(n))。</strong></p>
<p>比如：</p>
<p>T(n)=n+5，时间复杂度为 O(n)；</p>
<p>T(n)=n³+n²+1，时间复杂度为 O(n³)；</p>
<p>T(n)=4n³，时间复杂度为 O(n³)。</p>
<p>下面举几个例子：</p>
<h3 id="常数阶">常数阶<a title="#常数阶" href="#常数阶"></a></h3>
<p>我们知道常数项对函数的增长速度影响并不大，所以当 T(n) = c，c 为一个常数时，我们说这个算法的时间复杂度为 O(1)。 <strong>哈希算法就是典型的 O(1) 时间复杂度</strong>，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sum = n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%i\n&quot;</span>, sum);  </span><br></pre></td></tr></table></figure>
<p>像上面这段代码，无论 n 是多少，运行步骤都一样，所以时间复杂度是 O(1)。</p>
<h3 id="线性阶">线性阶<a title="#线性阶" href="#线性阶"></a></h3>
<p>O(n) 代表数据量增大 n 倍，耗时也增大 n 倍，比如常见的<strong>遍历算法</strong>。</p>
<p>对于一个循环，假设循环体的时间复杂度为 O(m)，循环次数为 n，那么循环的时间复杂度为 O(m×n)；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;        <span class="comment">// 循环次数为 n</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);      <span class="comment">// 循环体时间复杂度为 O(1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时时间复杂度为 O(1×n)，即 O(n)。</p>
<h3 id="平方阶">平方阶<a title="#平方阶" href="#平方阶"></a></h3>
<p>Ο(n²)：代表数据量增大 n 倍，时间复杂度就是 n² ，比如<strong>冒泡排序</strong>。</p>
<p>对于下面这个多循环，循环次数为 n×n，那么时间复杂度为 O(n × n × 1)，即 O(n²)。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对数阶">对数阶<a title="#对数阶" href="#对数阶"></a></h3>
<p>O(logn)：当数据增大 n 倍时，耗时增大 logn 倍。比如下面这段代码，当数据增大 256 倍时，耗时只增大 8 倍，是比线性还要低的时间复杂度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  i *= <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%i\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>二分查找</strong>的时间复杂度就是 O(logn)。</p>
<h3 id="对数阶乘以-n">对数阶乘以 n<a title="#对数阶乘以-n" href="#对数阶乘以-n"></a></h3>
<p>O(nlogn)：当数据增大 n 倍时，耗时增大 nlogn 倍，比如。比如下面这段代码，当数据增大 256 倍时，耗时增大 256*8=2048 倍，这个复杂度高于线性阶低于平方阶。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">    i *= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%i\n&quot;</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>归并排序</strong>的时间复杂度就是 O(nlogn)。</p>
<h3 id="指数阶">指数阶<a title="#指数阶" href="#指数阶"></a></h3>
<p>O(<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.381ex" height="2.343ex" style="vertical-align: -0.338ex;" viewbox="0 -863.1 1025.1 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^n</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="707" y="583"/>
</g>
</svg>)：当数据增大 n 倍时，耗时增大 <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.381ex" height="2.343ex" style="vertical-align: -0.338ex;" viewbox="0 -863.1 1025.1 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^n</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="707" y="583"/>
</g>
</svg> 倍，比如斐波那契数列：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">aFunc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> aFunc(n - <span class="number">1</span>) + aFunc(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常见的算法时间复杂度由小到大依次为：</p>
<p>Ο(1)＜Ο(logn)＜Ο(n)＜Ο(nlogn)＜Ο(n²)＜Ο(<svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.381ex" height="2.343ex" style="vertical-align: -0.338ex;" viewbox="0 -863.1 1025.1 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^n</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="707" y="583"/>
</g>
</svg>)</p>
<h2 id="空间复杂度">空间复杂度<a title="#空间复杂度" href="#空间复杂度"></a></h2>
<p>概念：描述一个算法<strong>占用空间</strong>与数据规模的增长关系，记作：S(n) = O(f(n))。</p>
<p>一个算法在计算机上占用的内存包括：程序代码所占用的空间、输入输出数据所占用的空间、辅助变量所占用的空间这三个方面。程序代码所占用的空间取决于算法本身的长短，输入输出数据所占用的空间取决于要解决的问题，是通过参数表调用函数传递而来，只有辅助变量是算法运行过程中临时占用的存储空间，与空间复杂度相关。</p>
<p>通常来说，只要算法不涉及到动态分配的空间以及递归、栈所需的空间，空间复杂度通常为 O(1)。</p>
<p>算法的空间复杂度并不是计算实际占用的空间，而是计算整个算法的辅助空间单元的个数，与问题的规模没有关系。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 逆向分析之 class-dump</title>
    <url>/2017/class-dump/</url>
    <content><![CDATA[<h2 id="class-dump">class-dump<a title="#class-dump" href="#class-dump"></a></h2>
<p>class-dump 是一个命令行工具，通过利用 Objective-C 语言的 runtime 特性，提取存储在 Mach-O 文件中的类文件、协议、分类等信息，并统一表现在 .h 头文件中。</p>
<a id="more"></a>
<h3 id="安装">安装<a title="#安装" href="#安装"></a></h3>
<p>1、下载 <a href="http://stevenygard.com/download/class-dump-3.5.dmg" target="_blank">class-dump-3.5.dmg</a>（若链接无效，请戳<a href="!http://stevenygard.com/projects/class-dump/">官方网址</a>）</p>
<p>2、打开终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>
<p>3、将下载拿到的 class-dump 拷贝到 <code>/usr/local/bin</code> 目录下</p>
<p>4、赋予其可执行权限，终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 /usr/<span class="built_in">local</span>/bin/class-dump</span><br></pre></td></tr></table></figure>
<p>5、至此安装成功，并可以通过 <code>class-dump --help</code> 查看用法和版本</p>
<h3 id="使用">使用<a title="#使用" href="#使用"></a></h3>
<p>1、下载一个 ipa 文件，先将文件改为 zip 格式，解压后得到 .app 的目标文件</p>
<p>2、终端输入命令，格式为 <code>class-dump -H $&#123;.app文件路径&#125; -o $&#123;输出文件夹路径&#125;</code></p>
<p>3、假如此时输出的文件中未得到目标的 .h，结果中什么都没有或者只有一个 <code>CDStructures.h</code>，说明需要砸壳</p>
<h2 id="dumpdecrypted">dumpdecrypted<a title="#dumpdecrypted" href="#dumpdecrypted"></a></h2>
<p>从 AppStore 下载安装的 App 被苹果默认加了一层壳，需要通过砸壳进行逆向分析。</p>
<h3 id="工具">工具<a title="#工具" href="#工具"></a></h3>
<ul>
<li>
<p><a href="https://github.com/stefanesser/dumpdecrypted" target="_blank">dumpdecrypted.dylib</a></p>
<ul>
<li>
<p><a href="https://github.com/stefanesser/dumpdecrypted/archive/master.zip" target="_blank">下载</a></p>
</li>
<li>
<p>编译安装</p>
<p>1、在终端进入下载的解压文件的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;filePath&#125;</span></span><br></pre></td></tr></table></figure>
<p>2、执行 <code>ls</code> 里面存在三个文件：Makefile、README、dumpdecrypted.c</p>
<p>3、执行 <code>make</code> ，在当前目录下会多出 dumpdecrypted.dylib 和 dumpdecrypted.o，前者就是我们需要的工具</p>
</li>
</ul>
</li>
<li>
<p>一台越狱手机</p>
</li>
</ul>
<h3 id="操作步骤">操作步骤<a title="#操作步骤" href="#操作步骤"></a></h3>
<p>使用越狱手机前往 AppStore 下载目标 App 并打开。</p>
<h4 id="1.-使用-ssh-连接手机">1. 使用 ssh 连接手机<a title="#1.-使用-ssh-连接手机" href="#1.-使用-ssh-连接手机"></a></h4>
<p>1.1 越狱手机和电脑连同一个 wifi，查看手机所处当前网络的 IP 地址，打开终端 A，输入指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@<span class="variable">$&#123;手机当前网络的 IP 地址&#125;</span></span><br></pre></td></tr></table></figure>
<p>1.2 通过命令<code>ps -e</code>找到目标 App 对应的进程，如果该 App 为当前打开的应用，可以关注最下面的几条进程，形如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;进程号&#125;</span> ??         <span class="variable">$&#123;时间&#125;</span> <span class="variable">$&#123;目标 App 在手机中的路径&#125;</span></span><br></pre></td></tr></table></figure>
<p>路径形如</p>
<p><code>/var/mobile/Containers/Bundle/Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/xx.app/xx </code></p>
<p>将其记录下来备用。</p>
<p>1.3 附加进程指令：<code>cycript -p $&#123;进程号&#125;</code></p>
<p>获取 App 在沙盒 Documents 的路径：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSFileManager</span> defaultManager] URLsForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomains:<span class="built_in">NSUserDomainMask</span>]</span><br></pre></td></tr></table></figure>
<p>路径形如：<code>/var/mobile/Containers/Data/Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Documents</code></p>
<p>将其记录下来备用。</p>
<h4 id="2.-注入-dumpdecrypted.dylib">2. 注入 dumpdecrypted.dylib<a title="#2.-注入-dumpdecrypted.dylib" href="#2.-注入-dumpdecrypted.dylib"></a></h4>
<p>2.1 新开终端 B（可使用快捷键 command + T）</p>
<p>2.2 使用 scp 指令将 dumpdecrypted.dylib 拷贝到目标 App 的 Documents 目录下。</p>
<p>指令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp <span class="variable">$&#123;dumpdecrypted.dylib 所在的完整路径&#125;</span> root@<span class="variable">$&#123;手机当前网络的 IP 地址&#125;</span>:<span class="variable">$&#123;目标 App 在手机中路径&#125;</span></span><br></pre></td></tr></table></figure>
<p>终端会提示输入密码，默认为 <code> alpine</code>。</p>
<h4 id="3.-砸壳">3. 砸壳<a title="#3.-砸壳" href="#3.-砸壳"></a></h4>
<p>3.1 回到终端 A，<code>cd</code>  进入步骤 1.3 中 App 在沙盒 Documents 的路径</p>
<p>3.2 执行如下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib <span class="variable">$&#123;步骤 1.2 中目标 App 在手机中路径&#125;</span></span><br></pre></td></tr></table></figure>
<p>3.3 执行 <code>ls</code> 指令查看当前目录下是否有 <code>.decrypted</code> 的文件来确定砸壳是否成功</p>
<h4 id="4.-class-dump-导出-app-头文件">4. class-dump 导出 App 头文件<a title="#4.-class-dump-导出-app-头文件" href="#4.-class-dump-导出-app-头文件"></a></h4>
<p>4.1 回到终端 B，将.decrypted 文件拷贝到电脑目录下，指令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp root@<span class="variable">$&#123;手机当前网络的 IP 地址&#125;</span>:<span class="variable">$&#123;步骤 1.3 中App 在沙盒 Documents 的路径&#125;</span>/WeChat.decrypted <span class="variable">$&#123;自定义的电脑目录&#125;</span></span><br></pre></td></tr></table></figure>
<p>终端会提示输入密码，默认为 <code> alpine</code>。</p>
<p>4.2 通过如下指令获取目标 App 的所有头文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class-dump -s -S -H --arch <span class="variable">$&#123;指令集&#125;</span> <span class="variable">$&#123;步骤 4.1 中的.decrypted 文件路径&#125;</span> -o <span class="variable">$&#123;自定义的输出目录&#125;</span></span><br></pre></td></tr></table></figure>
<p>指令集需对应当前越狱手机的型号，参考下表：</p>
<ul>
<li>armv6：iPhone | iPhone2 | iPhone3G</li>
<li>armv7：iPhone3GS | iPhone4 | iPhone4S</li>
<li>armv7s：iPhone5 | iPhone5C</li>
<li>arm64：iPhone5S | iPhone6 | iPhone6Plus | iPhone6S  | iPhone6SPlus | iPhone7 | iPhone7Plus | iPhone8 | iPhone8Plus | iPhoneX</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS 逆向</tag>
        <tag>class-dump</tag>
        <tag>dumpdecrypted</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你免费搭建 Shadowsocks 服务</title>
    <url>/2018/build-a-free-shadowsocks-service/</url>
    <content><![CDATA[<h2 id="一、申请免费试用-gcp">一、申请免费试用 GCP<a title="#一、申请免费试用-gcp" href="#一、申请免费试用-gcp"></a></h2>
<p>每位新注册的用户可以在谷歌云平台 <a href="https://cloud.google.com/free/" target="_blank">GCP</a> (Google Cloud Platform)获得第一年$300 的免费赠送额度。一年后若不主动选择继续使用不会扣费的。（如果谷歌云免费到期，你也可以通过<a href="https://aws.amazon.com/cn/" target="_blank">亚马逊 AWS</a>再薅一年羊毛。）</p>
<a id="more"></a>
<p>注册账户的准备工作：</p>
<p>1、可用的 VPN，用于正常访问 GCP；</p>
<p>2、具有 VISA、MasterCard 等海外支付功能的信用卡一张；</p>
<p>有账户的可以直接登录，没有的就创建一个。</p>
<p><img src="/2018/build-a-free-shadowsocks-service/create-account.jpg" alt="创建账号" class="φcx"></p>
<p>如果阅读英文不习惯，可以将左下方的语言改成简体中文。登录成功后进入 <a href="https://console.cloud.google.com/freetrial" target="_blank">GCP 试用申请</a>：</p>
<p><strong>第 1 步 - 同意条款</strong>：注意选择国家/地区时避免选择“中国”，因为根据 Google Cloud 的政策，不支持中国使用，直接使用默认的“美国”即可。</p>
<p><img src="/2018/build-a-free-shadowsocks-service/apply-for-a-free-trial.jpg" alt="申请免费试用" class="φcx"></p>
<p><strong>第 2 步 - 填写客户信息和付款方式</strong></p>
<p>客户信息的账户类型选择“个人”，通过<a href="http://www.haoweichi.com/Index/random" target="_blank">虚拟美国人信息生成工具</a>，补充完成“姓名和地址”信息。</p>
<p><img src="/2018/build-a-free-shadowsocks-service/account-information.jpg" alt="客户信息" class="φcx"></p>
<p>填写付款方式时，务必填入<strong>正确真实</strong>的信用卡信息，不能再使用生成工具里的虚拟信息。可以取消“信用卡或借记卡账单邮寄地址与上述地址相同”的勾选，输入真实的地址。</p>
<p><img src="/2018/build-a-free-shadowsocks-service/payment-method.jpg" alt="付款方式" class="φcx"></p>
<p>申请成功会扣除$1，验证后将返回。至此，试用 GCP 免费申请完成。</p>
<h2 id="二、部署虚拟机">二、部署虚拟机<a title="#二、部署虚拟机" href="#二、部署虚拟机"></a></h2>
<h3 id="1、修改防火墙">1、修改防火墙<a title="#1、修改防火墙" href="#1、修改防火墙"></a></h3>
<p>在菜单中依次点击 【网络】 –&gt;【VPC 网络】 –&gt;<a href="https://console.cloud.google.com/networking/firewalls/list" target="_blank">【防火墙规则】</a>–&gt;【创建防火墙规则】，如下图创建一条入站规则：</p>
<p><img src="/2018/build-a-free-shadowsocks-service/firewall-rules.jpg" alt="防火墙规则" class="φcx"></p>
<p>注意点：</p>
<ul>
<li>
<p>目标：网络中的所有实例；如果选择指定标签，需要在后续的配置中输入标签</p>
</li>
<li>
<p>IP 地址范围： 0.0.0.0/0</p>
</li>
<li>
<p>协议和端口：全部允许</p>
</li>
</ul>
<h3 id="2、保留静态地址">2、保留静态地址<a title="#2、保留静态地址" href="#2、保留静态地址"></a></h3>
<p>在菜单中依次点击 【网络】 –&gt;【VPC 网络】 –&gt;<a href="https://console.cloud.google.com/networking/addresses/list" target="_blank">【外部 IP 地址】</a>–&gt;【保留静态 IP】</p>
<p><img src="/2018/build-a-free-shadowsocks-service/static-ip.jpg" alt="保留静态地址" class="φcx"></p>
<p>静态 IP 只能申请一个。区域可以选择亚洲东部、欧洲、美国等地，推荐使用 asia-east1，对应台湾地区，访问速度较快。</p>
<h3 id="3、创建计算引擎">3、创建计算引擎<a title="#3、创建计算引擎" href="#3、创建计算引擎"></a></h3>
<p>在菜单中依次点击 【计算】 –&gt;【Compute Engine】 –&gt;<a href="https://console.cloud.google.com/networking/addresses/list" target="_blank">【VM 实例】</a>–&gt;【创建实例】</p>
<p><img src="/2018/build-a-free-shadowsocks-service/create-instance.jpg" alt="创建实例" class="φcx"></p>
<p>注意点：</p>
<ul>
<li>
<p>区域：与创建静态地址时一致</p>
</li>
<li>
<p>机器类型：最便宜的“微型”即可</p>
</li>
<li>
<p>启动磁盘：Ubuntu 16.04 LTS Minimal</p>
</li>
</ul>
<p>展开“管理、安全、磁盘、网络、单独租用”，外部 IP 选择第 2 步的静态 IP。到这里，虚拟机部署完成。</p>
<p><img src="/2018/build-a-free-shadowsocks-service/vm-instance.jpg" alt="VM 实例" class="φcx"></p>
<h2 id="三、搭建-ssr-+-bbr">三、搭建 SSR + BBR<a title="#三、搭建-ssr-+-bbr" href="#三、搭建-ssr-+-bbr"></a></h2>
<p>在 VM 实例列表中找到刚才创建好的实例，点击上图红框内的 SSH，会弹出终端，如下图所示。如果用的是谷歌浏览器可以使用 <a href="https://chrome.google.com/webstore/detail/ssh-for-google-cloud-plat/ojilllmhjhibplnppnamldakhpmdnibd" target="_blank">SSH 插件</a></p>
<p><img src="/2018/build-a-free-shadowsocks-service/ssh.jpg" alt="SSH" class="φcx"></p>
<ul>
<li>获得 root 权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
<ul>
<li>检查内核版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname –sr</span><br></pre></td></tr></table></figure>
<p>正常情况下，当前的内核版本都是超过 4.9，无需升级，可以直接进入下一步；如果需要升级，按照以下步骤进行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 更新系统</span><br><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">// 安装指定的新内核</span><br><span class="line">apt install linux-image-4.10.0-20</span><br><span class="line">// 卸载旧内核</span><br><span class="line">apt autoremove</span><br><span class="line">// 启用新内核</span><br><span class="line">update-grub</span><br><span class="line">// 重启</span><br><span class="line">reboot</span><br><span class="line">// 获得 root 权限</span><br><span class="line">sudo -i</span><br><span class="line">// 验证内核版本</span><br><span class="line">uname –r</span><br></pre></td></tr></table></figure>
<ul>
<li>写入配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>配置生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<ul>
<li>检验是否开启成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure>
<p>如果看到回显<code>tcp_bbr 20480 </code>说明已经成功开启 BBR。</p>
<h2 id="四、搭建-shadowsocks-server">四、搭建 Shadowsocks Server<a title="#四、搭建-shadowsocks-server" href="#四、搭建-shadowsocks-server"></a></h2>
<ul>
<li>更新 apt-get 软件包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<ul>
<li>通过 apt-get 安装 python-pip</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 pip 安装 shadowsocks 服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>
<p>如果出现类似 <code>Successfullying installed shadowsocks - x.x.x</code>的提示说明安装成功。</p>
<ul>
<li>创建  Shadowsocks Server 配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ss-conf.json</span><br></pre></td></tr></table></figure>
<p>回车之后会进入这个创建的文件，windows 下点击键盘上的 insert 键进入编辑，mac 系统则随便输入一个字母可以进入编辑。输入以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;server_port&quot;</span>:<span class="number">8838</span>,</span><br><span class="line"><span class="attr">&quot;local_address&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;local_port&quot;</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">&quot;password&quot;</span>:<span class="string">&quot;fiteen&quot;</span>,</span><br><span class="line"><span class="attr">&quot;timeout&quot;</span>:<span class="number">600</span>,</span><br><span class="line"><span class="attr">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server_port 与 password 分别对应 Shadowsocks 客户端上配置使用的端口和密码，内容请自定义</span></span><br></pre></td></tr></table></figure>
<p>点击 ESC 键，左下角的 insert 标志消失，同时按下&quot;shift&quot; 和&quot;:“键，左下角出现”:&quot; 标志，输入&quot;wq&quot;，接着回车即保存退出文件。</p>
<ul>
<li>用配置文件启动 Shadowsocks Server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ssserver -c /etc/ss-conf.json -d start</span><br></pre></td></tr></table></figure>
<p>如果要设置开机启动，可以参考这篇<a href="https://my.oschina.net/oncereply/blog/467349" target="_blank">文章</a>。</p>
<p>服务搭建已经完成了，在 <a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank">SSR（Mac 端）</a>上输入上面配置的内容，确定后开启服务便可以科学上网了。</p>
<p><img src="/2018/build-a-free-shadowsocks-service/server-settings.png" alt="服务器设定" class="φcx"></p>
<p>如果你的 iPhone 客户端也需要下载小火箭，可以用美区账号 App Store 购买/ TB 购买礼品卡，如果不想花钱，可以尝试一下<a href="https://github.com/v2ss/shadowrocket" target="_blank">这个方案</a>。（2019-12-31 更新）</p>
]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>《Effective Objective-C 2.0》整理（一）：熟悉 Objective-C</title>
    <url>/2016/eoc2.0-1/</url>
    <content><![CDATA[<h2 id="第-1-条：了解-objective-c-语言的起源">第 1 条：了解 Objective-C 语言的起源<a title="#第-1-条：了解-objective-c-语言的起源" href="#第-1-条：了解-objective-c-语言的起源"></a></h2>
<p>Objective-C 由消息型语言的鼻祖 <a href="https://en.wikipedia.org/wiki/Smalltalk" target="_blank">Smalltalk</a> 演化而来，是一门面向对象的语言，具有<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong>的特性。它还包括三大动态特性：</p>
<a id="more"></a>
<ul>
<li>动态类型：id 类型，静态类型是弱类型，动态类型是强类型</li>
<li>动态绑定：基于动态类型，一旦类型被确定，对象对应的属性和相应消息都被确定</li>
<li>动态加载：按需加载，例如不同机型适配，加载图片（1x/2x/3x），按需加载可执行代码，而非所有组件</li>
</ul>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">语言类型</th>
<th style="text-align:center">运行时执行的代码由谁决定</th>
<th style="text-align:right">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">消息结构</td>
<td style="text-align:center">运行环境</td>
<td style="text-align:right">Objective-C</td>
</tr>
<tr>
<td style="text-align:left">函数调用</td>
<td style="text-align:center">编译器</td>
<td style="text-align:right">C++</td>
</tr>
</tbody>
</table></div></div><p>因此，Objective-C 使用动态绑定的消息结构，在运行时才会检查对象类型。接受一条消息后，究竟执行何种代码，由运行期环境而非编译器决定。</p>
<p>Objective-C 的重要工作都由“运行期组件”（ runtime component ）完成，它面向对象所需的全部数据结构及函数特性都在运行期组件里。运行器组件本质上就是一种与开发者所编代码相链接的“动态库”，其代码能把开发者编写的所有程序粘连起来。</p>
<p>Objective-C 是 C 的超集，因此 C 的所有功能在 Objective-C 代码中依然适用。理解 C 中的内存模型（ memory model ）有助于理解 Objective-C 的内存模型和“引用计数”（ reference counting ）机制的工作原理。</p>
<p>Objective-C 语言中的指针是用来指示对象的，对象所占内存总是分配在“堆空间”中，而不会分配在栈上。分配在堆上的内存必须直接管理，而分配在栈上用于保存变量的内存则会在其栈帧弹出时清理。</p>
<h2 id="第-2-条：在类的头文件中尽量少引入其他头文件">第 2 条：在类的头文件中尽量少引入其他头文件<a title="#第-2-条：在类的头文件中尽量少引入其他头文件" href="#第-2-条：在类的头文件中尽量少引入其他头文件"></a></h2>
<p>在类的头文件中声明其他类有以下两种选择：</p>
<ul>
<li><code>#import &quot;类名.h&quot;</code>：需要知道该类的全部细节；</li>
<li><code>@class 类名</code>;`：向前声明，不需要知道该类全部细节，能解决了两个类循环引用的问题。</li>
</ul>
<p>除非却有必要，否则不要引入头文件。一般，在头文件中向前声明某类，并在实现文件引入某类头文件，这样做可以降低类之间的耦合，以减少编译时间。</p>
<p>以下情况必须在头文件中引入其他头文件：</p>
<ul>
<li>如果类继承自某个父类，必须引入定义那个父类的头文件；</li>
<li>声明的类遵循某个协议，该协议必须有完整定义，且不能使用向前声明。因此最好把协议单独放在一个头文件中。</li>
</ul>
<p>针对一些委托协议，建议在实现文件中引入头文件，在“ class-continue 分类”中遵循协议。</p>
<h2 id="第-3-条：多用字面语法，少用与之等价的方法">第 3 条：多用字面语法，少用与之等价的方法<a title="#第-3-条：多用字面语法，少用与之等价的方法" href="#第-3-条：多用字面语法，少用与之等价的方法"></a></h2>
<p>字面量语法采用类 C 的定义方式，可以缩减源代码长度，易读性强。</p>
<p>常规做法：<code>Number *someNumber = [NSNumber numberWithInt:1];</code> =&gt; 字面量语法：<code>Number * someNumber = @1;</code></p>
<p><strong>字面数值</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Number *intNumber = @<span class="number">1</span>;</span><br><span class="line">Number *floatNumber = @<span class="number">2.5</span>f;</span><br><span class="line">Number *doubleNumber = @<span class="number">3.14159</span>;</span><br><span class="line">Number *charNumber = @<span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>字面量数组</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规做法</span></span><br><span class="line"><span class="built_in">NSArray</span> *animals = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;cat&quot;</span>,<span class="string">@&quot;dog&quot;</span>,<span class="string">@&quot;mouse&quot;</span>,<span class="literal">nil</span>]; <span class="comment">// 发现空值nil创建结束</span></span><br><span class="line"><span class="built_in">NSString</span> *dog = [animals objectAtIndex:<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量语法（更安全，出现nil对象，编译器时就会发现异常）</span></span><br><span class="line"><span class="built_in">NSArray</span> *animals = @[<span class="string">@&quot;cat&quot;</span>,<span class="string">@&quot;dog&quot;</span>,<span class="string">@&quot;mouse&quot;</span>]; <span class="comment">// 发现空值nil会抛出异常</span></span><br><span class="line"><span class="built_in">NSString</span> *dog = animals[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<p><strong>字面量字典</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规做法</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *personData = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="string">@&quot;Matt&quot;</span>,<span class="string">@&quot;firstName&quot;</span>,[<span class="built_in">NSNumber</span> numberWithInt:<span class="number">28</span>],<span class="string">@&quot;age&quot;</span>,<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSString</span> *firstName = [personData objectForKey:<span class="string">@&quot;firstName&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量语法</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *personData = @&#123;<span class="string">@&quot;firstName&quot;</span> : <span class="string">@&quot;Matt&quot;</span>, <span class="string">@&quot;age&quot;</span> : @<span class="number">28</span>&#125;;</span><br><span class="line"><span class="built_in">NSString</span> *firstName = personData[<span class="string">@&quot;firstName&quot;</span>];</span><br></pre></td></tr></table></figure>
<p><strong>可变数组与字典</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规做法</span></span><br><span class="line">[mutableArray replaceObjectAtIndex:<span class="number">1</span> withObject:<span class="string">@&quot;dog&quot;</span>];</span><br><span class="line">[mutableDictionary setObject:<span class="string">@&quot;Matt&quot;</span> forKey:<span class="string">@&quot;firstName&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量语法</span></span><br><span class="line">mutableArray[<span class="number">1</span>] = <span class="string">@&quot;dog&quot;</span>;</span><br><span class="line">mutableDictionary[<span class="string">@&quot;firstName&quot;</span>] = <span class="string">@&quot;Matt&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>注意：用字面量语法创建数组或字典时，务必确保值中不含 nil。</p>
<h2 id="第-4-条：多用类型常量，少用-#define-预处理指令">第 4 条：多用类型常量，少用 #define 预处理指令<a title="#第-4-条：多用类型常量，少用-#define-预处理指令" href="#第-4-条：多用类型常量，少用-#define-预处理指令"></a></h2>
<p>定义常量时，尽量不要使用 <code>#define</code> 预处理指令，由于没有声明明确的类型信息，会将相同名字的常量值批量替换。取而代之的，采用 <code>static const 类型 常量名 = 常量值</code>的形式。</p>
<p>派发通知时，需要使用字符串来表示此项通知的名称，而这个名字就可以声明为一个外界可见的常值变量。此类常值变量需放在“全局符号表”中，以便在定义的编译单元之外使用，定义方式如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In the header file</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant; <span class="comment">// 注意const修饰符在常量类型中的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In the implementation file</span></span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant = <span class="string">@&quot;VALUE&quot;</span>; <span class="comment">// 解读：一个常量，而这个常量是指针，指向NSString对象</span></span><br></pre></td></tr></table></figure>
<p><code>extern</code> 这个关键字就是告诉编译器无须查看常量的定义，直接允许使用。其他类型的常量也是如此：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在头文件 EOCAnimatedView.h 中使用extern来声明全局常量</span></span><br><span class="line"><span class="comment">// 这种常量要出现在全局符号表中，所以其名称通常以与之相关的类名做前缀</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> EOCAnimationDuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实现文件 EOCAnimatedView.m 中定义其值</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> EOCAnimationDuration = <span class="number">0.3</span>;</span><br></pre></td></tr></table></figure>
<h2 id="第-5-条：用枚举表示状态、选项、状态码">第 5 条：用枚举表示状态、选项、状态码<a title="#第-5-条：用枚举表示状态、选项、状态码" href="#第-5-条：用枚举表示状态、选项、状态码"></a></h2>
<p>枚举是一种常量命名方式，某个对象所经历的各种状态可定义为一个简单的枚举集。定义方式如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line"><span class="keyword">enum</span> EOCConnectionState &#123;</span><br><span class="line">    <span class="comment">// 编译器会为枚举分配一个独有的编号，从0开始，每个枚举递增1</span></span><br><span class="line">    EOCConnectionStateDisconnected, <span class="comment">// 0</span></span><br><span class="line">    EOCConnectionStateConnecting, <span class="comment">// 1</span></span><br><span class="line">    EOCConnectionStateConnected, <span class="comment">// 2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> EOCConnectionState state = EOCConnectionStateConnected;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="keyword">enum</span> EOCConnectionState &#123;</span><br><span class="line">    EOCConnectionStateDisconnected = <span class="number">1</span>, <span class="comment">// 1</span></span><br><span class="line">    EOCConnectionStateConnecting, <span class="comment">// 2</span></span><br><span class="line">    EOCConnectionStateConnected, <span class="comment">// 3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCConnectionState EOCConnectionState;</span><br><span class="line"></span><br><span class="line">EOCConnectionState state = EOCConnectionStateConnected;</span><br></pre></td></tr></table></figure>
<p>如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，就将各选项值定义为 2 的幂，以便通过安位或操作将其组合。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCPermittedDirection : <span class="keyword">int</span> EOCPermittedDirection;</span><br><span class="line"><span class="keyword">enum</span> EOCPermittedDirection : <span class="keyword">int</span> &#123;</span><br><span class="line">    EOCPermittedDirectionUp    = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    EOCPermittedDirectionDown  = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    EOCPermittedDirectionLeft  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    EOCPermittedDirectionRight = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EOCPermittedDirection *permittedDirections = EOCPermittedDirectionLeft | EOCPermittedDirectionUp;</span><br></pre></td></tr></table></figure>
<p>用 <code>NS_ENUM</code>（不需要互相组合） 与 <code>NS_OPTIONS</code>（需要安位或组合） 宏来定义枚举类型，并指明其底层数据类型，这样做可以确保枚举是开发者所选的底层数据类型实现出来的。</p>
<p>在处理枚举类型的 switch 语句中不要实现 default 分支。因为这样相当于加入了一种新的枚举类型。</p>
<hr>
<p>参考资料：<a href="https://book.douban.com/subject/25829244/" target="_blank">《Effective Objective-C 2.0》编写高质量 iOS 与 OS X 代码的 52 个有效方法</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>《Effective Objective-C 2.0》</tag>
      </tags>
  </entry>
  <entry>
    <title>借助 Safari 调试苹果手机上的 webView</title>
    <url>/2018/debug-webview-with-safari/</url>
    <content><![CDATA[<h2 id="iphone-真机/模拟器设置">iPhone 真机/模拟器设置<a title="#iphone-真机/模拟器设置" href="#iphone-真机/模拟器设置"></a></h2>
<p>需要如下图所示，点击“设置” → 点击 “Safari 浏览器” → 点击“高级” → 打开“Web 检查器”。</p>
<a id="more"></a>
<p><img src="/2018/debug-webview-with-safari/open-the-web-inspector.jpg" alt="打开 Web 检查器" class="φcx"></p>
<p>若模拟器中无“Web 检查器”选项，无需设置。</p>
<h2 id="safari-设置">Safari 设置<a title="#safari-设置" href="#safari-设置"></a></h2>
<p>打开 Mac 电脑中的 Safari 浏览器，打开偏好设置，点击菜单中的“高级”选项卡，勾选“在菜单栏中显示“开发”菜单”</p>
<p><img src="/2018/debug-webview-with-safari/safari-perferences-advanced.jpg" alt="Safari-偏好设置-高级" class="φcx"></p>
<h2 id="进入检查器">进入检查器<a title="#进入检查器" href="#进入检查器"></a></h2>
<p>在手机/模拟器中打开浏览器/App 中的某个网页，在 Mac 中打开 Safari，在“开发”中找到目标设备。</p>
<p><img src="/2018/debug-webview-with-safari/select-target-device.jpg" alt="选择目标设备" class="φcx"></p>
<blockquote>
<p>如果你选择的是模拟器，但是开发列表中未出现，重启 Safari 即可。因为必须确保先打开模拟器，再打开 Safari。</p>
</blockquote>
<p>点击目标设备中需要查看的网址，便会弹出这个页面对应的检查器。</p>
<p><img src="/2018/debug-webview-with-safari/web-inspector.jpg" alt="网页检查器" class="φcx"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>webView</tag>
      </tags>
  </entry>
  <entry>
    <title>《Effective Objective-C 2.0》整理（三）：接口与 API 设计</title>
    <url>/2016/eoc2.0-3/</url>
    <content><![CDATA[<h2 id="第-15-条：用前缀避免命名空间冲突">第 15 条：用前缀避免命名空间冲突<a title="#第-15-条：用前缀避免命名空间冲突" href="#第-15-条：用前缀避免命名空间冲突"></a></h2>
<p>Objective-C 没有其他语言那种内置的命名空间（namespace）机制，我们需要变相实现命名空间。</p>
<p>而 Apple 宣称其保留使用所有“两字母前缀”的权利，因此我们选用的前缀应该是三个字母的，一般选用与公司、应用程序或与二者有关联之名称作为类名的前缀，并在所有代码中均只用这一前缀。</p>
<a id="more"></a>
<h2 id="第-16-条：提供“全能初始化方法”">第 16 条：提供“全能初始化方法”<a title="#第-16-条：提供“全能初始化方法”" href="#第-16-条：提供“全能初始化方法”"></a></h2>
<p>所有对象均要初始化。我们将可为对象提供必要信息以便其能完成工作的初始化方法叫做“全能初始化方法”。</p>
<p>以某个矩形类为例，它的全能初始化方法为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</span><br><span class="line">        _width = width;</span><br><span class="line">        _height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若全能初始化方法与超类不同，则需覆写超类中的对应方法。如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。</p>
<p>举例，某个正方形类作为矩形类的子类，它需要满足 width 和 height 一致的条件，</p>
<p>那么它的初始化方法为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithDimension:(<span class="keyword">float</span>)dimension&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> initWithWidth:dimension andHeight:dimension];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后覆写矩形类的全能初始化：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height&#123;</span><br><span class="line">    <span class="keyword">float</span> dimension = MAX(width, height);</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithDimension:dimension];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并抛出异常：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height&#123;</span><br><span class="line">    <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInternalInconsistencyException</span> reason:<span class="string">@&quot;Must use initWithDimension: instead.&quot;</span> userInfo:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第-17-条：实现-description-方法">第 17 条：实现 description 方法<a title="#第-17-条：实现-description-方法" href="#第-17-条：实现-description-方法"></a></h2>
<p>调试程序时，经常需要打印并查看对象信息。我们通常会使用下面的方法打印：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;object = %@&quot;</span>, object);</span><br></pre></td></tr></table></figure>
<p>假如 object 是个自定义类，输出的信息形如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">object = &lt;CustomClass: <span class="number">0x7fd9a1600600</span>&gt;</span><br></pre></td></tr></table></figure>
<p>想要看到类中完整的信息，需要在类中覆写 description 方法。建议在该方法中打印出类的名字和指针地址。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span>*)description&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;&lt;%@:%p,\&quot;%@ %@\&quot;&gt;&quot;</span>,[<span class="keyword">self</span> <span class="keyword">class</span>],<span class="keyword">self</span>,_parm1,_parm2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>NSObject 协议中有一个 debugDescription 方法，它是开发者在调试器中以控制台命令打印对象时才调用的。Foundation 框架的 NSArray 类就是实现了 debugDescription。</p>
<h2 id="第-18-条：尽量使用不可变对象">第 18 条：尽量使用不可变对象<a title="#第-18-条：尽量使用不可变对象" href="#第-18-条：尽量使用不可变对象"></a></h2>
<p>设计类时，应充分运用属性来封装数据。默认情况下，属性是 read-write，这样设计出来的类都是“可变的”。</p>
<p>如果把可变对象放入 collection 之后又修改其内容，那么很容易破坏 set 的内部数据结构，使其失去固有的语义，因此应该尽量减少对象中的可变内容，即定义为 readonly 属性。</p>
<p>不要把可变的 collection 作为属性公开，而应提供相关方法，一次修改对象中的可变 collection。例如，某个 EOCPerson 类，假如要改变 friends 数据集，可通过 addFriend 和 removeFriend 实现：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>,<span class="keyword">readonly</span>)<span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>,<span class="keyword">readonly</span>)<span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>,<span class="keyword">readonly</span>)<span class="built_in">NSSet</span> *friends;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithFirstNmae:(<span class="built_in">NSString</span> *)firstName</span><br><span class="line">               lastName:(<span class="built_in">NSString</span> *)lastName;</span><br><span class="line">- (<span class="keyword">void</span>)addFriend:(EOCPerson*)person;</span><br><span class="line">- (<span class="keyword">void</span>)removeFriend:(EOCPerson*)person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="第-19-条：使用清晰而协调的命名方式">第 19 条：使用清晰而协调的命名方式<a title="#第-19-条：使用清晰而协调的命名方式" href="#第-19-条：使用清晰而协调的命名方式"></a></h2>
<p><strong>方法命名规则：</strong></p>
<ul>
<li>如果方法的返回值是新创建的，那么方法名的首个词应是返回值的类型，除非前面还有修饰语，例如 localizedString。属性的存取方法不遵循这种命名方式，因为一般认为这些方法不会创建新对象。</li>
<li>应该把表示参数类型的名词放在次参数前面。</li>
<li>如果方法要在当前对象上执行操作，那么就应该包含动词；若执行操作时还需要参数，则应该在动词后面加上一个或多个名词。</li>
<li>不要使用 str 这种简称，应该用 string 这样的全称。</li>
<li>如果某方法返回非属性的 Boolean 值，那么应该根据其功能，选用 has 或 is 当前缀。</li>
<li>将 get 整个前缀留给那些借由“输出参数”来保存返回值的方法，比如说，把返回值填充到“C 语言数组”里的那种方法就可以使用这个词做前缀。</li>
</ul>
<p><strong>类与协议的命名</strong></p>
<ul>
<li>
<p>给方法起名时的第一要务就是确保其风格与你自己的代码所要继承的框架相符。</p>
</li>
<li>
<p>最重要的一点就是，命名方式要协调一致。如果要从其他框架中集成子类，那么务必遵循其命名惯例。</p>
</li>
</ul>
<h2 id="第-20-条：为私有方法名加前缀">第 20 条：为私有方法名加前缀<a title="#第-20-条：为私有方法名加前缀" href="#第-20-条：为私有方法名加前缀"></a></h2>
<p>编写类的实现代码时，经常要写一些只在内部使用的方法。为这种方法的名称加上某些前缀，这就可以轻易将公共方法和私有方法区分开，有助于调试。</p>
<p>例如，使用 _p 作为前缀，p 表示 “private”，而下划线可以把这个字母和真正的方法名区隔开：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCObject</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)publicMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)publicMethod &#123;&#125;</span><br><span class="line">- (<span class="keyword">void</span>)p_privateMethod &#123;&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>但是，需要注意的是，<strong>不要单用一个下划线做私有方法的前缀</strong>，因为这种做法是预留给苹果公司的。</p>
<h2 id="第-21-条：理解-objective-c-错误模型">第 21 条：理解 Objective-C 错误模型<a title="#第-21-条：理解-objective-c-错误模型" href="#第-21-条：理解-objective-c-错误模型"></a></h2>
<p>不同于 Java 等编程语言，面对异常处理，Objective-C 现在采用的方法是：只有在极其罕见的情况下抛出异常，异常抛出之后，无须考虑恢复问题，而且应用程序此时也应该退出。</p>
<p>而出现“不那么严重的错误”时，Objective-C 语言所使用的编程范式为：令方法返回 nil/0，或是使用 NSError，以表明其中有错误发生。</p>
<p>NSError 的用法更加灵活，因为经由此对象，我们可以把导致错误的原因反馈给调用者。NSError 对象里封装了三条信息：</p>
<ul>
<li>Error domain（错误范围，类型为字符串）</li>
<li>Error code（错误码，类型为整数）</li>
<li>User info（用户信息/有关此错误的额外信息，类型为字典）</li>
</ul>
<p>NSError 经常由“输出参数”返回给调用者，例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)doSomething:(<span class="built_in">NSError</span>**)error &#123;</span><br><span class="line">    <span class="comment">// Do something that may cause an error</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( <span class="comment">/* there was an error*/</span> ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="comment">// Pass the &#x27;error&#x27; through the out-parameter</span></span><br><span class="line">            *error = [<span class="built_in">NSError</span> errorWithDomain:domain code:code userInfo:userInfo];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>; <span class="comment">///&lt; Indicate failure</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>; <span class="comment">///&lt; Indicate success</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用者可以根据错误类型分别处理各种错误，错误范围应该定义成 NSString 型的全局常量，而错误码则定义成枚举类型为佳，如：</p>
 <figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EOCErrors.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> EocErrorDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>,EOCError) &#123;</span><br><span class="line">    EOCErrorUnknown              = <span class="number">-1</span>;</span><br><span class="line">    EOCErrorInternalInconsistency= <span class="number">100</span>;</span><br><span class="line">    EOCErrorGeneralFault         = <span class="number">105</span>;</span><br><span class="line">    EOCErrorBadInput             = <span class="number">500</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// EOCErrors.m</span></span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCErrorDomain = <span class="string">@&quot;EOCErrorDomain&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="第-22-条：理解-nscopying-协议">第 22 条：理解 NSCopying 协议<a title="#第-22-条：理解-nscopying-协议" href="#第-22-条：理解-nscopying-协议"></a></h2>
<p>在 Objective-C 中，对象的拷贝通过 copy 完成。如果想要自定义的类支持拷贝，那就要实现 NSCopying 协议，该协议只有一个方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone;</span><br></pre></td></tr></table></figure>
<p>如果自定义的对象分为可变版本与不可变版本，那么就要同时实现 NSCopying 与 NSMutableCopying 协议。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="built_in">NSZone</span> *)zone;</span><br></pre></td></tr></table></figure>
<p>复制对象时需决定采用浅拷贝和深拷贝。</p>
<p><strong>深拷贝：在拷贝对象自身时，将其底层数据也一并复制过去；</strong></p>
<p><strong>浅拷贝：只拷贝容器对象本身，而不复制其中数据。</strong></p>
<p>一般情况下应该尽量执行浅拷贝，如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line">    EOCPerson *<span class="keyword">copy</span> = [[[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone] initWithFirstNmae:_firstName lastName:_lastName];</span><br><span class="line">    <span class="keyword">copy</span>-&gt;_friends = [_friends mutableCopy];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你写的对象需要深拷贝，那么可以考虑新增一个专门执行深拷贝的方法，如下：。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)deepCopy &#123;</span><br><span class="line">    EOCPerson *<span class="keyword">copy</span> = [[[<span class="keyword">self</span> <span class="keyword">class</span>] alloc]initWithFirstNmae:_firstName lastName:_lastName];</span><br><span class="line">    <span class="keyword">copy</span>-&gt;_friends = [[<span class="built_in">NSMutableSet</span> alloc]initWithSet:_friends copyItems:<span class="literal">YES</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考资料：<a href="https://book.douban.com/subject/25829244/" target="_blank">《Effective Objective-C 2.0》编写高质量 iOS 与 OS X 代码的 52 个有效方法</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>《Effective Objective-C 2.0》</tag>
      </tags>
  </entry>
  <entry>
    <title>《Effective Objective-C 2.0》整理（四）：协议与分类</title>
    <url>/2016/eoc2.0-4/</url>
    <content><![CDATA[<h2 id="第-23-条：通过委托与数据源协议进行对象间通信">第 23 条：通过委托与数据源协议进行对象间通信<a title="#第-23-条：通过委托与数据源协议进行对象间通信" href="#第-23-条：通过委托与数据源协议进行对象间通信"></a></h2>
<p>Objective-C 开发中广泛使用“委托模式”来实现对象间的通信，该模式的主旨是：定义一套接口，某对象若想接受另一个对象的委托，则需遵从此接口，以便成为其“委托对象”（delegate）。而“另一个对象”则可以给其委托对象回传一些信息，也可以在发生相关事件时通知委托对象。</p>
<a id="more"></a>
<p>此模式可将数据和业务逻辑解耦。例如，用户界面有个显示一系列数据所用的视图，视图对象的属性中，可以包含负责数据和事件处理的对象。这两种对象分别称为“数据源”（data source）与“委托”（delegate）。</p>
<p>委托（代理模式）（Delegate）：委托别人办事，自己不处理，交给别人处理；</p>
<p>协议（Protocol）：使用了这个协议就要按照协议办事</p>
<p>下面总结一下委托模式的实现，委托方：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .h 文件中</span></span><br><span class="line"><span class="comment">// 定义协议</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">ClassADelegate</span></span></span><br><span class="line"><span class="comment">// 协议中不标注，默认为 @required 类型，必须实现</span></span><br><span class="line">- (<span class="keyword">void</span>)methodA;</span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line"><span class="comment">// 特别标注了 @optional 类型，表示可以不实现</span></span><br><span class="line">- (<span class="keyword">void</span>)methodB;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassA</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// 引用，存代理方</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;ClassADelegate&gt; delegate;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .m 中在合适的时机给代理方发消息</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassB</span></span></span><br><span class="line">- (<span class="keyword">void</span>)rightTimeMethod &#123;</span><br><span class="line">    <span class="comment">// 实现 @requiered 方法 methodA</span></span><br><span class="line">    [<span class="keyword">self</span>.delegate methodA];</span><br><span class="line">    <span class="comment">// 实现 @optional 方法 methodB</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(methodB)]) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.delegate methodB];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在这里需要注意的是：<strong>delegate 属性需要定义成 weak，而非 strong。因为两者之间必须为“非拥有关系”，否则会造成循环引用，从而导致内存泄漏</strong>。</p>
<p>而代理方则需要：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遵守协议</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassB</span>() &lt;<span class="title">ClassADelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassB</span></span></span><br><span class="line"><span class="comment">// 实现方法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - ClassADelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)methodA &#123;</span><br><span class="line">    <span class="comment">// how to implementation methodA</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将自己设置为代理方</span></span><br><span class="line">- (<span class="keyword">void</span>)rightTimeMethod &#123;</span><br><span class="line">	ClassA classA = [ClassA new];</span><br><span class="line">	classA.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="第-24-条：将类的实现代码分散到便于管理的数个分类之中">第 24 条：将类的实现代码分散到便于管理的数个分类之中<a title="#第-24-条：将类的实现代码分散到便于管理的数个分类之中" href="#第-24-条：将类的实现代码分散到便于管理的数个分类之中"></a></h2>
<p>当一个类中充斥了大量的方法实现时，可以通过分类这种模式将这个庞大的类打散，例如：</p>
<ul>
<li>EOCPerson+Friendship(.h/.m)</li>
<li>EOCPerson+Work(.h/.m)</li>
<li>EOCPerson+Play(.h/.m)</li>
</ul>
<p>通过分类机制，可以把类的代码分成多个易于管理的小块，归入不同的“功能区”，以便单独检视，也便于调试。</p>
<p>在编写准备分享给其他开发者使用的程序库时，可以考虑创建 Private 分类，如果程序库中的某个地方要用到这些方法，那就引入此分类的头文件。而分类的头文件并不随程序库一并公开，于是该库的使用者也就不知道库里还有这些私有方法了。</p>
<h2 id="第-25-条：总是为第三方类的分类名称加前缀">第 25 条：总是为第三方类的分类名称加前缀<a title="#第-25-条：总是为第三方类的分类名称加前缀" href="#第-25-条：总是为第三方类的分类名称加前缀"></a></h2>
<p>如果分类中有何原有类同名的方法，会优先调用分类中的方法，同名方法调用的优先级为<strong>分类 &gt; 本类 &gt; 父类</strong>。如果多个分类中都有和原有类中同名的方法, 那么调用该方法的时候执行谁由编译器决定，编译器会执行最后一个参与编译的分类中的方法。</p>
<p>为了避免分类覆盖，可以通过给类名和方法名都加专属前缀的方式解决。</p>
<p>例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> (<span class="title">ABC_HTTP</span>)</span></span><br><span class="line"><span class="comment">// Encode a string with URL encoding</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)abc_urlEncodedString;</span><br><span class="line"><span class="comment">// Decode a URL encode string</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)abc_urlDecodedString;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="第-26-条：勿在分类中声明属性">第 26 条：勿在分类中声明属性<a title="#第-26-条：勿在分类中声明属性" href="#第-26-条：勿在分类中声明属性"></a></h2>
<p>除了“class-continuation 分类”之外，其他分类都无法向类中新增实例变量。原因是分类无法合成与属性相关的实例变量。分类中可以写 @property，但不会生成 setter/getter 方法，也不会生成实现以及私有的成员变量，会编译通过，但是引用变量会报错。</p>
<p>简单地说，分类是运行期决议的，在运行期，对象的内存布局已经确定了，如果此时添加实例变量会破坏类的内部结构。</p>
<p>但是如果一定要添加，也是可以通过分类中为该属性实现存取方法来实现。如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *kFriendsPropertyKey = <span class="string">&quot;kFriendsPropertyKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCPerson</span> (<span class="title">Friends</span>)</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)friends &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, kFriendsPropertyKey);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setFriends:(<span class="built_in">NSArray</span> *)friends &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>,</span><br><span class="line">                             kFriendsPropertyKey,</span><br><span class="line">                             friends,</span><br><span class="line">                             OBJC_ASSCIATIOM_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>但是这种做法并不推荐。分类机制，应该理解为一种手段，目标在于拓展类的功能，而非封装数据。最好的做法，就是将封装数据所用的全部属性都定义在主接口里。</p>
<h2 id="第-27-条：使用“class-continuation-分类”隐藏实现细节">第 27 条：使用“class-continuation 分类”隐藏实现细节<a title="#第-27-条：使用“class-continuation-分类”隐藏实现细节" href="#第-27-条：使用“class-continuation-分类”隐藏实现细节"></a></h2>
<p>分类的主要作用是为已经存在的类添加方法，因为分类的结构体指针中，没有属性列表，只有方法列表。本章介绍的是一种特殊的分类“class-continuation”，用于定义一些无需对外公布的方法及实例变量。形如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;ClassA.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassA</span> ()</span></span><br><span class="line"><span class="comment">// 定义你所需要的私有变量或方法</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassA</span></span></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>若想使类所遵循的协议不为人所知，也可以在“class-continuation 分类”中声明。</p>
<h2 id="第-28-条：通过协议提供匿名对象">第 28 条：通过协议提供匿名对象<a title="#第-28-条：通过协议提供匿名对象" href="#第-28-条：通过协议提供匿名对象"></a></h2>
<p>协议定义了一系列方法，遵从此协议的对象应该实现它们。于是，我们可以用协议把自己所写的 API 之中的实现细节隐藏起来，将返回的对象设计为遵从此协议的纯 id 类型，这样，想隐藏的类型就不会出现在 API 之中了。例如 ClassA、ClassB 都会遵循某个协议 EOCDelegate，假如指定类型，就会这样约定：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> ,<span class="keyword">weak</span>) ClassA &lt;EOCDelegate&gt; delegate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> ,<span class="keyword">weak</span>) ClassB &lt;EOCDelegate&gt; delegate;</span><br></pre></td></tr></table></figure>
<p>如果不想指明具体使用哪个类，就可以将 delegate 对象约定成 纯 id 类型，这个对象也可以称之为“匿名对象”。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> ,<span class="keyword">weak</span>) <span class="keyword">id</span> &lt;EOCDelegate&gt; delegate;</span><br></pre></td></tr></table></figure>
<p>总结一下：</p>
<ul>
<li>协议可以在某种程度上提供匿名对象，具体的对象类型可以淡化成遵从某协议的 id 类型，协议里规定了对象所应实现的方法。</li>
<li>使用匿名对象来隐藏类型名称（或类名）。</li>
<li>如果具体类型不重要，重要的是对象能否处理好一些特定的方法，那么就可以使用这种协议匿名对象来完成。</li>
</ul>
<hr>
<p>参考资料：<a href="https://book.douban.com/subject/25829244/" target="_blank">《Effective Objective-C 2.0》编写高质量 iOS 与 OS X 代码的 52 个有效方法</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>《Effective Objective-C 2.0》</tag>
        <tag>委托模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 手册之用 .gitignore 忽略文件</title>
    <url>/2016/git-ignore/</url>
    <content><![CDATA[<p>提交代码后我们经常发现，即使没有任何代码修改，有一些文件也会提示更新，例如：<code>UserInterfaceState.xcuserstate</code>、<code>.DS_Store</code> 等。</p>
<p>这种情况可以通过添加 <code>.gitignore</code> 文件解决。</p>
<a id="more"></a>
<h2 id="如何在项目中添加-.gitignore">如何在项目中添加 <code>.gitignore</code><a title="#如何在项目中添加-.gitignore" href="#如何在项目中添加-.gitignore"></a></h2>
<p>具体<strong>步骤</strong>如下：</p>
<p>步骤一：打开终端 进入项目中 <code>.git</code> 同目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/file</span><br></pre></td></tr></table></figure>
<p>步骤二：创建 <code>.gitignore</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure>
<p>步骤三：打开 <code>.gitignore</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open .gitignore</span><br></pre></td></tr></table></figure>
<p>步骤四：参照 <a href="https://github.com/github/gitignore" target="_blank">.gitignore 模版</a>，找到对应的开发语言，将模版文本粘贴到自己的 <code>.gitignore</code> 中</p>
<p>步骤五：更新项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .gitignore</span><br><span class="line">git commit -m <span class="string">&quot;feat: add .gitignore file&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<p>1、<code>.gitignore</code> 只能作用于未跟踪的文件，也就是未被 git 记录的文件；</p>
<p>2、已经 <code>push</code> 过的文件，如果想要在本地保留，但想要从远程仓库中删除，并在以后的提交中忽略，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -r --cached /path/to/file</span><br></pre></td></tr></table></figure>
<p>3、已经 <code>push</code> 过的文件，想在以后的提交时忽略跟踪，也就是说即使本地已经修改过，但不修改也不删除远程仓库中相应文件，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged /path/to/file</span><br></pre></td></tr></table></figure>
<p>如果要取消忽略，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-index –no-assume-unchanged /path/to/file</span><br></pre></td></tr></table></figure>
<h2 id="删除-.ds_store">删除 .DS_Store<a title="#删除-.ds_store" href="#删除-.ds_store"></a></h2>
<p><code>.DS_Store</code> 是 Mac OS 保存文件夹的自定义属性的隐藏文件。如果项目中还没有自动生成 <code>.DS_Store</code>，把它加入到 <code>.gitignore</code> 中即可；但如果项目中已经有了，先从项目中将其删除，再把它加入到 <code>.gitignore</code> 里。步骤如下：</p>
<p>步骤一：删除项目中的所有 <code>.DS_Store</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch</span><br></pre></td></tr></table></figure>
<p>步骤二：将 <code>.DS_Store</code> 加入到 <code>.gitignore</code> 文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> .DS_Store &gt;&gt; ~/.gitignore</span><br></pre></td></tr></table></figure>
<p>步骤三：更新项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">&quot;feat: ignore .DS_Store&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>如果只需要删除磁盘上的 <code>.DS_Store</code>，用下面的命令来删除当前目录及其子目录下的所有 <code>.DS_Store</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;*.DS_Store&#x27;</span> -<span class="built_in">type</span> f -delete</span><br></pre></td></tr></table></figure>
<p>你也可以通过输入这串命令直接禁止生成 <code>.DS_store</code>，重启 Mac 即可生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</span><br></pre></td></tr></table></figure>
<p>恢复 <code>.DS_store</code> 生成的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>.gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2016/hello-world/</url>
    <content><![CDATA[<p>标题是 Hexo 默认生成的，却没来由得契合。『Hello，World』——计算机发展史上的里程碑式的一笔，每一门编程语言的入门示例，Brian Kernighan 在<a href="https://book.douban.com/subject/1139336/" target="_blank">《C 程序设计语言》</a>中第一次引用的 Hello World 程序，源自他 1973 年编写的一部讲授 B 语言的编程教程：</p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">extrn a,b,c;</span><br><span class="line">putchar(a); putchar(b); putchar(c); putchar(&#x27;!*n&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#x27;hell&#x27;;</span><br><span class="line">b &#x27;o, w&#x27;;</span><br><span class="line">c &#x27;orld&#x27;;</span><br></pre></td></tr></table></figure>
<p>『Hello，World』，总令我想起那高亢的一句：“这世界我来了 任凭风暴漩涡”。临世，是随机事件，可人们无法计算概率，只晓得 0 | 1、false | true、fail | success。巅峰时簇拥欢呼，落寞时笑骂离开，艰难困苦大都无人问津。矛盾是事物发展的源泉和动力，这世界温情又冷漠，有人清醒有人混沌，七亿网民被快餐文化蚕食着，或又被欲望鲸吞。</p>
<p>最近发生了一些事，或许吵吵嚷嚷的人其实最不舍，说出来的是情绪，分别却需要勇气。也许我也该学着接受一些人的处世手段和方式。果然戏剧来源于生活不假，毕竟这是一个弱肉强食的社会，我们都是因为互补的需要相遇，我无法理解的状态在旁人看来却只是简单的各取所需。</p>
<p>尽管我不是一个偏执的人，却也有小任性，也许若干年的自己想如今只剩一句“你还是太年轻！”，可是啊，哪怕这不是一个合适的时机，人总有追求更多拥有真善美的权利吧。愿你出走半生，归来仍是少年。这样初心不改的期盼到底会不会在岁月的洪流中被侵蚀，未来谁又说得好呢？</p>
<p>最近在社交平台上删除了许多青春时期敏感晦涩的字句，小女孩啊，总有那么多悲春伤秋，我还是没有足够强大去面对曾经的自己，仿佛记忆会随着删除按钮的点击一同清空。文字很奇妙，它比滔滔不绝的喜悦或怨气要安宁些，四通八达的网络，不知道会让哪个陌生的你与我在此遇见，但祝愿我们都爱世人，察世事，做不到兼济天下，也要先独善其身。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title>V2Ray + CDN 中转隐藏 IP</title>
    <url>/2019/hide-ip/</url>
    <content><![CDATA[<blockquote>
<p>⚠️⚠️⚠️ <strong>声明：本文内容仅限技术交流，若有用作商业或其他违规行为，与本人无关。</strong></p>
</blockquote>
<a id="more"></a>
<p>IP 又双叒叕被墙了？</p>
<p>刚换的 IP 还没捂热又凉了，怎么办？</p>
<p>下面教你一招，为你的 IP 加上双重保护锁，从此躲开“中奖”，快乐省钱又省心！</p>
<h2 id="原理">原理<a title="#原理" href="#原理"></a></h2>
<p>先在 VPS 服务器上用 V2Ray 伪装成一个网站，再用 CDN 中转。这时流量传递的顺序是这样的：</p>
<p><img src="/2019/hide-ip/visitor-firewall-cdn-vps-website.png" alt="CDN 中转" class="φcx"></p>
<p>主要实现就是两点：<br>
一、借助 V2Ray 代理，将我们的流量被伪装成网站流量<br>
二、利用 CDN 中转 V2Ray 的 WebSocket 流量</p>
<p>这样，GFW 只知道你与 CDN 之间的联系，不知道 VPS 的实际地址，并且 CDN 会有很多 IP 地址，GFW 也不会随意封这些 IP，毕竟也有很多正规网站在使用，因此可以基本保证 IP 的安全。</p>
<h2 id="准备工作">准备工作<a title="#准备工作" href="#准备工作"></a></h2>
<p>于是，只要有了 VPS、域名和 CDN，就能实现这套方案：</p>
<ul>
<li>VPS：推荐 <a href="https://bandwagonhost.com/" target="_blank">BandwagonHost</a>、<a href="https://www.vultr.com" target="_blank">Vultr</a>、<a href="https://www.hostwinds.com" target="_blank">Hostwinds</a>、<a href="https://manage.hostdare.com/index.php" target="_blank">HostDare</a>、<a href="teach-you-to-build-a-free-Shadowsocks-service">谷歌免费薅一年</a>。</li>
<li>域名：通过阿里云/腾讯云/华为云等购买域名，<code>.xyz</code>、<code>.top</code> 都是性价比比较高的选择。如果不想花钱也可以在 <a href="http://www.freenom.com/nl/index.html" target="_blank">freenom</a> 上注册一个免费域名，运气好的话域名免费有效期可以达到 12 个月。</li>
<li>CDN：推荐使用美国的 Cloudflare，优点是免费、无需备案。</li>
</ul>
<h2 id="v2ray">V2Ray<a title="#v2ray" href="#v2ray"></a></h2>
<h3 id="什么是-v2ray">什么是 V2Ray<a title="#什么是-v2ray" href="#什么是-v2ray"></a></h3>
<p>V2Ray 是继 Shadowsocks 之后一款非常好用的代理软件，甚至比 Shadowsocks 更优秀，它拥有更多可选择的协议和传输载体，还有强大的路由功能。</p>
<p>想要知道它的工作机制、本地策略、如何配置等细节可以查看 <a href="https://www.v2ray.com" target="_blank">V2Ray 官网</a>。</p>
<h3 id="搭建-v2ray-服务">搭建 V2Ray 服务<a title="#搭建-v2ray-服务" href="#搭建-v2ray-服务"></a></h3>
<p>V2Ray 的配置其实是比较繁琐的，可以借助这个<a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC" target="_blank">一键安装脚本</a>快速配置。</p>
<h3 id="安装脚本">安装脚本<a title="#安装脚本" href="#安装脚本"></a></h3>
<p>通过 SSH 连接到 VPS 主机，以 root 用户输入以下命令来安装或卸载脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>
<h3 id="管理-v2ray">管理 V2Ray<a title="#管理-v2ray" href="#管理-v2ray"></a></h3>
<p>安装完成后，直接在终端输入 <code>v2ray</code> 就可以进行管理。面板上会出现如下选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 1. 查看 V2Ray 配置</span><br><span class="line"> 2. 修改 V2Ray 配置</span><br><span class="line"> 3. 下载 V2Ray 配置 / 生成配置信息链接 / 生成二维码链接</span><br><span class="line"> 4. 查看 Shadowsocks 配置 / 生成二维码链接</span><br><span class="line"> 5. 修改 Shadowsocks 配置</span><br><span class="line"> 6. 查看 MTProto 配置 / 修改 MTProto 配置</span><br><span class="line"> 7. 查看 Socks5 配置 / 修改 Socks5 配置</span><br><span class="line"> 8. 启动 / 停止 / 重启 / 查看日志</span><br><span class="line"> 9. 更新 V2Ray / 更新 V2Ray 管理脚本</span><br><span class="line">10. 卸载 V2Ray</span><br><span class="line">11. 其他</span><br></pre></td></tr></table></figure>
<p>输入 <code>2</code> 进入修改 V2Ray 面板，面板上会出现如下选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 修改 V2Ray 端口</span><br><span class="line">2. 修改 V2Ray 传输协议</span><br><span class="line">3. 修改 V2Ray 动态端口 (如果可以)</span><br><span class="line">4. 修改 用户ID ( UUID )</span><br><span class="line">5. 修改 TLS 域名 (如果可以)</span><br><span class="line">6. 修改 分流的路径 (如果可以)</span><br><span class="line">7. 修改 伪装的网址 (如果可以)</span><br><span class="line">8. 关闭 网站伪装 和 路径分流 (如果可以)</span><br><span class="line">9. 开启 / 关闭 广告拦截</span><br></pre></td></tr></table></figure>
<p>输入 <code>2</code> 修改 V2Ray 传输协议，终端会输出当前的传输协议，如果不是 <code>WebSocket + TLS</code>，继续在终端输入 <code>4</code> 改成这个协议。如图下所示，依次点击回车键、输入正确的域名、将域名解析到指定的 IPv4 地址。</p>
<p><img src="/2019/hide-ip/domain-name-resolution.png" alt="输入域名并解析到指定地址" class="φcx"></p>
<p>关于域名解析，以阿里云为例，像这样添加一条 A 记录类型即可。</p>
<p><img src="/2019/hide-ip/aliyun-resolution.png" alt="阿里云域名解析" class="φcx"></p>
<p>接下来，你还会被询问是否要<strong>设置分流路径</strong>和<strong>伪装的网址</strong>，如果没有特殊要求，回复默认项即可。</p>
<p>修改配置完成后，终端会输出新的配置信息，形如：</p>
<p><img src="/2019/hide-ip/v2ray-config.png" alt="V2Ray 配置信息" class="φcx"></p>
<p>你也可以通过以下命令进行<strong>快速管理</strong>：</p>
<ul>
<li><code>v2ray info</code> 查看 V2Ray 配置信息</li>
<li><code>v2ray config</code> 修改 V2Ray 配置</li>
<li><code>v2ray link</code> 生成 V2Ray 配置文件链接</li>
<li><code>v2ray infolink</code> 生成 V2Ray 配置信息链接</li>
<li><code>v2ray qr</code> 生成 V2Ray 配置二维码链接</li>
<li><code>v2ray ss</code> 修改 Shadowsocks 配置</li>
<li><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息</li>
<li><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接</li>
<li><code>v2ray status</code> 查看 V2Ray 运行状态</li>
<li><code>v2ray start</code> 启动 V2Ray</li>
<li><code>v2ray stop</code> 停止 V2Ray</li>
<li><code>v2ray restart</code> 重启 V2Ray</li>
<li><code>v2ray log</code> 查看 V2Ray 运行日志</li>
<li><code>v2ray update</code> 更新 V2Ray</li>
<li><code>v2ray update.sh</code> 更新 V2Ray 管理脚本</li>
<li><code>v2ray uninstall</code> 卸载 V2Ray</li>
</ul>
<p>配置完成后，我们将信息设置到支持 V2Ray 的客户端，比如集成了 <a href="https://github.com/shadowsocks/v2ray-plugin" target="_blank">v2ray-plugin</a> 的 <a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank">ShadowsocksX-NG</a>、<a href="https://github.com/yanue/V2rayU" target="_blank">V2rayU</a>、<a href="https://github.com/Cenmrev/V2RayX" target="_blank">V2RayX</a> 等。</p>
<p>这时候挂上代理访问，我们流量被伪装成网站流量，当别人访问你的域名时，打开的将是你设置的伪装网址，终于你的 IP 就不会直接暴露。</p>
<p>不过我们 <code>ping</code> 一下域名，就会发现，显示的还是原始 IP。那么下面要做的，就是利用 CDN 中转 V2Ray 的 WebSocket 流量。</p>
<h2 id="cdn-中转">CDN 中转<a title="#cdn-中转" href="#cdn-中转"></a></h2>
<p>这里用到的就是 Cloudflare 的<strong>免费</strong>的<strong>自带防御功能</strong>的 CDN 服务。</p>
<h3 id="注册-cloudflare-账号">注册 Cloudflare 账号<a title="#注册-cloudflare-账号" href="#注册-cloudflare-账号"></a></h3>
<p>前往<a href="https://www.cloudflare.com/" target="_blank">官网</a>注册一个账号，流程很简单，只需验证一下有效邮箱。</p>
<h3 id="使用-cloudflare-管理域名">使用 Cloudflare 管理域名<a title="#使用-cloudflare-管理域名" href="#使用-cloudflare-管理域名"></a></h3>
<p>登录后账户就会引导你添加托管域名。</p>
<p><img src="/2019/hide-ip/add-site.png" alt="添加域名" class="φcx"></p>
<p>注意这里必须使用<strong>根域名</strong>，并确保该域名不在于 Cloudflare 官方以及百度云加速以及其他合作商的系统中。</p>
<h3 id="选择-free-套餐">选择 Free 套餐<a title="#选择-free-套餐" href="#选择-free-套餐"></a></h3>
<p>添加好网站后，选择套餐，这里点击第一个 Free 方案即可。</p>
<p><img src="/2019/hide-ip/select-a-plan.png" alt="选择套餐" class="φcx"></p>
<h3 id="补全域名的解析纪录">补全域名的解析纪录<a title="#补全域名的解析纪录" href="#补全域名的解析纪录"></a></h3>
<p>Cloudflare 会自动搜索域名的解析记录，如果有我们需要的 DNS 记录但是没有解析出来的，可以手动添加。</p>
<p>找到伪装域名的解析记录，修改它 DNS 解析记录的代理状态为 Proxied，也就是橘色云朵。</p>
<p><img src="/2019/hide-ip/revise-dns-record.png" alt="修改 DNS 记录" class="φcx"></p>
<p>关于 <strong>Proxy state</strong>：</p>
<ul>
<li>Proxied：解析 DNS，同时该记录要经过代理</li>
<li>DNS only：只解析 DNS，不代理</li>
</ul>
<p>设置完成后，然后点击 Continue。</p>
<h3 id="替换-dns-服务器">替换 DNS 服务器<a title="#替换-dns-服务器" href="#替换-dns-服务器"></a></h3>
<p><img src="/2019/hide-ip/replace-nameservers.png" alt="替换 DNS" class="φcx"></p>
<p>我们看到 Cloudflare 提示我们将原来的两台 DNS 服务器换成新分配的服务器。前往自己的域名服务商修改 DNS 之后，等待生效，我 10 分钟左右就收到了 “Status Active” 的通知邮件，等待时间正常来说不超过 24h。</p>
<h2 id="效果">效果<a title="#效果" href="#效果"></a></h2>
<p>在<a href="https://tool.lu/ip/" target="_blank">IP 地址查询网</a> 上输入域名，看到解析出的 IP 归属地为 CloudFlare 公司 CDN 节点。</p>
<p><img src="/2019/hide-ip/ip-query.png" alt="域名 IP 查询" class="φcx"></p>
<p>如此，原始 IP 就被隐藏了。</p>
<p>同样地，如果 IP 已经被墙，也可以通过这套方案拯救。因为域名托管在 CDN 上，只要 CDN 没有被封，它就可以帮助我们代理访问到 VPS，然后借助 VPS 上的代理科学上网。</p>
]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>V2Ray</tag>
        <tag>Cloudflare</tag>
        <tag>CDN</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新】Hexo + inside 博客个性化定制</title>
    <url>/2020/hexo-theme-inside-plugin/</url>
    <content><![CDATA[<p><a href="https://blog.fiteen.top" target="_blank">我的博客</a>采用的是 <a href="https://hexo.io/themes/" target="_blank">Hexo 官方网站</a>上相中的 <a href="https://github.com/ikeq/hexo-theme-inside" target="_blank">hexo+theme+inside</a> 主题。虽然开发者已经提供了主题的<a href="https://blog.oniuo.com/theme-inside" target="_blank">使用文档</a>，但是作为一款小众的主题，一些常用功能的定制并不是那么完善，不过贴心的开发者提供了 <a href="https://blog.oniuo.com/theme-inside/docs/misc#plugins" target="_blank">plugins 配置方案</a>。</p>
<a id="more"></a>
<p>下文总结了部分功能的拓展方案，可供需要的朋友参考。</p>
<blockquote>
<p><strong>注意</strong>：inside v2.6.3 之前会出现<strong>文章中点击上/下一篇时，插件无法生效的情况</strong>。<br>
其原因是<strong>主题插件模块存在组件缓存问题，导致切换页面时 js 执行失败</strong>，为了保障功能正常使用，请务必将主题升级到<a href="https://github.com/ikeq/hexo-theme-inside/releases" target="_blank">最新版本</a>。（2020.03.14 更新）</p>
</blockquote>
<h2 id="plugin-前置准备">plugin 前置准备<a title="#plugin-前置准备" href="#plugin-前置准备"></a></h2>
<p><code>themes/inside/_config.yml</code> 中的 plugins 支持于特定位置动态插入可执行的代码片段，或全局加载脚本/样式。</p>
<p>支持通过安装 html-minifier、babel 和 uglify-js 来实现代码压缩。 在项目根目录执行（Hexo 根目录，非 <code>themes/inside</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-core babel-preset-env html-minifier uglify-js --save</span><br></pre></td></tr></table></figure>
<h2 id="font-awesome">Font Awesome<a title="#font-awesome" href="#font-awesome"></a></h2>
<p>按照 plugin 配置描述的，要支持 Font Awesome 的 CSS，只需要这样设置：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css</span></span><br></pre></td></tr></table></figure>
<p>也就是在全局加载样式，<s>不过不知道为什么没有正常生效🤔</s>（<strong><a href="https://github.com/ikeq/hexo-theme-inside/releases/tag/2.6.1" target="_blank">inside-v2.6.1</a> 已经修复了这个问题</strong>，建议你升级到<a href="https://github.com/ikeq/hexo-theme-inside/releases" target="_blank">最新版本</a>）。</p>
<blockquote>
<p>如果你是 v2.6.0 及以下版本，可以用这个方案解决：</p>
<p>在 <code>themes/inside/layout/index.swig</code> 的 <code>&lt;head&gt;</code> 标签内加入以下代码：</p>
<figure class="highlight html"><figcaption><span>index.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这时，虽然图标显示出来了，但是样式还是有点问题，可能和主题本身的 CSS 有关系，找到 <code>source</code> 目录下的 <code>styles.e4da61f53c7bc99becf4.css</code>（也可能叫别的） 里的 <code>.fa</code>，删除里面的 <code>margin:10rem 0 3rem;</code> 。</p>
<p><img src="/2020/hexo-theme-inside-plugin/alter-style-css.png" alt="修改 .fa 样式" class="φcx"></p>
</blockquote>
<p>不过个人觉得放在 CDN 上访问速度还是有点慢，所以从官网<a href="http://fontawesome.io" target="_blank">下载</a>最新版放在主题的 <code>source/lib</code> 目录下，全局引用：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lib/font-awesome/css/font-awesome.min.css</span></span><br></pre></td></tr></table></figure>
<p>或者在需要的位置引用 CSS 资源：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;lib/font-awesome/css/font-awesome.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="访问量统计">访问量统计<a title="#访问量统计" href="#访问量统计"></a></h2>
<p>很多人都有站点访问量统计的需求，像这样：</p>
<p><img src="/2020/hexo-theme-inside-plugin/busuanzi-example.png" alt="访问量统计效果" class="φcx"></p>
<p>我采用的是轻量的<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank">不蒜子统计</a>来做访问量统计。</p>
<p>先<strong>安装脚本</strong>，在使用不蒜子的页面，也就是 <code>sidebar</code> 模块插入 <code>busuanzi.js</code>。</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">position:</span> <span class="string">sidebar</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>再<strong>安装标签</strong>，官方给出了站点 PV/UV 的统计代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span>本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>你也可以用这两个 id 来显示访问数：</p>
<ul>
<li><code>busuanzi_value_site_pv</code>：异步回填访问数</li>
<li><code>busuanzi_container_site_pv</code>：为防止计数服务访问出错或超时（3 秒）的情况下，使整个标签自动隐藏显示</li>
</ul>
<p>在 <code>_config.yml</code> 文件里找到 <code>footer</code> 下的 <code>custom</code>，写入相关的 html 代码。比如：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Custom text</span></span><br><span class="line"><span class="attr">custom:</span> <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_container_site_uv&quot;</span> <span class="string">style=&#x27;display:none&#x27;&gt;Total</span> <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span> <span class="string">visitors.</span> <span class="string">&lt;/span&gt;&lt;span</span> <span class="string">id=&quot;busuanzi_container_site_pv&quot;</span> <span class="string">style=&#x27;display:none&#x27;&gt;&lt;span</span> <span class="string">id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span> <span class="string">Views&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者使用 font-awesome 字体：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Custom text</span></span><br><span class="line"><span class="attr">custom:</span> <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_container_site_pv&quot;</span> <span class="string">style=&#x27;display:none&#x27;&gt;&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-eye&quot;&gt;&lt;/i&gt;</span> <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;&lt;/span&gt;</span> <span class="string">｜</span> <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_container_site_uv&quot;</span> <span class="string">style=&#x27;display:none&#x27;&gt;&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-user&quot;&gt;&lt;/i&gt;</span> <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="代码复制">代码复制<a title="#代码复制" href="#代码复制"></a></h2>
<p>为了方便博客的读者引用代码，可以在文章中代码块的右上角加一个复制按钮，如：</p>
<p><img src="/2020/hexo-theme-inside-plugin/clipboard-example.png" alt="代码块复制按钮效果" class="φcx"></p>
<p>它的实现是在页面加载完毕后，使用 js 动态为每个代码块添加一个按钮，当鼠标滑动到代码块上时显示按钮，点击按钮时复制代码块里的内容。因此需要三个文件：</p>
<ul>
<li><strong>实现复制代码块功能</strong>的文件 <code>clipboard.js</code>，这里可以直接引用这个文件： <code>https://cdn.jsdelivr.net/npm/clipboard@2.0.4/dist/clipboard.js</code>。</li>
<li>支持<strong>动态创建复制按钮</strong>的文件 <code>clipboard-use.js</code></li>
<li>复制按钮的<strong>样式</strong>文件 <code>clipboard.css</code></li>
</ul>
<p>页面载入完成后，创建一个复制按钮，上面用 font-awesome 的 clipboard 图标，实现如下：</p>
<figure class="highlight js"><figcaption><span>clipboard-use.js</span></figcaption><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">&#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;&lt;/button&gt;&#x27;</span>;</span><br><span class="line">    $(<span class="string">&quot;.highlight .code pre&quot;</span>).before(copyHtml);</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">&#x27;.btn-copy&#x27;</span>, &#123;</span><br><span class="line">      target: <span class="function"><span class="keyword">function</span> (<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>这里要注意的是， <code>clipboard-use.js</code> 中需要用到 <code>jQuery</code>，而 inside 里没有引入，故需要手动引入。</p>
<p>复制按钮的样式如下：</p>
<figure class="highlight css"><figcaption><span>clipboard.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="comment">/* 方便 copy 代码按钮（btn-copy）的定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复制按钮可以按照自己的喜好设置，如果想简单一点，直接用我的样式，可以这样配置：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="comment"># inside 主题没有引入 jQuery 框架，需要手动引入</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">//cdnjs.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js</span></span><br><span class="line">  <span class="comment"># 插件生效范围：post 和 page</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">position:</span> [<span class="string">post</span>, <span class="string">page</span>]</span><br><span class="line">    <span class="attr">template:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;</span> <span class="string">src=&quot;//cdn.jsdelivr.net/npm/clipboard@2.0.4/dist/clipboard.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">      <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;</span> <span class="string">src=&quot;//cdn.jsdelivr.net/gh/fiteen/fiteen.github.io@v0.1.0/clipboard-use.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">      <span class="string">&lt;link</span> <span class="string">href=&quot;//cdn.jsdelivr.net/gh/fiteen/fiteen.github.io@v0.1.1/clipboard.css&quot;</span> <span class="string">rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line">      <span class="string">&lt;link</span> <span class="string">href=&quot;lib/font-awesome/css/font-awesome.min.css&quot;</span> <span class="string">rel=&quot;stylesheet&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果已经全局引用过 font-awesome，可以把最后一条引用删除。</p>
<h2 id="评论系统---valine">评论系统 - Valine<a title="#评论系统---valine" href="#评论系统---valine"></a></h2>
<p>主题的内置评论，支持 <a href="https://disqus.com" target="_blank">Disqus</a> 和 <a href="https://livere.com" target="_blank">LiveRe</a>。但个人认为这两款评论系统的 UI 风格主题不是很搭配，最后还是决定采用 <a href="https://valine.js.org" target="_blank">Valine</a>——一款基于 LeanCloud 的快速、简洁且高效的无后端评论系统。</p>
<p>虽然文档中也有提供 Valine 的配置方法，但是我实践后发现样式貌似出现了一些问题，这条 <a href="https://github.com/ikeq/hexo-theme-inside/issues/153" target="_blank">issue</a> 也证实了这一点（<strong>inside-2.6.1 已修复</strong>）。所以我另找了一个 js 文件，并做了一点小改动。你可以引用我放在 CDN 上的资源 <code>https://cdn.jsdelivr.net/gh/fiteen/fiteen.github.io@v0.1.0/valine.js</code>，或者直接把 <code>valine.js</code> 文件<a href="https://github.com/fiteen/fiteen.github.io/releases" target="_blank">下载</a>到本地，放在 <code>inside/source/lib</code>路径下。然后写入以下代码：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="comment"># inside 主题没有引入 jQuery 框架，需要手动引入</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">//cdnjs.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">//cdn.jsdelivr.net/gh/fiteen/fiteen.github.io@v0.1.7/av-min.js</span></span><br><span class="line">  <span class="comment"># 引用本地 source/lib 路径下的 valine.js 文件</span></span><br><span class="line">  <span class="comment"># - lib/valine.js</span></span><br><span class="line">  <span class="comment"># 引用 CDN 上的 valine.js 文件</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">//cdn.jsdelivr.net/gh/fiteen/fiteen.github.io@v0.1.0/valine.js</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">position:</span> <span class="string">comments</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">&lt;div</span> <span class="string">id=&quot;vcomment&quot;&gt;&lt;/div&gt;</span></span><br><span class="line">      <span class="string">&lt;script&gt;</span></span><br><span class="line">        <span class="string">new</span> <span class="string">Valine(&#123;</span></span><br><span class="line">          <span class="attr">el:</span> <span class="string">&#x27;#vcomment&#x27;</span><span class="string">,</span></span><br><span class="line">          <span class="attr">lang:</span> <span class="string">&#x27;en&#x27;</span><span class="string">,</span></span><br><span class="line">          <span class="attr">admin_email:</span> <span class="string">&#x27;Your EMAIL&#x27;</span><span class="string">,</span></span><br><span class="line">          <span class="attr">appId:</span> <span class="string">&#x27;Your APP ID&#x27;</span><span class="string">,</span></span><br><span class="line">          <span class="attr">appKey:</span> <span class="string">&#x27;Your APP KEY&#x27;</span><span class="string">,</span></span><br><span class="line">          <span class="attr">placeholder:</span> <span class="string">&#x27;Write a Comment&#x27;</span><span class="string">,</span></span><br><span class="line">          <span class="string">emoticon_url:&#x27;https://cdn.jsdelivr.net/gh/fiteen/fiteen.github.io@0.1.0/alu&#x27;,</span></span><br><span class="line">          <span class="string">emoticon_list:[&quot;吐.png&quot;,&quot;喷血.png&quot;,&quot;狂汗.png&quot;,&quot;不说话.png&quot;,&quot;汗.png&quot;,&quot;坐等.png&quot;,&quot;献花.png&quot;,&quot;不高兴.png&quot;,&quot;中刀.png&quot;,&quot;害羞.png&quot;,&quot;皱眉.png&quot;,&quot;小眼睛.png&quot;,&quot;中指.png&quot;,&quot;尴尬.png&quot;,&quot;瞅你.png&quot;,&quot;想一想.png&quot;,&quot;中枪.png&quot;,&quot;得意.png&quot;,&quot;肿包.png&quot;,&quot;扇耳光.png&quot;,&quot;亲亲.png&quot;,&quot;惊喜.png&quot;,&quot;脸红.png&quot;,&quot;无所谓.png&quot;,&quot;便便.png&quot;,&quot;愤怒.png&quot;,&quot;蜡烛.png&quot;,&quot;献黄瓜.png&quot;,&quot;内伤.png&quot;,&quot;投降.png&quot;,&quot;观察.png&quot;,&quot;看不见.png&quot;,&quot;击掌.png&quot;,&quot;抠鼻.png&quot;,&quot;邪恶.png&quot;,&quot;看热闹.png&quot;,&quot;口水.png&quot;,&quot;抽烟.png&quot;,&quot;锁眉.png&quot;,&quot;装大款.png&quot;,&quot;吐舌.png&quot;,&quot;无奈.png&quot;,&quot;长草.png&quot;,&quot;赞一个.png&quot;,&quot;呲牙.png&quot;,&quot;无语.png&quot;,&quot;阴暗.png&quot;,&quot;不出所料.png&quot;,&quot;咽气.png&quot;,&quot;期待.png&quot;,&quot;高兴.png&quot;,&quot;吐血倒地.png&quot;,&quot;哭泣.png&quot;,&quot;欢呼.png&quot;,&quot;黑线.png&quot;,&quot;喜极而泣.png&quot;,&quot;喷水.png&quot;,&quot;深思.png&quot;,&quot;鼓掌.png&quot;,&quot;暗地观察.png&quot;],</span></span><br><span class="line">        <span class="string">&#125;)</span></span><br><span class="line">      <span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>关于上面的参数介绍：</p>
<ul>
<li><strong>lang</strong>：选填，目前支持英文版 <code>en</code> 和中文版 <code>zh-cn</code> 两种，默认是 <code>zh-cn</code>。</li>
<li><strong>admin_email</strong>：选填，设置作者邮箱，使用该邮箱账号评论或回复，评论者名字右侧会出现一个人形小图标标识作者。</li>
<li><strong>appId&amp;appKey</strong>：必填，LeanCloud 中创建应用得到的 <code>APP ID</code> 和 <code>APP KEY</code>，创建方式参照<a href="https://ioliu.cn/2017/add-valine-comments-to-your-blog/" target="_blank">此文</a>。</li>
<li><strong>emoticon_url</strong>：必填，这里设置一个表情包 CDN 路径，你也可以自定义喜欢的表情包。</li>
<li><strong>emoticon_list</strong>：必填，<code>emoticon_url</code>里包含的表情包中需要显示在评论区的表情包名称列表。</li>
</ul>
<p><img src="/2020/hexo-theme-inside-plugin/valine-comment-example.png" alt="评论区效果" class="φcx"></p>
<p>这就是配置成功后的评论框效果。</p>
<p>目前已经有 Valine 评论系统的拓展和增强版 <a href="https://github.com/DesertsP/Valine-Admin.git" target="_blank">Valine+Admin</a>，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能，还支持自定义修改邮件通知模板、漏发邮件自动补发等。具体步骤这篇<a href="https://deserts.io/valine-admin-document/" target="_blank">配置手册</a>已经比较清晰了，照着上面的步骤操作即可，本文就不复制粘贴了。</p>
<p><strong>注意</strong>：想要在评论区显示自定义头像，先前往<a href="http://cn.gravatar.com/" target="_blank">Gravatar 官网</a>注册账号，注册的邮箱需要和你评论时填写的邮箱一致。如果注册成功后，头像仍没有显示，不要着急， <code>gravatar.cat.net</code> 有七天的缓存期，请耐心等待。</p>
<h2 id="颜色盘">颜色盘<a title="#颜色盘" href="#颜色盘"></a></h2>
<p>同样是在 <code>_config.yml</code> 的中插入配置代码。</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">//blog.oniuo.com/theme.js</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">//blog.oniuo.com/wc.cc9a2092fece1d80bf3b.js</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">position:</span> <span class="string">sidebar</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">&lt;is-palette2&gt;&lt;/is-palette2&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面再分享几个<strong>小功能点的配置</strong>：</p>
<h2 id="博客背景">博客背景<a title="#博客背景" href="#博客背景"></a></h2>
<p>修改博客背景很简单，只需修改 <code>themes/inside/_config.yml</code> 中 <code>appearance.background</code> 配置即可。</p>
<p>这里分享一个网站——<a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">Subtle Patterns</a>，支持超过 500 种 PNG 高品质免费背景纹理素材，无须注册登录，可以直接下载。</p>
<h2 id="博客字体">博客字体<a title="#博客字体" href="#博客字体"></a></h2>
<p>你可能会发现部署好的博客首次加载时的字体效果生效比较慢，这是因为主题中默认配置的字体样式用的是谷歌的服务：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">appearance:</span></span><br><span class="line">  <span class="attr">font:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">//fonts.googleapis.com/css?family=Baloo+Bhaijaan|Inconsolata|Josefin+Sans|Montserrat</span></span><br></pre></td></tr></table></figure>
<p>如果被墙了就无法正常显示，因此我们可以换一个访问更快的地址，如：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">appearance:</span></span><br><span class="line">  <span class="attr">font:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">//cdn.jsdelivr.net/gh/fiteen/fiteen.github.io@v0.1.0/font.css</span></span><br></pre></td></tr></table></figure>
<h2 id="分享-qq-链接">分享 QQ 链接<a title="#分享-qq-链接" href="#分享-qq-链接"></a></h2>
<p>我们可以在 <code>sns.qq</code> 里配置自己想要链接的 QQ ID 信息，直接写 QQ 号当然是不可行的。需要先开通 <a href="https://shang.qq.com/v3/widget.html" target="_blank">QQ 推广</a>。</p>
<p><img src="/2020/hexo-theme-inside-plugin/qq-link.png" alt class="φcx"></p>
<p><code>&lt;a&gt;</code> 标签里的 <code>href</code> 就是你的 <strong>QQ 号</strong>分享链接，形如：<code>https://wpa.qq.com/msgrd?v=3&amp;uin=$&#123;YOUR-QQ-ID&#125;&amp;site=qq&amp;menu=yes</code>。</p>
<p>如果你要<strong>分享群号</strong>，通过<a href="https://qun.qq.com/join.html" target="_blank">加群组件</a>，拿到形如：<code>https://shang.qq.com/wpa/qunwpa?idkey=$&#123;YOUR-GROUP-ID-KEY&#125;</code> 的链接。</p>
<h2 id="配置-rss">配置 RSS<a title="#配置-rss" href="#配置-rss"></a></h2>
<p>比较简单，<a href="https://blog.oniuo.com/theme-inside/docs/basic#sns" target="_blank">文档</a>中有提到：</p>
<blockquote>
<p>若使用 hexo-generator-feed，sns.feed 可留空，主题会尝试取 hexo.config.feed.path。可通过改变项的先后顺序来自定义排序。</p>
</blockquote>
<p>因此直接在站点根目录（不是主题根目录）下执行命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<h2 id="q-&amp;-a">Q &amp; A<a title="#q-&amp;-a" href="#q-&amp;-a"></a></h2>
<p><strong>问题 1：为什么我按照文档设置了，加了插件设置后，不但没有生效，其它功能还出了问题或者工程都跑不起来了？</strong></p>
<ol>
<li>检查一下配置代码的空格，yml 文件对代码格式的要求比较严格。</li>
<li>检查是否重复添加了 <code>plugins:</code>，添加多个插件也只需要声明一次。</li>
</ol>
<p><strong>问题 2：能否出一个小白教程？</strong></p>
<p>可以在评论区描述你的问题，我会抽空整理到一起，补充在博客中。</p>
<p><strong>问题 3：我希望博客可以支持某某功能，但是不知道该怎么做，能否帮忙实现一下？</strong></p>
<p>可以提 <a href="https://github.com/fiteen/fiteen.github.io/issues" target="_blank">issue</a> 给我。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>深度理解 NSURLProtocol</title>
    <url>/2020/hijacking-webview-request-with-nsprotocol/</url>
    <content><![CDATA[<blockquote>
<p>NSURLProtocol is both the most obscure and the most powerful part of the URL Loading System.</p>
<p style="text-align:right">——Mattt Thompson</p>
</blockquote>
<a id="more"></a>
<h2 id="nsurlprotocol-是什么">NSURLProtocol 是什么<a title="#nsurlprotocol-是什么" href="#nsurlprotocol-是什么"></a></h2>
<p>NSURLProtocol 是 Foundation 框架中 <a href="https://developer.apple.com/documentation/foundation/url_loading_system?language=objc" target="_blank">URL Loading System</a> 的一部分。它可以让开发者可以在不修改应用内原始请求代码的情况下，去改变 URL 加载的全部细节。换句话说，NSURLProtocol 是一个被 Apple 默许的中间人攻击。</p>
<p>虽然 NSURLProtocol 叫“Protocol”，却不是协议，而是一个抽象类。</p>
<p>既然 NSURLProtocol 是一个抽象类，说明它无法被实例化，那么它又是如何实现网络请求拦截的？</p>
<p>答案就是通过<strong>子类化</strong>来定义新的或是已经存在的 URL 加载行为。如果当前的网络请求是可以被拦截的，那么开发者只需要将一个自定义的 NSURLProtocol 子类注册到 App 中，在这个子类中就可以拦截到所有请求并进行修改。</p>
<p>那么到底哪些网络请求可以被拦截？</p>
<h2 id="nsurlprotocol-使用场景">NSURLProtocol 使用场景<a title="#nsurlprotocol-使用场景" href="#nsurlprotocol-使用场景"></a></h2>
<p>前面已经说了，NSURLProtocol 是 URL Loading System 的一部分，所以它可以拦截所有基于 URL Loading System 的网络请求：</p>
<ul>
<li>NSURLSession</li>
<li>NSURLConnection</li>
<li>NSURLDownload</li>
<li>NSURLResponse</li>
<li>NSHTTPURLResponse</li>
<li>NSURLRequest</li>
<li>NSMutableURLRequest</li>
</ul>
<p>相应的，基于它们实现的第三方网络框架 <a href="https://github.com/AFNetworking/AFNetworking" target="_blank">AFNetworking</a> 和 <a href="https://github.com/Alamofire/Alamofire" target="_blank">Alamofire</a> 的网络请求，也可以被 NSURLProtocol 拦截到。</p>
<p>但早些年基于 CFNetwork 实现的，比如 <a href="https://github.com/pokeb/asi-http-request" target="_blank">ASIHTTPRequest</a>，其网络请求就无法被拦截。</p>
<p>另外，<strong>UIWebView 也是可以被 NSURLProtocol 拦截的，但 WKWebView 不可以。</strong>（因为 WKWebView 是基于 WebKit，并不走 C socket。）</p>
<p>因此，在实际应用中，它的功能十分强大，比如：</p>
<ul>
<li>重定向网络请求，解决 DNS 域名劫持的问题</li>
<li>进行全局或局部的网络请求设置，比如修改请求地址、header 等</li>
<li>忽略网络请求，使用 H5 离线包或是缓存数据等</li>
<li>自定义网络请求的返回结果，比如过滤敏感信息</li>
</ul>
<p>下面来看一下 NSURLProtocol 的相关方法。</p>
<h2 id="nsurlprotocol-的相关方法">NSURLProtocol 的相关方法<a title="#nsurlprotocol-的相关方法" href="#nsurlprotocol-的相关方法"></a></h2>
<h3 id="创建协议对象">创建协议对象<a title="#创建协议对象" href="#创建协议对象"></a></h3>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 URL 协议实例来处理 request 请求</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithRequest:(<span class="built_in">NSURLRequest</span> *)request cachedResponse:(<span class="built_in">NSCachedURLResponse</span> *)cachedResponse client:(<span class="keyword">id</span>&lt;<span class="built_in">NSURLProtocolClient</span>&gt;)client;</span><br><span class="line"><span class="comment">// 创建一个 URL 协议实例来处理 session task 请求</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithTask:(<span class="built_in">NSURLSessionTask</span> *)task cachedResponse:(<span class="built_in">NSCachedURLResponse</span> *)cachedResponse client:(<span class="keyword">id</span>&lt;<span class="built_in">NSURLProtocolClient</span>&gt;)client;</span><br></pre></td></tr></table></figure>
<h3 id="注册和注销协议类">注册和注销协议类<a title="#注册和注销协议类" href="#注册和注销协议类"></a></h3>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尝试注册 NSURLProtocol 的子类，使之在 URL 加载系统中可见</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)registerClass:(Class)protocolClass;</span><br><span class="line"><span class="comment">// 注销 NSURLProtocol 的指定子类</span></span><br><span class="line">+ (<span class="keyword">void</span>)unregisterClass:(Class)protocolClass;</span><br></pre></td></tr></table></figure>
<h3 id="确定子类是否可以处理请求">确定子类是否可以处理请求<a title="#确定子类是否可以处理请求" href="#确定子类是否可以处理请求"></a></h3>
<p>子类化 NSProtocol 的首要任务就是告知它，需要控制什么类型的网络请求。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 确定协议子类是否可以处理指定的 request 请求，如果返回 YES，请求会被其控制，返回 NO 则直接跳入下一个 protocol</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line"><span class="comment">// 确定协议子类是否可以处理指定的 task 请求</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)canInitWithTask:(<span class="built_in">NSURLSessionTask</span> *)task;</span><br></pre></td></tr></table></figure>
<h3 id="获取和设置请求属性">获取和设置请求属性<a title="#获取和设置请求属性" href="#获取和设置请求属性"></a></h3>
<p>NSURLProtocol 允许开发者去获取、添加、删除 request 对象的任意元数据。这几个方法常用来处理请求无限循环的问题。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在指定的请求中获取与指定键关联的属性</span></span><br><span class="line">+ (<span class="keyword">id</span>)propertyForKey:(<span class="built_in">NSString</span> *)key inRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line"><span class="comment">// 设置与指定请求中的指定键关联的属性</span></span><br><span class="line">+ (<span class="keyword">void</span>)setProperty:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key inRequest:(<span class="built_in">NSMutableURLRequest</span> *)request;</span><br><span class="line"><span class="comment">// 删除与指定请求中的指定键关联的属性</span></span><br><span class="line">+ (<span class="keyword">void</span>)removePropertyForKey:(<span class="built_in">NSString</span> *)key inRequest:(<span class="built_in">NSMutableURLRequest</span> *)request;</span><br></pre></td></tr></table></figure>
<h3 id="提供请求的规范版本">提供请求的规范版本<a title="#提供请求的规范版本" href="#提供请求的规范版本"></a></h3>
<p>如果你想要用特定的某个方式来修改请求，可以用下面这个方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回指定请求的规范版本</span></span><br><span class="line">+ (<span class="built_in">NSURLRequest</span> *)canonicalRequestForRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br></pre></td></tr></table></figure>
<h3 id="确定请求是否相同">确定请求是否相同<a title="#确定请求是否相同" href="#确定请求是否相同"></a></h3>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断两个请求是否相同，如果相同可以使用缓存数据，通常只需要调用父类的实现</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)requestIsCacheEquivalent:(<span class="built_in">NSURLRequest</span> *)a toRequest:(<span class="built_in">NSURLRequest</span> *)b;</span><br></pre></td></tr></table></figure>
<h3 id="启动和停止加载">启动和停止加载<a title="#启动和停止加载" href="#启动和停止加载"></a></h3>
<p>这是子类中最重要的两个方法，不同的自定义子类在调用这两个方法时会传入不同的内容，但共同点都是围绕 protocol 客户端进行操作。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始加载</span></span><br><span class="line">- (<span class="keyword">void</span>)startLoading;</span><br><span class="line"><span class="comment">// 停止加载</span></span><br><span class="line">- (<span class="keyword">void</span>)stopLoading;</span><br></pre></td></tr></table></figure>
<h3 id="获取协议属性">获取协议属性<a title="#获取协议属性" href="#获取协议属性"></a></h3>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取协议接收者的缓存</span></span><br><span class="line">- (<span class="built_in">NSCachedURLResponse</span> *)cachedResponse;</span><br><span class="line"><span class="comment">// 接受者用来与 URL 加载系统通信的对象，每个 NSProtocol 的子类实例都拥有它</span></span><br><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">NSURLProtocolClient</span>&gt;)client;</span><br><span class="line"><span class="comment">// 接收方的请求</span></span><br><span class="line">- (<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line"><span class="comment">// 接收方的任务</span></span><br><span class="line">- (<span class="built_in">NSURLSessionTask</span> *)task;</span><br></pre></td></tr></table></figure>
<p>NSURLProtocol 在实际应用中，主要是完成两步：拦截 URL 和 URL 转发。先来看如何拦截网络请求。</p>
<h2 id="如何利用-nsprotocol-拦截网络请求">如何利用 NSProtocol 拦截网络请求<a title="#如何利用-nsprotocol-拦截网络请求" href="#如何利用-nsprotocol-拦截网络请求"></a></h2>
<h3 id="创建-nsurlprotocol-子类">创建 NSURLProtocol 子类<a title="#创建-nsurlprotocol-子类" href="#创建-nsurlprotocol-子类"></a></h3>
<p>这里创建一个名为 <code>HTCustomURLProtocol</code> 的子类。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HTCustomURLProtocol</span> : <span class="title">NSURLProtocol</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="注册-nsurlprotocol-的子类">注册 NSURLProtocol 的子类<a title="#注册-nsurlprotocol-的子类" href="#注册-nsurlprotocol-的子类"></a></h3>
<p>在合适的位置注册这个子类。对基于 NSURLConnection 或者使用 <code>[NSURLSession sharedSession]</code> 初始化对象创建的网络请求，调用 <code>registerClass</code> 方法即可。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">NSURLProtocol</span> registerClass:[<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;HTCustomURLProtocol&quot;</span>) <span class="keyword">class</span>]];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// [NSURLProtocol registerClass:[HTCustomURLProtocol class]]; </span></span><br></pre></td></tr></table></figure>
<p>如果需要全局监听，可以设置在 <code>AppDelegate.m</code> 的 <code>didFinishLaunchingWithOptions</code> 方法中。如果只需要在单个 UIViewController 中使用，记得在合适的时机注销监听：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">NSURLProtocol</span> unregisterClass:[<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;HTCustomURLProtocol&quot;</span>) <span class="keyword">class</span>]];</span><br></pre></td></tr></table></figure>
<p>如果是基于 NSURLSession 的网络请求，且不是通过 <code>[NSURLSession sharedSession]</code> 方式创建的，就得配置 NSURLSessionConfiguration 对象的 <code>protocolClasses</code> 属性。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *sessionConfiguration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">sessionConfiguration.protocolClasses = @[[<span class="built_in">NSClassFromString</span>(<span class="string">@&quot;HTCustomURLProtocol&quot;</span>) <span class="keyword">class</span>]];</span><br></pre></td></tr></table></figure>
<h3 id="实现-nsurlprotocol-子类">实现 NSURLProtocol 子类<a title="#实现-nsurlprotocol-子类" href="#实现-nsurlprotocol-子类"></a></h3>
<p>实现子类分为五个步骤：</p>
<blockquote>
<p>注册 → 拦截 → 转发 → 回调 → 结束</p>
</blockquote>
<p>以拦截 UIWebView 为例，这里需要重写父类的这五个核心方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个协议 key</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> HTCustomURLProtocolHandledKey = <span class="string">@&quot;HTCustomURLProtocolHandledKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在拓展中定义一个 NSURLConnection 属性。通过 NSURLSession 也可以拦截，这里只是以 NSURLConnection 为例。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLConnection</span> *connection;</span><br><span class="line"><span class="comment">// 定义一个可变的请求返回值，</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableData</span> *responseData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 1：在拦截到网络请求后会调用这一方法，可以再次处理拦截的逻辑，比如设置只针对 http 和 https 的请求进行处理。</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</span><br><span class="line">    <span class="comment">// 只处理 http 和 https 请求</span></span><br><span class="line">    <span class="built_in">NSString</span> *scheme = [[request URL] scheme];</span><br><span class="line">    <span class="keyword">if</span> ( ([scheme caseInsensitiveCompare:<span class="string">@&quot;http&quot;</span>] == <span class="built_in">NSOrderedSame</span> ||</span><br><span class="line">          [scheme caseInsensitiveCompare:<span class="string">@&quot;https&quot;</span>] == <span class="built_in">NSOrderedSame</span>)) &#123;</span><br><span class="line">        <span class="comment">// 看看是否已经处理过了，防止无限循环</span></span><br><span class="line">        <span class="keyword">if</span> ([<span class="built_in">NSURLProtocol</span> propertyForKey:HTCustomURLProtocolHandledKey inRequest:request]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果还需要截取 DNS 解析请求中的链接，可以继续加判断，是否为拦截域名请求的链接，如果是返回 NO</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 2：【关键方法】可以在此对 request 进行处理，比如修改地址、提取请求信息、设置请求头等。</span></span><br><span class="line">+ (<span class="built_in">NSURLRequest</span> *) canonicalRequestForRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</span><br><span class="line">    <span class="comment">// 可以打印出所有的请求链接包括 CSS 和 Ajax 请求等</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;request.URL.absoluteString = %@&quot;</span>,request.URL.absoluteString);</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [request mutableCopy];</span><br><span class="line">    <span class="keyword">return</span> mutableRequest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 3：【关键方法】在这里设置网络代理，重新创建一个对象将处理过的 request 转发出去。这里对应的回调方法对应 &lt;NSURLProtocolClient&gt; 协议方法</span></span><br><span class="line">- (<span class="keyword">void</span>)startLoading &#123;</span><br><span class="line">    <span class="comment">// 可以修改 request 请求</span></span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [[<span class="keyword">self</span> request] mutableCopy];</span><br><span class="line">    <span class="comment">// 打 tag，防止递归调用</span></span><br><span class="line">    [<span class="built_in">NSURLProtocol</span> setProperty:@YES forKey:HTCustomURLProtocolHandledKey inRequest:mutableRequest];</span><br><span class="line">    <span class="comment">// 也可以在这里检查缓存</span></span><br><span class="line">    <span class="comment">// 将 request 转发，对于 NSURLConnection 来说，就是创建一个 NSURLConnection 对象；对于 NSURLSession 来说，就是发起一个 NSURLSessionTask。</span></span><br><span class="line">    <span class="keyword">self</span>.connection = [<span class="built_in">NSURLConnection</span> connectionWithRequest:mutableRequest delegate:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 4：主要判断两个 request 是否相同，如果相同的话可以使用缓存数据，通常只需要调用父类的实现。</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)requestIsCacheEquivalent:(<span class="built_in">NSURLRequest</span> *)a toRequest:(<span class="built_in">NSURLRequest</span> *)b &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> requestIsCacheEquivalent:a toRequest:b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 5：处理结束后停止相应请求，清空 connection 或 session</span></span><br><span class="line">- (<span class="keyword">void</span>)stopLoading &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.connection != <span class="literal">nil</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.connection cancel];</span><br><span class="line">        <span class="keyword">self</span>.connection = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照在上面的方法中做的自定义需求，看情况对转发出来的请求在恰当的时机进行回调处理。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark- NSURLConnectionDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didFailWithError:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didFailWithError:error];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - NSURLConnectionDataDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当接收到服务器的响应（连通了服务器）时会调用</span></span><br><span class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response &#123;</span><br><span class="line">    <span class="keyword">self</span>.responseData = [[<span class="built_in">NSMutableData</span> alloc] init];</span><br><span class="line">    <span class="comment">// 可以处理不同的 statusCode 场景</span></span><br><span class="line">    <span class="comment">// NSInteger statusCode = [(NSHTTPURLResponse *)response statusCode];</span></span><br><span class="line">    <span class="comment">// 可以设置 Cookie</span></span><br><span class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didReceiveResponse:response cacheStoragePolicy:<span class="built_in">NSURLCacheStorageNotAllowed</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到服务器的数据时会调用，可能会被调用多次，每次只传递部分数据</span></span><br><span class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didReceiveData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    [<span class="keyword">self</span>.responseData appendData:data];</span><br><span class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didLoadData:data];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器的数据加载完毕后调用</span></span><br><span class="line">- (<span class="keyword">void</span>)connectionDidFinishLoading:(<span class="built_in">NSURLConnection</span> *)connection &#123;</span><br><span class="line">    [<span class="keyword">self</span>.client URLProtocolDidFinishLoading:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求错误（失败）的时候调用，比如出现请求超时、断网，一般指客户端错误</span></span><br><span class="line">- (<span class="keyword">void</span>)connection:(<span class="built_in">NSURLConnection</span> *)connection didFailWithError:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didFailWithError:error];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面用到的一些 NSURLProtocolClient 方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSURLProtocolClient</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="comment">// 请求重定向</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocol:(<span class="built_in">NSURLProtocol</span> *)protocol wasRedirectedToRequest:(<span class="built_in">NSURLRequest</span> *)request redirectResponse:(<span class="built_in">NSURLResponse</span> *)redirectResponse;</span><br><span class="line"><span class="comment">// 响应缓存是否合法</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocol:(<span class="built_in">NSURLProtocol</span> *)protocol cachedResponseIsValid:(<span class="built_in">NSCachedURLResponse</span> *)cachedResponse;</span><br><span class="line"><span class="comment">// 刚接收到 response 信息</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocol:(<span class="built_in">NSURLProtocol</span> *)protocol didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response cacheStoragePolicy:(<span class="built_in">NSURLCacheStoragePolicy</span>)policy;</span><br><span class="line"><span class="comment">// 数据加载成功</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocol:(<span class="built_in">NSURLProtocol</span> *)protocol didLoadData:(<span class="built_in">NSData</span> *)data;</span><br><span class="line"><span class="comment">// 数据完成加载</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocolDidFinishLoading:(<span class="built_in">NSURLProtocol</span> *)protocol;</span><br><span class="line"><span class="comment">// 数据加载失败</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocol:(<span class="built_in">NSURLProtocol</span> *)protocol didFailWithError:(<span class="built_in">NSError</span> *)error;</span><br><span class="line"><span class="comment">// 为指定的请求启动验证</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocol:(<span class="built_in">NSURLProtocol</span> *)protocol didReceiveAuthenticationChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge;</span><br><span class="line"><span class="comment">// 为指定的请求取消验证</span></span><br><span class="line">- (<span class="keyword">void</span>)URLProtocol:(<span class="built_in">NSURLProtocol</span> *)protocol didCancelAuthenticationChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="补充内容">补充内容<a title="#补充内容" href="#补充内容"></a></h2>
<h3 id="使用-nsurlsession-时的注意事项">使用 NSURLSession 时的注意事项<a title="#使用-nsurlsession-时的注意事项" href="#使用-nsurlsession-时的注意事项"></a></h3>
<p>如果在 NSURLProtocol 中使用 NSURLSession，需要注意：</p>
<ul>
<li>拦截到的 request 请求的 HTTPBody 为 nil，但可以借助 HTTPBodyStream 来获取 body；</li>
<li>如果要用 <code>registerClass</code> 注册，只能通过 <code>[NSURLSession sharedSession]</code> 的方式创建网络请求。</li>
</ul>
<h3 id="注册多个-nsurlprotocol-子类">注册多个 NSURLProtocol 子类<a title="#注册多个-nsurlprotocol-子类" href="#注册多个-nsurlprotocol-子类"></a></h3>
<p>当有多个自定义 NSURLProtocol 子类注册到系统中的话，会按照他们注册的反向顺序依次调用 URL 加载流程，也就是最后注册的 NSURLProtocol 会被优先判断。</p>
<p>对于通过配置 NSURLSessionConfiguration 对象的 <code>protocolClasses</code> 属性来注册的情况，<code>protocolClasses</code> 数组中只有第一个 NSURLProtocol 会起作用，后续的 NSURLProtocol 就无法拦截到了。</p>
<p>所以 <a href="https://github.com/AliSoftware/OHHTTPStubs" target="_blank">OHHTTPStubs</a> 在注册 NSURLProtocol 子类的时候是这样处理的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)setEnabled:(<span class="built_in">BOOL</span>)enable forSessionConfiguration:(<span class="built_in">NSURLSessionConfiguration</span>*)sessionConfig</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Runtime check to make sure the API is available on this version</span></span><br><span class="line">    <span class="keyword">if</span> ([sessionConfig respondsToSelector:<span class="keyword">@selector</span>(protocolClasses)]</span><br><span class="line">        &amp;&amp; [sessionConfig respondsToSelector:<span class="keyword">@selector</span>(setProtocolClasses:)])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> * urlProtocolClasses = [<span class="built_in">NSMutableArray</span> arrayWithArray:sessionConfig.protocolClasses];</span><br><span class="line">        Class protoCls = HTTPStubsProtocol.class;</span><br><span class="line">        <span class="keyword">if</span> (enable &amp;&amp; ![urlProtocolClasses containsObject:protoCls])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将自己的 NSURLProtocol 插入到 protocolClasses 的第一个，进行拦截</span></span><br><span class="line">            [urlProtocolClasses insertObject:protoCls atIndex:<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!enable &amp;&amp; [urlProtocolClasses containsObject:protoCls])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 拦截完成后移除</span></span><br><span class="line">            [urlProtocolClasses removeObject:protoCls];</span><br><span class="line">        &#125;</span><br><span class="line">        sessionConfig.protocolClasses = urlProtocolClasses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;[OHHTTPStubs] %@ is only available when running on iOS7+/OSX9+. &quot;</span></span><br><span class="line">              <span class="string">@&quot;Use conditions like &#x27;if ([NSURLSessionConfiguration class])&#x27; to only call &quot;</span></span><br><span class="line">              <span class="string">@&quot;this method if the user is running iOS7+/OSX9+.&quot;</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何拦截-wkwebview">如何拦截 WKWebView<a title="#如何拦截-wkwebview" href="#如何拦截-wkwebview"></a></h3>
<p>虽然 NSURLProtocol 无法直接拦截 WKWebView，但其实还是有解决方案的。就是使用 <code>WKBrowsingContextController</code> 和 <code>registerSchemeForCustomProtocol</code>。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册 scheme</span></span><br><span class="line">Class cls = <span class="built_in">NSClassFromString</span>(<span class="string">@&quot;WKBrowsingContextController&quot;</span>);</span><br><span class="line">SEL sel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@&quot;registerSchemeForCustomProtocol:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ([cls respondsToSelector:sel]) &#123;</span><br><span class="line">    <span class="comment">// 通过 http 和 https 的请求，同理可通过其他的 Scheme 但是要满足 URL Loading System</span></span><br><span class="line">    [cls performSelector:sel withObject:<span class="string">@&quot;http&quot;</span>];</span><br><span class="line">    [cls performSelector:sel withObject:<span class="string">@&quot;https&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但由于这涉及到了私有方法，直接引用无法过苹果的机审，所以使用的时候需要对字符串做下处理，比如对方法名进行算法加密处理等，实测也是可以通过审核的。</p>
<p>总之，NSURLProtocol 非常强大，无论是优化 App 的性能，还是拓展功能，都具有很强的可塑空间，但在使用的同时，又要多关注它带来的问题。尽管它在很多框架或者知名项目中都已经得以应用，其奥义依然值得开发者们去深入研究。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>NSURLProtocol</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提升 Flutter 项目的开发效率</title>
    <url>/2019/how-to-develop-flutter-projects-more-efficiently/</url>
    <content><![CDATA[<p>最近参与了一个 Flutter 项目的开发，总结了一些提升开发效率的工具和方法。</p>
<a id="more"></a>
<h2 id="ui-可视化工具">UI 可视化工具<a title="#ui-可视化工具" href="#ui-可视化工具"></a></h2>
<p>纯客户端开发者一开始可能会对写 Flutter 的界面布局会不太适应，那么这个 <a href="https://flutterstudio.app" target="_blank">https://flutterstudio.app</a> 网站可以帮助你更快熟悉 Flutter 的常用组件，在这个工具上，你可以通过简单的拖拽直接实现布局。</p>
<p><img src="/2019/how-to-develop-flutter-projects-more-efficiently/flutterstudio.png" alt="flutterstudio 网站" class="φcx"></p>
<h2 id="代码模版">代码模版<a title="#代码模版" href="#代码模版"></a></h2>
<p>我们发现在开发时，IDE 自带的代码快捷提示都不太丰富，比如要创建一个包含所有生命周期相关方法的完整的 StatefulWidget，如果能一键导入就能快速很多，这时候就可以借助代码模版。我事先在网上找到一份比较全面的模版，有需要的可以参考 <a href="https://github.com/AweiLoveAndroid/Flutter-learning/blob/master/code_plugins/no_new_keywords/dart.json" target="_blank">code plugins</a>，有时间我会按照自己习惯的风格再整理一份。</p>
<p>如果你使用的是 <strong>VSCode</strong>，打开路径：</p>
<blockquote>
<p>View → Command Palette… → 输入 &gt;Preferences: Configure User Snippets</p>
</blockquote>
<p><img src="/2019/how-to-develop-flutter-projects-more-efficiently/configure-user-snippets.png" alt="VSCode 上配置代码模版" class="φcx"></p>
<p>然后输入 <code>dart</code>，这时会打开一个 <code>dart.json</code> 文件，把上面的内容替换进来即可。</p>
<p>如果你使用的是 <strong>Android Studio</strong>，依次打开路径：</p>
<blockquote>
<p>Preferences → Editor → File and Code Templates</p>
</blockquote>
<p>在 <code>Files</code> 下找到 <code>Dart File</code>,将 json 文件里的内容粘贴进去即可。</p>
<p><img src="/2019/how-to-develop-flutter-projects-more-efficiently/file-and-code-templates.png" alt="Android Studio 上配置代码模版" class="φcx"></p>
<p>这样我们只需要输入简单的前缀就能直接联想出整个代码块了。</p>
<h2 id="布局调试">布局调试<a title="#布局调试" href="#布局调试"></a></h2>
<p>在实现 UI 模块的时候，经常会出现布局错乱的情况，VSCode 也为此提供了界面调试工具，在 Flutter App <strong>调试</strong>过程中，打开路径：</p>
<blockquote>
<p>View → Command Palette… → 输入 &gt;Flutter: Toggle Debug Painting</p>
</blockquote>
<p><img src="/2019/how-to-develop-flutter-projects-more-efficiently/toggle-debug-painting.png" alt="布局调试" class="φcx"></p>
<p>上面的辅助线可以帮助开发者检查布局。</p>
<blockquote>
<p>注意：通过 <code>flutter run</code> 方式启动的模拟器/真机是没法开启布局调试的。</p>
</blockquote>
<p>不过如果遇到难以定位的问题，建议还是使用 Androidio Studio 进行调试，它提供了下面这两个可视化工具：</p>
<p><a href="https://flutterchina.club/inspector/" target="_blank"><strong>Flutter Inspector</strong></a></p>
<ul>
<li>理解和查看现有布局</li>
<li>诊断布局的问题</li>
</ul>
<p><strong>Flutter Outline</strong></p>
<ul>
<li>视图预览</li>
<li>调整 widget</li>
</ul>
<p><img src="/2019/how-to-develop-flutter-projects-more-efficiently/flutter-outline-inspector.png" alt="Flutter Outline 和 Flutter Inspector" class="φcx"></p>
<h2 id="巧用快捷键">巧用快捷键<a title="#巧用快捷键" href="#巧用快捷键"></a></h2>
<p>借助 IDE 中的快捷键也是我们提高开发效率的关键之一。以 Android Studio 为例：</p>
<ul>
<li>option+enter：对 widget 进行特定的操作</li>
</ul>
<p><img src="/2019/how-to-develop-flutter-projects-more-efficiently/option+enter.png" alt="快速修改布局" class="φcx"></p>
<ul>
<li>
<p>command+option+L：格式化代码，同时，也建议你在方法尾部尽量加逗号，这有助于自动格式化程序为 Flutter 样式代码插入适当的换行符</p>
</li>
<li>
<p>control+option+O：一键清除多余的 imports</p>
</li>
</ul>
<h2 id="常用插件">常用插件<a title="#常用插件" href="#常用插件"></a></h2>
<p>常用的插件基本上都可以在<a href="https://pub.dartlang.org" target="_blank">Dart 开源包的网站</a>里找到，选用合适的 package 可以帮你节省不少重复实现的时间。网上的 Coder 朋友们也总结了很多不错的插件，本文里就不一一记录了。</p>
]]></content>
      <categories>
        <category>跨端</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>海外开发者账号上架总结</title>
    <url>/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/</url>
    <content><![CDATA[<blockquote>
<p>⚠️⚠️⚠️ <strong>声明：本文仅供技术交流，勿企图上架违法 App，否则后果自负，谢谢！</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="背景">背景<a title="#背景" href="#背景"></a></h2>
<p>众所周知，国内的 App 上架形势愈发严峻。尤其是金融、医疗、博彩类的 App，审核非常严格，只要开发者缺少相关资质，想通过正常流程上架基本不可能；游戏方面，新政策又要求游戏版号需要广电审批，向大批游戏公司泼了一盆冷水；随着苹果机审算法的优化，苹果爸爸可以不费人力轻松看穿你的马甲包；甚至一些不存在任何违反审核规则的应用，也有可能因为开发者账号是新号被审核人员怀疑。</p>
<p><img src="/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/four-major-tortures.png" alt="拒审四大酷刑" class="φcx"></p>
<p>相信不少开发者对上面的“四大酷刑”都不陌生，最怕苹果爸爸深夜邮件的关心，最怕上包率要写上 kpi。</p>
<p><img src="/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/low-kpi.png" alt class="φcx"></p>
<p>于是，为了很多开发者将目光抛向企业包，但是企业包成本来说比较高，根据企业签的稳定性，收费从每月几百到几千不等，遇到苹果封号密集的时期，甚至会出现每日掉签的情况。一个独立的企业签名，稳定周期基本也只能保持在 2-3 个月左右。因此企业包的方案仅适用于一些不受限于用户留存的 App，想要一款稳定运营的 App，依然需要上架 AppStore，下面介绍的就是使用海外开发者账号上架的方案。</p>
<h2 id="如何申请账号">如何申请账号<a title="#如何申请账号" href="#如何申请账号"></a></h2>
<p>海外个人账号的申请方式和国内的大同小异：</p>
<ul>
<li>外国人身份证信息</li>
<li>国外地区的信用卡一张</li>
<li>国外的联系方式（手机号码）</li>
<li>海外邮箱（gmail、hotmail、Yeah 等邮箱均可）</li>
</ul>
<p>申请时候记得挂海外 VPN，且在后续登录开发者中心时也是用这个 IP，频繁更换 IP 尤其是用国内的很容易被封。</p>
<p>如果没有渠道获得海外个人开发者的身份信息，可以直接找第三方（某宝）购买，大约 1100 元人民币，对方会告知你最近哪个地区的账号比较容易上架。</p>
<blockquote>
<p>注意：现在使用开发者账号都强制要求进行双重验证，用自己国内的手机号是没问题的。</p>
</blockquote>
<p>如果你的应用涉及到内购，需要关注一下账户所属国家。因为一些国家（美国，加拿大，澳大利亚）需要去税务局报税，没法用内购，其他国家是可以正常收款的。建议使用招行的储蓄卡，其次是建行的。满 $150 以后苹果就会汇款给你。</p>
<p>还有一个非常值得注意的问题——<strong>如何避免被封号</strong>：</p>
<ul>
<li>登录开发者账号时关闭你的 Mac/iPhone 上的 iCloud 功能和系统定位服务</li>
<li>使用海外区域的 VPN，勤换 IP</li>
<li>最好不要在同一台电脑，同一个 IP 登录多个开发者账号</li>
</ul>
<h2 id="app-设计">App 设计<a title="#app-设计" href="#app-设计"></a></h2>
<h3 id="主题">主题<a title="#主题" href="#主题"></a></h3>
<p>App 设计的方案很简单，就是“挂羊头卖狗肉”，你需要先设计一个对审核人员显示的壳，它要符合苹果爸爸心中“核心价值”的主题，尽量避讳直接表现一些敏感功能（如支付、教育、用户隐私权限等）。以下主题可供参考:</p>
<ul>
<li>记录类（记账（不太推荐，市面上用得比较多，容易被怀疑）、行程/心情/车票/电影票记录等）</li>
<li>提醒类（备忘录、提醒事项、番茄 ToDo）</li>
<li>创意类（发挥你的 idea 做一些小工具之类）</li>
</ul>
<p>这些主题的特点就是可以做成单机类，但如果不得不涉及到网络请求数据，最好搞一台国外的服务器，不容易引起怀疑。</p>
<p>如果你的 App 不可避免地要涉及要一些权限，比如联网、推送、通讯录、麦克风、相册、相机、定位、运动与健身等，需要将权限自然地设计进去。</p>
<h3 id="ui">UI<a title="#ui" href="#ui"></a></h3>
<p>相比于主题来说，UI 的优劣可能更能影响审核人员的判断。千万不要认为只是一个壳而粗制滥造，优美的视觉真的可以在很大程度上帮助你过审。</p>
<p><img src="/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/amazon-app.png" alt="亚马逊 App - 中美国版对比" class="φcx"></p>
<p>如上所示，海外 App 的风格和国内还是有比较大的差异，相对更简约，且海外 App 更看重动效的丰富性，如果你的 App 能令审核人员得到视觉上的愉悦感，就成功了一半。</p>
<h3 id="语言">语言<a title="#语言" href="#语言"></a></h3>
<p>App 语言的选择需要得到重视，大部分情况下选择英文是没问题的，毕竟是全球通用的语言，但也要考虑上架地区的母语。我在第一次提审海外版 App 时就犯了一个错误，我将 App 语言设定为英文，为了避开中国审核，将面向上架地区时指定了墨西哥，结果收到了苹果的拒审邮件，他认定 App 违反了 Guideline 1.1.6，即存在虚假内容。为了不露馅，我通过找了在国外的朋友与苹果电话沟通，费了一番周折才确定原因在于“墨西哥的母语是西班牙语”。</p>
<p><img src="/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/mexico-speaks-spanish.png" alt class="φcx"></p>
<p>由于 App 上架后是要面向国内推广的，基本上都要做国际化（例如 App 名称、权限文案等），这一步建议在顺利过审 2 个版本后再加入。</p>
<h2 id="app-上架与迭代">App 上架与迭代<a title="#app-上架与迭代" href="#app-上架与迭代"></a></h2>
<p>前面做的一切准备当然只是为了让我们想要的 App 上架，因为选择合适的时机做审核切换是非常关键的。假如你的 App 本身包体积比较大，千万不要在某一次迭代中一次性加入所有代码，容易引起审核人员的怀疑。在 App 稳定更新 2～3 次后（这里的稳定指的是审核速度较快，一次通过，未卡审），你可以在 App 中加入审核开关，这个开关可以在接口里检测 ip 所属地。但假如是单机类的壳，用网络请求来判断就会很明显，这里也推荐了一种方案——借助<strong>时间戳延迟打开开关</strong>。</p>
<p>根据前几次的审核经验，设定一个保险的时间节点，在那个时间点打开审核开关请求，尽量确保苹果在审核时候拦截不到任何可疑内容。同时为了防止苹果复审发现问题，可以再加一层判断，就是本地语言。因为国外工作人员的测试机基本上不会将中文设为默认语言，因此如下图所示，只要满足国内 IP+默认中文两个条件的，才允许打开切换开关。</p>
<p><img src="/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/audit-switch.png" alt class="φcx"></p>
<hr>
<p>以上就是我海外版 App 上架的经验，欢迎给我 E-mail 留言交流，最后祝大家都过包顺利！</p>
<p><img src="/2019/how-to-use-an-overseas-developer-account-to-launch-an-ios-app/talisman.png" alt class="φcx"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>上架审核</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 自动布局进阶之巧用 IBInspectable 和 IB_DESIGNABLE</title>
    <url>/2017/how-to-use-ib-inspectable-and-ib-designable/</url>
    <content><![CDATA[<p>交互设计和 UI 设计水准很大程度影响着用户对应用的评价，iOS 开发发展至今已逾 10 年，开发者对于界面 UI 编码的习惯逐渐分化成三大流派：</p>
<a id="more"></a>
<ul>
<li>code - 易追踪、可复用、便于版本控制，但不直观</li>
<li>xib - 简单便捷、直观、一一对应，但易冲突</li>
<li>storyboard - 逻辑清晰、简单易用、直观高效，虽易冲突、复用性不佳，但仍是未来趋势</li>
</ul>
<p>xib 和 storyboard 均采用了 Interface Builder（IB）来生成 GUI，通过面板上简单的拖拽替代繁琐冗余的 code 来构建页面。但我们经常发现，既有的功能并不能完全满足布局的需要，那么，我们可以通过在特定的位置定义可视化属性 <code>IBInspectable</code>、定义宏 <code>IB_DESIGNABLE</code> 来精简代码。</p>
<p>下文具体介绍一下如何使用。</p>
<blockquote>
<p>【场景】设置按钮：圆角<code>cornerRadius</code>：8pt、边框颜色<code>borderWidth</code>：1pt、边框宽度<code>borderColor</code>：系统蓝色</p>
</blockquote>
<h2 id="巧用-ibinspectable"><strong>巧用 IBInspectable</strong><a title="#巧用-ibinspectable" href="#巧用-ibinspectable"></a></h2>
<p><code>【IBInspectable】</code> 这一属性提供了访问功能的新方式：用户自定义的运行时属性，让支持 KVC 的属性能够在身份检查器（Identity Inspector）的 User Defined Runtime Attributes 中配置。</p>
<p>它支持修饰的属性类型有：</p>
<p><code>BOOL</code>、<code>NSNumber</code>、<code>CGPoint</code>、<code>CGSize</code>、<code>CGRect</code>、<code>UIColor</code>、<code>NSString</code>、<code>NSLocalizedString</code>、<code>NSRange</code>、<code>UIImage</code>、<code>NSNull</code>。</p>
<p>如果想让特定类型的控件设置某个属性，可以为对应的 UIKit 添加分类，为定义该属性时加上 <code>IBInspectable</code>，示例：</p>
<figure class="highlight objc"><figcaption><span>UIButton+HTAdditions.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span> (<span class="title">HTAdditions</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) IBInspectable <span class="built_in">CGFloat</span> kCornerRadius;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) IBInspectable <span class="built_in">CGFloat</span> kBorderWidth;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) IBInspectable <span class="built_in">UIColor</span> *gBorderColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这时 Xcode 的 Attributes Inspector 栏中就会出现三个新的可编辑属性。</p>
<p><img src="/2017/how-to-use-ib-inspectable-and-ib-designable/visual-properties-1.png" alt="Attributes Inspector 显示的可视化属性" class="φcx"></p>
<p>Identity Inspector 下的 User Defined Runtime Attributes 也会出现相应的 key path 和 value 值。</p>
<p><img src="/2017/how-to-use-ib-inspectable-and-ib-designable/visual-properties-2.png" alt="User Defined Runtime Attributes 显示的可视化属性" class="φcx"></p>
<p>设置好后 run 一下工程就能看到场景中要求的效果，但通常开发者不需要所有的按钮都设置圆角、边框，更多的是采用自定义视图的形式统一处理相似风格的 control。为了更高效地开发，接下来介绍宏定义 <code>IB_DESIGNABLE</code>。</p>
<h2 id="巧用-ib_designable"><strong>巧用 IB_DESIGNABLE</strong><a title="#巧用-ib_designable" href="#巧用-ib_designable"></a></h2>
<p><code>【IB_DESIGNABLE】</code> 在类名前加上此宏定义，初始化、布置和绘制方法将被用来在画布上渲染该类的自定义视图。</p>
<p>操作步骤：</p>
<p>1、storyboard 中拖拽一个 UIButton；</p>
<p>2、创建父类是 UIButton 的 HTCustomButton 类文件，并在 .h 的 <code>interface</code> 前定义 <code>IB_DESIGNABLE</code>；</p>
<p>3、给步骤 1 按钮的 Custom Class 关联上 HTCustomButton。</p>
<p>这时我们就可以直接在 User Defined Runtime Attributes 中加入想要的属性，例如圆角、边框宽度等。边框颜色由于 UIColor 类型的特殊性，需要重新定义。</p>
<figure class="highlight objc"><figcaption><span>HTCustomButton.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">IB_DESIGNABLE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HTCustomButton</span> : <span class="title">UIButton</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 设置边框颜色可视化 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)IBInspectable <span class="built_in">UIColor</span> *customBorderColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>HTCustomButton.m</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;HTCustomButton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HTCustomButton</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置边框颜色</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setCustomBorderColor:(<span class="built_in">UIColor</span> *)customBorderColor &#123;</span><br><span class="line">    <span class="keyword">self</span>.layer.borderColor = customBorderColor.CGColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>设置好后就可以直接添加或修改相应的属性动态刷新控件，如下图：</p>
<p><img src="/2017/how-to-use-ib-inspectable-and-ib-designable/custom-view-dynamically-refreshes-the-rendering-with-ib-designable.gif" alt="自定义视图通过 IB_DESIGNABLE 动态刷新效果图" class="φcx"></p>
<h2 id="纯代码开发流派如何借助-ib_designable动态查看布局效果"><strong>纯代码开发流派如何借助 <code>IB_DESIGNABLE</code>动态查看布局效果</strong><a title="#纯代码开发流派如何借助-ib_designable动态查看布局效果" href="#纯代码开发流派如何借助-ib_designable动态查看布局效果"></a></h2>
<p>对于很多被强制勒令用纯代码 coding 的开发者来说，下面介绍的干货绝对会大大提升开发效率。</p>
<p>举个例子：创建基于 UIView 的 HTMasonryView，以及同名的 .xib 文件，并在 Custom Class 中关联好。接下来在 HTMasonryView.m 中创建并布局 masonryButton，注意添加 <code>IB_DESIGNABLE</code>，代码如下：</p>
<figure class="highlight objc"><figcaption><span>HTMasonryView.m</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;HTMasonryView.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Masonry.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;UIButton+HTAdditions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">IB_DESIGNABLE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HTMasonryView</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIButton</span> *masonryButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HTMasonryView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setupView];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:aDecoder]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setupView];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupView &#123;</span><br><span class="line">    _masonryButton = (&#123;</span><br><span class="line">        <span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</span><br><span class="line">        btn.kCornerRadius = <span class="number">8.0</span>f;</span><br><span class="line">        btn.kBorderWidth = <span class="number">1.0</span>f;</span><br><span class="line">        btn.gBorderColor = btn.ht_normalTitleColor;</span><br><span class="line">        btn.ht_normalTitle = <span class="string">@&quot;code创建-Masonry布局的按钮&quot;</span>;</span><br><span class="line">        btn.titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14.0</span>f];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:btn];</span><br><span class="line">        btn;</span><br><span class="line">    &#125;);</span><br><span class="line">    [<span class="keyword">self</span> layout];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)layout &#123;</span><br><span class="line">    [_masonryButton mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.left.mas_equalTo(<span class="number">30</span>);</span><br><span class="line">        make.right.mas_equalTo(<span class="number">-30</span>);</span><br><span class="line">        make.top.bottom.mas_equalTo(<span class="keyword">self</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>点开 HTMasonryView.xib 查看会发现已经渲染出了 Masonry 的布局效果。</p>
<p><img src="/2017/how-to-use-ib-inspectable-and-ib-designable/dynamically-refresh-the-rendering-with-the-masonry-layout.gif" alt="通过 Masonry 布局动态刷新效果图" class="φcx"></p>
<p>ps：如果渲染失败，查看 Editor -&gt; Automatically Refresh Views 是否勾选，尝试重启 Xcode。</p>
<p>开启成功的特点就是 Show the Identity inspector-&gt;Custom Class-&gt;Designables:Up to date(更新完毕)/Updating(更新中)，如果显示 Build failed 建议检查布局代码。</p>
<hr>
<p>欢迎评论，最后-&gt; <a href="https://github.com/fiteen/HTIBInspectableDemo" target="_blank">Demo 传送门</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>自动布局</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Xcode 8 上安装插件</title>
    <url>/2016/install-plugins-on-xcode8/</url>
    <content><![CDATA[<p>正式推出 Xcode 8 已有两个多月，也有不少朋友分享了安装插件的方法，笔者在这里整理了一个亲测有效的方法。</p>
<a id="more"></a>
<p>1、更新 Xcode，目前最新版本是 8.1；</p>
<p>2、由于安装插件会影响原来的 Xcode 打包上传，我们在应用程序里复制一个 Xcode，并重命名为 XcodeSigner；</p>
<p><img src="/2016/install-plugins-on-xcode8/xcodesigner.png" alt="XcodeSigner" class="φcx"></p>
<p>3、打开钥匙串，创建新证书，名称填 XcodeSigner，证书类型选择代码签名（Code Signing）；</p>
<p><img src="/2016/install-plugins-on-xcode8/create-a-certificate.png" alt="创建证书" class="φcx"></p>
<p><img src="/2016/install-plugins-on-xcode8/fill-in-the-certificate-information.png" alt="填写证书信息" class="φcx"></p>
<p>4、在终端命令中输入：<code>sudo codesign -f -s XcodeSigner /Applications/XcodeSigner.app</code><br>
耐心等待命令执行完毕；</p>
<p>5、获得 XcodeSigner 的 UUID；</p>
<p>通过在终端命令行输入：</p>
<pre><code class="language-bash">defaults read /Applications/XcodeSigner.app/Contents/Info DVTPlugInCompatibilityUUID
</code></pre>
<p>6、在 GitHub 上下载好想安装的插件，以 ESJsonFormat 为例，打开方式选择 XcodeSigner；</p>
<p><img src="/2016/install-plugins-on-xcode8/select-xcodesigner-as-the-open-method.png" alt="选择 XcodeSigner 作为打开方式" class="φcx"></p>
<p>7、检查 info.plist 中是否已经添加了第 5 步获得的 UUID，未添加可能会造成 XcodeSigner 闪退。若文件中已经存在，直接运行项目即可；</p>
<p><img src="/2016/install-plugins-on-xcode8/add-an-uuid-to-Info-plist.png" alt="添加 UUID" class="φcx"></p>
<p>8、运行成功后，关闭 XcodeSigner ，重新启动，这时会弹出如下两类提示框，分别选择“ Load Bundle ”和“允许”（或“始终允许”），这时点击 Window 就能看到列表中多了 ESJsonFormat 了。</p>
<p><img src="/2016/install-plugins-on-xcode8/load-bundle.png" alt="加载 Bundle" class="φcx"></p>
<p><img src="/2016/install-plugins-on-xcode8/select-allow.png" alt="选择“允许”" class="φcx"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 应用签名原理</title>
    <url>/2020/ios-app-signature/</url>
    <content><![CDATA[<p>不少果粉对 Apple 钟情，与它的纯净、安全有很大关系，我们发现在苹果的设备上下载应用时，不会出现触发下载一系列垃圾软件的情况，而且用户可以明确 App 的来源——通过官方商店 AppStore 购买、企业证书安装还是 TestFlight 下载。为了防止盗版软禁、病毒入侵、静默安装以及屏蔽其它不可控因素，并确保每一个安装到 iOS 设备上的应用都是被官方允许的，苹果设定了一套<strong>应用签名机制</strong>。</p>
<a id="more"></a>
<h2 id="数字签名">数字签名<a title="#数字签名" href="#数字签名"></a></h2>
<p><strong>数字签名</strong>，又称公钥数字签名，是只有信息的发送者才能产生的别人无法伪造的一段数字串，发送者对要发送的数据打上签名标记，表示这份经过认证，未被篡改的。</p>
<h3 id="数据传输">数据传输<a title="#数据传输" href="#数据传输"></a></h3>
<p>下面模拟一下<strong>数据传输</strong>的过程：</p>
<ol>
<li>
<p>假如发送方直接将原始数据明文传输给接收方时，数据非常不安全，极易被篡改；</p>
</li>
<li>
<p>为了提升安全性并同时简化明文，可以对数据进行<strong>哈希算法</strong>处理，得到原始数据的<strong>摘要</strong>，然后将摘要发送给接收方。但假如哈希算法被泄漏，依然存在数据被篡改的风险；</p>
</li>
<li>
<p>引入<strong>非对称加密算法</strong>，对一份数据，用<strong>哈希算法</strong>计算出摘要后，再用 RSA 的<strong>私钥</strong>加密摘要，得到原始数据的数字签名，<strong>发送方将数字签名与原始数据一起发送给接收方</strong>。</p>
</li>
</ol>
<p>我们将<strong>原始数据进行哈希加密、非对称加密后的数据</strong>称为<strong>数字签名</strong>。</p>
<p>接收方拿到数据后，需要进行签名验证，来确保数据传输过程中，未被篡改。</p>
<h3 id="数字签名验证">数字签名验证<a title="#数字签名验证" href="#数字签名验证"></a></h3>
<p><strong>签名验证</strong>的具体步骤如下：</p>
<ol>
<li>
<p>接收方拿到数据后，通过同样的<strong>哈希加密处理原始数据</strong>，得到哈希值（摘要）；</p>
</li>
<li>
<p>再利用<strong>非对称将数字签名中的校验哈希值（摘要）解密</strong>出来；</p>
</li>
<li>
<p>最后对比两个哈希值是否一致，判断出数据是否被篡改。</p>
</li>
</ol>
<p>用一张图还原数字签名的完整过程：</p>
<p><img src="/2020/ios-app-signature/digitally-signed-process.png" alt class="φcx"></p>
<p>再来看看如何利用数字签名保证每个安装到 iOS 上的 App 都被苹果认证允许。</p>
<h2 id="代码签名">代码签名<a title="#代码签名" href="#代码签名"></a></h2>
<p><strong>代码签名</strong>就是对可执行文件或脚本进行数字签名，用来确认软件在签名后未被修改或损坏的措施。它的原理和数字签名类似，只不过把签名的不是数据，而是代码。</p>
<h3 id="简单的代码签名">简单的代码签名<a title="#简单的代码签名" href="#简单的代码签名"></a></h3>
<p>假如 App 是只能从 App Store 上下载，那么它的验证方式就比较简单了。</p>
<p>由苹果官方生成一对公私钥，在 iOS 系统中内置一个公钥，私钥由苹果后台保存。</p>
<p>我们把 App 上传到 App Store 时，<strong>苹果后台用私钥对 App 数据进行签名</strong>，iOS 系统下载这个 App 后，<strong>用公钥验证这个签名</strong>，如果签名正确则这个 App 肯定是由苹果后台认证的，并且没有被修改或损坏。</p>
<p><img src="/2020/ios-app-signature/app-store-download-signed.png" alt class="φcx"></p>
<p>但 iOS 设备安装 App 并不只有 App Store 这一个渠道，比如开发者的真机调试、TestFlight 内测、In-House 企业证书分发等，此时简单的代码签名就无法满足对 App 的完全验证了。</p>
<p>iOS 代码签名的复杂度需要相应增加，于是双层代码签名（双重签名）产生了。</p>
<h3 id="双层代码签名">双层代码签名<a title="#双层代码签名" href="#双层代码签名"></a></h3>
<p>“双层”意在用<strong>两对</strong>公私钥做加密验证，它们分别是 Mac 本地的一对和 Apple 服务提供的一对。</p>
<p>双层代码签名的存在是为了满足：</p>
<ul>
<li>App 需要经过苹果允许才能安装；</li>
<li>在 Apple 后台中注册过的设备才能安装，比如在 TestFlight 内测、真机调试模式下；</li>
<li>限制签名只能对应唯一的 App。</li>
</ul>
<p>为了猜测完整的签名流程，我们可以解压一个 ipa 文件，在 Payload 目录中有一个 <code>embedded.mobileprovision</code>，我们称之为<strong>描述文件</strong>，它对应的是 Apple 后台生成 <code>Provisioning Profile</code>（简称 PP）文件。文件中包括：</p>
<ul>
<li>证书（公钥、签名）</li>
<li>App ID</li>
<li>Entitlements（权限）</li>
<li>注册设备列表</li>
<li>其它关乎 App 能否正常启动的所有信息</li>
</ul>
<p>所以我们猜测签名的大概流程是这样的：</p>
<ol>
<li>
<p>在开发设备 Mac 上本地生成一对公私钥。</p>
</li>
<li>
<p>Apple 有一对公私钥，Apple 私钥在 Apple 后台，Apple 公钥在每台 iOS 设备上。</p>
</li>
<li>
<p>把 Mac 公钥上传到 Apple 后台，用 Apple 私钥签名 Mac 公钥，可以得到一份 Mac 公钥和签名的组合数据，我们把这份数据称为<strong>证书</strong>。</p>
</li>
<li>
<p>在 Apple 后台申请 App ID，配置好的 UDID（注册设备） 列表以及 App 申请的权限（Entitlements），再加上步骤 3 中的证书，组合起来的数据用 Apple 私钥进行签名，把数据和签名一起组成 PP 文件，下载到本地的开发设备 Mac 上。</p>
</li>
<li>
<p>当我们编译工程时，Mac 私钥会对 App 进行签名，同时把步骤 4 得到的 PP 文件打包进去，文件名为 <code>embedded.mobileprovision</code>，准备将 App 安装到手机上。</p>
</li>
<li>
<p>安装时，iOS 系统取得证书，通过系统内置的 Apple 公钥，去验证证书里的签名是否正确。</p>
</li>
<li>
<p>继续用 Apple 公钥验证描述文件是否正确。</p>
</li>
<li>
<p>用 Mac 公钥验证 App 签名是否被篡改。</p>
</li>
</ol>
<p><img src="/2020/ios-app-signature/app-download-signed.png" alt class="φcx"></p>
<p>上面的步骤对应到实际操作和概念是这样的：</p>
<p>第 1 步：Mac 上依次打开“钥匙串访问 → 证书助理 → 从证书颁发机构请求证书…”，做了这一步，就会在本地生成了一对公私钥，导出的 CSR 文件（<code>CertificateSigningRequest.certSigningRequest</code>）就是 Mac 公钥，Mac 私钥也是存储在本地，具体是什么文件看第 3 步。</p>
<p>第 2 步：每台 iOS 设备中都已经有了 Apple 公钥，至于 Apple 私钥是什么，看第 3 步。</p>
<p>第 3 步：在 Apple 后台的 iOS Certificates 模块，通过上传本地导出的 CSR 文件，生成 <code>.cer</code> 证书文件，也就是 Apple 私钥。将 <code>.cer</code> 证书下载到本地，安装证书，在钥匙串中找到证书，就可以导出 Mac 私钥，也就是一个 <code>.p12</code> 文件。它和第 1 步中导出的 Mac 公钥是对应的，钥匙串会把这两个证书关联起来。用<code>.cer</code> 证书去签名 CSR 文件，拿到含有签名的证书。</p>
<p>第 4 步：在 Apple 后台配置 App ID、Entitlements、Devices 等，然后下载 PP 文件。</p>
<p>第 5 步：编译 App 时，Xcode 会通过第 3 步下载回来的证书（存着 Mac 公钥），在本地找到对应的 Mac 私钥，然后用 Mac 私钥去签名 App，同时打包，安装包中包含 PP 文件，在 ipa 中的文件名是 <code>embedded.mobileprovision</code>。这里 App 的签名数据被分为两部分，Mach-O 可执行文件会把签名直接写入描述文件里，而资源文件则会保存在 <code>_CodeSignature</code> 目录下，这时准备安装 App。</p>
<p>第 6 步：使用 Apple 公钥验证描述文件签名，对应第 4 步，签名通过，说明证书可用，进入下一步。</p>
<p>第 7 步：使用 Apple 公钥验证证书签名，对应第 3 步，签名通过，说明 Mac 公钥合法，进入下一步。</p>
<p>第 8 步：使用 Mac 公钥验证 App 签名，对应第 4 步，上述验证均通过后，还需要将描述文件中的内容与 App 本身的信息做验证对比，比如验证设备 ID 是否在 UDID 列表上，App ID 是否相同，权限开关是否与 Entitlements 一致，都验证通过，就可以开始安装 App。</p>
<p>前面说了，双层代码签名是针对开发测试包、In-House 企业签名、Ad-Hoc 包为例的签名和验证的流程，只是企业签名不限制安装的设备数，因此描述文件中不会有设备列表，而是一条 <code>&lt;key&gt;ProvisionsAllDevices&lt;/key&gt;&lt;true/&gt;</code> 记录。</p>
<p>而从 App Store 上下载的安装包，里面是没有描述文件的，但上架之前还是要配置证书、PP 文件，因为 App ID 和权限的检验还是需要做的。但 App 上传到 AppStore 以后就跟 PP 文件没有关系了，所以我们可以理解为 App Store 上包的签名验证采用就是前面说的最简单的签名方式，Apple 后台直接用私钥签名 App 就可以了。</p>
<hr>
<p>参考链接：bang - <a href="http://blog.cnbang.net/tech/3386/" target="_blank">iOS App 签名原理</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>应用签名</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新】这些 iOS 冷知识，你知道吗？</title>
    <url>/2020/ios-trivia/</url>
    <content><![CDATA[<p>疫情期间比较空闲，回顾了一些过去写的项目和知识点，从底层和原理的角度重新去看代码和问题，发现了几个有意思的地方。</p>
<a id="more"></a>
<h2 id="单例对象的内存管理">单例对象的内存管理<a title="#单例对象的内存管理" href="#单例对象的内存管理"></a></h2>
<h3 id="问题背景">问题背景<a title="#问题背景" href="#问题背景"></a></h3>
<p>在解决 App 防止抓包问题的时候，有一种常见的解决方案就是：<strong>检测是否存在代理服务器</strong>。其实现为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)getProxyStatus &#123;</span><br><span class="line">    <span class="built_in">CFDictionaryRef</span> dicRef = <span class="built_in">CFNetworkCopySystemProxySettings</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">CFStringRef</span> proxyCFstr = <span class="built_in">CFDictionaryGetValue</span>(dicRef, (<span class="keyword">const</span> <span class="keyword">void</span>*)kCFNetworkProxiesHTTPProxy);</span><br><span class="line">    <span class="built_in">CFRelease</span>(dicRef);</span><br><span class="line">    <span class="built_in">NSString</span> *proxy = (__bridge <span class="built_in">NSString</span>*)(proxyCFstr);</span><br><span class="line">    <span class="keyword">if</span>(proxy) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我前面的一篇文章《<a href="https://blog.fiteen.top/2020/ios-memory-leak" target="_blank">iOS 内存泄漏场景与解决方案</a>》中，有提到非 OC 对象在使用完毕后，需要我们手动释放。</p>
<p>那么上面这段代码中，在执行 <code>CFRelease(dicRef);</code> 之后，<code>dicRef</code> 是不是应该就被释放了呢？</p>
<h3 id="问题探讨">问题探讨<a title="#问题探讨" href="#问题探讨"></a></h3>
<p>让我们来写一段测试代码试试看：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CFDictionaryRef</span> dicRef = <span class="built_in">CFNetworkCopySystemProxySettings</span>();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%ld, %p&quot;</span>, <span class="built_in">CFGetRetainCount</span>(dicRef), dicRef);</span><br><span class="line"><span class="built_in">CFRelease</span>(dicRef);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%ld, %p&quot;</span>, <span class="built_in">CFGetRetainCount</span>(dicRef), dicRef);</span><br><span class="line"><span class="built_in">CFRelease</span>(dicRef);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%ld, %p&quot;</span>, <span class="built_in">CFGetRetainCount</span>(dicRef), dicRef);</span><br></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2, 0x6000004b9720</span><br><span class="line">1, 0x6000004b9720</span><br><span class="line">(lldb) </span><br></pre></td></tr></table></figure>
<p>程序在运行到第三次 <code>NSLog</code> 的时候才崩溃，说明对 <code>dicRef</code> 对象 release 两次才能将他彻底释放。</p>
<p>这很奇怪，按照以往的经验，第一次打印 <code>dicRef</code> 的引用计数值不应该是 1 才对吗？</p>
<p>修改一下代码，继续测试：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CFDictionaryRef</span> dicRef = <span class="built_in">CFNetworkCopySystemProxySettings</span>();</span><br><span class="line"><span class="built_in">CFRelease</span>(dicRef);</span><br><span class="line"><span class="built_in">CFRelease</span>(dicRef);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%p&quot;</span>, <span class="built_in">CFNetworkCopySystemProxySettings</span>());</span><br></pre></td></tr></table></figure>
<p>这次运行到最后一行代码的时候，居然还是崩溃了。连 <code>CFNetworkCopySystemProxySettings()</code> 对象都直接从内存里被销毁了？难道 <code>dicRef</code> 没有重新创建对象，而是指向了真正的地址？</p>
<p>为了验证猜想，我们定义两份 <code>dicRef</code> 对象，并打印出他们的地址和引用计数。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CFDictionaryRef</span> dicRef = <span class="built_in">CFNetworkCopySystemProxySettings</span>();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%p, %ld,&quot;</span>, dicRef, <span class="built_in">CFGetRetainCount</span>(dicRef));</span><br><span class="line"><span class="built_in">CFDictionaryRef</span> dicRef1 = <span class="built_in">CFNetworkCopySystemProxySettings</span>();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%p, %p, %ld, %ld&quot;</span>, dicRef, dicRef1, <span class="built_in">CFGetRetainCount</span>(dicRef), <span class="built_in">CFGetRetainCount</span>(dicRef1));</span><br></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x600003bd2040, 2,</span><br><span class="line">0x600003bd2040, 0x600003bd2040, 3, 3</span><br></pre></td></tr></table></figure>
<p>果然如此。<code>dicRef</code> 和 <code>dicRef1</code> 的地址是一样的，而且第二次打印时，在没有对 <code>dicRef</code> 对象执行任何操作的情况下，它的引用计数居然又加了 1。</p>
<p>那么我们可以大胆猜测：</p>
<p>实际上，<strong>每次调用 <code>CFNetworkCopySystemProxySettings()</code> 返回的地址一直是同一个，未调用时它的引用计数就为 1，而且每调用一次，引用计数都会加 1</strong>。</p>
<p>如此看来，<code>CFNetworkCopySystemProxySettings()</code> 返回的对象在引用计数上的表现和其它<strong>系统单例</strong>十分相似，比如 <code>[UIApplication sharedApplication]</code>、<code>[UIPasteboard generalPasteboard]</code>、<code>[NSNotificationCenter defaultCenter]</code> 等。</p>
<p>单例对象一旦建立，对象指针会保存在静态区，单例对象在堆中分配的内存空间，只在应用程序终止后才会被释放。</p>
<p><img src="/2020/ios-trivia/singleton-memory.png" alt class="φcx"></p>
<p>因此对于这类单例对象，调用一次就需要释放一次（ARC 下 OC 对象无需手动释放），保持它的引用计数为 1（而不是 0），保证其不被系统回收，下次调用时，依然能正常访问。</p>
<h2 id="block-属性用什么修饰">block 属性用什么修饰<a title="#block-属性用什么修饰" href="#block-属性用什么修饰"></a></h2>
<h3 id="问题背景-1">问题背景<a title="#问题背景-1" href="#问题背景-1"></a></h3>
<p>这个问题来源于一道司空见惯的面试题：</p>
<blockquote>
<p>iOS 种 <code>block</code> 属性用什么修饰？（<code>copy</code> 还是 <code>strong</code>？）</p>
</blockquote>
<p>Stack Overflow 上也有相关的问题：<a href="https://stackoverflow.com/questions/27152580/cocoa-blocks-as-strong-pointers-vs-copy" target="_blank">Cocoa blocks as strong pointers vs copy</a>。</p>
<h3 id="问题探讨-1">问题探讨<a title="#问题探讨-1" href="#问题探讨-1"></a></h3>
<p>先来回顾一些概念。</p>
<p>iOS 内存分区为：栈区、堆区、全局区、常量区、代码区（地址从高到低）。常见的 block 有三种：</p>
<ul>
<li>NSGlobalBlock：存在全局区的 block；</li>
<li>NSStackBlock：存在栈区的 block；</li>
<li>NSMallocBlock：存在堆区的 block。</li>
</ul>
<p>block 有<strong>自动捕获变量</strong>的特性。当 block 内部没有引入外部变量的时候，不管它用什么类型修饰，block 都会存在全局区，但如果引入了外部变量呢？</p>
<p>这个问题要在 ARC 和 MRC 两种环境下讨论。</p>
<blockquote>
<p>Xcode 中设置 MRC 的开关：</p>
<ol>
<li>全局设置：TARGETS → <code>Build Settings</code> → <code>Apple Clang - Language - Objective-C</code> → <code>Objective-C Automatic Reference Counting</code> 设为 <code>No</code>；（ARC 对应的是 <code>Yes</code>）</li>
<li>局部设置：TARGETS → <code>Build Phases</code> → <code>Compile Sources</code> → 找到需要设置的文件 → 在对应的 <code>Compiler Flags</code> 中设置 <code>-fno-objc-arc</code>。（ARC 对应的是 <code>-fobjc-arc</code>）</li>
</ol>
</blockquote>
<p>针对这个问题，网上有一种答案：</p>
<ul>
<li>MRC 环境下，只能用 <code>copy</code> 修饰。使用 <code>copy</code> 修饰，会将栈区的 block 拷贝到堆区，但 <code>strong</code> 不行；</li>
<li>ARC 环境下，用 <code>copy</code> 和 <code>strong</code> 都可以。</li>
</ul>
<p>看似没什么问题，于是我在 MRC 环境执行了如下代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别用 copy 和 strong 修饰 block 属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^copyBlock)(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">void</span> (^strongBlock)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 打印 normalBlock 所在的内存地址</span></span><br><span class="line"><span class="keyword">void</span>(^normalBlock)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;normalBlock: %@&quot;</span>, normalBlock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 copyBlock 所在的内存地址</span></span><br><span class="line"><span class="keyword">self</span>.copyBlock = ^(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;copyBlock: %@&quot;</span>, <span class="keyword">self</span>.copyBlock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 strongBlock 所在的内存地址</span></span><br><span class="line"><span class="keyword">self</span>.strongBlock = ^(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;strongBlock: %@&quot;</span>, <span class="keyword">self</span>.strongBlock);</span><br></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">normalBlock: &lt;__NSStackBlock__: 0x7ffeee29b138&gt;</span><br><span class="line">copyBlock: &lt;__NSMallocBlock__: 0x6000021ac360&gt;</span><br><span class="line">strongBlock: &lt;__NSMallocBlock__: 0x600002198240&gt;</span><br></pre></td></tr></table></figure>
<p>从 normalBlock 的位置，我们可以看出，默认是存在栈区的，但是很奇怪的是，为什么 <code>strongBlock</code> 位于堆区？难道 MRC 时期用 <code>strong</code> 修饰就是可以的？</p>
<p>其实不然，要知道 MRC 时期，只有 <code>assign</code>、<code>retain</code> 和 <code>copy</code> 修饰符，<code>strong</code> 和 <code>weak</code> 是 ARC 时期才引入的。</p>
<p><code>strong</code> 在 MRC 中对应的是 <code>retain</code>，我们来看一下在 MRC 下用这两个属性修饰 block 的区别。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MRC 下分别用 copy 和 retain 修饰 block 属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^copyBlock)(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>) <span class="keyword">void</span> (^retainBlock)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 copyBlock 所在的内存地址</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">self</span>.copyBlock = ^(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;copyBlock: %@&quot;</span>, <span class="keyword">self</span>.copyBlock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 retainBlock 所在的内存地址</span></span><br><span class="line"><span class="keyword">self</span>.retainBlock = ^(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;retainBlock: %@&quot;</span>, <span class="keyword">self</span>.retainBlock);</span><br></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copyBlock: &lt;__NSMallocBlock__: 0x6000038f96b0&gt;</span><br><span class="line">retainBlock: &lt;__NSStackBlock__: 0x7ffeed0a90e0&gt;</span><br></pre></td></tr></table></figure>
<p>我们可以看到用 <code>copy</code> 修饰的 block 存在堆区，而 <code>retain</code> 修饰的 block 存在栈区。</p>
<p>那么<strong>修饰符</strong>的作用在哪里，为什么会出现不同的结果，我们通过反汇编来探究一下。</p>
<p>把断点打在 <code>self.copyBlock</code> 的声明函数这一行（在上述引用代码的第 7 行，不是 block 内部）。然后开启 <code>Debug</code> → <code>Debug Workflow</code> → <code>Always show Disassembly</code> 查看汇编代码，点击 Step into。</p>
<p><img src="/2020/ios-trivia/copy-block-callq.png" alt class="φcx"></p>
<p>在 <code>callq</code> 指令中可以看到声明的 copyBlock 属性具有 <code>copy</code> 的特性。</p>
<p>然后断点打在 <code>self.retainBlock</code> 的声明函数这一行，再进入查看，可以注意到 retainBlock 不具有<code>copy</code> 的特性。</p>
<p><img src="/2020/ios-trivia/retain-block-callq.png" alt class="φcx"></p>
<p>再在 ARC 下试一试。把断点打在 <code>self.strongBlock</code> 的声明函数这一行，进入查看，可以发现，用 <code>strong</code> 修饰的属性，也具有 <code>copy</code> 的特性。</p>
<p><img src="/2020/ios-trivia/strong-block-callq.png" alt class="φcx"></p>
<p>这也就很好解释了为什么 MRC 下用 <code>retain</code> 修饰的属性位于栈区，而用 <code>copy</code>、<code>strong</code> 修饰的属性存在堆区。</p>
<p>MRC 下，在定义 block 属性时，使用 <code>copy</code> 是为了把 block 从栈区拷贝到堆区，栈区中的变量由系统管理其生命周期，因此它出了作用域之后就会被销毁，无法全局使用，而把栈区的属性拷贝到堆区后，堆区中的元素由程序员来管理，就可以达到全局共享的目的。</p>
<p>ARC 下，不需要使用 <code>copy</code> 修饰，因为 ARC 下的 block 属性本来就在堆区。</p>
<blockquote>
<p>那为什么开发者基本上都只用 <code>copy</code> 呢？</p>
<p>这是 MRC 的历史遗留问题，上面也说到了，<code>strong</code> 是 ARC 时期引入的，开发者早已习惯了用 <code>copy</code> 来修饰 block 罢了。</p>
</blockquote>
<p>最后再补充一个小知识点。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ARC 下定义 normalBlock 后再打印其所在的内存地址</span></span><br><span class="line"><span class="keyword">void</span>(^normalBlock)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;normalBlock: %@&quot;</span>, normalBlock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接打印某个 block 的内存地址</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;block: %@&quot;</span>, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">normalBlock: &lt;__NSMallocBlock__: 0x600001ebe670&gt;</span><br><span class="line">block: &lt;__NSStackBlock__: 0x7ffee8752110&gt;</span><br></pre></td></tr></table></figure>
<p>block 的实现是相同的，为什么一个在堆区，一个在栈区？</p>
<p>这个现象叫做<strong>运算符重载</strong>。定义 normalBlock 的时候 <code>=</code> 实际上执行了一次 <code>copy</code>，为了管理 <code>normalBlock</code> 的内存，它被转移到了堆区。</p>
<hr>
<p>暂时先总结到这里，后续如果有新的发现，我也会在此文中继续补充，欢迎订阅、收藏～</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
        <tag>应用安全</tag>
        <tag>block</tag>
      </tags>
  </entry>
  <entry>
    <title>为你的 GitHub 开源项目制作高大上的徽标</title>
    <url>/2019/make-badge-via-shields-io/</url>
    <content><![CDATA[<blockquote>
<p><strong>提醒：本文图片较多，加载速度可能比较慢，请耐心等待。</strong></p>
</blockquote>
<p>经常逛 GitHub 的同学会发现，很多优秀的开源框架里都会出现这样的小徽标。</p>
<a id="more"></a>
<p><img src="/2019/make-badge-via-shields-io/badge-sample.png" alt class="φcx"></p>
<p>它的实现其实非常简单，借助一些小工具即可，比如：<a href="https://shields.io" target="_blank">shield.io</a>、<a href="https://badgen.net" target="_blank">Badgen</a>、<a href="https://ellerbrock.github.io/open-source-badges/" target="_blank">Open Source Badges</a>、<a href="https://badge.fury.io" target="_blank">Version Badge</a>、<a href="https://forthebadge.com" target="_blank">FOR THE BADGE</a> 等。这里推荐最经典全面的 <a href="http://shield.io">shield.io</a>。</p>
<h2 id="静态徽标">静态徽标<a title="#静态徽标" href="#静态徽标"></a></h2>
<p>一个简单的静态徽标链接的标准格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;$&#123;label&#125;-$&#123;message&#125;-$&#123;color&#125;.svg</span><br></pre></td></tr></table></figure>
<p><strong>label</strong> 表示徽标左半部分信息，可选填，<strong>message</strong> 表示徽标右半部分信息，<strong>color</strong> 表示徽标右半部分的背景颜色。<code>.svg</code> 可以省略。</p>
<p>如果徽标里的文字包含 <code>-</code>，需要写成 <code>--</code>，比如：</p>
<p>那么 <img src="https://img.shields.io/badge/language-Objective--C-green" alt> 徽标，就要这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 加上 .svg</span><br><span class="line">![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;language-Objective--C-green.svg)</span><br><span class="line">&#x2F;&#x2F; 省略 .svg</span><br><span class="line">![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;language-Objective--C-green)</span><br></pre></td></tr></table></figure>
<p>如果你不需要两部分信息，比如我的带链接的博客徽标 <a href="https://blog.fiteen.top" target="_blank"><img src="https://img.shields.io/badge/@FiTeen-grey" alt></a> ，就可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![](https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;@FiTeen-grey)](https:&#x2F;&#x2F;blog.fiteen.top)</span><br></pre></td></tr></table></figure>
<h3 id="color">color<a title="#color" href="#color"></a></h3>
<p>关于 <strong>color</strong>，你可以直接填入<strong>颜色英文</strong>，比如：</p>
<p><span><img src="https://img.shields.io/badge/-red-red" alt> <img src="https://img.shields.io/badge/pink-pink" alt> <img src="https://img.shields.io/badge/-orange-orange.svg" alt> <img src="https://img.shields.io/badge/yellow-yellow" alt> <img src="https://img.shields.io/badge/brightgreen-brightgreen" alt> <img src="https://img.shields.io/badge/green-green" alt> <img src="https://img.shields.io/badge/yellowgreen-yellowgreen" alt> <img src="https://img.shields.io/badge/blue-blue" alt> <img src="https://img.shields.io/badge/royalblue-royalblue" alt> <img src="https://img.shields.io/badge/cyan-cyan.svg" alt> <img src="https://img.shields.io/badge/blueviolet-blueviolet" alt> <img src="https://img.shields.io/badge/purple-purple" alt> <img src="https://img.shields.io/badge/grey-grey" alt> <img src="https://img.shields.io/badge/lightgrey-lightgrey" alt></span></p>
<p>也可以用这些<strong>特殊词汇</strong>来代替颜色：</p>
<p><span><img src="https://img.shields.io/badge/success-success" alt> <img src="https://img.shields.io/badge/important-important" alt> <img src="https://img.shields.io/badge/critical-critical" alt> <img src="https://img.shields.io/badge/informational-informational" alt> <img src="https://img.shields.io/badge/inactive-inactive" alt></span></p>
<p>或者直接通过<strong>十六进制颜色码</strong>，比如：</p>
<p><span><img src="https://img.shields.io/badge/ffb6c1-ffb6c1" alt> <img src="https://img.shields.io/badge/7b68ee-7b68ee" alt> <img src="https://img.shields.io/badge/5f9ea0-5f9ea0" alt></span></p>
<h3 id="样式">样式<a title="#样式" href="#样式"></a></h3>
<p>目前支持五种徽标样式，具体实现就是在 svg 路径后面拼接参数。<code>flat</code> 是默认样式。</p>
<ul>
<li><code>?style=plastic</code> <img src="https://img.shields.io/badge/style-plastic-green?style=plastic.svg" alt></li>
<li><code>?style=flat</code> <img src="https://img.shields.io/badge/style-flat.svg-green?style=flat" alt></li>
<li><code>?style=flat-square</code> <img src="https://img.shields.io/badge/style-flat--square-green.svg?style=flat-square" alt></li>
<li><code>?style=for-the-badge</code> <img src="https://img.shields.io/badge/style-for--the--badge-green.svg?style=for-the-badge" alt></li>
<li><code>?style=social</code> <img src="https://img.shields.io/badge/style-social-green?style=social" alt></li>
</ul>
<p>除此之外，还有一些 query string 参数：</p>
<ul>
<li><code>label</code> - 覆盖原有的 label 文本内容。</li>
<li><code>labelColor</code> 或 <code>labelA</code> - 覆盖原有的 label 背景颜色，默认颜色是 <code>grey</code>。注意这里不能用特殊词汇表示颜色。</li>
<li><code>logo</code> - 可以插入以下名称之一的徽标（bitcoin、dependabot、discord、gitlab、npm、paypal、serverfault、stackexchange、superuser、telegram、travis）或简单图标。使用简单图标站点上显示的名称来引用简单图标。如果名称中包含空格，用短划线 <code>-</code> 代替(例如: <code>?logo=visual-studio-code</code>) <img src="https://img.shields.io/badge/IDE-VSCode-green?logo=visual-studio-code" alt>。或者插入自定义徽标 logo 图像（高度≥14px）。</li>
<li><code>logoColor</code> - 设置徽标 logo 的颜色。</li>
<li><code>logoWidth</code> - 设置徽标 logo 的水平宽度。</li>
<li><code>link</code> - 指定徽标左/右侧部分的点击操作，格式为：<code>?link=$&#123;label-url&#125;&amp;link=$&#123;message-url&#125;</code>。</li>
<li><code>color</code> 或 <code>colorB</code> - 覆盖原有的 message 背景颜色。</li>
<li><code>cacheSeconds</code> - 设置 HTTP 缓存生存期（规则适用于根据每个徽章推断默认值，低于默认值的任何指定值都将被忽略）。还支持传统名称“ maxAge”。</li>
</ul>
<h2 id="动态徽标">动态徽标<a title="#动态徽标" href="#动态徽标"></a></h2>
<p>动态徽标是指会随着项目状态变化，自动更新状态的徽标。GitHub 项目中常用的动态徽标有：</p>
<h3 id="build-状态">build 状态<a title="#build-状态" href="#build-状态"></a></h3>
<ul>
<li>
<p><strong>Travis（.org）：</strong><code>https://travis-ci.org/:user/:repo</code></p>
</li>
<li>
<p><strong>Travis（.org）branch：</strong><code>https://travis-ci.org/:user/:repo/:branch</code></p>
</li>
<li>
<p><strong>GitHub Workflow Status：</strong><code>/github/workflow/build/:user/:repo/:workflow</code></p>
</li>
<li>
<p><strong>GitHub Workflow Status (branch)：</strong><code>https://github.com/:user/:repo/workflows/build/badge.svg?branch=$&#123;branch&#125;</code></p>
</li>
</ul>
<p>例如 <a href="https://github.com/AFNetworking/AFNetworking" target="_blank">AFNetworking</a> 的 build 状态为：<a href="https://travis-ci.org/AFNetworking/AFNetworking" target="_blank"><img src="https://travis-ci.org/AFNetworking/AFNetworking.svg" alt="Build Status"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![Build Status](https:&#x2F;&#x2F;travis-ci.org&#x2F;AFNetworking&#x2F;AFNetworking.svg)](https:&#x2F;&#x2F;travis-ci.org&#x2F;AFNetworking&#x2F;AFNetworking)</span><br></pre></td></tr></table></figure>
<p>而 <a href="https://github.com/onevcat/Kingfisher" target="_blank">Kingfisher</a>-master 分支的 build 状态为：<a href="https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild" target="_blank"><img src="https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master" alt="Build Status"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![Build Status](https:&#x2F;&#x2F;github.com&#x2F;onevcat&#x2F;kingfisher&#x2F;workflows&#x2F;build&#x2F;badge.svg?branch&#x3D;master)](https:&#x2F;&#x2F;github.com&#x2F;onevcat&#x2F;Kingfisher&#x2F;actions?query&#x3D;workflow%3Abuild)</span><br></pre></td></tr></table></figure>
<p>要知道项目在其它平台的持续集成状态，具体参照 <a href="https://shields.io/category/build" target="_blank">shields.io - build</a></p>
<h3 id="许可协议">许可协议<a title="#许可协议" href="#许可协议"></a></h3>
<ul>
<li>
<p><strong>Cocoapods：</strong><code>/cocoapods/l/:spec</code></p>
</li>
<li>
<p><strong>GitHub：</strong><code>/github/license/:user/:repo</code></p>
</li>
<li>
<p><strong>NPM：</strong><code>/npm/l/:packageName</code></p>
</li>
</ul>
<p>比如 <a href="https://github.com/onevcat/Kingfisher" target="_blank">Kingfisher</a> 许可协议支持 Cocoapods 和 GitHub 两种写法： <a href="https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE" target="_blank"><img src="https://img.shields.io/cocoapods/l/Kingfisher?style=flat" alt="license"></a> 和 <a href="https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE" target="_blank"><img src="https://img.shields.io/github/license/onevcat/Kingfisher" alt="license"></a></p>
<p><a href="https://github.com/visionmedia/debug" target="_blank">debug</a> 的许可协议为 <a href="https://github.com/visionmedia/debug/blob/master/LICENSE" target="_blank"><img src="https://img.shields.io/npm/l/debug" alt="license"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Kingfisher Cocoapods License：</span><br><span class="line">[![license](https:&#x2F;&#x2F;img.shields.io&#x2F;cocoapods&#x2F;l&#x2F;Kingfisher?style&#x3D;flat)](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;onevcat&#x2F;Kingfisher&#x2F;master&#x2F;LICENSE)</span><br><span class="line">&#x2F;&#x2F; Kingfisher GitHub License</span><br><span class="line">[![license](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;license&#x2F;onevcat&#x2F;Kingfisher)](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;onevcat&#x2F;Kingfisher&#x2F;master&#x2F;LICENSE)</span><br><span class="line">&#x2F;&#x2F; debug NPM Licese</span><br><span class="line">[![license](https:&#x2F;&#x2F;img.shields.io&#x2F;npm&#x2F;l&#x2F;debug)](https:&#x2F;&#x2F;github.com&#x2F;visionmedia&#x2F;debug&#x2F;blob&#x2F;master&#x2F;LICENSE)</span><br></pre></td></tr></table></figure>
<p>要知道项目在其他平台的许可协议，具体参照 <a href="https://shields.io/category/license" target="_blank">shields-license</a>。</p>
<h3 id="平台&amp;版本支持">平台&amp;版本支持<a title="#平台&amp;版本支持" href="#平台&amp;版本支持"></a></h3>
<ul>
<li>
<p><strong>Cocoapods Platform</strong>：<code>/cocoapods/p/:repo</code></p>
</li>
<li>
<p><strong>Cocoapods Compatible</strong>：<code>/cocoapods/v/:repo</code></p>
</li>
</ul>
<p>比如 <a href="https://github.com/onevcat/Kingfisher" target="_blank">Kingfisher</a> 当前支持的平台有 <img src="https://img.shields.io/cocoapods/p/Kingfisher" alt="platform">，pod 版本号为 <img src="https://img.shields.io/cocoapods/v/Kingfisher" alt="version"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Platform Support</span><br><span class="line">![platform](https:&#x2F;&#x2F;img.shields.io&#x2F;cocoapods&#x2F;p&#x2F;Kingfisher)</span><br><span class="line">&#x2F;&#x2F; Version Support</span><br><span class="line">![version](https:&#x2F;&#x2F;img.shields.io&#x2F;cocoapods&#x2F;v&#x2F;Kingfisher)</span><br></pre></td></tr></table></figure>
<p>要知道相关的其它信息，具体参照 <a href="https://shields.io/category/platform-support" target="_blank">shields.io - platform &amp; version support</a></p>
<h3 id="代码测试覆盖率">代码测试覆盖率<a title="#代码测试覆盖率" href="#代码测试覆盖率"></a></h3>
<p>针对不同的代码测试平台，有不同的获取方法，例如：</p>
<ul>
<li>
<p><strong>Codecov：</strong><code>https://codecov.io/github/:user/:repo/coverage.svg?token=$&#123;token&#125;</code></p>
</li>
<li>
<p><strong>Codecov Branch：</strong> <code>https://codecov.io/github/:user/:repo/coverage.svg?branch=$&#123;branch&#125;&amp;token=$&#123;token&#125;</code></p>
</li>
</ul>
<p>以 <a href="https://github.com/AFNetworking/AFNetworking/master" target="_blank">AFNetworking</a>-master 分支为例：<a href="https://codecov.io/github/AFNetworking/AFNetworking?branch=master" target="_blank"><img src="https://codecov.io/github/AFNetworking/AFNetworking/coverage.svg?branch=master" alt="codecov.io"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![codecov.io](https:&#x2F;&#x2F;codecov.io&#x2F;github&#x2F;AFNetworking&#x2F;AFNetworking&#x2F;coverage.svg?branch&#x3D;master)](https:&#x2F;&#x2F;codecov.io&#x2F;github&#x2F;AFNetworking&#x2F;AFNetworking?branch&#x3D;master)</span><br></pre></td></tr></table></figure>
<p>要知道项目在其它平台的测试覆盖率，具体参照 <a href="https://shields.io/category/coverage" target="_blank">shields.io - coverage</a>。</p>
<h3 id="项目信息">项目信息<a title="#项目信息" href="#项目信息"></a></h3>
<ul>
<li>
<p><strong>GitHub Followers：</strong><code>/github/followers/:user?label=Follow</code></p>
</li>
<li>
<p><strong>GitHub Forks：</strong><code>/github/forks/:user/:repo?label=Fork</code></p>
</li>
<li>
<p><strong>GitHub Stars：</strong><code>/github/stars/:user/:repo?style=social</code></p>
</li>
<li>
<p><strong>GitHub Watchers：</strong><code>/github/watchers/:user/:repo?label=Watch</code></p>
</li>
</ul>
<p>以我本人的 <a href="https://github.com/fiteen" target="_blank">GitHub</a> 和项目 <a href="https://github.com/fiteen/HTCart" target="_blank">HTCart</a> 为例：</p>
<p><span><img src="https://img.shields.io/github/followers/fiteen?label=Follow" alt="followers"> <img src="https://img.shields.io/github/forks/fiteen/HTCart?label=Fork" alt="forks"> <img src="https://img.shields.io/github/stars/fiteen/HTCart?style=social" alt="stars"> <img src="https://img.shields.io/github/watchers/fiteen/HTCart.svg?label=Watchers" alt="watchers"></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Followers</span><br><span class="line">![followers](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;followers&#x2F;fiteen?label&#x3D;Follow)</span><br><span class="line">&#x2F;&#x2F; Forks</span><br><span class="line">![forks](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;forks&#x2F;fiteen&#x2F;HTCart?label&#x3D;Fork)</span><br><span class="line">&#x2F;&#x2F; Stars</span><br><span class="line">![stars](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;stars&#x2F;fiteen&#x2F;HTCart?style&#x3D;social)</span><br><span class="line">&#x2F;&#x2F; Watchers</span><br><span class="line">![watchers](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;watchers&#x2F;fiteen&#x2F;HTCart.svg?label&#x3D;Watchers)</span><br></pre></td></tr></table></figure>
<h3 id="下载量">下载量<a title="#下载量" href="#下载量"></a></h3>
<ul>
<li>
<p><strong>GitHub All Releases：</strong><code>/github/downloads/:user/:repo/total</code></p>
</li>
<li>
<p><strong>GitHub Releases：</strong><code>/github/downloads/:user/:repo/:tag/total</code></p>
</li>
</ul>
<p>以 <a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank">ShadowsocksX-NG</a> 为例：</p>
<p><span><img src="https://img.shields.io/github/downloads/shadowsocks/ShadowsocksX-NG/total" alt="GitHub All Releases"> <img src="https://img.shields.io/github/downloads/shadowsocks/ShadowsocksX-NG/v1.7.1/total" alt="GitHub Releases"></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 总下载量</span><br><span class="line">![GitHub All Releases](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;downloads&#x2F;shadowsocks&#x2F;ShadowsocksX-NG&#x2F;total)</span><br><span class="line">&#x2F;&#x2F; v1.7.1 的下载量</span><br><span class="line">![GitHub Releases](https:&#x2F;&#x2F;img.shields.io&#x2F;github&#x2F;downloads&#x2F;shadowsocks&#x2F;ShadowsocksX-NG&#x2F;v1.7.1&#x2F;total)</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他<a title="#其他" href="#其他"></a></h3>
<p>当然，可支持动态的徽标还有很多，本文就不一一列举，有兴趣的可以直接在<a href="https://shields.io" target="_blank">官网</a>查询。</p>
]]></content>
      <categories>
        <category>程序员必备</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 中 framework 和 bundle 的制作</title>
    <url>/2018/making-frameworks-and-bundles/</url>
    <content><![CDATA[<h2 id="framework">Framework<a title="#framework" href="#framework"></a></h2>
<p><strong>Framework</strong> 是<strong>资源的集合</strong>，将静态库和其头文件包含到一个结构中，让 Xcode 可以方便地把它纳入到你的项目中。</p>
<a id="more"></a>
<p>在运行时，库中按你的想法暴露需要的头文件，整个工程都可以调用暴露出来的接口和参数，这样减少了内存消耗，提高了系统的性能。</p>
<h3 id="为什么使用-framework">为什么使用 framework<a title="#为什么使用-framework" href="#为什么使用-framework"></a></h3>
<p>与别人分享自己开发的组件，有两种方式。</p>
<ul>
<li>直接提供源代码。</li>
<li>将组件代码编译成静态库，供他人调用。</li>
</ul>
<p>第一种方式容易被人看到具体实现的细节，这些可能是你不想暴露出来的。此外，开发者也可能并不想看到你的所有代码，而仅仅是希望将功能的一部分植入到自己的应用中。</p>
<p>因此很多组件的封装采用第二种方式，这也是下文介绍的主要内容。</p>
<h3 id="配置静态库工程">配置静态库工程<a title="#配置静态库工程" href="#配置静态库工程"></a></h3>
<p><strong>步骤 1</strong>：打开 Xcode ，依次点击 <code>Create a new Xcode project → iOS → Cocoa Touch Framework</code>，在 <code>Product Name</code> 中填写名称。（注：这就是最后 framework 的名称。）</p>
<p><strong>步骤 2</strong>：假如你的项目依赖某些系统库，那么需要通过点击 <code>Targets → Build Phases → Link Binary with Libraries</code>，点击 <code>+</code> 符号将它们添加到工程中。</p>
<p><strong>步骤 3</strong>：修改 Project 中的 iOS Deployment Target 版本号，选择你的框架最低支持的 iOS 版本。</p>
<p><strong>步骤 4</strong>：如果组件中存在 <code>.xib</code> 文件，请确保 <code>TARGETS → Build Phases → Copy Bundle Resources</code> 下存在该 xib 文件。</p>
<p><strong>步骤 5</strong>：将封装好的组件文件夹拖入到项目目录下，选择你要公开的头文件。</p>
<p><strong>步骤 6</strong>：依次点击 <code>TARGETS → Build Phases → Headers</code>，目录下有：</p>
<ul>
<li>Public：存放公开的头文件，给外部调用。</li>
<li>Private：存放私有的 Header，但头文件在编译之后还会存在。一般用来存放项目中需要调用但又不想给别人看到其内部实现的文件。</li>
<li>Project：隐藏的文件。</li>
</ul>
<h3 id="导出-framework">导出 framework<a title="#导出-framework" href="#导出-framework"></a></h3>
<p>选中 Scheme 选择当前项目，然后右边设备依次选中 Generic iOS Device（通用真机版本）和任一模拟器，分别编译（command + B），成功将会自动跳转到打出的 <code>.framework</code> 文件相应的目录下。</p>
<h3 id="合成-framework">合成 framework<a title="#合成-framework" href="#合成-framework"></a></h3>
<p>为了让用户能统一调用一个 framework ，还需要将二者合成为一个 framework 。这里介绍一种简单的方法：</p>
<p>1、新建一个 target，依次点击 <code>TARGETS 左下角的加号按钮 → Cross-platform → Other 下的 Aggregate</code>。</p>
<p>2、点击工程文件，选 <code>TARGETS → 刚才创建的 Aggregate → Build Phases → + → New Run Script Phases</code>。在当前栏目里会多出一个 <code>Run Script</code> ，在里面输入以下脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">要build的target名</span></span><br><span class="line">TARGET_NAME=$&#123;PROJECT_NAME&#125;</span><br><span class="line">if [[ $1 ]]</span><br><span class="line">then</span><br><span class="line">TARGET_NAME=$1</span><br><span class="line">fi</span><br><span class="line">UNIVERSAL_OUTPUT_FOLDER=&quot;$&#123;SRCROOT&#125;/$&#123;PROJECT_NAME&#125;/&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建输出目录，并删除之前的 framework 文件</span></span><br><span class="line">mkdir -p &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;&quot;</span><br><span class="line">rm -rf &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">分别编译模拟器和真机的 framework</span></span><br><span class="line">xcodebuild -target &quot;$&#123;TARGET_NAME&#125;&quot; ONLY_ACTIVE_ARCH=NO -configuration $&#123;CONFIGURATION&#125; -sdk iphoneos BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot; clean build</span><br><span class="line">xcodebuild -target &quot;$&#123;TARGET_NAME&#125;&quot; ONLY_ACTIVE_ARCH=NO -configuration $&#123;CONFIGURATION&#125; -sdk iphonesimulator BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot; clean build</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝 framework 到 univer 目录</span></span><br><span class="line">cp -R &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;TARGET_NAME&#125;.framework&quot; &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">合并 framework，输出最终的 framework 到 build 目录</span></span><br><span class="line">lipo -create -output &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos/$&#123;TARGET_NAME&#125;.framework/$&#123;TARGET_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除编译之后生成的无关的配置文件</span></span><br><span class="line">dir_path=&quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/&quot;</span><br><span class="line">for file in ls $dir_path</span><br><span class="line">do</span><br><span class="line">if [[ $&#123;file&#125; =~ &quot;.xcconfig&quot; ]]</span><br><span class="line">then</span><br><span class="line">rm -f &quot;$&#123;dir_path&#125;/$&#123;file&#125;&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash">判断 build 文件夹是否存在，存在则删除</span></span><br><span class="line">if [ -d &quot;$&#123;SRCROOT&#125;/build&quot; ]</span><br><span class="line">then</span><br><span class="line">rm -rf &quot;$&#123;SRCROOT&#125;/build&quot;</span><br><span class="line">fi</span><br><span class="line">rm -rf &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">打开合并后的文件夹</span></span><br><span class="line">open &quot;$&#123;UNIVERSAL_OUTPUT_FOLDER&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>3、使用脚本进行编译 (command + B)，成功后将会自动跳转到打出的 <code>.framework</code> 文件相应的目录下。</p>
<h3 id="查看是否成功">查看是否成功<a title="#查看是否成功" href="#查看是否成功"></a></h3>
<p><strong>步骤 1</strong>：打开终端，进入到你的 framework 文件所在的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;yourFrameworkName&#125;</span>.framework</span><br></pre></td></tr></table></figure>
<p><strong>步骤 2</strong>：查看架构支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lipo -info <span class="variable">$&#123;yourFrameworkName&#125;</span>.framework/<span class="variable">$&#123;yourFrameworkName&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以看到输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Architectures <span class="keyword">in</span> the fat file: <span class="variable">$&#123;yourFrameworkName&#125;</span> are: i386 x86_64 armv7 arm64 (支持的架构显示在这)</span><br></pre></td></tr></table></figure>
<p><strong>设备的 CPU 架构(指令集)</strong></p>
<ul>
<li>模拟器
<ul>
<li><strong>i386</strong>: 针对 intel 通用微处理器 32 位架构，如 iPhone 4s-5:</li>
<li><strong>x86_64</strong>: 针对 x86 架构的 64 位处理器</li>
</ul>
</li>
<li>真机
<ul>
<li><strong>armv6</strong>: iPhone、iPhone 2、iPhone 3G、iPod 1G/2G（Xcode4.5 起已不再支持 armv6）</li>
<li><strong>armv7</strong>: iPhone 3Gs、iPhone 4、iPhone 4s、iPod 3G/4G/5G、iPad、iPad 2、iPad 3、iPad Mini</li>
<li><strong>armv7s</strong>: iPhone 5、iPhone 5c、iPad 4</li>
<li><strong>arm64</strong>: iPhone 5s、iPhone 6(Plus)、iPhone 6s(Plus)、iPad Air(2)、Retina iPad Mini(2,3)</li>
<li><strong>arm64e</strong>:  iPhone XS\XR\XS Max</li>
</ul>
</li>
</ul>
<h3 id="引入-framework-的注意事项">引入 framework 的注意事项<a title="#引入-framework-的注意事项" href="#引入-framework-的注意事项"></a></h3>
<p>引入的 framework 里存在分类的话，编译运行项目会报形如 <code>xxx unrecognized selector sent to class xxx</code> 的错误。</p>
<p><strong>解决办法：</strong></p>
<p>选中左边栏的项目文件，然后依次点击 <code>Targets → Build Settings → Linking → Other Linker Flags</code>，在里面添加 <code>-ObjC</code> 再次编译就能正常运行。</p>
<p><strong>补充知识：</strong></p>
<p>从 C 代码到可执行文件经历编译步骤是：</p>
<blockquote>
<p>源代码 &gt; 预处理器 &gt; 编译器 &gt; 汇编器 &gt; 机器码 &gt; 链接器 &gt; 可执行文件。</p>
</blockquote>
<p>在最后一步需要把 <code>.o</code> 文件和 C 语言运行库链接起来，这时需要用到 <code>ld</code> 命令。源文件经过一系列处理后，会生成对应的 <code>.obj</code> 文件，一个项目必然会有多个 <code>.obj</code> 文件，并且这些文件之间存在各种联系，如函数调用等。链接器做的事就是把目标文件和所用的一些库链接在一起形成一个完整的可执行文件。<code>Other Linker Flags</code> 设置的值实际上就是 <code>ld</code> 命令执行时后面所加的参数。下面介绍 3 个常用参数：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:center">参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-ObjC</code></td>
<td>链接器会把静态库中所有的 Objective-C 类和分类都加载到最后的可执行文件中</td>
</tr>
<tr>
<td style="text-align:center"><code>-all_load</code></td>
<td>链接器会让所有找到的目标文件都加载到可执行文件中</td>
</tr>
<tr>
<td style="text-align:center"><code>-force_load</code></td>
<td>需要指定要进行全部加载的库文件的路径</td>
</tr>
</tbody>
</table></div></div><p><strong>注意：千万不要随便使用 <code>-all_load </code> 这个参数！假如你使用了不止一个静态库，然后又使用了这个参数，那么很有可能会遇到 <code>ld: duplicate symbol</code> 错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到 <code>-ObjC</code> 失效的情况下使用 <code>-force_load</code> 参数。</strong></p>
<h2 id="bundle">Bundle<a title="#bundle" href="#bundle"></a></h2>
<h3 id="什么是-bundle">什么是 bundle<a title="#什么是-bundle" href="#什么是-bundle"></a></h3>
<p><strong>Bundle</strong> 可以理解为一个<strong>资源目录</strong>，并包含了程序中会用到的资源，如图像、声音、编译好的代码或 <code>nib</code> 文件等。</p>
<h3 id="创建-bundle">创建 bundle<a title="#创建-bundle" href="#创建-bundle"></a></h3>
<p>Bundle 创建有两种方式：</p>
<h4 id="简单的创建-bundle">简单的创建 bundle<a title="#简单的创建-bundle" href="#简单的创建-bundle"></a></h4>
<p>创建一个文件夹，强制重命名该文件夹为 <code>$&#123;yourBundleName&#125;.bundle</code>。</p>
<h4 id="通过-xcode-创建-bundle">通过 Xcode 创建 bundle<a title="#通过-xcode-创建-bundle" href="#通过-xcode-创建-bundle"></a></h4>
<p><strong>步骤 1</strong>：新建一个项目，依次点击 <code>TARGETS → + → mac OS → Framework &amp; Library → Bundle</code>，输入 <code>Product Name</code>即建立出 bundle 工程；</p>
<p><strong>步骤 2</strong>：在 bundle 目录下添加需要的资源文件，编译之后在整个项目工程的 Products 文件夹下得到资源文件 bundle 。</p>
<p>这样做默认情况下 bundle 里面的 <code>png</code> 图片会被转为 <code>tiff</code> 的格式。因此在编译前需要做一步设置：找到 bundle 的工程，把 <code>Build Settings</code> 里的 <code>COMBINE_HIDPI_IMAGES</code> 设置为 <code>NO</code> 之后再编译运行。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>SDK</tag>
        <tag>framework</tag>
        <tag>bundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 8 新特性</title>
    <url>/2016/new-in-xcode8/</url>
    <content><![CDATA[<p>依照苹果一贯的风格，今天，发布 iOS 10 的同时，开发者们期待已久的 Xcode 8 正式版也上线了。它更新了哪些大家感兴趣的部分呢，翻译一下 App Store 里的更新内容：</p>
<a id="more"></a>
<p><img src="/2016/new-in-xcode8/new-in-xcode8.png" alt class="φcx"></p>
<p>Xcode 8 支持 Swift 3、iOS 10、watchOS 3、tvOS 10 以及 macOS Sierra。</p>
<p><strong>Xcode 8 的新特性</strong>：</p>
<ul>
<li>
<p>编辑文件时，会高亮当前行代码，swift 中支持彩色和图像文字，添加了补全图片名功能（这个很赞，又可以少用一个插件了）；</p>
</li>
<li>
<p>应用程序拓展可以使第三方能够添加新功能到源编辑器中；</p>
</li>
<li>
<p>可以自动管理或自定义设置代码签名；</p>
</li>
<li>
<p>关于 runtime 运行时，对内存泄漏将会发出警告，针对 UI 对齐以及资源竞争问题，将会通过线程检查工具来解决；</p>
</li>
<li>
<p>在运行时机制中，内存调试器给出数据和对象关系图的可视化和操作形式；</p>
</li>
<li>
<p>优化界面像素控制，可以预览每一种目标设备，同时可以调整缩放级别；</p>
</li>
<li>
<p>对默认字体 San Francisco Mono 进行了字体加大和加粗处理（这点貌似被很多苹果用户吐槽了）；</p>
</li>
<li>
<p>文档查看采用模糊匹配方法，在一个统一的参考库内搜索，即使在脱机时也可以使用；</p>
</li>
<li>
<p>Interface  Builder 和整个 IDE 的优化提升；</p>
</li>
<li>
<p>对 Siri 功能进行拓展，iMessage 也加入新玩法，表情包和贴纸包更多了；</p>
</li>
</ul>
<p><strong>Swift 3 的新特性</strong>：</p>
<ul>
<li>
<p>为 GCD 和 Core Graphics 提供增强版的 Swift API；</p>
</li>
<li>
<p>在 Swift 3 中贯穿统一的 API 风格，甚至包括在平台 SDK 框架里亦然；</p>
</li>
<li>
<p>Playgrounds 为开源工具链提供支持；</p>
</li>
<li>
<p>Xcode 会帮助你将原来既有的 Swift 代码移植成 Swift 3 语法；</p>
</li>
<li>
<p>Swift 2.3 可以直接过渡到 3.0，并提供相应最新的 SDK。</p>
</li>
</ul>
<p>以上为翻译内容，如有不到欢迎指出。</p>
<hr>
<p>今天笔者也更新了 Xcode 8，有一些感受和经验分享一下：</p>
<ol>
<li>
<p>选择模拟器的时候已经看不到 iPhone 4s，这是因为它无法升级至 iOS 10，已经默认被苹果抛弃了。所以如果要调试旧机型，记得手动添加进去。</p>
</li>
<li>
<p>如果你发现了自己注释快捷键失效了，可以试试关掉 Xcode，重启电脑。</p>
</li>
<li>
<p>运行程序时会发现控制台打印一大堆东西，简直逼死强迫症，要去除它们，只要进行如下操作：打开 <code>Product → Scheme → Edit Scheme</code>，并在弹出的窗口中选择 <code>Run → Arguments</code>，往 <code>Environment Variables</code> 中添加一条 <code>OS_ACTIVITY_MODE</code>, <code>value</code> 设置为 <code>disable</code>。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>还没抢到 HPV？试试这串 JS</title>
    <url>/2019/oh-hpv/</url>
    <content><![CDATA[<p>年初时候了解到了 HPV，几个月里，经历了若干次失败的尝试，功夫不负有心人，今天终于如愿抢到了疫苗。我决定将我期间的经历和尝试记录下来，如果你也有需要，不妨看一看。</p>
<a id="more"></a>
<h2 id="什么是-hpv">什么是 HPV<a title="#什么是-hpv" href="#什么是-hpv"></a></h2>
<p>HPV 英文名称 Human papillomavirus，西医学名“人乳头瘤病毒”，是一个拥有一百多种型号的家族。在女性恶性肿瘤中，宫颈癌的发病率仅次于乳腺癌，超过 90%的宫颈癌病例都与 HPV 感染有关。HPV 有三种类型：二价、四价、九价，下面是简单的对比表：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:center">疫苗种类</th>
<th style="text-align:center">二价</th>
<th style="text-align:center">四价</th>
<th style="text-align:center">九价</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">有效预防的 HPV 型号</td>
<td style="text-align:center">6，18</td>
<td style="text-align:center">6，11，16，18</td>
<td style="text-align:center">6，11，16，18，31，33，45，52，58</td>
</tr>
<tr>
<td style="text-align:center">国内规定的接种年龄</td>
<td style="text-align:center">9-45 周岁</td>
<td style="text-align:center">20-45 周岁</td>
<td style="text-align:center">16-26 周岁</td>
</tr>
<tr>
<td style="text-align:center">接种时间</td>
<td style="text-align:center">0，1，6 个月</td>
<td style="text-align:center">0，2，6 个月</td>
<td style="text-align:center">0，2，6 个月</td>
</tr>
<tr>
<td style="text-align:center">参考价格（3 针）</td>
<td style="text-align:center">1740 元</td>
<td style="text-align:center">2394 元</td>
<td style="text-align:center">3894 元</td>
</tr>
<tr>
<td style="text-align:center">主要功能</td>
<td style="text-align:center">预防 84.5%的宫颈癌</td>
<td style="text-align:center">预防 84.5%的宫颈癌金和 90%的生殖器疣</td>
<td style="text-align:center">预防 92.1%的宫颈癌和 90%的生殖器疣</td>
</tr>
</tbody>
</table></div></div><h2 id="杭州及周边疫苗预约信息">杭州及周边疫苗预约信息<a title="#杭州及周边疫苗预约信息" href="#杭州及周边疫苗预约信息"></a></h2>
<p>从 2019 年 2 月 27 日至今，我吐血整理了微信公众号“杭州本地宝”中发布过的四价和九价的疫苗预约点，若几次开放的数据不一致，以最近的为准，具体信息如下：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:center">预约点</th>
<th style="text-align:center">HPV 类型（价）</th>
<th style="text-align:center">预约方式</th>
<th style="text-align:center">预约条件</th>
<th style="text-align:center">开放人数/次</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">杭州东新</td>
<td style="text-align:center">四/九</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">杭州湖滨</td>
<td style="text-align:center">九</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">杭州凯旋</td>
<td style="text-align:center">九</td>
<td style="text-align:center">支付宝</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">230/350</td>
</tr>
<tr>
<td style="text-align:center">杭州凯旋</td>
<td style="text-align:center">四</td>
<td style="text-align:center">现场</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">杭州朝晖</td>
<td style="text-align:center">四</td>
<td style="text-align:center">电话/问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">50～60</td>
</tr>
<tr>
<td style="text-align:center">杭州西溪</td>
<td style="text-align:center">四</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">不明</td>
</tr>
<tr>
<td style="text-align:center">杭州米市巷</td>
<td style="text-align:center">四</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">杭州灵隐</td>
<td style="text-align:center">九</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">100～300</td>
</tr>
<tr>
<td style="text-align:center">杭州清波</td>
<td style="text-align:center">九</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">杭州半山</td>
<td style="text-align:center">九</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">杭州钱塘新区</td>
<td style="text-align:center">九</td>
<td style="text-align:center">网络登记</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">120</td>
</tr>
<tr>
<td style="text-align:center">杭州余杭</td>
<td style="text-align:center">九</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">余杭户籍/参保人员/辖区内学生/持居住证</td>
<td style="text-align:center">2000</td>
</tr>
<tr>
<td style="text-align:center">杭州萧山</td>
<td style="text-align:center">九</td>
<td style="text-align:center">摇号</td>
<td style="text-align:center">萧山户籍/参保地在萧山</td>
<td style="text-align:center">100+</td>
</tr>
<tr>
<td style="text-align:center">杭州滨江</td>
<td style="text-align:center">九</td>
<td style="text-align:center">摇号</td>
<td style="text-align:center">滨江户籍/参保地在滨江</td>
<td style="text-align:center">200</td>
</tr>
<tr>
<td style="text-align:center">杭州大江东</td>
<td style="text-align:center">九</td>
<td style="text-align:center">摇号</td>
<td style="text-align:center">大江东范围户籍/住大江东范围满 3 个月</td>
<td style="text-align:center">100+</td>
</tr>
<tr>
<td style="text-align:center">杭州建德新安江</td>
<td style="text-align:center">九</td>
<td style="text-align:center">现场</td>
<td style="text-align:center">建德户籍/住建德满 3 个月</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">杭州富阳</td>
<td style="text-align:center">九</td>
<td style="text-align:center">网络预约</td>
<td style="text-align:center">富阳户籍/住富阳满 3 个月</td>
<td style="text-align:center">120</td>
</tr>
<tr>
<td style="text-align:center">绍兴新昌</td>
<td style="text-align:center">九</td>
<td style="text-align:center">官方微信</td>
<td style="text-align:center">新昌户籍/住新昌满 3 个月</td>
<td style="text-align:center">200</td>
</tr>
<tr>
<td style="text-align:center">绍兴上虞</td>
<td style="text-align:center">九</td>
<td style="text-align:center">现场</td>
<td style="text-align:center">上虞户籍/住上虞满 3 个月</td>
<td style="text-align:center">不明</td>
</tr>
<tr>
<td style="text-align:center">绍兴诸暨</td>
<td style="text-align:center">九</td>
<td style="text-align:center">电话</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">不明</td>
</tr>
<tr>
<td style="text-align:center">绍兴越城</td>
<td style="text-align:center">九</td>
<td style="text-align:center">现场</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">150～200</td>
</tr>
<tr>
<td style="text-align:center">绍兴柯桥/市区</td>
<td style="text-align:center">九</td>
<td style="text-align:center">官方微信</td>
<td style="text-align:center">不限户籍，但需先到医院门诊激活就诊卡</td>
<td style="text-align:center">10～100</td>
</tr>
<tr>
<td style="text-align:center">金华</td>
<td style="text-align:center">四/九</td>
<td style="text-align:center">微信小程序</td>
<td style="text-align:center">金华市各区户籍或持金华市社会保障市民卡</td>
<td style="text-align:center">90～225</td>
</tr>
<tr>
<td style="text-align:center">舟山</td>
<td style="text-align:center">九</td>
<td style="text-align:center">电话、现场</td>
<td style="text-align:center">不限户籍、本辖区优先</td>
<td style="text-align:center">不明</td>
</tr>
<tr>
<td style="text-align:center">衢州</td>
<td style="text-align:center">九</td>
<td style="text-align:center">现场</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">800</td>
</tr>
<tr>
<td style="text-align:center">嘉兴</td>
<td style="text-align:center">九</td>
<td style="text-align:center">电话</td>
<td style="text-align:center">户籍地或居住地在南湖（经开）区范围内</td>
<td style="text-align:center">200</td>
</tr>
<tr>
<td style="text-align:center">海宁</td>
<td style="text-align:center">九</td>
<td style="text-align:center">网址</td>
<td style="text-align:center">海宁户籍</td>
<td style="text-align:center">150</td>
</tr>
<tr>
<td style="text-align:center">临海</td>
<td style="text-align:center">九</td>
<td style="text-align:center">网络预约</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">30</td>
</tr>
<tr>
<td style="text-align:center">台州</td>
<td style="text-align:center">九</td>
<td style="text-align:center">问卷星</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">41</td>
</tr>
<tr>
<td style="text-align:center">宁波海曙</td>
<td style="text-align:center">九</td>
<td style="text-align:center">现场</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">不明</td>
</tr>
<tr>
<td style="text-align:center">宁波各区</td>
<td style="text-align:center">九</td>
<td style="text-align:center">金苗宝 App</td>
<td style="text-align:center">不限户籍</td>
<td style="text-align:center">不明</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">四/九</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
</tbody>
</table></div></div><p>这里我要先吐槽一下几个小坑的预约经历：</p>
<ol>
<li><strong>金苗宝 App</strong>，它的使用率在宁波各大医院和社区服务中心的使用率还是蛮高的，尤其是 HPV 疫苗和流感疫苗基本上都是通过这个 App 预约，但是我试过两次，都是接近预约时间，预约功能就处于瘫痪状态，估计服务器内存不够，大量请求同时访问，高并发导致服务器处于超负荷状态（我猜的）。</li>
<li><strong>杭州钱塘新区 7 个公众号的疫苗预约</strong>，这次预约消息是很早就放出来的，总结了前几次憨憨的失败经验，我决定借助一点技术手段，这次很容易就从页面中抓出了 7 个 POST 请求的 Request URL 和 body，查阅网上资料现学写了一个 shell 脚本，摩拳擦掌跃跃欲试，只待良辰一到，可是现实再一次打击了我，居然还是没有抢到？！！后面再 review 了一下我的脚本，发现应该把七个请求做定时任务，进行异步执行。</li>
</ol>
<p>现在言归正传，杭州周边地区的预约地点对户籍和居住条件有限制，且多为现场或电话预约。<strong>近来疫苗供应有多起来的趋势</strong>，如果不是想打九价的女生即将超过 26 周岁或者有其它急迫的理由，不太建议大家离开自己的所在地区打疫苗，一来是无法刷医保，二来来回交通和时间成本也比较高。因此我建议：</p>
<p><strong>浙江省内（非杭州）户籍的女生</strong>：关注自己户籍所在地的疾控中心微信公众号，如富阳疾控、嘉兴疾控等，及时跟进公众号发布的信息。</p>
<p><strong>萧山、余杭、大江东、滨江户籍或参保地在这四地的女生</strong>：不要错过摇号的时间，毕竟其他区的女生都得不到这个机会。</p>
<p><strong>其他女生</strong>：能尝试的都可以试一下，尤其是江干凯旋中心的支付宝预约和杭州主城区各街道提供的的问卷星预约。输入问卷时，可以事先在输入法里设置快捷键，输入简单的字符串就能弹出个人信息，这样速度又快，也不担心填错。如果还是不行，下面介绍的小技巧，也许对你有帮助。</p>
<h3 id="支付宝抢疫苗攻略">支付宝抢疫苗攻略<a title="#支付宝抢疫苗攻略" href="#支付宝抢疫苗攻略"></a></h3>
<p>支付宝预约页面和微信不一样，他允许提早填好信息，非本人也可以帮忙预约，且页面上有倒计时，你只需要掐好提交按钮 enable 的时间，就看谁手速更快，网速更好了。</p>
<p>根据成功人士的建议：一定要提早十多分钟进页面填好信息，<strong>千万不要中途退出</strong>！！！亲测在有次手贱退出去了，然后就一直在页面上欣赏蚂蚁了（手动微笑）。</p>
<h2 id="问卷星抢疫苗攻略">问卷星抢疫苗攻略<a title="#问卷星抢疫苗攻略" href="#问卷星抢疫苗攻略"></a></h2>
<p>问卷星是我成功抢到疫苗的渠道，之前几个预约点在微信公众号里提供的问卷星链接是可以在电脑网页里打开的，当时我查看了一下它的前端代码，大概是这样：</p>
<p><img src="/2019/oh-hpv/hpv-html.png" alt="问卷 html 代码" class="φcx"></p>
<p>这令我们发现问卷星的几个输入框其实是有明显规律的，输入的值会成为 id 分别为 q1、q2、q3、q4 的元素的 value，哪怕问卷中的问题顺序发生了调整，我们也只需要通过模糊匹配，找到对应的 div id 和 input id 即可。</p>
<p>基本上预约信息上需要填写的不外乎<strong>姓名、联系方式、身份证、年龄</strong>等，这样你就可以引用下面这串 JS。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascript: <span class="keyword">void</span>((<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">&quot;div1&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            location.reload()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> hash = [[<span class="string">&quot;这里换成你的真实姓名&quot;</span>, <span class="regexp">/(姓名)|(名字)/</span>], [<span class="string">&quot;这里换成你的手机号&quot;</span>, <span class="regexp">/(手机)|(联系方式)/</span>], [<span class="string">&quot;这里换成你的年龄（周岁）&quot;</span>, <span class="regexp">/(年龄)/</span>], [<span class="string">&quot;这里换成你的身份证&quot;</span>, <span class="regexp">/(身份证)|(证件)/</span>], ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>;; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;div&quot;</span> + i) == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (!$(<span class="string">&quot;q&quot;</span> + i)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> title = $(<span class="string">&quot;div&quot;</span> + i).innerHTML;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; hash.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[j][<span class="number">1</span>].test(title)) &#123;</span><br><span class="line">                $(<span class="string">&quot;q&quot;</span> + i).value = hash[j][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开浏览器的开发者模式，在控制台中粘贴这串 JS，回车，网页上就会自动注入信息。</p>
<p><img src="/2019/oh-hpv/inject-js.png" alt class="φcx"></p>
<p>10 月 30 日这一天，因为写好了这个“外挂”，我对抢疫苗非常信心满满，不料这次他们设置了“只允许从微信中填写” 和“获取微信用户昵称、性别等（需登录）”，可见问卷设计者也在和我们在斗智斗勇啊🤦‍♀️。</p>
<p><img src="/2019/oh-hpv/you-should-login-wechat.png" alt class="φcx"></p>
<p>第一个解决起来也很简单，只需要用微信开发者工具打开网址即可。但是第二种我暂时没有找到解决方案，因为按照<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Web_Developer_Tools.html" target="_blank">微信官方文档</a>中所说，<strong>微信开发者工具只能调试自己账号绑定过的公众平台</strong>，不过好在这次下城区东新街道社区卫生服务中心没有强制要求微信登录。</p>
<p>最后，再感叹一下技术改变生活，nice～</p>
<hr>
<blockquote>
<p>（2020 年 2 月 2 日更新）前几天有网友给我提了一个 issue，我又重新去研究了一下微信 OAuth2 授权和自动化脚本的问题，相关结论也在 <a href="https://github.com/fiteen/fiteen.github.io/issues/1" target="_blank">issue</a> 中回复，有兴趣可以在下面交流。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HPV</tag>
      </tags>
  </entry>
  <entry>
    <title>App Store 审核经验</title>
    <url>/2018/review-experience/</url>
    <content><![CDATA[<h2 id="相关资料">相关资料<a title="#相关资料" href="#相关资料"></a></h2>
<h3 id="审核指南">审核指南<a title="#审核指南" href="#审核指南"></a></h3>
<ul>
<li><a href="https://developer.apple.com/cn/app-store/review/guidelines/" target="_blank">《App Store 审核指南》</a></li>
<li><a href="https://developer.apple.com/terms/" target="_blank">《苹果开发者计划许可协议》</a></li>
</ul>
<a id="more"></a>
<p>苹果官方会不定期更新 Guidelines 和 PLA，请及时关注。</p>
<h3 id="关键概念">关键概念<a title="#关键概念" href="#关键概念"></a></h3>
<ul>
<li>
<p><a href="https://developer.apple.com/support/itunes-connect/cn/" target="_blank">iTunes Connect</a></p>
<p>iTunes Connect 是一套以网页为基础的工具，用于管理在 App Store 上销售的面向 iPhone、iPad、Mac、Apple Watch、Apple TV 和 iMessage 的 app；同时也用于管理 iTunes Store 和 iBooks Store 上的内容。开发者通过 iTunes Connect 提交和管理 app，邀请用户使用 TestFlight 进行测试，添加税务和银行信息，以及访问销售报告等。</p>
</li>
<li>
<p>元数据</p>
<p>元数据指的是 iTunes Connect 中输入的 App 信息和平台版本信息——例如，App 名称、描述、关键词和屏幕快照。此信息的部分显示在 App Store 产品页面，并且可以被本地化。</p>
</li>
<li>
<p>二进制文件</p>
<p>包含在 ipa 包中的一个可执行文件，提审时需重点检查包括但不限于 info.plist、包／文件大小、icon 规格、私有 API、第三方 SDK、64 位等内容。</p>
</li>
</ul>
<h3 id="审核状态">审核状态<a title="#审核状态" href="#审核状态"></a></h3>
<p>开发者在审核过程中需要特别关注的两个 <a href="https://help.apple.com/itunes-connect/developer/?lang=zh-cn#/dev18557d60e" target="_blank">App 状态</a>为：</p>
<ul>
<li>
<p>正在等待审核（Waiting For Review）</p>
<p>您已经提交了一个新的 App 或者更新了一个版本。Apple 已经收到了您的 App 但还没有开始审核。在该状态下可以：</p>
<ul>
<li><a href="https://help.apple.com/itunes-connect/developer/?lang=zh-cn#/dev04f55d711" target="_blank">将构建版本从审核中移除</a></li>
<li>编辑某些 <a href="https://help.apple.com/itunes-connect/developer/?lang=zh-cn#/dev219b53a88" target="_blank">App 信息</a></li>
</ul>
</li>
<li>
<p>正在审核（In Review）</p>
<p>Apple 正在审核您的 App。您可以<a href="https://help.apple.com/itunes-connect/developer/?lang=zh-cn#/dev04f55d711" target="_blank">将构建版本从审核中移除</a>。</p>
</li>
</ul>
<p>一般这两个过程都会在 24-48 小时内完成，即从你提交到审核完成正常应在 2 天内结束，App 首次提交除外。</p>
<p>当 App 被拒超过三次，“正在等待审核”过程会延长，极有可能持续一周；若未按照苹果的要求操作，可能被拉入黑名单，“正在审核”过程无限延长。</p>
<h2 id="近期被拒案例及应对措施">近期被拒案例及应对措施<a title="#近期被拒案例及应对措施" href="#近期被拒案例及应对措施"></a></h2>
<h3 id="账号资质问题">账号资质问题<a title="#账号资质问题" href="#账号资质问题"></a></h3>
<p>对于监管敏感的行业和应用，App Store 的审核会更为苛刻。这类案例主要体现在理财、借贷、医疗类的 App，相关的应对方法有：</p>
<ol>
<li>
<p>证明你的公司，有提供相关资质。</p>
<p>如果 App 的公司主体具备资质，直接讲资质证明（如营业执照、政府背书）发给苹果审核团队；若不具备，需要将 App 放在有资质的公司主体的账号下提交。</p>
<p>如果苹果审核团队方面对 App 的性质存在误解，提供相关证明并及时沟通。</p>
</li>
<li>
<p>如果是个人开发者账号提交的应用，须升级为企业开发者账号后再提交。</p>
</li>
<li>
<p>如果是其他开发者账号（比如外包）替你开发，须将其他开发账号添加到你的苹果开发者账号下（在“用户和职能-添加 iTunes Connect 用户”操作）。</p>
</li>
<li>
<p>尽可能体现 App 产品与公司品牌的关联性，包括但不限于以下几点：</p>
<ul>
<li>App 名称的择定</li>
<li>在 App 的“关于我们”中，中英文介绍公司</li>
<li>提交“软件著作权登记证书”，或者“商标证书”</li>
<li>向苹果审核团队阐述 App 功能的运营主体、技术支持网站等</li>
</ul>
</li>
<li>
<p>设置开关，将敏感内容在审核期间隐藏，审核过后再显示。但近期苹果已经发现这一现象，会不定期抽查过审应用。这种做法也有被竞争对手举报的可能，一旦被查到可能面临被直接下架的风险。</p>
</li>
</ol>
<h3 id="元数据不规范">元数据不规范<a title="#元数据不规范" href="#元数据不规范"></a></h3>
<p>2018 年伊始，苹果爸爸就抛出了重磅炸弹——苹果 2.1 狗年大礼包。我们需要对照<a href="https://help.apple.com/itc/appsspec/#/" target="_blank">元数据规范</a>对本地信息进行修改和调整。</p>
<p>如果不需要更新 ipa 包，可以直接在被拒信息下面回复，明确告知对方：App 不存在这些问题或者我们已经对相关资源和功能作出了调整，请重新审核。切勿不沟通，直接重新提包，会被苹果认定默认存在大礼包中提及的问题。</p>
<p>iTC 中在上传屏幕快照时，以 5.5 寸为基准，条件允许时，为不同机型定制不同的屏幕快照更佳。</p>
<h3 id="内购">内购<a title="#内购" href="#内购"></a></h3>
<p>订阅、游戏内货币、游戏关卡、课程、会员等非实物交换类的虚拟物品，必须且只允许走内购渠道。此外，需要注意以下几点：</p>
<ul>
<li>支付页面不能使用网页作为载体，苹果会认为存在变更支付方式的可能</li>
<li>类别（如消耗型/非消耗性、自动续订/非续订）需要选择正确</li>
<li>提高产品审核通过率，iTC 中信息尽可能补充完整</li>
</ul>
<h3 id="隐私">隐私<a title="#隐私" href="#隐私"></a></h3>
<p>在 Apple 生态体系中，保护用户隐私总是第一要务。当需要访问用户的相册、相机、通讯录、位置、日历等，App 描述中应当注明 app 会要求访问哪些内容类型 (例如，位置、通讯录和日历等)，并说明当用户不授予许可时，app 的哪些功能会无法正常工作。</p>
<h2 id="如何提高过审速度">如何提高过审速度<a title="#如何提高过审速度" href="#如何提高过审速度"></a></h2>
<h3 id="沟通原则">沟通原则<a title="#沟通原则" href="#沟通原则"></a></h3>
<ul>
<li>
<p>尊重</p>
<p>回复时称对方为审核员，沟通过程中保持严肃、友好、认同的态度，对给出任何审核结果表示感谢。</p>
</li>
<li>
<p>积极</p>
<p>及时主动告知审核员我方的处理进度。中英文表达皆可，面对积极回复且礼貌的开发者，审核人员更愿意给出直接的意见。</p>
</li>
</ul>
<h3 id="以往经验">以往经验<a title="#以往经验" href="#以往经验"></a></h3>
<ul>
<li>In Review 状态不要手动撤回，可能会导致后续审核速度变慢。</li>
<li>对被拒原因不认可，可以直接在被拒消息后申诉。即使回复后直接重新提交新版本，审核员也会看到消息，可以在消息中告知，已经按照要求进行修改，这种情况下苹果的处理效率会高一些。</li>
<li>处理当前的审核结果一般是同一个审核员，提审后及时查看审核状态，一旦被拒及时回复，可以得到尽可能快对回应和处理。</li>
<li>提审之前，请先反复检查，避免低级问题或常见问题遗漏到苹果审核人员手中。若连续审核通过，后续审核速度会越来越快，反之，若连续被拒极有可能进入黑名单，审核速度越来越慢。</li>
<li>遇到竞争对手侵权可以向苹果投诉，但不要多人重复投诉，不然可能会拉长处理时间。</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>上架审核</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Mac 上为 Git 和终端设置代理</title>
    <url>/2018/set-up-sock5-or-http-proxy-for-git-on-mac/</url>
    <content><![CDATA[<p>我们常会遇到从 GitHub 中 clone 代码或终端执行命令速度感人的情况，这时如果手上有不错的代理，可以借助代理来更快地下载资源。</p>
<a id="more"></a>
<h2 id="查看代理的监听地址和端口">查看代理的监听地址和端口<a title="#查看代理的监听地址和端口" href="#查看代理的监听地址和端口"></a></h2>
<p>先在本地 Shadowsocks/V2Ray 客户端中查看设置的本机 sock5/http 监听端口和 Host。例如：</p>
<p><img src="/2018/set-up-sock5-or-http-proxy-for-git-on-mac/view-port.png" alt class="φcx"></p>
<h2 id="git">Git<a title="#git" href="#git"></a></h2>
<p>通常我们 clone 代码时有以下两种方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTPS 协议</span></span><br><span class="line">https://github.com/accountname/projectname.git</span><br><span class="line"><span class="comment"># SSH 协议</span></span><br><span class="line">git@github.com:accountname/projectname.git</span><br></pre></td></tr></table></figure>
<h3 id="设置-https-协议的代理">设置 HTTPS 协议的代理<a title="#设置-https-协议的代理" href="#设置-https-协议的代理"></a></h3>
<p>以上面的配置为例，有如下两种方案：</p>
<p>设置全局 git 代理，注意这里不需要设置 <code>https.proxy</code>，<a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpproxy" target="_blank">Git Documentation</a> 中没有这个参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 socks5 代理</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line"><span class="comment"># 用 socks5h 速度更快</span></span><br><span class="line">git config --global http.proxy socks5h://127.0.0.1:1080</span><br><span class="line"><span class="comment"># 设置 http 代理</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:1087</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>ip</code> 和 <code>port</code> 根据自己本地实际配置修改。</p>
</blockquote>
<p>取消代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure>
<h3 id="单独设置-ssh-协议的代理">单独设置 SSH 协议的代理<a title="#单独设置-ssh-协议的代理" href="#单独设置-ssh-协议的代理"></a></h3>
<p>修改用户目录下文件  <code>~/.ssh/config</code> 里的内容，对 GitHub 域名作单独处理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    <span class="comment"># 若使用的是默认端口，设置如下</span></span><br><span class="line">    HostName           github.com</span><br><span class="line">    <span class="comment"># 如果想用443端口，设置如下</span></span><br><span class="line">    <span class="comment"># Hostname         ssh.github.com</span></span><br><span class="line">    <span class="comment"># Port             443</span></span><br><span class="line">    User               git</span><br><span class="line">    <span class="comment"># 如果是 SOCKS5 代理，取消下面这行注释，并把 1080 改成自己 SOCKS5 代理的端口</span></span><br><span class="line">    ProxyCommand     nc -x localhost:1080 %h %p</span><br><span class="line">    <span class="comment"># 如果是 HTTP 代理，取消下面这行注释，并把 1087 改成自己 HTTP 代理的端口</span></span><br><span class="line">    <span class="comment"># ProxyCommand     socat - PROXY:127.0.0.1:%h:%p,proxyport=1087</span></span><br></pre></td></tr></table></figure>
<h2 id="shell-终端">Shell 终端<a title="#shell-终端" href="#shell-终端"></a></h2>
<p>想让终端走代理那么只需在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件中，直接写入以下内容并保存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> setproxy=<span class="string">&quot;export ALL_PROXY=socks5://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="built_in">alias</span> unsetproxy=<span class="string">&quot;unset ALL_PROXY&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ip=<span class="string">&quot;curl -i http://ip.cn&quot;</span></span><br></pre></td></tr></table></figure>
<p>利用终端下载资源时，先执行  <code>setproxy</code> 命令，结束后执行  <code>unsetproxy</code> 命令如果终端提示 <code>command not found: setproxy</code>，说明配置没有生效，执行一下  <code>source ~/.bashrc</code> 或 <code>source ~/.zshrc</code> 即可。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
        <tag>V2Ray</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>App 多渠道打包及重签名方案</title>
    <url>/2019/solution-of-app-muti-channel-pack/</url>
    <content><![CDATA[<p>众所周知，渠道包是国内 Android 应用市场中常用的分发方式。渠道包中会包含不同的渠道信息，方便我们后续统计 App 在各分发渠道的下载量、用户量、留存率等，有针对地调整应用内容或是推广方案等。随着国内 iOS 应用上架越来越难，衍生出了很多企业包，为了方便采集数据，也会用多渠道的方案。</p>
<a id="more"></a>
<p>另外，项目进展过程中，可能会出现一些临时新增渠道的需求，这时回到工程中重新打包是比较费时的，有没有办法加快打包速度呢？下文中分享了一些方案。</p>
<h2 id="ios-多渠道打包方案">iOS 多渠道打包方案<a title="#ios-多渠道打包方案" href="#ios-多渠道打包方案"></a></h2>
<p>iOS 打渠道包目前想到的就只有两种方式，一种是通过<a href="#muti-target-way">多 target 方式</a>，另一种是<a href="#revise-plist-way">修改 plist 文件方式</a>。</p>
<h3 id="&lt;span-id=&quot;muti-target-way&quot;&gt;多-target-方式&lt;/span&gt;"><span id="muti-target-way">多 target 方式</span><a title="#&lt;span-id=&quot;muti-target-way&quot;&gt;多-target-方式&lt;/span&gt;" href="#&lt;span-id=&quot;muti-target-way&quot;&gt;多-target-方式&lt;/span&gt;"></a></h3>
<p>点击项目中的 target，右键选择 <code>Duplicate</code>。可以修改下图标红框的三处：target 名称、plist 名称和 scheme 名称。</p>
<p><img src="/2019/solution-of-app-muti-channel-pack/target-copy.png" alt class="φcx"></p>
<p>判断当前是哪个 target，可以通过添加宏定义实现，方式就是在 <code>Build Settings</code> 找到 <code>Preprocessor Macros</code>，填入宏定义名。</p>
<p>代码中这样判断：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  TARGET1MACROS</span></span><br><span class="line">    <span class="comment">// target1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined TARGET2MACROS</span></span><br><span class="line">    <span class="comment">// target2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>具体打包脚本就不介绍了，读者可以自行网上搜索，这种方式的缺点是一个渠道打一次，效率较低。下面着重分享修改 plist 的批量打包方式。</p>
<h3 id="&lt;span-id=&quot;revise-plist-way&quot;&gt;修改-plist-方式&lt;/span&gt;"><span id="revise-plist-way">修改 plist 方式</span><a title="#&lt;span-id=&quot;revise-plist-way&quot;&gt;修改-plist-方式&lt;/span&gt;" href="#&lt;span-id=&quot;revise-plist-way&quot;&gt;修改-plist-方式&lt;/span&gt;"></a></h3>
<p>下面用一个简单的 Demo 演示一下：</p>
<p><strong>第一步</strong>：创建工程名为 MultiChannelDemo 的项目，并在项目中新建一个 <code>Channel.plist</code> 文件，plist 中设置 Channel 字段，值为 channel01。然后在页面上设置一个 label 标签用于显示当前的渠道名称，渠道名可以通过下面的代码获取到：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *channelDic = [<span class="built_in">NSDictionary</span> dictionaryWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;Channel&quot;</span> ofType:<span class="string">@&quot;plist&quot;</span>]];</span><br><span class="line"><span class="built_in">NSString</span> *channel = channelDic[<span class="string">@&quot;Channel&quot;</span>];</span><br></pre></td></tr></table></figure>
<p><strong>第二步</strong>：把这个项目用可用的证书正常打一个母包，解压这个 ipa 包可以获得一个名为 <code>Payload</code> 的文件夹，里面是一个 .app 文件，右键显示其包内容，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── Base.lproj</span><br><span class="line">├── Channel.plist</span><br><span class="line">├── Info.plist</span><br><span class="line">├── MultiChannelDemo</span><br><span class="line">├── PkgInfo</span><br><span class="line">├── _CodeSignature</span><br><span class="line">└── embedded.mobileprovision</span><br></pre></td></tr></table></figure>
<p>可以看到，里面的 <code>Channel.plist</code> 也就是在前面工程中新建的存储渠道信息的 plist，我们会修改里面的 Channel 再生成新的渠道包。</p>
<p><strong>第三步</strong>：提取描述文件用于重签名，上一步中 Payload 的文件夹里有一个 <code>embedded.mobileprovision</code> 文件，这就是我们需要的文件。</p>
<p><strong>第四步</strong>：新建一个纯文本，里面输入你要新增的渠道号，如：</p>
<p><img src="/2019/solution-of-app-muti-channel-pack/channel-list-txt.png" alt class="φcx"></p>
<p><strong>第五步</strong>：写一个脚本文件，内容如下：</p>
<figure class="highlight plain"><figcaption><span>ChannelPackage.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 输入的包名</span><br><span class="line"></span><br><span class="line">name&#x3D;&quot;MultiChannelDemo&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;----------SDK 渠道包----------&quot;</span><br><span class="line"></span><br><span class="line">appName&#x3D;&quot;$&#123;name&#125;.app&quot;</span><br><span class="line"></span><br><span class="line">plistBuddy&#x3D;&quot;&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy&quot;</span><br><span class="line"></span><br><span class="line">configName&#x3D;&quot;Payload&#x2F;$&#123;appName&#125;&#x2F;Channel.plist&quot;</span><br><span class="line"></span><br><span class="line">ipa&#x3D;&quot;$&#123;name&#125;.ipa&quot;</span><br><span class="line"></span><br><span class="line"># 输出的新包所在的文件夹名</span><br><span class="line"></span><br><span class="line">outUpdateAppDir&#x3D;&quot;ChannelPackages&quot;</span><br><span class="line"></span><br><span class="line"># entitlements.plist 路径</span><br><span class="line"></span><br><span class="line">entitlementsDir&#x3D;&quot;entitlements.plist&quot;</span><br><span class="line"></span><br><span class="line"># 切换到当前目录</span><br><span class="line"></span><br><span class="line">currDir&#x3D;$&#123;PWD&#125;</span><br><span class="line"></span><br><span class="line">cd $&#123;currDir&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;-----$&#123;currDir&#125;&quot;</span><br><span class="line"></span><br><span class="line">rm -rf Payload</span><br><span class="line"></span><br><span class="line"># 解压缩-o：覆盖文件 -q：不显示解压过程</span><br><span class="line"></span><br><span class="line">unzip -o -q $&#123;ipa&#125;</span><br><span class="line"></span><br><span class="line"># 删除旧的文件夹，重新生成</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;outUpdateAppDir&#125;</span><br><span class="line"></span><br><span class="line">mkdir $&#123;outUpdateAppDir&#125;</span><br><span class="line"></span><br><span class="line"># 删除旧的 entitlements.plist，重新生成</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;entitlementsDir&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -x -c &quot;print :Entitlements &quot; &#x2F;dev&#x2F;stdin &lt;&lt;&lt; $(security cms -D -i Payload&#x2F;$&#123;appName&#125;&#x2F;embedded.mobileprovision) &gt; entitlements.plist</span><br><span class="line"></span><br><span class="line">echo &quot;------------------------开始打包程序------------------------&quot;</span><br><span class="line"></span><br><span class="line"># 渠道列表文件开始打包</span><br><span class="line"></span><br><span class="line">for line in $(cat ChannelList.txt)</span><br><span class="line"></span><br><span class="line"># 循环数组，修改渠道信息</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line"># 修改 plist 中的 Channel 值</span><br><span class="line"></span><br><span class="line">$plistBuddy -c &quot;Set :Channel $line&quot; $&#123;configName&#125;</span><br><span class="line"></span><br><span class="line"># app 重签名</span><br><span class="line"></span><br><span class="line">rm -rf Payload&#x2F;$&#123;appName&#125;&#x2F;_CodeSignature</span><br><span class="line"></span><br><span class="line">cp embedded.mobileprovision &quot;Payload&#x2F;$&#123;appName&#125;&#x2F;embedded.mobileprovision&quot;</span><br><span class="line"></span><br><span class="line"># 填入可用的证书 ID</span><br><span class="line"></span><br><span class="line">codesign -f -s &quot;iPhone Distribution: XXXXXX.&quot; Payload&#x2F;$&#123;appName&#125;  --entitlements $&#123;entitlementsDir&#125;</span><br><span class="line"></span><br><span class="line"># 若输出 Payload&#x2F;MultiChannelDemo.app: replacing existing signature 说明重签名完成</span><br><span class="line"></span><br><span class="line"># 压缩 -r:递归处理，将指定目录下的所有文件和子目录一并处理 -q:不显示处理过程</span><br><span class="line"></span><br><span class="line">zip -rq &quot;$&#123;outUpdateAppDir&#125;&#x2F;$line.ipa&quot; Payload</span><br><span class="line"></span><br><span class="line">echo &quot;----------渠道$&#123;line&#125;打包已完成----------&quot;</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>脚本里的信息请根据你实际情况修改。到这里准备工作都完成了，需要的文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── ChannelList.txt</span><br><span class="line">├── ChannelPackage.sh</span><br><span class="line">├── MultiChannelDemo.ipa</span><br><span class="line">└── embedded.mobileprovision</span><br></pre></td></tr></table></figure>
<p><strong>第六步</strong>：在当前目录下执行脚本文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh ChannelPackage.sh</span><br></pre></td></tr></table></figure>
<p>打包完成后生成的 <code>ChannelPackages</code> 文件夹下，就是我们需要的渠道包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── ChannelList.txt</span><br><span class="line">├── ChannelPackage.sh</span><br><span class="line">├── ChannelPackages</span><br><span class="line">│   ├── channel02.ipa</span><br><span class="line">│   ├── channel03.ipa</span><br><span class="line">│   └── channel04.ipa</span><br><span class="line">├── MultiChannelDemo.ipa</span><br><span class="line">├── Payload</span><br><span class="line">│   └── MultiChannelDemo.app</span><br><span class="line">├── embedded.mobileprovision</span><br><span class="line">└── entitlements.plist</span><br></pre></td></tr></table></figure>
<p>这种自动化打包的方式，可以规避掉 Xcode 本身打包编译的部分时间，快速出包。</p>
<h2 id="android-多渠道打包方案">Android 多渠道打包方案<a title="#android-多渠道打包方案" href="#android-多渠道打包方案"></a></h2>
<p>下文介绍的是美团技术团队开源的 <a href="https://github.com/Meituan-Dianping/walle" target="_blank">Walle</a>，它有 <a href="#gradle-way">Gradle 插件</a>和<a href="#command-way">命令行</a>两种使用方式，前者快速集成，后者满足自定义需求。</p>
<h3 id="&lt;span-id=&quot;gradle-way&quot;&gt;gladle-插件方式&lt;/span&gt;"><span id="gradle-way">Gladle 插件方式</span><a title="#&lt;span-id=&quot;gradle-way&quot;&gt;gladle-插件方式&lt;/span&gt;" href="#&lt;span-id=&quot;gradle-way&quot;&gt;gladle-插件方式&lt;/span&gt;"></a></h3>
<h4 id="配置-build.gradle">配置 build.gradle<a title="#配置-build.gradle" href="#配置-build.gradle"></a></h4>
<p>在项目根目录下的 <code>build.gradle</code> 文件中添加 Walle 插件依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.meituan.android.walle:plugin:1.1.6&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 app 目录下的 <code>build.gradle</code> 文件中 apply 插件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;walle&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.meituan.android.walle:library:1.1.6&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置插件">配置插件<a title="#配置插件" href="#配置插件"></a></h4>
<p>在 app 目录下的 <code>build.gradle</code> 文件中进行渠道配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">walle &#123;</span><br><span class="line">    <span class="comment">// 指定渠道包的输出路径</span></span><br><span class="line">    apkOutputFolder = <span class="keyword">new</span> File(<span class="string">&quot;$&#123;project.buildDir&#125;/outputs/channels&quot;</span>);</span><br><span class="line">    <span class="comment">// 定制渠道包的APK的文件名称</span></span><br><span class="line">    apkFileNameFormat = <span class="string">&#x27;$&#123;appName&#125;_v$&#123;versionName&#125;_$&#123;channel&#125;.apk&#x27;</span>;</span><br><span class="line">    <span class="comment">// 渠道配置文件</span></span><br><span class="line">    channelFile = <span class="keyword">new</span> File(<span class="string">&quot;$&#123;project.getProjectDir()&#125;/channel&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>渠道配置文件里的内容格式详见：<a href="https://github.com/Meituan-Dianping/walle/blob/master/app/channel" target="_blank">渠道配置文件示例</a>。</p>
<h4 id="如何获取渠道信息">如何获取渠道信息<a title="#如何获取渠道信息" href="#如何获取渠道信息"></a></h4>
<p>在需要填写渠道信息的地方引用这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String channel = WalleChannelReader.getChannel(<span class="keyword">this</span>.getApplicationContext());</span><br></pre></td></tr></table></figure>
<h4 id="如何生成渠道包">如何生成渠道包<a title="#如何生成渠道包" href="#如何生成渠道包"></a></h4>
<p>用 <code>assemble$&#123;variantName&#125;Channels</code> 指令，导出 apk 包。</p>
<h3 id="&lt;span-id=&quot;command-way&quot;&gt;命令行方式&lt;/span&gt;"><span id="command-way">命令行方式</span><a title="#&lt;span-id=&quot;command-way&quot;&gt;命令行方式&lt;/span&gt;" href="#&lt;span-id=&quot;command-way&quot;&gt;命令行方式&lt;/span&gt;"></a></h3>
<p>通过命令行方式，可以不打开 IDE，直接导出新渠道的 apk。步骤如下：</p>
<p>首先，新建一个文件夹，取用一个上面步骤导出的 apk 包，再下载 <a href="https://github.com/Meituan-Dianping/walle/releases" target="_blank">walle-cli-all.jar</a>，两者都放置在这个文件夹目录下。</p>
<p>然后，在文件夹目录下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar walle-cli-all.jar put -c <span class="variable">$&#123;channelName&#125;</span> <span class="variable">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>
<p>若上面的命令执行成功，会在当前目录下生成新的渠道包，名称为 <code>$&#123;apkName&#125;_$&#123;channelName&#125;.apk</code></p>
<p>如果要批量写入渠道，可以这样，渠道之间用逗号隔开：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar walle-cli-all.jar batch -c <span class="variable">$&#123;channelName0&#125;</span>,<span class="variable">$&#123;channelName1&#125;</span>,<span class="variable">$&#123;channelName2&#125;</span> <span class="variable">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>
<p>或者指定渠道配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar walle-cli-all.jar batch -c <span class="variable">$&#123;channelFile&#125;</span> <span class="variable">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果要写入额外信息，参考<a href="https://github.com/Meituan-Dianping/walle/blob/master/walle-cli/README.md" target="_blank">官方文档</a>。</p>
</blockquote>
<p>如果要检查/显示渠道，命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar walle-cli-all.jar show <span class="variable">$&#123;apkName&#125;</span>.apk</span><br></pre></td></tr></table></figure>
<p>Walle 现在既能满足新应用签名方案对安全性的要求，也能满足对渠道包打包时间的要求，有需要的可以尝试。</p>
]]></content>
      <categories>
        <category>iOS</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>重签名</tag>
      </tags>
  </entry>
  <entry>
    <title>你应该了解的 IDFA</title>
    <url>/2017/what-is-idfa/</url>
    <content><![CDATA[<h2 id="何为-idfa">何为 IDFA<a title="#何为-idfa" href="#何为-idfa"></a></h2>
<p><a href="https://developer.apple.com/documentation/adsupport/asidentifiermanager" target="_blank">IDFA</a>，苹果 iOS6 开始新增的广告标识符， 全称 Identifier For Advertising，是每台 iOS 设备的唯一 ID，是投放定向广告的唯一方法。</p>
<a id="more"></a>
<p>在苹果禁用 UDID 后，IDFA 成为了标识 iPhone 用户的标准。通常用于广告追踪，在同一设备的不同 App 间进行信息共享。</p>
<p>IDFA 是一段 16 进制的 32 位字符串，例如<code>D7DFA3F1-0E1C-49CD-AFBC-75601390FEA2</code>。可以通过以下代码获取：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;AdSupport/ASIdentifierManager.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</span><br></pre></td></tr></table></figure>
<p>这个标识符虽然是唯一的，但并不是固定不变的，用户可以通过以下两种方式进行重置：</p>
<ul>
<li>设置→隐私→广告→还原广告标识符</li>
<li>设置→通用→还原→还原所有设置/还原位置与信息</li>
</ul>
<p>iOS10 之后，还新增了“<strong>限制广告追踪</strong>” 的设置，所以在获取 IDFA 之前，最好优先判断一下 <code>[[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]</code> 返回的 BOOL 值，假如返回的是 YES，则能获取正确的 IDFA，否则获取到的字符串就会变成 <code>00000000-0000-0000-0000-000000000000</code>。</p>
<p>因此，IDFA 并不能成为精确标识用户唯一性的符号。如果要确保唯一且固定，建议采用 UUID+Keychain 的方式，或者借助 iOS 系统可以获取的参数自定义一套算法去生成标志符。</p>
<h2 id="检查是否使用-idfa">检查是否使用 IDFA<a title="#检查是否使用-idfa" href="#检查是否使用-idfa"></a></h2>
<p>当 App 提交应用市场审核的时候，苹果会询问“<em>此 App 是否使用广告标识符号（IDFA）</em>”。这里除了本地代码以外，还需要鉴别导入的任何第三方库中，是否使用了 IDFA。检查的方法很简单：</p>
<ol>
<li>打开终端 cd 到要检查的文件根目录</li>
<li>执行语句 <code>grep -r advertisingIdentifier . </code></li>
</ol>
<p>以含 IDFA 的友盟 SDK 为例，会出现 matches 的记录。</p>
<p><img src="/2017/what-is-idfa/grep-command.png" alt="检查命令" class="φcx"></p>
<h2 id="审核时关于-idfa-选项的选择">审核时关于 IDFA 选项的选择<a title="#审核时关于-idfa-选项的选择" href="#审核时关于-idfa-选项的选择"></a></h2>
<p>那么如果选择了 “是”，就会提示你选择勾选 4 个选项框：</p>
<ol>
<li>
<p><strong>在 App 内投放广告</strong></p>
<p>服务应用中的广告。如果你的应用中集成了广告的时候，你需要勾选这一项。</p>
</li>
<li>
<p><strong>标明此 App 安装来自先前投放的特定广告</strong></p>
<p>跟踪广告带来的安装。如果你使用了第三方的工具来跟踪广告带来的激活以及一些其他事件，但是应用里并没有展示广告你需要勾选这一项。</p>
</li>
<li>
<p><strong>标明此 App 中发生的操作来自先前投放的广告</strong></p>
<p>跟踪广告带来的用户的后续行为。如果你使用了第三方的工具来跟踪广告带来的激活以及一些其他事件，你需要勾选这一项。</p>
</li>
<li>
<p><strong>iOS 中的“限制广告跟踪”设置</strong></p>
<p>对您的应用使用 IDFA 的目的做下确认，只要您获取了 IDFA，那么这一项都是需要勾选的。</p>
</li>
</ol>
<blockquote>
<p><strong>总结</strong></p>
<ol>
<li>如果你的应用里只是集成了广告，不追踪广告带来的激活行为，那么选择 1 和 4；</li>
<li>如果你的应用没有广告，而又获取了 IDFA，选择 2 和 4；</li>
<li>如果你的应用没有广告，但是需要追踪广告带来的激活行为，那么选择 2、3 和 4；</li>
<li>如果你的应用里集成了广告，而且使用了 SDK 等用来追踪广告带来的激活行为，需要选择 1、2、3 和 4 。</li>
</ol>
</blockquote>
<p>如果还是无法确定如何选择，可以参考第三方的官方文档，基本上都会在开发文档中体现。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>IDFA</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 中 atomic 和 nonatomic 的区别</title>
    <url>/2017/the-difference-between-the-atomic-and-nonatomic-attributes/</url>
    <content><![CDATA[<p><code>nonatomic</code>（非原子性） 和 <code>atomic</code>（原子性） 是 iOS 开发中用 @property 声明属性时，常用的两个关键字。</p>
<a id="more"></a>
<p>看下面三种属性的声明方式：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>) <span class="built_in">UITextField</span> *name;</span><br><span class="line"><span class="keyword">@property</span>(atomic, <span class="keyword">retain</span>) <span class="built_in">UITextField</span> *name;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="built_in">UITextField</span> *name;</span><br></pre></td></tr></table></figure>
<p>2、3 的意思是一样的，不写的时候默认声明成 <code>atomic</code>。</p>
<h2 id="内部实现">内部实现<a title="#内部实现" href="#内部实现"></a></h2>
<p>如<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocProperties.html" target="_blank">苹果官方文档</a>中描述的那样，它们系统生成的存取方法是不一样的：</p>
<p><code>nonatomic</code> 对象的存取方法实现如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UITextField</span> *) name &#123;</span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) setName:(<span class="built_in">UITextField</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (_name != name) &#123;</span><br><span class="line">    	[_name release];</span><br><span class="line">    	_name = [name <span class="keyword">retain</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而系统为 <code>atomic</code> 对象生成的存取方法会进行<strong>加锁</strong>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UITextField</span> *) name &#123;</span><br><span class="line">    <span class="built_in">UITextField</span> *res = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        res = [[_name <span class="keyword">retain</span>] autorelease];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) setName:(<span class="built_in">UITextField</span> *)name &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (_name != name) &#123;</span><br><span class="line">      	    [_name release];</span><br><span class="line">      	    _name = [name <span class="keyword">retain</span>];</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程安全">线程安全<a title="#线程安全" href="#线程安全"></a></h2>
<p><code>atomic</code> 可以保证 setter 和 getter 操作不受其它线程影响，因为锁的缘故，能够优先执行完当前操作：</p>
<blockquote>
<p>线程 A 的 setter <strong>进行到一半</strong>，线程 B 调用了 getter，那么会执行完 setter 再执行 getter，线程 B 还是能得到线程 A setter 后<strong>完好无损</strong>的对象。</p>
</blockquote>
<p>那么它能保证整个对象就是线程安全的吗？</p>
<p>答案是并不能，当几个线程同时调用 setter/getter 时，能得到一个完整的值，但这个值无法确定，举个例子：</p>
<blockquote>
<p>线程 A 调了 getter，<strong>与此同时</strong>线程 B、C 调了 setter，那么 A 最后 getter 到的值，可能是</p>
<ol>
<li>B、C 未 setter 之前的原始值</li>
<li>B setter 后的值</li>
<li>C setter 后的值</li>
</ol>
</blockquote>
<p>除了存取之外，线程安全还有其它的操作，比如：</p>
<blockquote>
<p>线程 A 正在 getter/setter 时，线程 B 同时进行 release，可能会直接 crash。</p>
</blockquote>
<p>因此，我们只能认定 <code>atomic</code> 是<strong>存取过程</strong>中的线程安全，并不是完全线程安全，别的线程也可以进行存取之外的操作，真正的线程安全需要开发者自己来保证。</p>
<p>而 <code>nonatomic</code> 明显就是线程不安全的，如果有两个线程访问同一个属性，会出现无法预料的结果。因此 <code>nonatomic</code> 耗费的资源少，速度要比 <code>atomic</code> 快，性能也更好。</p>
<h2 id="使用">使用<a title="#使用" href="#使用"></a></h2>
<p>在 iOS 应用中，大多数情况都是用在主线程上，不存在并发的问题，出于性能考虑，更倾向于用 <code>nonatomic</code>。</p>
<p>而在 OSX 中，需要考虑多线程通讯，更适合用相对安全的 <code>atomic</code> 处理。</p>
<h2 id="总结">总结<a title="#总结" href="#总结"></a></h2>
<p>综上，两者的区别可以总结如下：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="padding:0"></th>
<th style="text-align:center">atomic</th>
<th style="text-align:center">nonatomic</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">是否默认</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✘</td>
</tr>
<tr>
<td style="text-align:left">内部实现</td>
<td style="text-align:center">存取过程中加锁</td>
<td style="text-align:center">存取过程中不加锁</td>
</tr>
<tr>
<td style="text-align:left">是否线程安全</td>
<td style="text-align:center">存取过程中线程安全</td>
<td style="text-align:center">线程不安全</td>
</tr>
<tr>
<td style="text-align:left">性能</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">好</td>
</tr>
<tr>
<td style="text-align:left">适用于</td>
<td style="text-align:center">OSX 系统</td>
<td style="text-align:center">iOS 系统</td>
</tr>
</tbody>
</table></div></div>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>原子性</tag>
      </tags>
  </entry>
  <entry>
    <title>释放你的内存——Xcode 缓存清理</title>
    <url>/2017/xcode-clean/</url>
    <content><![CDATA[<p>Xcode 使用久了经常会遇到系统内存不足的情况，我们来看看哪些缓存是可以清理的。</p>
<a id="more"></a>
<h2 id="设备版本支持文件">设备版本支持文件<a title="#设备版本支持文件" href="#设备版本支持文件"></a></h2>
<p><strong>路径</strong>：<code>~/Library/Developer/Xcode/iOS DeviceSupport</code>。</p>
<p>存放的是所有真机调试过的设备版本支持文件，每个版本文件夹有几个 G 的大小，删除后可恢复，重新连接设备时可以重新生成相应版本的文件。</p>
<p><strong>结论</strong>：文件较大，建议<strong>删除不需要的版本文件夹</strong>，比如一些旧版。</p>
<h2 id="模拟器型号">模拟器型号<a title="#模拟器型号" href="#模拟器型号"></a></h2>
<p><strong>路径</strong>：<code>~/Library/Developer/CoreSimulator/Devices</code>。</p>
<p>存放的是模拟器。每个模拟器标识符代表一台模拟器设备，具体见 <code>device.plist</code>。删除前先关闭所有模拟器，删除后不可恢复，但下次启动时可以重新创建模拟器。</p>
<p><strong>结论</strong>：文件较大，可以选择<strong>删除部分模拟器</strong>，或者全删后，重新手动下载。</p>
<h2 id="项目编译产生的缓存">项目编译产生的缓存<a title="#项目编译产生的缓存" href="#项目编译产生的缓存"></a></h2>
<p><strong>路径</strong>：<code>~/Library/Developer/Xcode/DerivedData</code>。</p>
<p>存放的是 Xcode 编译项目产生的缓存，可重新生成。但如果删除了，下次编译时项目时会需要更多时间，可以保留当前需要维护的项目文件夹。</p>
<p><strong>结论</strong>：文件大小看项目规模，建议<strong>删除无需维护项目缓存</strong>。</p>
<h2 id="打包历史记录">打包历史记录<a title="#打包历史记录" href="#打包历史记录"></a></h2>
<p><strong>路径</strong>：<code>~/Library/Developer/Xcode/Archives</code>。</p>
<p>存放的是按日期分类的 <code>.xcarchive</code> 文件。<code>.xcarchive</code> 是通过 Xcode 或者 xcodebuild archive 打包生成的文件，里面包括了.app 文件、dSYM 符号文件等。它也对应的 Xcode-organizer 下的 Archives 列表，删除后<strong>不可恢复</strong>。</p>
<p><strong>结论</strong>：文件大小看包体积，建议<strong>删除多余的打包记录</strong>。</p>
<h2 id="打包产生的-app-icon-历史版本">打包产生的 App icon 历史版本<a title="#打包产生的-app-icon-历史版本" href="#打包产生的-app-icon-历史版本"></a></h2>
<p><strong>路径</strong>：<code>~/Library/Developer/Xcode/Products</code>。</p>
<p><strong>结论</strong>：文件较小，建议<strong>全部删除</strong>。</p>
<h2 id="playground-项目缓存">Playground 项目缓存<a title="#playground-项目缓存" href="#playground-项目缓存"></a></h2>
<p><strong>路径</strong>：<code>~/Library/Developer/XCPGDevices</code>。</p>
<p>存放的是建立/运行 Playground 项目时产生的缓存，删除后可恢复，运行时又会重新生成。</p>
<p><strong>结论</strong>：文件大小看项目规模，建议<strong>全部删除</strong>。</p>
<h2 id="描述文件">描述文件<a title="#描述文件" href="#描述文件"></a></h2>
<p><strong>路径</strong>：<code>~/Library/MobileDevice/Provisioning Profiles</code>。</p>
<p>存放的是 App 签名时的描述文件，删除后可以再从苹果开发者账号中下载。</p>
<p><strong>结论</strong>：文件较小，可以选择<strong>删除无用的描述文件</strong>。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 代码块生成和移植的小技巧</title>
    <url>/2016/xcode-code-snippets/</url>
    <content><![CDATA[<p>为了提升开发效率，程序员常会在 IDE 中配置自己常用代码块（Code Snippets）。这样编程的时候，只需输入简单的几个符号和字母，就能联想出大段的代码模版，从而减少重复开发的工作。</p>
<a id="more"></a>
<blockquote>
<p>由于 Xcode 升级之后，代码块的位置发生了变化，我对文章内容重新进行了修正（2019.12.11）。</p>
</blockquote>
<h2 id="生成代码块">生成代码块<a title="#生成代码块" href="#生成代码块"></a></h2>
<p>Xcode 10 之后，代码块管理模块就从 Xcode 的右下角移到了右上角的 bar 上。Xcode 11 中更是将代码块和其它功能一同整合进了 <code>+</code> 按钮中。</p>
<p><strong>第一步</strong>：在 Xcode 代码编辑栏里写好你想要作为代码块的代码，可修改的代码部分以 <code>&lt;#code#&gt;</code> 形式代替；</p>
<p><strong>第二步</strong>：选中这部分代码，点击右键，选择 <code>Create Code Snippet</code>，会出现代码块编辑框。</p>
<p><img src="/2016/xcode-code-snippets/code-snippets-sample.png" alt="添加代码块" class="φcx"></p>
<p><strong>第三步</strong>：在编辑框中输入这几个选项对应的内容：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>配置项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Title</td>
<td>标题（代码联想时会显示）</td>
</tr>
<tr>
<td>Summary</td>
<td>描述文字（代码联想时会显示）</td>
</tr>
<tr>
<td>Platform：</td>
<td>可以使用的平台（如 iOS）</td>
</tr>
<tr>
<td>Language</td>
<td>可以在哪些语言中使用（如 Objective-C）</td>
</tr>
<tr>
<td>Completion Shortcut</td>
<td>快捷方式，以字母或符号开头（支持少数符号，如@）</td>
</tr>
<tr>
<td>Completion Scopes</td>
<td>作用范围，一般写在正确的位置拖动即可，Xcode 会自行选择</td>
</tr>
</tbody>
</table></div></div><p>代码块生成完毕后，我们可以在设置的作用范围中，输入刚才设置的 Completion Shortcut 快捷方式内容，就可以快速生成整个代码块内容。</p>
<h2 id="移植代码块">移植代码块<a title="#移植代码块" href="#移植代码块"></a></h2>
<p>配置好的代码块默认存储在 <code>~/Library/Developer/Xcode/UserData/CodeSnippets</code> 目录下。</p>
<p>如果你更换了开发使用的 Mac 电脑，只需要把这个目录下的所有 <code>.codesnippet</code> 文件粘贴到新的设备目录下即可。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>《Effective Objective-C 2.0》整理（二）：对象、消息、运行时</title>
    <url>/2016/eoc2.0-2/</url>
    <content><![CDATA[<h2 id="第-6-条：理解“属性”这一概念">第 6 条：理解“属性”这一概念<a title="#第-6-条：理解“属性”这一概念" href="#第-6-条：理解“属性”这一概念"></a></h2>
<p>实例变量一般通过“存取方法”来访问。</p>
<ul>
<li>获取方法（getter）：读取变量值</li>
<li>设置方法（setter）：写入变量值</li>
</ul>
<a id="more"></a>
<p>属性能够访问封装在对象里的数据，意味着编译器会自动写出一套存取方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *firstName; <span class="comment">// Same as:</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)firstName;</span><br><span class="line">- (<span class="keyword">void</span>)setFirstName:(<span class="built_in">NSString</span> *)firstName;</span><br></pre></td></tr></table></figure>
<p>也可以用“点语法”访问属性。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">aPerson.firstName = <span class="string">@&quot;Bob&quot;</span>; <span class="comment">// Same as:</span></span><br><span class="line">[aPerson setFirstName:<span class="string">@&quot;Bob&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *lastName = aPerson.lastName; <span class="comment">// Same as:</span></span><br><span class="line"><span class="built_in">NSString</span> *lastName = [aPerson lastName];</span><br></pre></td></tr></table></figure>
<p>下面区分一下 3 种声明类型：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>声明类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@property</td>
<td>在<strong>头文件</strong>中声明 getter 和 setter 方法</td>
</tr>
<tr>
<td>@synthesize</td>
<td>在<strong>实现文件</strong>中生成相应的 getter 和 setter 方法</td>
</tr>
<tr>
<td>@dynamic</td>
<td>告诉编译器开发者会自己实现 getter 和 setter 方法。若未实现，编译通过但程序运行时会崩溃</td>
</tr>
</tbody>
</table></div></div><p>属性各种特质设定会影响编译器所生成的存取方法，介绍以下特质：</p>
<p><strong>原子性</strong></p>
<ul>
<li>atomic：原子性，不声明即默认。存取过程中线程安全，系统会自动的创建 lock 锁，锁定变量。</li>
<li>nonatomic：非原子性的。线程不安全，性能更好。开发时应使用 nonatomic。</li>
</ul>
<p><strong>读/写权限</strong></p>
<ul>
<li>readwrite： 属性拥有 getter 和 setter，若该属性由 @synthesize 实现，则编译器会自动生成这两个方法。</li>
<li>readonly：一种“拥有关系”，设置新值时，设置方法会保留新值，并释放旧值，再将新值设置上去。</li>
</ul>
<p><strong>内存管理语义</strong></p>
<ul>
<li>assign： “设置方法”只针对“纯量类型”（CGFloat、NSInteger 等）的简单赋值操作。不进行任何 retain 操作。</li>
<li>strong：一种“拥有关系”，设置新值时，设置方法会保留新值，并释放旧值，再将新值设置上去。</li>
<li>weak： 一种“非拥有关系”，设置新值时，既不保留新值，也不释放旧值。在属性所指的对象遭到摧毁时，属性值也会清空。</li>
<li>unsafe_unretained：语义和 assign 相同，适用于“对象类型”。非拥有（“不保留”，unretained），当属性所指的对象遭到摧毁时，属性值不会自动清空（“不安全”，unsafe）。</li>
<li>copy：所属关系与 strong 类似，但设置方法并不保留新值，而是将其 copy。</li>
</ul>
<p>问题：为什么 NSString 要用 copy 修饰？</p>
<p>答案：因为传递给 setter 的新值有可能指向一个 NSMutableString 类的实例，它是 NSString 的子类，表示一种可以修改其值的字符串，此时若是不拷贝字符串，那么设置完属性后，字符串的值就可能会在对象不知情的情况下遭人更改。</p>
<p><strong>方法名</strong></p>
<ul>
<li>getter=<name>指定“获取方法”的方法名。</name></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UISwitch类中表示“开关”是否打开的属性如下定义：</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">getter</span>=isOn) <span class="built_in">BOOL</span> on;</span><br></pre></td></tr></table></figure>
<ul>
<li>setter=<name>指定“设置方法”的方法名，用法不常见。</name></li>
</ul>
<p>通过上述特质，可以微调由编译器所合成的存取方法。但若是自己实现存取方法，应该保证其具备相关属性所声明的特质。</p>
<h2 id="第-7-条：在对象内部尽量直接访问实例变量">第 7 条：在对象内部尽量直接访问实例变量<a title="#第-7-条：在对象内部尽量直接访问实例变量" href="#第-7-条：在对象内部尽量直接访问实例变量"></a></h2>
<p>在对象之外访问实例变量时，总是通过属性来做，但在对象内部访问实例变量一直存在争议。</p>
<p>笔者建议在读取实例变量时采用直接访问的形式，设置实例变量的时候通过属性来做。</p>
<p>举例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="comment">// Convenience for firstName + &quot; &quot; + lastName;</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)fullName;</span><br><span class="line">- (<span class="keyword">void</span>)setFullName:(<span class="built_in">NSString</span> *)fullName;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><code>fullName</code> 和 <code>setFullName</code> 可以这样实现：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用点语法</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)fullName &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@ %@&quot;</span>,<span class="keyword">self</span>.firstName,<span class="keyword">self</span>.lastName];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setFullName:(<span class="built_in">NSString</span> *)fullName &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *components = [fullName componentsSeparatedByString:<span class="string">@&quot; &quot;</span>];</span><br><span class="line">    <span class="keyword">self</span>.firstName = [components objectAtIndex:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">self</span>.lastName = [components objectAtIndex:<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直接访问实例变量</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)fullName &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@ %@&quot;</span>,_firstName,_lastName];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setFullName:(<span class="built_in">NSString</span> *)fullName &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *components = [fullName componentsSeparatedByString:<span class="string">@&quot; &quot;</span>];</span><br><span class="line">    _firstName = [components objectAtIndex:<span class="number">0</span>];</span><br><span class="line">    _lastName = [components objectAtIndex:<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两种写法有以下区别：</p>
<ol>
<li>由于不经过“方法派发”（详见第 11 条），直接访问实力变量的速度比较快。在这种情况下，编译器所生成的代码会直接访问保存对象实例变量的那块内存。</li>
<li>直接访问实例变量时，不会调用 setter 方法，那就绕过了第 6 条所提及的“内存管理语义”，比如：在 ARC 下直接访问一个声明为 copy 的属性，不会拷贝属性，只会保留新值并释放旧值。</li>
<li>直接访问实例变量，不会触发 KVO 通知。</li>
<li>通过属性来访问有助于排查与之相关的错误，因为可以给 getter/setter 方法新增断点，监控该属性的调用者及其访问时机。</li>
</ol>
<p>由此衍生一种折中方案：<strong>写入实例变量时，通过其“设置方法”来做，读取时直接访问之</strong>。此方法既能提高读取操作的速度，又能控制对属性的写入操作。</p>
<p>注意：如果使用懒加载，必须通过存取方法来访问属性，否则实例变量永远不会初始化。</p>
<h2 id="第-8-条：理解“对象等同性”这一概念">第 8 条：理解“对象等同性”这一概念<a title="#第-8-条：理解“对象等同性”这一概念" href="#第-8-条：理解“对象等同性”这一概念"></a></h2>
<p>NSObject 协议中有两个用于判断等同性的关键方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object;</span><br><span class="line">- (<span class="built_in">NSUInteger</span>)hash;</span><br></pre></td></tr></table></figure>
<p>NSObject 类对这两个方法的默认实现是：当且仅当其“指针值”完全相等时，这两个对象才相等。若想在自定义的对象中正确覆写这些方法，就必须先理解其约定。</p>
<p>如果 “isEqual:” 方法判定两个对象相等，那么其 hash 方法也必须返回同一个值。但是，如果两个对象的 hash 方法返回同一个值，那么 “isEqual:” 方法未必会认为两者相等。</p>
<p>比如下面这个类：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> age;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 我们认为，如果两个 EOCPerson 的所有字段都相等，那么两个对象就相等。</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> == object) <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] != [object <span class="keyword">class</span>]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    </span><br><span class="line">    EOCPerson *otherPerson = (EOCPerson *)object;</span><br><span class="line">    <span class="keyword">if</span> (![_firstName isEqualToString:otherPerson.firstName])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> (![_lastName isEqualToString:otherPerson.lastName])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> (_age != otherPerson.age)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)hash &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> firstNameHash = [_firstName hash];</span><br><span class="line">    <span class="built_in">NSUInteger</span> lastNameHash = [_lastName hash];</span><br><span class="line">    <span class="built_in">NSUInteger</span> ageHash = _age;</span><br><span class="line">    <span class="keyword">return</span> firstNameHash ^ lastNameHash ^ ageHash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>isEqual 检测规则：只要其中有不相等的属性，就判定两对象不等，否则两对象相等。</p>
<p>collection 在检索哈希表时，会把对象的哈希码做索引。在写 hash 方法时，需要考虑性能以及减小创建字符串的开销，在减少碰撞频度与降低运算复杂程度之间做出取舍。</p>
<p><strong>特定类所具有的等同性判定方法</strong></p>
<p>由于 Objective-C 在编译器不做<strong>强类型</strong>检查，这样容易不小心传入类型错误的对象，因此做判定时应确保所传对象的类型正确性。</p>
<p>以 EOCPerson 类为例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)isEqualToPerson:(EOCPerson *)otherPerson &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> == otherPerson) <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (![_firstName isEqualToString:otherPerson.firstName])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> (![_lastName isEqualToString:otherPerson.lastName])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> (_age != otherPerson.age)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="comment">// 如果受测参数与接受该消息的对象都属于同一个类，那么调用自己编写的判定方法，否则交由超类来判断。</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] != [object <span class="keyword">class</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> isEqualToPerson:(EOCPerson *)object];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> isEqual:object];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>等同性判定的执行深度</strong></p>
<p>不要盲目地逐个检测每条属性，而是应该依照具体需求来制定检测方案。</p>
<p><strong>容器中可变类的等同性</strong></p>
<p>如果把某对象放入 set 之后又修改其内容，可能会出现容器中有相同对象的情况，要注意其隐患的发生。</p>
<h2 id="第-9-条：以“类族模式”隐藏实现细节">第 9 条：以“类族模式”隐藏实现细节<a title="#第-9-条：以“类族模式”隐藏实现细节" href="#第-9-条：以“类族模式”隐藏实现细节"></a></h2>
<p>“类族”是一种可以隐藏“抽象基类”背后实现细节的模式，在 Objective-C 系统框架中普遍使用。</p>
<p><strong>创建类族</strong></p>
<p>举例创建一个处理雇员的类族：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span> (<span class="built_in">NSUInteger</span>, EOCEmployeeType) &#123;</span><br><span class="line">    EOCEmployeeTypeDeveloper,</span><br><span class="line">    EOCEmployeeTypeDesigner,</span><br><span class="line">    EOCEmployeeTypeFinance,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCEmployee</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建雇员对象</span></span><br><span class="line">+ (EOCEmployee*)employeeWithType:(EOCEmployeeType)type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 雇员的日常工作</span></span><br><span class="line">- (<span class="keyword">void</span>)doADaysWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCEmployee</span></span></span><br><span class="line"></span><br><span class="line">+ (EOCEmployee*)employeeWithType:(EOCEmployeeType)type &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> EOCEmployeeTypeDeveloper:</span><br><span class="line">            <span class="keyword">return</span> [EOCEmployeeDeveloper new];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EOCEmployeeTypeDesigner:</span><br><span class="line">            <span class="keyword">return</span> [EOCEmployeeDesigner new];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EOCEmployeeTypeFinance:</span><br><span class="line">            <span class="keyword">return</span> [EOCEmployeeFinance new];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)doADaysWork &#123;</span><br><span class="line">    <span class="comment">// 供子类实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个“实体子类”都从基类继承而来</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCEmployeeDeveloper</span>:<span class="title">EOCEmployee</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCEmployeeDeveloper</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)doADaysWork &#123;</span><br><span class="line">    [<span class="keyword">self</span> writeCode];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>本例中，基类实现了一个“类方法”，该方法根据待创建的雇员类别分配好对应的雇员类实例。这种“工厂模式”是创建类族方法之一。</p>
<p><strong>Cocoa 里的类族</strong></p>
<p>系统框架中有许多类族，大部分 collection（集合）类都是类族。例如 NSArray 与其可变版本 NSMutableArray，由此可见实际上有两个抽象基类，一个用于不可变数组，另一个用于可变数组。</p>
<p>抽象基类：为了给子类继承实现具体的功能，它是”残缺的类“，里面没有抽象方法的具体代码，里面的抽象方法是被子类重写的。</p>
<p>在 Employee 这个例子中，若是没有“工厂方法”的源代码，就无法向其中新增雇员类别。然而对于 Cocoa 中 NSArray 这样的类族来说，还是有办法新增子类的， 但需要遵守几条规则：</p>
<ul>
<li>
<p>子类应该继承自类族的抽象基类。<br>
若要编写 NSArray 类族的子类，则需令其继承自不可变的数组和基类或可变数组的基类。</p>
</li>
<li>
<p>子类应该定义自己的数据存储方式。<br>
NSArray 本身只不过是包在其他隐藏对象外卖的壳，它仅仅定义了所有数组都需具备的一些接口。对于这个自定义的数组子类来说，可以用 NSArray 来保存其实例。</p>
</li>
<li>
<p>子类应当覆写超类文档中指明需要覆写的方法。<br>
在每个抽象基类中，都有一些子类必须覆写的方法。比如说，想要编写 NSArray 的子类，就需要实现 count 及 “objectAtIndex:” 方法。像 lastObject 这种方法则无须实现，因为基类可以根据前两个方法推演它。</p>
</li>
</ul>
<h2 id="第-10-条：在既有类中使用关联对象存放自定义数据">第 10 条：在既有类中使用关联对象存放自定义数据<a title="#第-10-条：在既有类中使用关联对象存放自定义数据" href="#第-10-条：在既有类中使用关联对象存放自定义数据"></a></h2>
<p>要在对象中存放相关信息，我们通常会从对象所属的类中继承一个子类，再改写子类对象。有时候类的实例可能是由某种机制所创建的，这就引入了一个强大的特性——“关联对象”。</p>
<p>可以给某对象关联许多其他对象，这些对象通过“键”来区分。存储对象值的时候，可以指明“存储策略”，用以维护相应的“内存管理语义”。存储策略由名为 objc_AssociationPolicy 的枚举所定义，下表列出该枚举的取值和与之等效的 @property 属性。</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">关联类型</th>
<th style="text-align:left">等效的 @property 属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">OBJC_ASSOCIATION_ASSIGN</td>
<td style="text-align:left">assign</td>
</tr>
<tr>
<td style="text-align:left">OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>
<td style="text-align:left">nonatomic, retain</td>
</tr>
<tr>
<td style="text-align:left">OBJC_ASSOCIATION_COPY_NONATOMIC</td>
<td style="text-align:left">nonatomic, copy</td>
</tr>
<tr>
<td style="text-align:left">OBJC_ASSOCIATION_RETAIN</td>
<td style="text-align:left">retain</td>
</tr>
<tr>
<td style="text-align:left">OBJC_ASSOCIATION_COPY</td>
<td style="text-align:left">copy</td>
</tr>
</tbody>
</table></div></div><p>下面的方法可以管理关联对象：</p>
<ul>
<li>
<p>void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)<br>
此方法以给定的键和策略为某对象设置关联对象值。</p>
</li>
<li>
<p>id objc_getAssociatedObject(id object, const void *key)<br>
此方法根据给定的键从某对象中获取相应的关联对象值。</p>
</li>
<li>
<p>void objc_removeAssociatedObjects(id object)<br>
此方法移除指定对象的全部关联对象。</p>
</li>
</ul>
<p>在设置关联对象值时，通常使用静态全局变量做键。</p>
<p>“关联对象”缺点：常会引入难以查找的 bug。</p>
<h2 id="第-11-条：理解-objc_msgsend-的作用">第 11 条：理解 objc_msgSend 的作用<a title="#第-11-条：理解-objc_msgsend-的作用" href="#第-11-条：理解-objc_msgsend-的作用"></a></h2>
<p>在对象上调用方法又叫“传递消息”，消息有“名称”（name）或“选择子”（selector），可以接受参数，而且可能还有返回值。传递消息会使用<strong>动态绑定</strong>机制来决定需要调用的方法。</p>
<p>给对象发送消息可以这样来写：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> returnValue = [someObject messageName:parameter];</span><br></pre></td></tr></table></figure>
<p>在本例中，someObject 叫做“接受者”（receiver），messageName 叫做“选择子”（selector）。选择子和参数合起来称为“消息”（message）。编译器看到消息后，将其转换为一条标准的 C 语言函数调用，也是消息传递机制中的核心函数，叫做 objc_msgSend，其“原型”如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> objc_msgSend(<span class="keyword">id</span> <span class="keyword">self</span>, SEL cmd, ...)</span><br></pre></td></tr></table></figure>
<p>这是个“参数个数可变的函数”，能接受两个及以上的参数。第一个参数代表接受者，第二个参数代表选择子（SEL 是选择子的类型），后续参数就是消息中的参数，其顺序不变。编译器会把刚才那个例子中的消息转换为如下函数：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> returnValue = objc_msgSend(someObject,</span><br><span class="line">                              <span class="keyword">@selector</span>(messageName:),</span><br><span class="line">                              parameter);</span><br></pre></td></tr></table></figure>
<p>objc_msgSend 函数会依据接受者与选择子的类型来调用适当的方法。为了完成此操作，该方法需要在接受者所属的类中搜寻其“方法列表”，如果能找到与选择子名称相符的方法，就跳至其实现代码。若是找不到，就沿着继承体系继续向上查找，找到合适的方法再跳转。如果最终还是找不到相符的方法，就执行“消息转发”操作。</p>
<p>还有一些特殊情况的函数：</p>
<ul>
<li>
<p>objc_msgSend_stret：待发送的消息要返回结构体</p>
</li>
<li>
<p>objc_msgSend_fpret：消息返回的是浮点数</p>
</li>
<li>
<p>objc_msgSendSuper：要给超类发信息，例如 <code>[super message:parameter];</code></p>
</li>
</ul>
<h2 id="第-12-条：理解消息转发机制">第 12 条：理解消息转发机制<a title="#第-12-条：理解消息转发机制" href="#第-12-条：理解消息转发机制"></a></h2>
<p>编译器无法确定某类型对象到底能解读多少种选择子，因为运行期还可向其中动态新增。</p>
<p>当对象收到无法解读的消息后，就会启动“消息转发”机制。消息转发流程：</p>
<ol>
<li>通过运行期的动态方法解析功能，我们可以在需要用到某个方法时再将其加入类中。</li>
<li>对象可以把其无法解读的某些选择子转交给其他对象来处理。</li>
<li>经过上述两步之后，如果还是没有办法处理选择子，那就启动完整的消息转发机制。</li>
</ol>
<p><strong>动态方法解析</strong></p>
<p>对象在收到无法解读的消息后，可以调用其所属类的这两个方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示这个类是否能新增一个实例方法用以处理选择子</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)selector</span><br><span class="line"><span class="comment">// 表示这个类是否能新增一个类方法用以处理选择子</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)selector</span><br></pre></td></tr></table></figure>
<p>使用此方法的前提：相关方法的实现代码已经写好，只等着运行的时候动态插在类里面。此方案常用来实现 <code>@dynamic</code> 属性。</p>
<p><strong>备援接受者</strong></p>
<p>当前接受者还有第二次处理未知选择子的机会。这一步中，运行期系统会问：能否将这条消息转给其他接受者处理，对应方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)selector</span><br></pre></td></tr></table></figure>
<p>若当前接受者能找到备援对象，则将其返回，若找不到，就返回 nil。</p>
<p>注意：我们无法操作经由这一步所转发的消息，若想在发送给备援接受者之前先修改消息内容，得通过完整的消息转发机制。</p>
<p><strong>完整的消息转发</strong></p>
<p>首先创建 NSInvocation 对象，把与尚未处理的那条消息有关的全部细节（包括选择子、目标及参数）都封于其中。在触发 NSInvocation 对象时，“消息派发系统”将亲自出马，把消息指派给目标对象。此步骤会调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span>)</span><br></pre></td></tr></table></figure>
<p>实现此方法时，若发现某调用操作不应由本类处理，则需调用超类的同名方法，直至 NSObject。如果调用了 NSObject 类，那么该方法还会继而调用“doesNotRecognizeSelector:”以抛出异常，此异常表明选择子最终未能得到处理。</p>
<p><strong>消息转发全流程</strong></p>
<p><img src="/2016/eoc2.0-2/message-forwarding.png" alt="消息转发" class="φcx"></p>
<h2 id="第-13-条：用“方法调配技术”调试“黑盒方法”">第 13 条：用“方法调配技术”调试“黑盒方法”<a title="#第-13-条：用“方法调配技术”调试“黑盒方法”" href="#第-13-条：用“方法调配技术”调试“黑盒方法”"></a></h2>
<p>在运行期，可以向类中新增或替换选择子所对应的方法实现。</p>
<p>使用另一份实现来替换原有的方法实现，这道工序叫“方法调配”，开发者常用此技术向原有实现中添加新功能。</p>
<p>类的方法列表会把选择子的名称映射到相关的方法实现之上，使得“动态消息派发系统”能够根据此找到应该调用的方法。这些方法均以函数指针的形式来表示，这种指针叫做 IMP，其原型如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> (*IMP)(<span class="keyword">id</span>, SEL,...)</span><br></pre></td></tr></table></figure>
<p>以互换 NSString 大小写的两个方法为例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Method originalMethod = class_getInstanceMethod([<span class="built_in">NSString</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(lowercaseString));</span><br><span class="line">Method swappedMethod = class_getInstanceMethod([<span class="built_in">NSString</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(uppercaseString));</span><br><span class="line">method_exchangeImplementations(originalMethod, swappedMethod)</span><br></pre></td></tr></table></figure>
<p>一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用，否则会令代码变得不易读懂且难以维护。</p>
<h2 id="第-14-条：理解&quot;类对象&quot;的用意">第 14 条：理解&quot;类对象&quot;的用意<a title="#第-14-条：理解&quot;类对象&quot;的用意" href="#第-14-条：理解&quot;类对象&quot;的用意"></a></h2>
<p>对象类型并非在编译器就绑定好了，而是在运行期查找。有个特殊的类型叫做 id，它能指代任意的 Objective-C 对象类型。</p>
<p>“在运行期检视对象类型”这一操作也叫做“类型信息查询”（“内省”），这个强大而有用的特性内置于 Foundation 框架的 NSObject 协议里，凡事由公共根类集成而来的对象都要遵从此协议。</p>
<p>Objective-C 对象的本质是什么？</p>
<p>每个 Objective-C 对象实例都是指向某块内存数据的指针。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *pointerVariable = <span class="string">@&quot;Some string&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>对于通用的对象类型 id，由于其本身已经是指针了，所以可以这样写：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> genericTypeString = <span class="string">@&quot;Some string&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>假设有个名为 SomeClass 的子类从 NSObject 中继承而来，则其继承体系如下图所示：</p>
<p><img src="/2016/eoc2.0-2/class-hierarchy-for-instances-of-someclass.png" alt="SomeClass 继承体系" class="φcx"></p>
<p>super_class 指针确立了继承关系，而 isa 指针描述实例所属的类。</p>
<p>如果对象类型无法在编译器确定，那么就应该使用类型信息查询方法来探知。“isMemberOfClass:”能够判断出对象是否为某个特定类的实例，而“isKindOfClass:” 则能够判断出对象是否为某类或其派生类的实例，例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">[dict isMemberOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]; <span class="comment">/// &lt;NO</span></span><br><span class="line">[dict isMemberOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]; <span class="comment">/// &lt;YES</span></span><br><span class="line">[dict isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]; <span class="comment">/// &lt;YES</span></span><br><span class="line">[dict isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]; <span class="comment">/// &lt;NO</span></span><br></pre></td></tr></table></figure>
<p>尽量使用类型信息查询方法来确定对象类型，而不要直接比较类对象，因为某些对象可能实现了消息转发功能。</p>
<hr>
<p>参考资料：<a href="https://book.douban.com/subject/25829244/" target="_blank">《Effective Objective-C 2.0》编写高质量 iOS 与 OS X 代码的 52 个有效方法</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>《Effective Objective-C 2.0》</tag>
        <tag>原子性</tag>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现 iOS App 的冷启动优化</title>
    <url>/2020/ios-app-launch-optimization/</url>
    <content><![CDATA[<p>当 App 中的业务模块越来越多、越来越复杂，集成了更多的三方库，App 启动也会越来越慢，因此我们希望能在业务扩张的同时，保持较优的启动速度，给用户带来良好的使用体验。</p>
<a id="more"></a>
<h2 id="热启动与冷启动">热启动与冷启动<a title="#热启动与冷启动" href="#热启动与冷启动"></a></h2>
<p>当用户按下 home 键，iOS App 不会立刻被 kill，而是存活一段时间，这段时间里用户再打开 App，App 基本上不需要做什么，就能还原到退到后台前的状态。我们把 App 进程还在系统中，无需开启新进程的启动过程称为<strong>热启动</strong>。</p>
<p>而<strong>冷启动</strong>则是指 App 不在系统进程中，比如设备重启后，或是手动杀死 App 进程，又或是 App 长时间未打开过，用户再点击启动 App 的过程，这时需要创建一个新进程分配给 App。我们可以将冷启动看作一次完整的 App 启动过程，本文讨论的就是冷启动的优化。</p>
<h2 id="冷启动概要">冷启动概要<a title="#冷启动概要" href="#冷启动概要"></a></h2>
<p>WWDC 2016 中首次出现了 App 启动优化的话题，其中提到：</p>
<ul>
<li>App 启动最佳速度是 400ms 以内，因为从点击 App 图标启动，然后 Launch Screen 出现再消失的时间就是 400ms；</li>
<li>App 启动最慢不得大于 20s，否则进程会被系统杀死；（启动时间最好以 App 所支持的最低配置设备为准。）</li>
</ul>
<p>冷启动的整个过程是指从用户唤起 App 开始到 AppDelegate 中的 <code>didFinishLaunchingWithOptions</code> 方法执行完毕为止，并以执行 <code>main()</code> 函数的时机为分界点，分为 <code>pre-main</code> 和 <code>main()</code> 两个阶段。</p>
<p>也有一种说法是将整个冷启动阶段以主 UI 框架的 <code>viewDidAppear</code> 函数执行完毕才算结束。这两种说法都可以，前者的界定范围是 App 启动和初始化完毕，后者的界定范围是用户视角的启动完毕，也就是首屏已经被加载出来。</p>
<blockquote>
<p><strong>注意</strong>：这里很多文章都会把第二个阶段描述为 <strong>main 函数之后</strong>，个人认为这种说法不是很好，容易让人误解。要知道 main 函数在 App 运行过程中是不会退出的，无论是 AppDelegate 中的 <code>didFinishLaunchingWithOptions</code> 方法还是 ViewController 中的<code>viewDidAppear</code> 方法，都还是在 main 函数内部执行的。</p>
</blockquote>
<h2 id="pre-main-阶段">pre-main 阶段<a title="#pre-main-阶段" href="#pre-main-阶段"></a></h2>
<p><code>pre-main</code> 阶段指的是从用户唤起 App 到 <code>main()</code> 函数执行之前的过程。</p>
<h3 id="查看阶段耗时">查看阶段耗时<a title="#查看阶段耗时" href="#查看阶段耗时"></a></h3>
<p>我们可以在 Xcode 中配置环境变量 <code>DYLD_PRINT_STATISTICS</code> 为 1（<code>Edit Scheme → Run → Arguments → Environment Variables → +</code>）。</p>
<p><img src="/2020/ios-app-launch-optimization/set-environment-variables.png" alt="设置环境变量" class="φcx"></p>
<p>这时在 iOS 10 以上系统中运行一个 TestDemo，<code>pre-main</code> 阶段的启动时间会在控制台中打印出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Total pre-main time: 354.21 milliseconds (100.0%)</span><br><span class="line">         dylib loading time:  25.52 milliseconds (7.2%)</span><br><span class="line">        rebase/binding time:  12.70 milliseconds (3.5%)</span><br><span class="line">            ObjC setup time: 152.74 milliseconds (43.1%)</span><br><span class="line">           initializer time: 163.24 milliseconds (46.0%)</span><br><span class="line">           slowest intializers :</span><br><span class="line">             libSystem.B.dylib :   7.98 milliseconds (2.2%)</span><br><span class="line">   libBacktraceRecording.dylib :  13.53 milliseconds (3.8%)</span><br><span class="line">    libMainThreadChecker.dylib :  41.11 milliseconds (11.6%)</span><br><span class="line">                      TestDemo :  88.76 milliseconds (25.0%)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果要更详细的信息，就设置 <code>DYLD_PRINT_STATISTICS_DETAILS</code> 为 1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  total time: 1.6 seconds (100.0%)</span><br><span class="line">  total images loaded:  388 (381 from dyld shared cache)</span><br><span class="line">  total segments mapped: 23, into 413 pages</span><br><span class="line">  total images loading time: 805.78 milliseconds (48.6%)</span><br><span class="line">  total load time <span class="keyword">in</span> ObjC: 152.74 milliseconds (9.2%)</span><br><span class="line">  total debugger pause time: 780.26 milliseconds (47.1%)</span><br><span class="line">  total dtrace DOF registration time:   0.00 milliseconds (0.0%)</span><br><span class="line">  total rebase fixups:  54,265</span><br><span class="line">  total rebase fixups time:  20.77 milliseconds (1.2%)</span><br><span class="line">  total binding fixups: 527,211</span><br><span class="line">  total binding fixups time: 513.54 milliseconds (31.0%)</span><br><span class="line">  total weak binding fixups time:   0.31 milliseconds (0.0%)</span><br><span class="line">  total redo shared cached bindings time: 521.93 milliseconds (31.5%)</span><br><span class="line">  total bindings lazily fixed up: 0 of 0</span><br><span class="line">  total time <span class="keyword">in</span> initializers and ObjC +load: 163.24 milliseconds (9.8%)</span><br><span class="line">                         libSystem.B.dylib :   7.98 milliseconds (0.4%)</span><br><span class="line">               libBacktraceRecording.dylib :  13.53 milliseconds (0.8%)</span><br><span class="line">                libMainThreadChecker.dylib :  41.11 milliseconds (2.4%)</span><br><span class="line">              libViewDebuggerSupport.dylib :   6.68 milliseconds (0.4%)</span><br><span class="line">                                  TestDemo :  88.76 milliseconds (5.3%)</span><br><span class="line">total symbol trie searches:    1306942</span><br><span class="line">total symbol table binary searches:    0</span><br><span class="line">total images defining weak symbols:  41</span><br><span class="line">total images using weak symbols:  105</span><br></pre></td></tr></table></figure>
<p>这里统计到的启动耗时出现一定波动是正常的，无须过分在意。</p>
<h3 id="理论知识">理论知识<a title="#理论知识" href="#理论知识"></a></h3>
<p>为了更准确地了解 App 启动的流程，我们先熟悉一下几个概念。</p>
<h4 id="mach-o">Mach-O<a title="#mach-o" href="#mach-o"></a></h4>
<p><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html" target="_blank">Mach-O</a>（Mach Object File Format)是一种用于记录可执行文件、对象代码、共享库、动态加载代码和内存转储的文件格式。App 编译生成的二进制<strong>可执行文件</strong>就是 Mach-O 格式的，iOS 工程所有的类编译后会生成对应的目标文件 <code>.o</code> 文件，而这个可执行文件就是这些 <code>.o</code> 文件的集合。</p>
<p>在 Xcode 的控制台输入以下命令，可以打印出运行时所有加载进应用程序的 Mach-O 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">image list -o -f</span><br></pre></td></tr></table></figure>
<p>Mach-O 文件主要由三部分组成：</p>
<ul>
<li>Mach header：描述 Mach-O 的 CPU 架构、文件类型以及加载命令等；</li>
<li>Load commands：描述了文件中数据的具体组织结构，不同的数据类型使用不同的加载命令；</li>
<li>Data：Data 中的每个段（segment）的数据都保存在这里，每个段都有一个或多个 Section，它们存放了具体的数据与代码，主要包含这三种类型：
<ul>
<li><code>__TEXT</code> 包含 Mach header，被执行的代码和只读常量（如 C 字符串）。只读可执行（r-x）。</li>
<li><code>__DATA</code> 包含全局变量，静态变量等。可读写（rw-）。</li>
<li><code>__LINKEDIT</code> 包含了加载程序的<strong>元数据</strong>，比如函数的名称和地址。只读（r–-）。</li>
</ul>
</li>
</ul>
<h4 id="dylib">dylib<a title="#dylib" href="#dylib"></a></h4>
<p>dylib 也是一种 Mach-O 格式的文件，后缀名为 <code>.dylib</code> 的文件就是动态库（也叫动态链接库）。动态库是运行时加载的，可以被多个 App 的进程共用。</p>
<p>如果想知道 TestDemo 中依赖的所有动态库，可以通过下面的指令实现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">otool -L /TestDemo.app/TestDemo</span><br></pre></td></tr></table></figure>
<p>动态链接库分为<strong>系统 dylib</strong> 和<strong>内嵌 dylib</strong>（embed dylib，即开发者手动引入的动态库）。系统 dylib 有：</p>
<ul>
<li>iOS 中用到的所有系统 framework，比如 UIKit、Foundation；</li>
<li>系统级别的 libSystem（如 libdispatch(GCD)、libsystem_c(C 语言库)、libsystem_blocks(Block)、libCommonCrypto(加密库，比如常用的 md5)）；</li>
<li>加载 OC runtime 方法的 libobjc；</li>
<li>……</li>
</ul>
<h4 id="dyld">dyld<a title="#dyld" href="#dyld"></a></h4>
<p><a href="https://opensource.apple.com/tarballs/dyld/" target="_blank">dyld</a>（Dynamic Link Editor）：动态链接器，其本质也是 Mach-O 文件，一个专门用来加载 dylib 文件的库。 dyld 位于 <code>/usr/lib/dyld</code>，可以在 mac 和越狱机中找到。dyld 会将 App 依赖的动态库和 App 文件加载到内存后执行。</p>
<h4 id="dyld-shared-cache">dyld shared cache<a title="#dyld-shared-cache" href="#dyld-shared-cache"></a></h4>
<p>dyld shared cache 就是动态库共享缓存。当需要加载的动态库非常多时，相互依赖的符号也更多了，为了节省解析处理符号的时间，OS X 和 iOS 上的动态链接器使用了共享缓存。OS X 的共享缓存位于 <code>/private/var/db/dyld/</code>，iOS 的则在 <code>/System/Library/Caches/com.apple.dyld/</code>。</p>
<p>当加载一个 Mach-O 文件时，dyld 首先会检查是否存在于共享缓存，存在就直接取出使用。每一个进程都会把这个共享缓存映射到了自己的地址空间中。这种方法大大优化了 OS X 和 iOS 上程序的启动时间。</p>
<h4 id="images">images<a title="#images" href="#images"></a></h4>
<p>images 在这里不是指图片，而是<strong>镜像</strong>。每个 App 都是以 images 为单位进行加载的。images 类型包括：</p>
<ul>
<li>executable：应用的二进制可执行文件；</li>
<li>dylib：动态链接库；</li>
<li>bundle：资源文件，属于不能被链接的 dylib，只能在运行时通过 <code>dlopen()</code> 加载。</li>
</ul>
<h4 id="framework">framework<a title="#framework" href="#framework"></a></h4>
<p>framework 可以是动态库，也是静态库，是一个包含 dylib、bundle 和头文件的文件夹。</p>
<h3 id="启动过程分析与优化">启动过程分析与优化<a title="#启动过程分析与优化" href="#启动过程分析与优化"></a></h3>
<p>启动一个应用时，系统会通过 <code>fork()</code> 方法来新创建一个进程，然后执行镜像通过 <code>exec()</code> 来替换为另一个可执行程序，然后执行如下操作：</p>
<ol>
<li>把可执行文件加载到内存空间，从可执行文件中能够分析出 dyld 的路径；</li>
<li>把 dyld 加载到内存；</li>
<li>dyld 从可执行文件的依赖开始，递归加载所有的依赖动态链接库 dylib 并进行相应的初始化操作。</li>
</ol>
<p>结合上面 <code>pre-main</code> 打印的结果，我们可以大致了解整个启动过程如下图所示：</p>
<p><img src="/2020/ios-app-launch-optimization/pre-main-launch-step.png" alt class="φcx"></p>
<h4 id="load-dylibs">Load Dylibs<a title="#load-dylibs" href="#load-dylibs"></a></h4>
<p>这一步，指的是<strong>动态库加载</strong>。在此阶段，dyld 会：</p>
<ol>
<li>分析 App 依赖的所有 dylib；</li>
<li>找到 dylib 对应的 Mach-O 文件；</li>
<li>打开、读取这些 Mach-O 文件，并验证其有效性；</li>
<li>在系统内核中注册代码签名；</li>
<li>对 dylib 的每一个 segment 调用 <code>mmap()</code>。</li>
</ol>
<p>一般情况下，iOS App 需要加载 100-400 个 dylibs。这些动态库包括系统的，也包括开发者手动引入的。其中大部分 dylib 都是系统库，系统已经做了优化，因此开发者更应关心自己手动集成的内嵌 dylib，加载它们时性能开销较大。</p>
<p>App 中依赖的 dylib 越少越好，Apple 官方建议尽量将内嵌 dylib 的个数维持在 6 个以内。</p>
<p><strong>优化方案</strong>：</p>
<ul>
<li>尽量不使用内嵌 dylib；</li>
<li>合并已有内嵌 dylib；</li>
<li>检查 framework 的 <code>optional</code> 和 <code>required</code> 设置，如果 framework 在当前的 App 支持的 iOS 系统版本中都存在，就设为 <code>required</code>，因为设为 <code>optional</code> 会有额外的检查导致加载变慢；</li>
<li>使用静态库作为代替；（不过静态库会在编译期被打进可执行文件，造成可执行文件体积增大，两者各有利弊，开发者自行权衡。）</li>
<li>懒加载 dylib。（但使用 <code>dlopen()</code> 对性能会产生影响，因为 App 启动时是原本是单线程运行，系统会取消加锁，但 <code>dlopen()</code> 开启了多线程，系统不得不加锁，这样不仅会使性能降低，可能还会造成死锁及未知的后果，不是很推荐这种做法。）</li>
</ul>
<h4 id="rebase/binding">Rebase/Binding<a title="#rebase/binding" href="#rebase/binding"></a></h4>
<p>这一步，做的是<strong>指针重定位</strong>。</p>
<p>在 dylib 的加载过程中，系统为了安全考虑，引入了 ASLR（Address Space Layout Randomization）技术和代码签名。由于 ASLR 的存在，镜像会在新的随机地址（actual_address）上加载，和之前指针指向的地址（preferred_address）会有一个偏差（slide，slide=actual_address-preferred_address），因此 dyld 需要修正这个偏差，指向正确的地址。具体通过这两步实现：</p>
<p>第一步：<strong>Rebase</strong>，在 image 内部调整指针的指向。将 image 读入内存，并以 page 为单位进行加密验证，保证不会被篡改，性能消耗主要在 IO。</p>
<p>第二步：<strong>Binding</strong>，符号绑定。将指针指向 image 外部的内容。查询符号表，设置指向镜像外部的指针，性能消耗主要在 CPU 计算。</p>
<p>通过以下命令可以查看 rebase 和 bind 等信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xcrun dyldinfo -rebase -bind -lazy_bind TestDemo.app/TestDemo</span><br></pre></td></tr></table></figure>
<p>通过 LC_DYLD_INFO_ONLY 可以查看各种信息的偏移量和大小。如果想要更方便直观地查看，推荐使用 <a href="https://github.com/fiteen/fiteen.github.io/releases/tag/v0.1.2" target="_blank">MachOView</a> 工具。</p>
<p>指针数量越少，指针修复的耗时也就越少。所以，优化该阶段的关键就是减少 <code>__DATA</code> 段中的指针数量。</p>
<p><strong>优化方案</strong>：</p>
<ul>
<li>减少 ObjC 类（class）、方法（selector）、分类（category）的数量，比如合并一些功能，删除无效的类、方法和分类等（可以借助 <a href="/resources">AppCode</a> 的 Inspect Code 功能进行代码瘦身）；</li>
<li>减少 C++ 虚函数；（虚函数会创建 vtable，这也会在 <code>__DATA</code> 段中创建结构。）</li>
<li>多用 Swift Structs。（因为 Swift Structs 是静态分发的，它的结构内部做了优化，符号数量更少。）</li>
</ul>
<h4 id="objc-setup">ObjC Setup<a title="#objc-setup" href="#objc-setup"></a></h4>
<p>完成 Rebase 和 Bind 之后，通知 runtime 去做一些代码运行时需要做的事情：</p>
<ul>
<li>dyld 会注册所有声明过的 ObjC 类；</li>
<li>将分类插入到类的方法列表中；</li>
<li>检查每个 selector 的唯一性。</li>
</ul>
<p><strong>优化方案</strong>：</p>
<p>Rebase/Binding 阶段优化好了，这一步的耗时也会相应减少。</p>
<h4 id="initializers">Initializers<a title="#initializers" href="#initializers"></a></h4>
<p>Rebase 和 Binding 属于静态调整（fix-up），修改的是 <code>__DATA</code> 段中的内容，而这里则开始动态调整，往堆和栈中写入内容。具体工作有：</p>
<ul>
<li>调用每个 Objc 类和分类中的 <code>+load</code> 方法；</li>
<li>调用 C/C++ 中的构造器函数（用 <code>attribute((constructor))</code> 修饰的函数）；</li>
<li>创建非基本类型的 C++ 静态全局变量。</li>
</ul>
<p><strong>优化方案</strong>：</p>
<ul>
<li>尽量避免在类的 <code>+load</code> 方法中初始化，可以推迟到 <code>+initiailize</code> 中进行；（因为在一个 <code>+load</code> 方法中进行运行时方法替换操作会带来 4ms 的消耗）</li>
<li>避免使用 <code>__atribute__((constructor))</code> 将方法显式标记为初始化器，而是让初始化方法调用时再执行。比如用 <code>dispatch_once()</code>、<code>pthread_once()</code> 或 <code>std::once()</code>，相当于在第一次使用时才初始化，推迟了一部分工作耗时。：</li>
<li>减少非基本类型的 C++ 静态全局变量的个数。（因为这类全局变量通常是类或者结构体，如果在构造函数中有繁重的工作，就会拖慢启动速度）</li>
</ul>
<p>总结一下 <code>pre-main</code> 阶段可行的优化方案：</p>
<ul>
<li>重新梳理架构，减少不必要的内置动态库数量；</li>
<li>进行代码瘦身，合并或删除无效的 ObjC 类、Category、方法、C++ 静态全局变量等；</li>
<li>将不必须在 <code>+load</code> 方法中执行的任务延迟到 <code>+initialize</code> 中；</li>
<li>减少 C++ 虚函数。</li>
</ul>
<h2 id="main()-阶段">main() 阶段<a title="#main()-阶段" href="#main()-阶段"></a></h2>
<p>对于 <code>main()</code> 阶段，主要测量的就是从 <code>main()</code> 函数开始执行到 <code>didFinishLaunchingWithOptions</code> 方法执行结束的耗时。</p>
<h3 id="查看阶段耗时-1">查看阶段耗时<a title="#查看阶段耗时-1" href="#查看阶段耗时-1"></a></h3>
<p>这里介绍两种查看 <code>main()</code> 阶段耗时的方法。</p>
<p><strong>方法一：手动插入代码，进行耗时计算。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步：在 main() 函数里用变量 MainStartTime 记录当前时间</span></span><br><span class="line"><span class="built_in">CFAbsoluteTime</span> MainStartTime;</span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    MainStartTime = <span class="built_in">CFAbsoluteTimeGetCurrent</span>();</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步：在 AppDelegate.m 文件中用 extern 声明全局变量 MainStartTime</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">CFAbsoluteTime</span> MainStartTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步：在 didFinishLaunchingWithOptions 方法结束前，再获取一下当前时间，与 MainStartTime 的差值就是 main() 函数阶段的耗时</span></span><br><span class="line"><span class="keyword">double</span> mainLaunchTime = (<span class="built_in">CFAbsoluteTimeGetCurrent</span>() - MainStartTime);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;main() 阶段耗时：%.2fms&quot;</span>, mainLaunchTime * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>方法二：借助 Instruments 的 Time Profiler 工具查看耗时。</strong></p>
<p>打开方式为：<code>Xcode → Open Developer Tool → Instruments → Time Profiler</code>。</p>
<p><img src="/2020/ios-app-launch-optimization/time-profiler.png" alt="Time Profiler" class="φcx"></p>
<p>操作步骤：</p>
<ol>
<li>
<p>配置 Scheme。点击 <code>Edit Scheme</code> 找到 <code>Profile</code> 下的 <code>Build Configuration</code>，设置为 <code>Debug</code>。</p>
</li>
<li>
<p>配置 PROJECT。点击 PROJECT，在 <code>Build Settings</code> 中找到 <code>Build Options</code> 选项里的 <code>Debug Information Format</code>，把 <code>Debug</code> 对应的值改为 <code>DWARF with dSYM File</code>。</p>
</li>
<li>
<p>启动 Time Profiler，点击左上角红色圆形按钮开始检测，然后就可以看到执行代码的完整路径和对应的耗时。</p>
</li>
</ol>
<p>为了方面查看应用程序中实际代码的执行耗时和代码路径实际所在的位置，可以勾选上 <code>Call Tree</code> 中的 <code>Separate Thread</code> 和 <code>Hide System Libraries</code>。</p>
<p><img src="/2020/ios-app-launch-optimization/time-profiler-tree.png" alt class="φcx"></p>
<h3 id="启动优化">启动优化<a title="#启动优化" href="#启动优化"></a></h3>
<p><code>main()</code> 被调用之后，<code>didFinishLaunchingWithOptions</code> 阶段，App 会进行必要的初始化操作，而 <code>viewDidAppear</code> 执行结束之前则是做了首页内容的加载和显示。</p>
<p>关于 <strong>App 的初始化</strong>，除了统计、日志这种须要在 App 一启动就配置的事件，有一些配置也可以考虑延迟加载。如果你在 <code>didFinishLaunchingWithOptions</code> 中同时也涉及到了<strong>首屏的加载</strong>，那么可以考虑从这些角度优化：</p>
<ul>
<li>用纯代码的方式，而不是 xib/Storyboard，来加载首页视图</li>
<li>延迟暂时不需要的二方/三方库加载；</li>
<li>延迟执行部分业务逻辑和 UI 配置；</li>
<li>延迟加载/懒加载部分视图；</li>
<li>避免首屏加载时大量的本地/网络数据读取；</li>
<li>在 release 包中移除 NSLog 打印；</li>
<li>在视觉可接受的范围内，压缩页面中的图片大小；</li>
<li>……</li>
</ul>
<p>如果首屏为 H5 页面，针对它的优化，参考 <a href="https://github.com/fiteen/fiteen.github.io/releases/tag/v0.1.5" target="_blank">VasSonic</a> 的原理，可以从这几个角度入手：</p>
<ul>
<li>
<p>终端耗时</p>
<ul>
<li>webView 预加载：在 App 启动时期预先加载了一次 webView，通过创建空的 webView，预先启动 Web 线程，完成一些全局性的初始化工作，对二次创建 webView 能有数百毫秒的提升。</li>
</ul>
</li>
<li>
<p>页面耗时（静态页面）</p>
<ul>
<li>静态直出：服务端拉取数据后通过 Node.js 进行渲染，生成包含首屏数据的 HTML 文件，发布到 CDN 上，webView 直接从 CDN 上获取；</li>
<li>离线预推：使用离线包。</li>
</ul>
</li>
<li>
<p>页面耗时（经常需要动态更新的页面）</p>
<ul>
<li>并行加载：WebView 的打开和资源的请求并行；</li>
<li>动态缓存：动态页面缓存在客户端，用户下次打开的时候先打开缓存页面，然后再刷新；</li>
<li>动静分离：将页面分为静态模板和动态数据，根据不同的启动场景进行不同的刷新方案；</li>
<li>预加载：提前拉取需要的增量更新数据。</li>
</ul>
</li>
</ul>
<h2 id="小结">小结<a title="#小结" href="#小结"></a></h2>
<p>随着业务的增长，App 中的模块越来越多，冷启动的时间也必不可少地增加。冷启动本就是一个比较复杂的流程，它的优化没有固定的公式，我们需要结合业务，配合一些性能分析工具和线上监控日志，有耐心、多维度地进行分析和解决。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://developer.apple.com/videos/play/wwdc2016/406/" target="_blank">WWDC2016: Optimizing App Startup Time</a><br>
<a href="https://developer.apple.com/videos/play/wwdc2017/413/" target="_blank">WWDC2017: App Startup Time: Past, Present, and Future</a><br>
<a href="http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/" target="_blank">优化 App 的启动时间</a><br>
<a href="https://juejin.im/entry/5b6061bef265da0f574dfd21" target="_blank">今日头条 iOS 客户端启动速度优化</a><br>
<a href="https://github.com/Tencent/VasSonic" target="_blank">VasSonic 源码</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>冷启动</tag>
        <tag>Instruments</tag>
        <tag>MachOView</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 内存泄漏场景与解决方案</title>
    <url>/2020/ios-memory-leak/</url>
    <content><![CDATA[<p><strong>内存泄漏</strong>指的是程序中已动态分配的<strong>堆内存</strong>（程序员自己管理的空间）由于某些原因未能释放或无法释放，造成系统内存的浪费，导致程序运行速度变慢甚至系统崩溃。</p>
<a id="more"></a>
<p>在 iOS 开发中会遇到的内存泄漏场景可以分为几类：</p>
<h2 id="循环引用">循环引用<a title="#循环引用" href="#循环引用"></a></h2>
<p>当对象 A 强引用对象 B，而对象 B 又强引用对象 A，或者多个对象互相强引用形成一个闭环，这就是<strong>循环引用</strong>。</p>
<h3 id="block">Block<a title="#block" href="#block"></a></h3>
<p>Block 会对其内部的对象强引用，因此使用的时候需要确保不会形成循环引用。</p>
<p>举个例子，看下面这段代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="keyword">self</span>.name);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">self</span>.block();</span><br></pre></td></tr></table></figure>
<p><code>block</code> 是 <code>self</code> 的属性，因此 <code>self</code> 强引用了 <code>block</code>，而 <code>block</code> 内部又调用了 <code>self</code>，因此 <code>block</code> 也强引用了 <code>self</code>。要解决这个循环引用的问题，有两种思路。</p>
<h4 id="使用-weak-strong-dance">使用 Weak-Strong Dance<a title="#使用-weak-strong-dance" href="#使用-weak-strong-dance"></a></h4>
<p>先用 <code>__weak</code> 将 <code>self</code> 置为弱引用，打破“循环”关系，但是 <code>weakSelf</code> 在 <code>block</code> 中可能被提前释放，因此还需要在 <code>block</code> 内部，用 <code>__strong</code> 对 <code>weakSelf</code> 进行强引用，这样可以确保 <code>strongSelf</code> 在 <code>block</code> 结束后才会被释放。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">    __<span class="keyword">strong</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) strongSelf = weakSelf;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, strongSelf.name);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">self</span>.block();</span><br></pre></td></tr></table></figure>
<h4 id="断开持有关系">断开持有关系<a title="#断开持有关系" href="#断开持有关系"></a></h4>
<p>使用 <code>__block</code> 关键字设置一个指针 <code>vc</code> 指向 <code>self</code>，重新形成一个 <code>self → block → vc → self</code> 的循环持有链。在调用结束后，将 <code>vc</code> 置为 <code>nil</code>，就能断开循环持有链，从而令 <code>self</code> 正常释放。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__block <span class="built_in">UIViewController</span> *vc = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, vc.name);</span><br><span class="line">        vc = <span class="literal">nil</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">self</span>.block();</span><br></pre></td></tr></table></figure>
<p>这里还要补充一个问题，为什么要用 <code>__block</code> 修饰 <code>vc</code>？</p>
<p>首先，<code>block</code> 本身不允许修改外部变量的值。但被 <code>__block</code> 修饰的变量会被存在了一个栈的结构体当中，成为结构体指针。当这个对象被 <code>block</code> 持有，就将“外部变量”在栈中的内存地址放到堆中，进而可以在 <code>block</code> 内部修改外部变量的值。</p>
<p>总结一下，没有 <code>__block</code> 就是<strong>值传递</strong>，有 <code>__block</code> 就是<strong>指针传递</strong>。</p>
<p>还有一种方式可以断开持有关系。就是将 <code>self</code> 以传参的形式传入 <code>block</code> 内部，这样 <code>self</code> 就不会被 <code>block</code> 持用，也就不会形成循环持有链。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.block = ^(<span class="built_in">UIViewController</span> *vc)&#123;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, vc.name);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">self</span>.block(<span class="keyword">self</span>);</span><br></pre></td></tr></table></figure>
<h3 id="nstimer">NSTimer<a title="#nstimer" href="#nstimer"></a></h3>
<p>我们知道 <code>NSTimer</code> 对象是采用 <code>target-action</code> 方式创建的，通常 <code>target</code> 就是类本身，而我们为了方便又常把 <code>NSTimer</code> 声明为属性，像这样：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种创建方式，timer 默认添加进 runloop</span></span><br><span class="line"><span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span>f target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeFire) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"><span class="comment">// 第二种创建方式，需要手动将 timer 添加进 runloop</span></span><br><span class="line"><span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1.0</span>f target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeFire) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">[[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure>
<p>这就形成了 <code>self → timer → self(target)</code> 的循环持有链。只要 <code>self</code> 不释放，<code>dealloc</code> 就不会执行，<code>timer</code> 就无法在 <code>dealloc</code> 中销毁，<code>self</code> 始终被强引用，永远得不到释放，循环矛盾，最终造成内存泄漏。</p>
<p>那么如果只把 <code>timer</code> 作为局部变量，而不是属性呢？</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1.0</span>f target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeFire) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">[[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure>
<p><code>self</code> 同样释放不了。</p>
<p>因为在加入 runloop 的操作中，<code>timer</code> 被强引用，这就形成了一条 <code>runloop → timer → self(target)</code> 的持有链。而 <code>timer</code> 作为局部变量，无法执行 <code>invalidate</code>，所以在 <code>timer</code> 被销毁之前，<code>self</code> 也不会被释放。</p>
<p>所以只要申请了 <code>timer</code>，加入了 runloop，并且 <code>target</code> 是 <code>self</code>，就算不是循环引用，也会造成内存泄漏，因为 <code>self</code> 没有释放的时机。</p>
<p>解决这个问题有好几种方式，开发者可以自行选择。</p>
<h4 id="在合适的时机销毁-nstimer">在合适的时机销毁 NSTimer<a title="#在合适的时机销毁-nstimer" href="#在合适的时机销毁-nstimer"></a></h4>
<p>当 <code>NSTimer</code> 初始化之后，加入 runloop 会导致被当前的页面强引用，因此不会执行 <code>dealloc</code>。所以需要在合适的时机销毁 <code>_timer</code>，断开 <code>_timer</code>、runloop 和当前页面之间的强引用关系。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[_timer invalidate];</span><br><span class="line">_timer = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure>
<p><code>ViewController</code> 中的时机可以选择 <code>didMoveToParentViewController</code>、<code>viewDidDisappear</code>，<code>View</code> 中可以选择 <code>removeFromSuperview</code> 等，但这种方案并一定是正确可行的。</p>
<p>比如在注册页面中加了一个倒计时，如果在 <code>viewDidDisappear</code> 中销毁了 <code>_timer</code>，当用户点击跳转到用户协议页面时，倒计时就会被提前销毁，这是不合逻辑的。因此需要结合具体业务的需求场景来考虑。</p>
<h4 id="使用-gcd-的定时器">使用 GCD 的定时器<a title="#使用-gcd-的定时器" href="#使用-gcd-的定时器"></a></h4>
<p>GCD 不基于 runloop，可以用 GCD 的计时器代替 NSTimer 实现计时任务。但需要注意的是，GCD 内部 block 中的循环引用问题还是需要解决的。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">self</span>.timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</span><br><span class="line">dispatch_source_set_timer(_timer, DISPATCH_TIME_NOW, <span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>);</span><br><span class="line">dispatch_source_set_event_handler(_timer, ^&#123;</span><br><span class="line">    [weakSelf timeFire];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开启计时器</span></span><br><span class="line">dispatch_resume(_timer);</span><br><span class="line"><span class="comment">// 销毁计时器</span></span><br><span class="line"><span class="comment">// dispatch_source_cancel(_timer);</span></span><br></pre></td></tr></table></figure>
<h4 id="借助中介者销毁">借助中介者销毁<a title="#借助中介者销毁" href="#借助中介者销毁"></a></h4>
<p><strong>中介者</strong>指的是用别的对象代替 <code>target</code> 里的 <code>self</code>，中介者绑定 <code>selector</code> 之后，再在 <code>dealloc</code> 中释放 <code>timer</code>。</p>
<p>这里介绍两种中介者，一种是 NSObject 对象，一种是 NSProxy 的子类。它们的存在是为了断开对 <code>self</code> 的强引用，使之可以被释放。</p>
<h5 id="以一个-nsobject-对象作为中介者">以一个 NSObject 对象作为中介者<a title="#以一个-nsobject-对象作为中介者" href="#以一个-nsobject-对象作为中介者"></a></h5>
<p>新建一个 NSObject 对象 <code>_target</code>，为它<strong>动态添加</strong>一个方法，方法的地址指向 <code>self</code> 方法列表中的 <code>timeFire</code> 的 IMP。这样 <code>_target</code> 与 <code>self</code> 之间没有直接的引用关系，又能引用 <code>self</code> 里的方法，就不会出现循环引用。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">_target = [<span class="built_in">NSObject</span> new];</span><br><span class="line">class_addMethod([_target <span class="keyword">class</span>], <span class="keyword">@selector</span>(timeFire), class_getMethodImplementation([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(timeFire)), <span class="string">&quot;v@:&quot;</span>);</span><br><span class="line"><span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span>f target:_target selector:<span class="keyword">@selector</span>(timeFire) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure>
<h5 id="以-nsproxy-的子类作为中介者">以 NSProxy 的子类作为中介者<a title="#以-nsproxy-的子类作为中介者" href="#以-nsproxy-的子类作为中介者"></a></h5>
<p>创建一个继承自 <code>NSProxy</code> 的子类 <code>WeakProxy</code>，将 <code>timer</code> 的 <code>target</code> 设置为 <code>WeakProxy</code> 实例，利用<strong>完整的消息转发机制</strong>实现执行 <code>self</code> 中的计时方法，解决循环引用。</p>
<figure class="highlight objc"><figcaption><span>WeakProxy.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">readonly</span>) <span class="keyword">id</span> weakTarget;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)proxyWithTarget:(<span class="keyword">id</span>)target;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithTarget:(<span class="keyword">id</span>)target;</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>WeakProxy.m</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WeakProxy</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)proxyWithTarget:(<span class="keyword">id</span>)target &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithTarget:target];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithTarget:(<span class="keyword">id</span>)target &#123;</span><br><span class="line">    _weakTarget = target;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)invocation &#123;</span><br><span class="line">    SEL sel = [invocation selector];</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.weakTarget respondsToSelector:sel]) &#123;</span><br><span class="line">        [invocation invokeWithTarget:<span class="keyword">self</span>.weakTarget];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.weakTarget methodSignatureForSelector:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)respondsToSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.weakTarget respondsToSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后这样创建 <code>timer</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span>f target:[WeakProxy proxyWithTarget:<span class="keyword">self</span>] selector:<span class="keyword">@selector</span>(timeFire) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure>
<p>这时候的循环持有链是这样的：</p>
<p><img src="/2020/ios-memory-leak/timer-weak-proxy.png" alt class="φcx"></p>
<p>由于 <code>WeakProxy</code> 与 <code>self</code> 之间是弱引用关系，<code>self</code> 最终是可以被销毁的。</p>
<h4 id="带-block-的-timer">带 block 的 timer<a title="#带-block-的-timer" href="#带-block-的-timer"></a></h4>
<p>iOS 10 之后，Apple 提供了一种 block 的方式来解决循环引用的问题。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSTimer</span> *)timerWithTimeInterval:(<span class="built_in">NSTimeInterval</span>)interval repeats:(<span class="built_in">BOOL</span>)repeats block:(<span class="keyword">void</span> (^)(<span class="built_in">NSTimer</span> *timer))block API_AVAILABLE(macosx(<span class="number">10.12</span>), ios(<span class="number">10.0</span>), watchos(<span class="number">3.0</span>), tvos(<span class="number">10.0</span>));</span><br></pre></td></tr></table></figure>
<p>为了兼容 iOS 10 之前的方法，可以写成 NSTimer 分类的形式，将 block 作为 SEL 传入初始化方法中，统一以 block 的形式处理回调。</p>
<figure class="highlight objc"><figcaption><span>NSTimer+WeakTimer.m</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;NSTimer+WeakTimer.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSTimer</span> (<span class="title">WeakTimer</span>)</span></span><br><span class="line"> </span><br><span class="line">+ (<span class="built_in">NSTimer</span> *)ht_scheduledTimerWithTimeInterval:(<span class="built_in">NSTimeInterval</span>)interval</span><br><span class="line">                                       repeats:(<span class="built_in">BOOL</span>)repeats</span><br><span class="line">                                         block:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> scheduledTimerWithTimeInterval:interval</span><br><span class="line">                                         target:<span class="keyword">self</span></span><br><span class="line">                                       selector:<span class="keyword">@selector</span>(ht_blockInvoke:)</span><br><span class="line">                                       userInfo:[block <span class="keyword">copy</span>]</span><br><span class="line">                                        repeats:repeats];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">+ (<span class="keyword">void</span>)ht_blockInvoke:(<span class="built_in">NSTimer</span> *)timer &#123;</span><br><span class="line">    <span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = timer.userInfo;</span><br><span class="line">    <span class="keyword">if</span>(block) &#123;</span><br><span class="line">        block();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后在需要的类中创建 <code>timer</code>。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> ht_scheduledTimerWithTimeInterval:<span class="number">1.0</span>f repeats:<span class="literal">YES</span> block:^&#123;</span><br><span class="line">    [weakSelf timeFire];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="委托模式">委托模式<a title="#委托模式" href="#委托模式"></a></h3>
<p>委托模式，是对象之间通信的一种设计模式。该模式的主旨是：定义一套接口，某对象若想接受另一个对象的委托，则需遵从此接口，以便成为其“委托对象”。</p>
<h4 id="uitableview-的-delegate">UITableView 的 delegate<a title="#uitableview-的-delegate" href="#uitableview-的-delegate"></a></h4>
<p>我们常用的 <code>tableView</code> 与 <code>ViewController</code> 就是<strong>委托方</strong>和<strong>代理方</strong>的关系。</p>
<p>需要在控制器中加入列表时，通常我们会将 <code>tableView</code> 设为 <code>ViewController</code> 中 <code>view</code> 的子视图，<code>UIViewController</code> 的源码是这样定义 <code>view</code> 的：</p>
<figure class="highlight objc"><figcaption><span>UIViewController.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">null_resettable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *view;</span><br></pre></td></tr></table></figure>
<p>因此 <code>ViewController</code> 强引用了 <code>tableView</code>。而 <code>tableView</code> 又要委托 <code>ViewController</code> 帮它实现几个代理方法和数据源方法。如果此时 <code>dataSource</code> 和 <code>delegate</code> 属性用 <code>strong</code> 来修饰，就会出现 <code>UITableView</code> 与 <code>ViewController</code> 互相强引用，形成<strong>循环引用</strong>。</p>
<p>那么看一下 <code>UITableView</code> 的实现源码，我们会发现其中定义 <code>dataSource</code> 和 <code>delegate</code> 属性时是用 <code>weak</code> 修饰的。</p>
<figure class="highlight objc"><figcaption><span>UITableView.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">nullable</span>) <span class="keyword">id</span> &lt;<span class="built_in">UITableViewDataSource</span>&gt; dataSource;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">nullable</span>) <span class="keyword">id</span> &lt;<span class="built_in">UITableViewDelegate</span>&gt; delegate;</span><br></pre></td></tr></table></figure>
<p>所以 <code>tableView</code> 的 <code>dataSource</code> 和 <code>delegate</code> 只是 <code>weak</code> 指针，指向了 <code>ViewController</code>，它们之间的关系是这样的：</p>
<p><img src="/2020/ios-memory-leak/tableview-vc-relationship.png" alt class="φcx"></p>
<p>这也就避免了循环引用的发生。</p>
<h4 id="nsurlsession-的-delegate">NSURLSession 的 delegate<a title="#nsurlsession-的-delegate" href="#nsurlsession-的-delegate"></a></h4>
<p>那么 <code>delegate</code> 一定被 <code>weak</code> 修饰吗？</p>
<p>也不一定，需要看具体的场景。比如 <code>NSURLSession</code> 类中的 <code>delegate</code> 就是用 <code>retain</code> 修饰的。</p>
<figure class="highlight objc"><figcaption><span>NSURLSession.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">retain</span>) <span class="keyword">id</span> &lt;<span class="built_in">NSURLSessionDelegate</span>&gt; delegate;</span><br></pre></td></tr></table></figure>
<p>它这么做，是因为了确保网络请求回调之前，<code>delegate</code> 不被释放。</p>
<p>这也间接引起了 <code>AFNetworking</code> 中<strong>循环引用</strong>的出现。我们看 <code>AFURLSessionManager</code> 类中声明的 <code>session</code> 是 <code>strong</code> 类型的。</p>
<figure class="highlight objc"><figcaption><span>AFURLSessionManager.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> The managed session.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSession</span> *session;</span><br></pre></td></tr></table></figure>
<p>在构造 <code>session</code> 对象时，也将 <code>delegate</code> 设为了 <code>self</code>，也就是 <code>AFURLSessionManager</code> 类。</p>
<figure class="highlight objc"><figcaption><span>AFURLSessionManager.m</span></figcaption><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSURLSession</span> *)session &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_session) &#123;</span><br><span class="line">            _session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:<span class="keyword">self</span>.sessionConfiguration delegate:<span class="keyword">self</span> delegateQueue:<span class="keyword">self</span>.operationQueue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此三者就形成了这样循环持有关系。</p>
<p><img src="/2020/ios-memory-leak/afn-recycle.png" alt class="φcx"></p>
<p>要解决这个问题，有两种解决思路：</p>
<p><strong>方式一：将 <code>AFHTTPSessionManager</code> 对象设为单例</strong></p>
<p>对于客户端来说，大多数情况下都是对应同一个后台服务，所以可以将 <code>AFHTTPSessionManager</code> 对象设为单例来处理。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (AFHTTPSessionManager *)sharedManager &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="keyword">static</span> AFHTTPSessionManager *_manager = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _manager = [AFHTTPSessionManager manager];</span><br><span class="line">        _manager.requestSerializer = [AFHTTPRequestSerializer serializer];</span><br><span class="line">        _manager.responseSerializer.acceptableContentTypes = [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@&quot;application/json&quot;</span>, <span class="string">@&quot;text/html&quot;</span>,<span class="string">@&quot;text/json&quot;</span>, <span class="string">@&quot;text/plain&quot;</span>, <span class="string">@&quot;text/javascript&quot;</span>,<span class="string">@&quot;text/xml&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line">        _manager.responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要设定固定请求头， 以这种 <code>key-value</code> 形式加入到 <code>dispatch_once</code> 中。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[_manager.requestSerializer setValue:<span class="string">@&quot;application/json;charset=utf-8&quot;</span> forHTTPHeaderField:<span class="string">@&quot;Content-Type&quot;</span>];</span><br></pre></td></tr></table></figure>
<p><strong>缺点</strong>：因为请求的 <code>header</code> 是由 <code>AFHTTPSessionManager</code>的 <code>requestSerializer.mutableHTTPRequestHeaders</code> 字典持有的，所以这种单例模式会导致全局共享一个 <code>header</code>，如果要处理不同自定义 <code>header</code> 的请求就会变得很麻烦。</p>
<p><strong>方式二：在请求结束时，手动销毁 <code>session</code> 对象</strong></p>
<p>由于 <code>session</code> 对象对 <code>delegate</code> 强持有，要打破循环引用，需要在请求结束后手动调用 <code>AFHTTPSessionManager</code> 对象销毁的方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (AFHTTPSessionManager *)getSessionManager&#123;</span><br><span class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class="line">    manager.requestSerializer = [AFHTTPRequestSerializer serializer];</span><br><span class="line">    manager.responseSerializer.acceptableContentTypes = [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@&quot;application/json&quot;</span>, <span class="string">@&quot;text/html&quot;</span>,<span class="string">@&quot;text/json&quot;</span>, <span class="string">@&quot;text/plain&quot;</span>, <span class="string">@&quot;text/javascript&quot;</span>,<span class="string">@&quot;text/xml&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)sendRequest&#123;</span><br><span class="line">    AFHTTPSessionManager *manager = [<span class="keyword">self</span> getSessionManager];</span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(manager)weakManager = manager;</span><br><span class="line">    [manager GET:<span class="string">@&quot;https://blog.fiteen.top&quot;</span> parameters:<span class="literal">nil</span> progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span> (weakManager)strongManager = weakManager;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;success 回调&quot;</span>);</span><br><span class="line">        [strongManager invalidateSessionCancelingTasks:<span class="literal">YES</span>];</span><br><span class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span> (weakManager)strongManager = weakManager;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;error 回调&quot;</span>);</span><br><span class="line">        [strongManager invalidateSessionCancelingTasks:<span class="literal">YES</span>];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="非-oc-对象内存处理">非 OC 对象内存处理<a title="#非-oc-对象内存处理" href="#非-oc-对象内存处理"></a></h2>
<p>虽然现在已经普及了 ARC 模式，但它仅对 OC 对象进行自动内存管理。对于非 OC 对象，比如 <code>CoreFoundation</code> 框架下的 <code>CI</code>、<code>CG</code>、<code>CF</code> 等开头的类的对象，在使用完毕后仍需我们手动释放。</p>
<p>比如这段获取 UUID 的代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CFUUIDRef</span> puuid = <span class="built_in">CFUUIDCreate</span>( kCFAllocatorDefault );</span><br><span class="line"><span class="built_in">CFStringRef</span> uuidString = <span class="built_in">CFUUIDCreateString</span>( kCFAllocatorDefault, puuid );</span><br><span class="line"><span class="built_in">NSString</span> *uuid = [(<span class="built_in">NSString</span> *)<span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFStringCreateCopy</span>(<span class="literal">NULL</span>, uuidString)) uppercaseString];</span><br><span class="line"><span class="comment">// 使用完后释放 puuid 和 uuidString 对象</span></span><br><span class="line"><span class="built_in">CFRelease</span>(puuid);</span><br><span class="line"><span class="built_in">CFRelease</span>(uuidString);</span><br></pre></td></tr></table></figure>
<p>还有 C 语言中，如果用 <code>malloc</code> 动态分配内存后，需要用 <code>free</code> 去释放，否则会出现内存泄漏。比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">person *p = (person *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(person));</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;name,<span class="string">&quot;fiteen&quot;</span>);</span><br><span class="line">p-&gt;age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// 使用完释放内存</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="comment">// 防止野指针</span></span><br><span class="line">p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<h2 id="&lt;span-id=&quot;peak-mem-usage&quot;&gt;循环加载引起内存峰值&lt;/span&gt;"><span id="peak-mem-usage">循环加载引起内存峰值</span><a title="#&lt;span-id=&quot;peak-mem-usage&quot;&gt;循环加载引起内存峰值&lt;/span&gt;" href="#&lt;span-id=&quot;peak-mem-usage&quot;&gt;循环加载引起内存峰值&lt;/span&gt;"></a></h2>
<p>先看下面这段代码，看似没有内存泄漏的问题，但是在实际运行时，for 循环内部产生了大量的临时对象，会出现 CPU 暴增。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="string">@&quot;Abc&quot;</span>;</span><br><span class="line">    str = [str lowercaseString];</span><br><span class="line">    str = [str stringByAppendingString:<span class="string">@&quot;xyz&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是因为循环内产生大量的临时对象，直至循环结束才释放，可能导致内存泄漏。</p>
<p><strong>解决方案</strong>：</p>
<p>在循环中创建自己的 <code>autoreleasepool</code>，及时释放占用内存大的临时变量，减少内存占用峰值。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *str = <span class="string">@&quot;Abc&quot;</span>;</span><br><span class="line">        str = [str lowercaseString];</span><br><span class="line">        str = [str stringByAppendingString:<span class="string">@&quot;xyz&quot;</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在没有手加自动释放池的情况下，<code>autorelease</code> 对象是在当前的 runloop 迭代结束时释放的，而它能够释放的原因是系统在每个 runloop 迭代中都会先销毁并重新创建自动释放池。</p>
<p>下面举个特殊的例子，使用<strong>容器 block 版本的枚举器</strong>时，内部会自动添加一个自动释放池，比如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[array enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">    <span class="comment">// 这里被一个局部 @autoreleasepool 包围着</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h2 id="&lt;span-id=&quot;wild-pointer-and-zoombies&quot;&gt;野指针与僵尸对象&lt;/span&gt;"><span id="wild-pointer-and-zoombies">野指针与僵尸对象</span><a title="#&lt;span-id=&quot;wild-pointer-and-zoombies&quot;&gt;野指针与僵尸对象&lt;/span&gt;" href="#&lt;span-id=&quot;wild-pointer-and-zoombies&quot;&gt;野指针与僵尸对象&lt;/span&gt;"></a></h2>
<p>指针指向的对象已经被释放/回收，这个指针就叫做<strong>野指针</strong>。这个被释放的对象就是<strong>僵尸对象</strong>。</p>
<p>如果用野指针去访问僵尸对象，或者说向野指针发送消息，会发生 <code>EXC_BAD_ACCESS</code> 崩溃，出现<strong>内存泄漏</strong>。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MRC 下</span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        Student *stu = [[Student alloc] init];</span><br><span class="line">        [stu setAge:<span class="number">18</span>];</span><br><span class="line">        [stu release];      <span class="comment">// stu 在 release 之后，内存空间被释放并回收，stu 变成野指针</span></span><br><span class="line">        <span class="comment">// [stu setAge:20]; // set 再调用 setAge 就会崩溃</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解决方案</strong>：当对象释放后，应该将其置为 <code>nil</code>。</p>
<h2 id="内存泄漏检查工具">内存泄漏检查工具<a title="#内存泄漏检查工具" href="#内存泄漏检查工具"></a></h2>
<h3 id="instruments">Instruments<a title="#instruments" href="#instruments"></a></h3>
<p>Instruments 是 Xcode 自带的工具集合，为开发者提供强大的程序性能分析和测试能力。</p>
<p>它打开方式为：<code>Xcode → Open Developer Tool → Instruments</code>。其中的 Allocations、Leaks 和 Zombies 功能可以协助我们进行内存泄漏检查。</p>
<ul>
<li>
<p>Leaks：<strong>动态</strong>检查泄漏的内存，如果检查过程时出现了红色叉叉，就说明存在内存泄漏，可以定位到泄漏的位置，去解决问题。此外，Xcode 中还提供<strong>静态</strong>监测方法 Analyze，可以直接通过 <code>Product → Analyze</code> 打开，如果出现泄漏，会出现“蓝色分支图标”提示。</p>
</li>
<li>
<p>Allocations：用来检查内存使用/分配情况。比如出现“<a href="#peak-mem-usage">循环加载引起内存峰值</a>”的情况，就可以通过这个工具检查出来。</p>
</li>
<li>
<p>Zombies：检查是否访问了<a href="#wild-pointer-and-zoombies">僵尸对象</a>。</p>
</li>
</ul>
<p>Instruments 的使用相对来说比较复杂，你也可以通过在工程中引入一些第三方框架进行检测。</p>
<h3 id="mleaksfinder">MLeaksFinder<a title="#mleaksfinder" href="#mleaksfinder"></a></h3>
<p><a href="https://github.com/Tencent/MLeaksFinder" target="_blank">MLeaksFinder</a> 是 WeRead 团队开源的 iOS 内存泄漏检测工具。</p>
<p>它的使用非常简单，只要在工程引入框架，就可以在 App 运行过程中监测到内存泄漏的对象并立即提醒。MLeaksFinder 也不具备侵入性，使用时无需在 release 版本移除，因为它只会在 debug 版本生效。</p>
<p>不过 MLeaksFinder 的只能定位到内存泄漏的对象，如果你想要检查该对象是否存在循环引用。就结合 FBRetainCycleDetector 一起使用。</p>
<h3 id="fbretaincycledetector">FBRetainCycleDetector<a title="#fbretaincycledetector" href="#fbretaincycledetector"></a></h3>
<p><a href="https://github.com/facebook/FBRetainCycleDetector" target="_blank">FBRetainCycleDetector</a> 是 Facebook 开源的一个<strong>循环引用</strong>检测工具。它会递归遍历传入内存的 OC 对象的所有强引用的对象，检测以该对象为根结点的强引用树有没有出现循环引用。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
        <tag>委托模式</tag>
        <tag>block</tag>
        <tag>Instruments</tag>
        <tag>NSTimer</tag>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS runtime 机制解读（结合 objc4 源码）</title>
    <url>/2020/ios-runtime/</url>
    <content><![CDATA[<p>Runtime 是指将数据类型的确定由<strong>编译时</strong>推迟到了<strong>运行时</strong>。它是一套底层的纯 C 语言 API，我们平时编写的 Objective-C 代码，最终都会转换成 runtime 的 C 语言代码。</p>
<a id="more"></a>
<p>不过，runtime API 的实现是用 C++ 开发的（源码中的实现文件都是 <code>.mm</code> 文件）。</p>
<p>为了更全面地理解 runtime 机制，我们结合最新的<a href="https://opensource.apple.com/source/objc4/" target="_blank">objc4 源码</a>来进行解读。</p>
<h2 id="消息传递">消息传递<a title="#消息传递" href="#消息传递"></a></h2>
<p>我们知道 Objective-C 是面向对象开发的，而 C 语言则是面向过程开发，这就需要<strong>将面向对象的类转变成面向过程的结构体</strong>。</p>
<p>在 Objective-C 中，所有的消息传递中的“消息”都会被编译器转化为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">id <span class="title">objc_msgSend</span> <span class="params">( id self, SEL op, ... )</span></span>;</span><br></pre></td></tr></table></figure>
<p>比如执行一个对象的方法：<code>[obj foo];</code>，底层运行时会被编译器转化为：<code>objc_msgSend(obj, @selector(foo));</code>。</p>
<p>那么方法内部的执行流程究竟是怎么样的呢？我先来了解一些概念。</p>
<h3 id="概念">概念<a title="#概念" href="#概念"></a></h3>
<h4 id="objc_object">objc_object<a title="#objc_object" href="#objc_object"></a></h4>
<p>Objective-C 对象是由 <code>id</code> 类型表示的，它本质上是一个指向 <code>objc_object</code> 结构体的指针。</p>
<figure class="highlight c"><figcaption><span>objc-private.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> *<span class="title">id</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">isa_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">isa_t</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">isa_t</span>(<span class="keyword">uintptr_t</span> value) : bits(value) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Class cls;</span><br><span class="line">    <span class="keyword">uintptr_t</span> bits;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ISA_BITFIELD)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        ISA_BITFIELD;  <span class="comment">// defined in isa.h</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">isa_t</span> isa;</span><br><span class="line"><span class="comment">// public &amp; private method...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看到 <code>objc_object</code> 的结构体中只有一个对象，就是指向其类的 <code>isa</code> 指针。</p>
<p>当向一个对象发送消息时，runtime 会根据实例对象的 <code>isa</code> 指针找到其所属的类。</p>
<h4 id="objc_class">objc_class<a title="#objc_class" href="#objc_class"></a></h4>
<p>Objective-C 的类是由 <code>Class</code> 类型来表示的，它实际上是一个指向 <code>objc_class</code> 结构体的指针。</p>
<figure class="highlight c"><figcaption><span>objc.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> *<span class="title">Class</span>;</span></span><br></pre></td></tr></table></figure>
<p><code>objc_class</code> 结构体中定义了很多变量：</p>
<figure class="highlight c"><figcaption><span>objc-runtime-new.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// 指向类的指针(位于 objc_object)</span></span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    <span class="comment">// 指向父类的指针</span></span><br><span class="line">    Class superclass;</span><br><span class="line">    <span class="comment">// 用于缓存指针和 vtable，加速方法的调用</span></span><br><span class="line">    <span class="keyword">cache_t</span> cache;             <span class="comment">// formerly cache pointer and vtable</span></span><br><span class="line">    <span class="comment">// 存储类的方法、属性、遵循的协议等信息的地方</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line">    <span class="comment">// class_data_bits_t 结构体的方法，用于返回 class_rw_t 指针（）</span></span><br><span class="line">    <span class="function"><span class="keyword">class_rw_t</span> *<span class="title">data</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other methods...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_rw_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// Be warned that Symbolication knows the layout of this structure.</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">class_ro_t</span> *ro;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">method_array_t</span> methods;</span><br><span class="line">    <span class="keyword">property_array_t</span> properties;</span><br><span class="line">    <span class="keyword">protocol_array_t</span> protocols;</span><br><span class="line">    </span><br><span class="line">    Class firstSubclass;</span><br><span class="line">    Class nextSiblingClass;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *demangledName;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_INDEXED_ISA</span></span><br><span class="line">    <span class="keyword">uint32_t</span> index;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// other methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>objc_class</code> 继承自 <code>objc_object</code>，因此它也拥有了 <code>isa</code> 指针。除此之外，它的结构体中还保存了指向父类的指针、缓存、实例变量列表、方法列表、遵守的协议等。</p>
<h4 id="元类">元类<a title="#元类" href="#元类"></a></h4>
<p>元类（metaclass）是类对象的类，它的结构体和 <code>objc_class</code> 是一样的。</p>
<p>由于所有的类自身也是一个对象，我们可以向这个对象发送消息，比如调用类方法。那么为了调用类方法，这个类的 <code>isa</code> 指针必须指向一个包含类方法的一个 <code>objc_class</code> 结构体。而类对象中只存储了实例方法，却没有类方法，这就引出了元类的概念，元类中保存了创建类对象以及类方法所需的所有信息。</p>
<p><img src="/2020/ios-runtime/instance-class-meta-isa-chain.png" alt class="φcx"></p>
<p>为了更方便理解，举个例子：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)eat;    <span class="comment">// 一个实例方法</span></span><br><span class="line">+ (<span class="keyword">void</span>)sleep;  <span class="comment">// 一个类方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么实例方法需要由类对象来调用：</span></span><br><span class="line">[person eat];</span><br><span class="line"><span class="comment">// 而类方法需要由元类来调用：</span></span><br><span class="line">[Person sleep];</span><br></pre></td></tr></table></figure>
<p>假如 <code>person</code> 对象也能调用 <code>sleep</code> 方法，那我们就无法区分它调用的就究竟是 <code>+ (void)sleep;</code> 还是 <code>- (void)sleep;</code>。</p>
<p><strong>类对象是元类的实例，类对象的 <code>isa</code> 指针指向了元类。</strong></p>
<p>这个说法可能有点绕，借助这张经典的图来理解：</p>
<p><img src="/2020/ios-runtime/instance-class-meta-chain.png" alt class="φcx"></p>
<p>当向对象发消息，runtime 会在这个对象所属类方法列表中查找发送消息对应的方法，但当向类发送消息时，runtime 就会在这个类的 meta class 方法列表里查找。所有的 meta class，包括 Root class，Superclass，Subclass 的 isa 都指向 Root class 的 meta class，这样能够形成一个闭环。</p>
<h4 id="method(method_t)">Method(method_t)<a title="#method(method_t)" href="#method(method_t)"></a></h4>
<p>Method 是一个指向 <code>method_t</code> 结构体的指针，我们找到关于它的定义：</p>
<figure class="highlight c"><figcaption><span>objc-private.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">method_t</span> *<span class="title">Method</span>;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><figcaption><span>objc-runtime-new.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">method_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// 方法选择器</span></span><br><span class="line">    SEL name;</span><br><span class="line">    <span class="comment">// 类型编码</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *types;</span><br><span class="line">    <span class="comment">// 方法实现的指针</span></span><br><span class="line">    MethodListIMP imp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以 Method 和 SEL、IMP 的关系就是 Method = SEL + IMP + types。</p>
<p>关于 types 的写法，参考 <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1" target="_blank">Type Encodings</a>。</p>
<h4 id="sel(objc_selector)">SEL(objc_selector)<a title="#sel(objc_selector)" href="#sel(objc_selector)"></a></h4>
<p>SEL 又称<strong>方法选择器</strong>，是一个指向 <code>objc_selector</code> 结构体的指针，也是 <code>objc_msgSend</code> 函数的第二个参数类型。</p>
<figure class="highlight c"><figcaption><span>objc.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_selector</span> *<span class="title">SEL</span>;</span></span><br></pre></td></tr></table></figure>
<p>方法的 <code>selector</code> 用于表示运行时方法的名称。代码编译时，会根据方法的名字（不包括参数）生成一个唯一的整型标识（ Int 类型的地址），即 SEL。</p>
<p><strong>一个类的方法列表中不能存在两个相同的 SEL</strong>，这也是 <strong>Objective-C 不支持重载</strong>的原因。</p>
<p><strong>不同类之间可以存在相同的 SEL</strong>，因为不同类的实例对象执行相同的 <code>selector</code> 时，会在各自的方法列表中去寻找自己对应的 IMP。</p>
<p><strong>获取 SEL</strong> 的方式有三种：</p>
<ul>
<li><code>sel_registerName</code> 函数</li>
<li>Objective-C 编译器提供的 <code>@selector()</code> 方法</li>
<li><code>NSSeletorFromString()</code> 方法</li>
</ul>
<h4 id="imp">IMP<a title="#imp" href="#imp"></a></h4>
<p>IMP 本质上就是一个函数指针，<strong>指向方法实现的地址</strong>。</p>
<figure class="highlight c"><figcaption><span>objc.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*IMP)</span><span class="params">(<span class="keyword">void</span> <span class="comment">/* id, SEL, ... */</span> )</span></span>; </span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>id：指向 self 的指针（如果是实例方法，则是类实例的内存地址；如果是类方法，则是对应的类对象）</li>
<li>SEL：方法选择器</li>
<li>…：方法的参数列表</li>
</ul>
<p>SEL 与 IMP 的关系类似于哈希表中 key 与 value 的关系。采用这种哈希映射的方式可以加快方法的查找速度。</p>
<h4 id="cache_t">cache_t<a title="#cache_t" href="#cache_t"></a></h4>
<p><code>cache_t</code> 表示类缓存，是 object_class 的结构体变量之一。</p>
<figure class="highlight c"><figcaption><span>objc-runtime-new.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cache_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// 存放方法的数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bucket_t</span> *_<span class="title">buckets</span>;</span></span><br><span class="line">    <span class="comment">// 能存储的最多数量</span></span><br><span class="line">    <span class="keyword">mask_t</span> _mask;</span><br><span class="line">    <span class="comment">// 当前已存储的方法数量</span></span><br><span class="line">    <span class="keyword">mask_t</span> _occupied;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了加速消息分发，系统会对方法和对应的地址进行缓存，就放在 <code>cache_t</code> 中。</p>
<p>实际运行中，大部分常用的方法都是会被缓存起来的，runtime 系统实际上非常快，接近直接执行内存地址的程序速度。</p>
<h4 id="category_t">category_t<a title="#category_t" href="#category_t"></a></h4>
<p><code>category_t</code> 表示一个指向分类的结构体的指针。</p>
<figure class="highlight c"><figcaption><span>objc-runtime-new.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">category_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// 是指类名，而不是分类名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="comment">// 要扩展的类对象，编译期间是不会定义的，而是在运行时阶段通过 name 对应到相应的类对象</span></span><br><span class="line">    <span class="keyword">classref_t</span> cls;</span><br><span class="line">    <span class="comment">// 实例方法列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">method_list_t</span> *<span class="title">instanceMethods</span>;</span></span><br><span class="line">    <span class="comment">// 类方法列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">method_list_t</span> *<span class="title">classMethods</span>;</span></span><br><span class="line">    <span class="comment">// 协议列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">protocol_list_t</span> *<span class="title">protocols</span>;</span></span><br><span class="line">    <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">property_list_t</span> *<span class="title">instanceProperties</span>;</span></span><br><span class="line">    <span class="comment">// Fields below this point are not always present on disk.</span></span><br><span class="line">    <span class="comment">// 类（元类）属性列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">property_list_t</span> *_<span class="title">classProperties</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">method_list_t</span> *<span class="title">methodsForMeta</span><span class="params">(<span class="keyword">bool</span> isMeta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMeta) <span class="keyword">return</span> classMethods;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> instanceMethods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">property_list_t</span> *<span class="title">propertiesForMeta</span><span class="params">(<span class="keyword">bool</span> isMeta, struct header_info *hi)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里涉及到一个经典问题：</p>
<p><strong>分类中可以添加实例变量/成员变量/属性吗？</strong></p>
<p>首先，<strong>分类中无法直接添加实例变量和成员变量</strong>。</p>
<p>实践一下，我们就会发现，在分类中添加实例变量/成员变量，在编译阶段，就会报错，但添加属性是允许的。</p>
<p><img src="/2020/ios-runtime/category-add-instance-variable-error.png" alt class="φcx"></p>
<p>这是因为<strong>在分类的结构体当中，没有“实例变量/成员变量”的结构，但是有“属性”的结构</strong>。</p>
<p>那么分类中就可以直接添加属性吗？</p>
<p>其实也不然，虽然分类的 <code>.h</code> 中没有报错信息，<code>.m</code> 中却报出了如下的警告，且运行时会报错。</p>
<p><img src="/2020/ios-runtime/category-add-property-warn.png" alt class="φcx"></p>
<p>警告提示上表明有两种解决方法：</p>
<p>第一种：用 <code>@dynamic</code> 修饰。但实际上，<code>@dynamic</code> 修饰只是告诉编译器，属性的 setter 和 getter 方法会由用户自行实现。但这样做只能消除警告，无法解决问题，运行时依然会崩溃。</p>
<p>第二种：给分类手动添加 setter 和 getter 方法，这是一种有效的方案。</p>
<p>我们知道 <code>@property = ivar + setter + getter</code>。</p>
<p>可以通过 <code>objc_setAssociatedObject</code> 和 <code>objc_getAssociatedObject</code> <strong>向分类中动态添加属性</strong>，具体实现见下文中的<a href="#add-prop-to-category-with-associated-objects">“关联对象给分类增加属性”</a>。</p>
<h3 id="流程">流程<a title="#流程" href="#流程"></a></h3>
<p>消息传递的完整过程为：</p>
<p><img src="/2020/ios-runtime/message-send.png" alt="消息传递流程" class="φcx"></p>
<p>也就是查找 IMP 的过程：</p>
<ul>
<li>先从当前 class 的 cache 方法列表里去查找。</li>
<li>如果找到了，如果找到了就返回对应的 IMP 实现，并把当前的 class 中的 selector 缓存到 cache 里面。</li>
<li>如果类的方法列表中找不到，就到父类的方法列表中查找，一直找到 NSObject 类为止。</li>
<li>最后再找不到，就会进入动态方法解析和消息转发的机制。</li>
</ul>
<h2 id="消息转发">消息转发<a title="#消息转发" href="#消息转发"></a></h2>
<p>如果消息传递后仍无法找到 IMP，就进入了<strong>消息转发</strong>流程。</p>
<ol>
<li>通过运行期的<strong>动态方法解析</strong>功能，我们可以在需要用到某个方法时再将其加入类中。</li>
<li>对象可以把其无法解读的某些选择子转交给<strong>备用接受者</strong>来处理。</li>
<li>经过上述两步之后，如果还是没有办法处理选择子，那就启动<strong>完整的消息转发</strong>机制。</li>
</ol>
<h3 id="动态方法解析">动态方法解析<a title="#动态方法解析" href="#动态方法解析"></a></h3>
<p>动态方法解析的两个方法：</p>
<figure class="highlight objc"><figcaption><span>NSObject.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加类方法</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(<span class="number">10.5</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line"><span class="comment">// 添加实例方法</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(<span class="number">10.5</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>);</span><br></pre></td></tr></table></figure>
<p>我们再看看这两个方法在源码中的调用：</p>
<figure class="highlight c"><figcaption><span>objc-class.mm</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _class_resolveMethod(Class cls, SEL sel, id inst)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断是不是元类</span></span><br><span class="line">    <span class="keyword">if</span> (! cls-&gt;isMetaClass()) &#123;</span><br><span class="line">        <span class="comment">// try [cls resolveInstanceMethod:sel]</span></span><br><span class="line">        <span class="comment">// 调用类的 resolveInstanceMethod 方法，动态添加实例方法</span></span><br><span class="line">        _class_resolveInstanceMethod(cls, sel, inst);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// try [nonMetaClass resolveClassMethod:sel]</span></span><br><span class="line">        <span class="comment">// and [cls resolveInstanceMethod:sel]</span></span><br><span class="line">        <span class="comment">// 调用元类的 resolveClassMethod 方法，动态添加类方法</span></span><br><span class="line">        _class_resolveClassMethod(cls, sel, inst);</span><br><span class="line">        <span class="keyword">if</span> (!lookUpImpOrNil(cls, sel, inst, </span><br><span class="line">                            NO<span class="comment">/*initialize*/</span>, YES<span class="comment">/*cache*/</span>, NO<span class="comment">/*resolver*/</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            _class_resolveInstanceMethod(cls, sel, inst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面看一个动态方法解析的例子。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(foo)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(foo)) &#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)fooMethod, <span class="string">&quot;v@:&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> fooMethod(<span class="keyword">id</span> obj, SEL _cmd) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Doing foo&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到虽然没有实现 <code>foo</code> 这个函数，但是我们通过 <code>class_addMethod</code> 动态添加 <code>fooMethod</code> 函数，并执行 <code>fooMethod</code> 这个函数的 IMP。</p>
<p>如果 <code>resolveInstanceMethod:</code> 方法返回 NO ，运行时就会移到下一步：<code>forwardingTargetForSelector:</code>。</p>
<h3 id="备用接收者">备用接收者<a title="#备用接收者" href="#备用接收者"></a></h3>
<p>如果目标对象实现了 <code>forwardingTargetForSelector:</code> 方法，runtime 就会调用这个方法，给你把这个消息转发给其他接受者的机会。</p>
<p>实现一个备用接收者的例子如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)foo &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Doing foo&quot;</span>);<span class="comment">//Person的foo函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(foo)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="comment">// 返回 NO，进入下一步转发。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span> (aSelector == <span class="keyword">@selector</span>(foo)) &#123;</span><br><span class="line">        <span class="comment">//返回 Person对象，让 Person 对象接收这个消息</span></span><br><span class="line">        <span class="keyword">return</span> [Person new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>上面的实现就是利用 <code>forwardingTargetForSelector</code> 把当前 <code>ViewController</code> 类的方法 <code>foo</code> 转发给了备用接受者 <code>Person</code> 类去执行了。</p>
<h3 id="完整的消息转发">完整的消息转发<a title="#完整的消息转发" href="#完整的消息转发"></a></h3>
<p>如果在上一步还无法处理未知消息，唯一能做的就是启用<strong>完整的消息转发</strong>机制。</p>
<p>主要涉及到两个方法：</p>
<ul>
<li>发送 <code>methodSignatureForSelector</code>进行方法签名，这可以将函数的参数类型和返回值封装。如果返回 nil，runtime 会发出 <code>doesNotRecognizeSelector</code> 消息，程序同时崩溃。</li>
<li>如果返回了一个函数签名，runtime 就会创建一个 <code>NSInvocation</code> 对象并发送 <code>forwardInvocation</code> 消息给目标对象。</li>
</ul>
<p>实现一个完整转发的例子如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)foo &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Doing foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(foo)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="comment">// 返回 NO，进入下一步转发。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="comment">// 返回 nil，进入下一步转发。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">NSStringFromSelector</span>(aSelector) isEqualToString:<span class="string">@&quot;foo&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSMethodSignature</span> signatureWithObjCTypes:<span class="string">&quot;v@:&quot;</span>];<span class="comment">// 签名，进入 forwardInvocation</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;</span><br><span class="line">    SEL sel = anInvocation.selector;</span><br><span class="line">    Person *p = [Person new];</span><br><span class="line">    <span class="keyword">if</span>([p respondsToSelector:sel]) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:p];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>通过签名，runtime 生成了一个对象 <code>anInvocation</code>，发送给方法 <code>forwardInvocation</code>，我们在方法中让 <code>Person</code> 对象执行 <code>foo</code> 函数。</p>
<p><img src="/2020/ios-runtime/message-forwarding.png" alt="消息转发流程" class="φcx"></p>
<p>以上就是 runtime 的三次转发流程，下面列举一下 runtime 的实际应用。</p>
<h2 id="应用">应用<a title="#应用" href="#应用"></a></h2>
<h3 id="&lt;span-id=&quot;add-prop-to-category-with-associated-objects&quot;&gt;关联对象给分类增加属性&lt;/span&gt;"><span id="add-prop-to-category-with-associated-objects">关联对象给分类增加属性</span><a title="#&lt;span-id=&quot;add-prop-to-category-with-associated-objects&quot;&gt;关联对象给分类增加属性&lt;/span&gt;" href="#&lt;span-id=&quot;add-prop-to-category-with-associated-objects&quot;&gt;关联对象给分类增加属性&lt;/span&gt;"></a></h3>
<p>关联对象(Associated Objects) 是 Objective-C 运行时的特性，允许开发者向已经存在的类在扩展中添加自定义属性。</p>
<p>关联对象 runtime 提供了 3 个 API 接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取关联的对象</span></span><br><span class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span><span class="params">(id object, <span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"><span class="comment">// 设置关联对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span><span class="params">(id object, <span class="keyword">const</span> <span class="keyword">void</span> *key, id value, objc_AssociationPolicy policy)</span></span>;</span><br><span class="line"><span class="comment">// 移除关联的对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_removeAssociatedObjects</span><span class="params">(id object)</span></span>;</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>object</code>：被关联的对象</li>
<li><code>key</code>：关联对象的唯一标识</li>
<li><code>value</code>： 关联的对象</li>
<li><code>policy</code>：内存管理的策略</li>
</ul>
<p>关于<strong>内存管理的策略</strong>，源码中这样描述：</p>
<figure class="highlight c"><figcaption><span>runtime.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Associative References */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Policies related to associative references.</span></span><br><span class="line"><span class="comment"> * These are options to objc_setAssociatedObject()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">OBJC_ENUM</span><span class="params">(<span class="keyword">uintptr_t</span>, objc_AssociationPolicy)</span> </span>&#123;</span><br><span class="line">    OBJC_ASSOCIATION_ASSIGN = <span class="number">0</span>,           <span class="comment">/**&lt; Specifies a weak reference to the associated object. */</span></span><br><span class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class="number">1</span>, <span class="comment">/**&lt; Specifies a strong reference to the associated object. </span></span><br><span class="line"><span class="comment">                                            *   The association is not made atomically. */</span></span><br><span class="line">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class="number">3</span>,   <span class="comment">/**&lt; Specifies that the associated object is copied. </span></span><br><span class="line"><span class="comment">                                            *   The association is not made atomically. */</span></span><br><span class="line">    OBJC_ASSOCIATION_RETAIN = <span class="number">01401</span>,       <span class="comment">/**&lt; Specifies a strong reference to the associated object.</span></span><br><span class="line"><span class="comment">                                            *   The association is made atomically. */</span></span><br><span class="line">    OBJC_ASSOCIATION_COPY = <span class="number">01403</span>          <span class="comment">/**&lt; Specifies that the associated object is copied.</span></span><br><span class="line"><span class="comment">                                            *   The association is made atomically. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们看看内存策略对应的属性修饰。</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th>内存策略</th>
<th>属性修饰</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>OBJC_ASSOCIATION_ASSIGN</td>
<td>@property (assign) 或 @property (unsafe_unretained)</td>
<td>指定一个关联对象的弱引用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>
<td>@property (nonatomic, strong)</td>
<td>指定一个关联对象的强引用，不能被原子化使用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY_NONATOMIC</td>
<td>@property (nonatomic, copy)</td>
<td>指定一个关联对象的 copy 引用，不能被原子化使用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN</td>
<td>@property (atomic, strong)</td>
<td>指定一个关联对象的强引用，能被原子化使用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY</td>
<td>@property (atomic, copy)</td>
<td>指定一个关联对象的 copy 引用，能被原子化使用。</td>
</tr>
</tbody>
</table></div></div><p>下面利用关联对象实现一个“在分类中增加一个用 <code>copy</code> 修饰的非原子性属性 <code>prop</code>的功能。</p>
<p>上文中，我们已经知道分类中不能直接添加属性，需要手动添加存取方法：</p>
<figure class="highlight objc"><figcaption><span>NSObject+AssociatedObject.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">AssociatedObject</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *prop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>NSObject+AssociatedObject.m</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;NSObject+AssociatedObject.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key 有三种常见写法：</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1. static void *propKey = &amp;propKey;</span></span><br><span class="line"><span class="comment">// 2. static NSString *propKey = @&quot;propKey&quot;;</span></span><br><span class="line"><span class="comment">// 3. static char propKey;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *propKey = <span class="string">@&quot;propKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">AssociatedObject</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setProp:(<span class="built_in">NSString</span> *)prop &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;propKey, prop, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)prop &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;propKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="黑魔法添加和替换方法">黑魔法添加和替换方法<a title="#黑魔法添加和替换方法" href="#黑魔法添加和替换方法"></a></h3>
<p>黑魔法是方法交换（method swizzling），也就是交换方法的 IMP 实现。</p>
<p>一般是在 <code>+ (void)load;</code> 中执行方法交换。因为它的加载时机较早，基本能确保方法已交换。</p>
<h4 id="方法添加">方法添加<a title="#方法添加" href="#方法添加"></a></h4>
<p>在动态方法解析中已经提到了“方法添加”。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//class_addMethod(Class  _Nullable __unsafe_unretained cls, SEL  _Nonnull name, IMP  _Nonnull imp, const char * _Nullable types)</span><br><span class="line">class_addMethod([self class], sel, (IMP)fooMethod, <span class="string">&quot;v@:&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>cls</code>：被添加方法的类</li>
<li><code>name</code>：添加的方法的名称的 SEL</li>
<li><code>imp</code>：方法的实现。该函数必须至少要有两个参数，self,_cmd</li>
<li><code>types</code>：类型编码</li>
</ul>
<h4 id="方法替换">方法替换<a title="#方法替换" href="#方法替换"></a></h4>
<p>方法替换就是改变类的选择子映射表。</p>
<p><img src="/2020/ios-runtime/method-swizzling.png" alt class="φcx"></p>
<p>如果要互换两个已经写好的方法实现，可以用下面的函数</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> method_exchangeImplementations(Method m1, Method m2);</span><br></pre></td></tr></table></figure>
<p>方法实现可以通过下面的函数获得：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> class_getInstanceMethod(Class aClass, SEL aSelector);</span><br></pre></td></tr></table></figure>
<p>下面实现一个替换 <code>ViewController</code> 中 <code>viewDidLoad</code> 方法的例子。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">        SEL originalSelector = <span class="keyword">@selector</span>(viewDidLoad);</span><br><span class="line">        SEL swizzledSelector = <span class="keyword">@selector</span>(msviewDidLoad);</span><br><span class="line">        </span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>,originalSelector);</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>,swizzledSelector);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断 original 的方法是否已经实现，如果未实现，将 swizzledMethod 的实现和类型添加进 originalSelector 中</span></span><br><span class="line">        <span class="built_in">BOOL</span> didAddMethod = class_addMethod(<span class="keyword">class</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class="line">        <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">            <span class="comment">// 将 originalMethod 的实现和类型替换到 swizzledSelector 中</span></span><br><span class="line">            class_replaceMethod(<span class="keyword">class</span>, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 交换 originalMethod 和 swizzledMethod</span></span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)msviewDidLoad &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;msviewDidLoad&quot;</span>);</span><br><span class="line">    [<span class="keyword">self</span> msviewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;viewDidLoad&quot;</span>);</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="kvo-实现">KVO 实现<a title="#kvo-实现" href="#kvo-实现"></a></h3>
<p>KVO 全称是 Key-value observing，也就是键值观察者模式，它提供了一种当其它对象属性被修改的时候能通知到当前对象的机制。</p>
<p>KVO 的实现也是依赖于 runtime 中的 <code>isa-swizzling</code>。</p>
<p>当观察某对象 A 时，KVO 机制动态创建一个新的名为：<code>NSKVONotifying_A</code> 的新类，该类继承自对象 A 的本类，且 KVO 为 <code>NSKVONotifying_A</code> 重写观察属性的 setter 方法，setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象属性值的更改情况。</p>
<p>举个例子：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;A.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    A *a = [A new];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Before KVO: [a class] = %@, a -&gt; isa = %@&quot;</span>, [a <span class="keyword">class</span>], object_getClass(a));</span><br><span class="line">    [a addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@&quot;name&quot;</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;After KVO: [a class] = %@, a -&gt; isa = %@&quot;</span>, [a <span class="keyword">class</span>], object_getClass(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>程序运行的结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Before KVO: [a class] = A, a -&gt; isa = A</span><br><span class="line">After KVO: [a class] = A, a -&gt; isa = NSKVONotifying_A</span><br></pre></td></tr></table></figure>
<p>可以看到当对 a 进行观察后，虽然对象 <code>a</code> 的 <code>class</code> 还是 <code>A</code>，isa 实际指向了它的子类 <code>NSKVONotifying_A</code>，来实现当前类属性值改变的监听；</p>
<p>所以当我们从应用层面上看来，完全没有意识到有新的类出现，这是系统“隐瞒”了对 KVO 的底层实现过程，让我们误以为还是原来的类。但是此时如果我们创建一个新的名为 <code>NSKVONotifying_A</code> 的类，就会发现系统运行到注册 KVO 的那段代码时程序就崩溃，因为系统在注册监听的时候动态创建了名为 <code>NSKVONotifying_A</code> 的中间类，并指向这个中间类了。</p>
<p>那么子类 <code>NSKVONotifying_A</code> 的 setter 方法里具体实现了什么？</p>
<p>KVO 的键值观察通知依赖于 NSObject 的两个方法：</p>
<ul>
<li>
<p><code>-willChangeValueForKey:</code>：被观察属性发生改变之<strong>前</strong>，该方法被调用，通知系统该 keyPath 的属性值<strong>即将变更</strong>；</p>
</li>
<li>
<p><code>-didChangeValueForKey:</code>：被观察属性发生改变之<strong>后</strong>，该方法被调用，通知系统该 keyPath 的属性值<strong>已经变更</strong>。方法 <code>observeValueForKey:ofObject:change:context:</code>也会被调用。且重写观察属性的 setter 方法这种继承方式的注入是在运行时而不是编译时实现的。</p>
</li>
</ul>
<p>因此，KVO 为子类的观察者属性重写调用存取方法的工作原理在代码中相当于：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="comment">// KVO 在调用存取方法之前总调用 </span></span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@&quot;name&quot;</span>];</span><br><span class="line">    <span class="comment">// 调用父类的存取方法 </span></span><br><span class="line">    [<span class="keyword">super</span> setValue:newName forKey:<span class="string">@&quot;name&quot;</span>];</span><br><span class="line">    <span class="comment">// KVO 在调用存取方法之后总调用</span></span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@&quot;name&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现字典和模型之间的转换（mjextension）">实现字典和模型之间的转换（MJExtension）<a title="#实现字典和模型之间的转换（mjextension）" href="#实现字典和模型之间的转换（mjextension）"></a></h3>
<p><strong>原理</strong>：</p>
<p>通过在 <code>NSObject</code> 的分类中添加方法 <code>-initWithDict:</code>。</p>
<p>具体实现为：用 runtime 提供的函数 <code>class_copyPropertyList</code> 获取属性列表，再遍历 <code>Model</code> 自身所有属性（通过 <code>property_getName</code> 函数获得属性的名字，通过 <code>property_getAttributes</code> 函数获得属性的类型）。如果属性在 <code>json</code> 中有对应的值，则将其赋值。</p>
<p><strong>源码</strong>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithDict:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">self</span> init]) &#123;</span><br><span class="line">        <span class="comment">// 1、获取类的属性及属性对应的类型</span></span><br><span class="line">        <span class="built_in">NSMutableArray</span> * keys = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="built_in">NSMutableArray</span> * attributes = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 例子</span></span><br><span class="line"><span class="comment">         * name = value3 attribute = T@&quot;NSString&quot;,C,N,V_value3</span></span><br><span class="line"><span class="comment">         * name = value4 attribute = T^i,N,V_value4</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">        objc_property_t * properties = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class="line">            objc_property_t property = properties[i];</span><br><span class="line">            <span class="comment">// 通过 property_getName 函数获得属性的名字</span></span><br><span class="line">            <span class="built_in">NSString</span> * propertyName = [<span class="built_in">NSString</span> stringWithCString:property_getName(property) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">            [keys addObject:propertyName];</span><br><span class="line">            <span class="comment">// 通过 property_getAttributes 函数获得属性类型</span></span><br><span class="line">            <span class="built_in">NSString</span> * propertyAttribute = [<span class="built_in">NSString</span> stringWithCString:property_getAttributes(property) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">            [attributes addObject:propertyAttribute];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 立即释放properties指向的内存</span></span><br><span class="line">        free(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、根据类型给属性赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> * key <span class="keyword">in</span> keys) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([dict valueForKey:key] == <span class="literal">nil</span>) <span class="keyword">continue</span>;</span><br><span class="line">            [<span class="keyword">self</span> setValue:[dict valueForKey:key] forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现-nscoding-的自动归档和解档">实现 NSCoding 的自动归档和解档<a title="#实现-nscoding-的自动归档和解档" href="#实现-nscoding-的自动归档和解档"></a></h3>
<p><strong>原理</strong>：</p>
<p>在 <code>Model</code> 的基类中重写方法：<code>-initWithCoder:</code> 和 <code>-encodeWithCoder:</code>。</p>
<p>具体实现为：用 runtime 提供的函数 <code>class_copyIvarList</code> 获取实例变量列表，再遍历 <code>Model</code> 自身所有属性，并对属性进行 <code>encode</code> 和 <code>decode</code> 操作。</p>
<p><strong>源码</strong>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">        Ivar * ivars = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class="line">            Ivar ivar = ivars[i];</span><br><span class="line">            <span class="built_in">NSString</span> * key = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">            [<span class="keyword">self</span> setValue:[aDecoder decodeObjectForKey:key] forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">    Ivar * ivars = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        <span class="built_in">NSString</span> * key = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">        [aCoder encodeObject:[<span class="keyword">self</span> valueForKey:key] forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="jspatch">JSPatch<a title="#jspatch" href="#jspatch"></a></h3>
<p>JSPatch 是一款 iOS 动态更新框架，只需要在项目中引入引擎，就可以使用 JavaScript 调用所有 Objective-C 原生接口，从而实现热更新。</p>
<p>它通过<strong>完整的消息转发</strong>实现了获取参数的问题。</p>
<p><strong>原理</strong>：</p>
<p>当调用一个 NSObject 对象不存在的方法时，并不会马上抛出异常，而是会经过多层转发，层层调用对象的 <code>-resolveInstanceMethod:</code>、<code>-forwardingTargetForSelector:</code>、<code>-methodSignatureForSelector:</code>、<code>-forwardInvocation:</code> 等方法，其中 <code>-forwardInvocation:</code> 里的 <code>NSInvocation</code> 对象会保存了这个方法调用的所有信息，包括方法名、参数和返回值类型等。所以只需要让被 JS 替换的方法最后都调用到 <code>-forwardInvocation:</code>，就可以解决无法拿到参数值的问题了。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树详细图解</title>
    <url>/2020/red-black-tree/</url>
    <content><![CDATA[<p>红黑树（Red Black Tree）是一种自平衡的二叉搜索树（Self-balancing Binary Search Tree）。以前也叫做平衡二叉 B 树（Symmetric Binary B-tree）。</p>
<a id="more"></a>
<h2 id="预备知识">预备知识<a title="#预备知识" href="#预备知识"></a></h2>
<p>树的知识框架结构如下图所示：</p>
<p><img src="/2020/red-black-tree/tree.png" alt class="φcx"></p>
<h3 id="平衡二叉搜索树">平衡二叉搜索树<a title="#平衡二叉搜索树" href="#平衡二叉搜索树"></a></h3>
<p><strong>平衡二叉搜索树</strong>（Balanced Binary Search Tree），英文简称 BBST。经典常见的平衡二叉搜索树是 <a href="#avl-tree">AVL 树</a>和红黑树。</p>
<h4 id="二叉搜索树">二叉搜索树<a title="#二叉搜索树" href="#二叉搜索树"></a></h4>
<p><strong>二叉搜索树</strong>（Binary Search Tree）是二叉树的一种，英文简称 BST。又称为二叉查找树、二叉排序树。</p>
<p>它的<strong>特点</strong>是任何一个结点的值都<strong>大于</strong>其<strong>左</strong>子树的所有结点的值，任何一个结点的值都<strong>小于</strong>其<strong>右</strong>子树的所有结点的值。</p>
<h4 id="平衡">平衡<a title="#平衡" href="#平衡"></a></h4>
<p><strong>平衡</strong>（Balance）：就是当结点数量固定时，左右子树的高度越接近，这棵二叉树越平衡（高度越低）。而<strong>最理想的平衡</strong>就是完全二叉树/满二叉树，高度最小的二叉树。</p>
<p><img src="/2020/red-black-tree/binary-tree-compare.png" alt class="φcx"></p>
<p>一棵二叉搜索树平均时间复杂度可以认为是树的高度 O(h)。像左边这棵，结点的左右子树的高度接近，属于一棵平衡二叉搜索树，O(h) = O(logn)；而右边这棵，高度达到了最大，已经退化成了链表，O(h)=O(n)。</p>
<h4 id="改进二叉搜索树">改进二叉搜索树<a title="#改进二叉搜索树" href="#改进二叉搜索树"></a></h4>
<p>当二叉树退化成链表时，性能是很低的，所以我们需要在结点的插入、删除操作之后，想办法让二叉搜索树恢复平衡（减小树的高度）。但是如果为了追求最理想的平衡，而增加了时间复杂度也不是很有必要，因此比较合理的方案就是：<strong>用尽量少的调整次数达到适度平衡</strong>。</p>
<p>由此引申出 AVL 树的概念。</p>
<h3 id="&lt;span-id=&quot;avl-tree&quot;&gt;avl-树&lt;/span&gt;"><span id="avl-tree">AVL 树</span><a title="#&lt;span-id=&quot;avl-tree&quot;&gt;avl-树&lt;/span&gt;" href="#&lt;span-id=&quot;avl-tree&quot;&gt;avl-树&lt;/span&gt;"></a></h3>
<p>AVL 树是最早发明的自平衡二叉搜索树之一，它取名自两位发明家的名字：G.M.Adelson-Velsky 和 E.M.Landis。</p>
<h4 id="平衡因子">平衡因子<a title="#平衡因子" href="#平衡因子"></a></h4>
<p>平衡因子（Balance Factor）：某结点的左右子树的高度差。</p>
<p>每个叶子结点的平衡因子都是 0。看这棵二叉搜索树，红色数字标注了每个结点对应的平衡因子。</p>
<p><img src="/2020/red-black-tree/binary-search-tree-balance-factor.png" alt class="φcx"></p>
<p>举例：</p>
<p>8 的左子树高度为 2，右子树高度为 1，因此它的平衡因子为 1；5 的左子树高度为 0，右子树高度为 3，因此它的平衡因子为 -3；4 的左子树高度为 2，右子树高度为 4，因此它的平衡因子为 -2；</p>
<p>再看这棵 AVL 树和它每个结点对应的平衡因子：</p>
<p><img src="/2020/red-black-tree/avl-tree-balance-factor.png" alt class="φcx"></p>
<p>可以看到 AVL 树具有以下<strong>特点</strong>：</p>
<ul>
<li>每个结点的平衡因子只可能是 -1、0、1（如果绝对值超过 1，则认为是<strong>失衡</strong>）</li>
<li>每个结点的左右子树高度差不超过 1</li>
<li>搜索、插入、删除的时间复杂度是 O(logn)</li>
</ul>
<h3 id="b-树">B 树<a title="#b-树" href="#b-树"></a></h3>
<p>B 树（Balanced Tree）是一种<strong>平衡</strong>的<strong>多路</strong>搜索树，多用于文件系统、数据库的实现。这是一个简单的 3 阶 B 树：</p>
<p><img src="/2020/red-black-tree/b-tree.png" alt class="φcx"></p>
<h4 id="特点">特点<a title="#特点" href="#特点"></a></h4>
<ul>
<li>1 个结点可以存储超过 2 个元素，可以拥有超过 2 个子结点</li>
<li>拥有二叉搜索树的一些性质</li>
<li>平衡，每个结点的所有子树高度一致</li>
<li>比较矮</li>
</ul>
<h4 id="m-阶-b-树的性质（m-≥-2）">m 阶 B 树的性质（m ≥ 2）<a title="#m-阶-b-树的性质（m-≥-2）" href="#m-阶-b-树的性质（m-≥-2）"></a></h4>
<p>m 阶 B 树指的是一个结点最多拥有 m 个子结点。假设一个结点存储的元素个数为 x，那么如果这个结点是：</p>
<ul>
<li>根结点：1 ≤ x ≤ m - 1</li>
<li>非根结点：┌ m / 2 ┐ - 1 ≤ x ≤ m - 1</li>
</ul>
<p>如果有子结点，子结点个数为 y = x + 1，那么如果这个结点是：</p>
<ul>
<li>根结点：2 ≤ y ≤ m</li>
<li>非根结点：┌ m / 2 ┐ ≤ y ≤ m</li>
</ul>
<blockquote>
<p>向上取整（Ceiling），指的是取比自己大的最小整数，用数学符号 ┌ ┐ 表示。<br>
向下取整（Floor），指的是取比自己小的最大整数，用数学符号 └ ┘ 表示。</p>
</blockquote>
<p>比如 m = 3， 子结点个数 2 ≤ y ≤ 3，这个 B 树可以称为（2,3）树、2-3 树；</p>
<p>比如 m = 4， 子结点个数 2 ≤ y ≤ 4，这个 B 树可以称为（2,4）树、2-3-4 树；</p>
<p>比如 m = 5， 子结点个数 3 ≤ y ≤ 4，这个 B 树可以称为（3,5）树、3-4-5 树；</p>
<p>以此类推。</p>
<h4 id="b-树-vs-二叉搜索树">B 树 VS 二叉搜索树<a title="#b-树-vs-二叉搜索树" href="#b-树-vs-二叉搜索树"></a></h4>
<p><img src="/2020/red-black-tree/binary-search-tree.png" alt class="φcx"></p>
<p>这是一棵二叉搜索树，通过某些父子结点合并，恰好能与上面的 B 树对应。我们可以得到结论：</p>
<ul>
<li>B 树和二叉搜索树，在逻辑上是等价的</li>
<li>多代结点合并，可以获得一个超级结点，且 n 代合并的超级结点，最多拥有 <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.381ex" height="2.343ex" style="vertical-align: -0.338ex;" viewbox="0 -863.1 1025.1 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^n</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="707" y="583"/>
</g>
</svg> 个子结点 （至少是 <svg xmlns:xlink="http://www.w3.org/1999/xlink" width="2.381ex" height="2.343ex" style="vertical-align: -0.338ex;" viewbox="0 -863.1 1025.1 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title">
<title id="MathJax-SVG-1-Title">2^n</title>
<defs aria-hidden="true">
<path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/>
<path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/>
</defs>
<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true">
 <use xlink:href="#E1-MJMAIN-32" x="0" y="0"/>
 <use transform="scale(0.707)" xlink:href="#E1-MJMATHI-6E" x="707" y="583"/>
</g>
</svg> 阶 B 树）</li>
</ul>
<h2 id="红黑树定义和性质">红黑树定义和性质<a title="#红黑树定义和性质" href="#红黑树定义和性质"></a></h2>
<p>红黑树是一种含有<strong>红黑结点</strong>并能<strong>自平衡</strong>的二叉搜索树。</p>
<p>为了保证平衡，红黑树必须满足以下<strong>性质</strong>：</p>
<ol>
<li>每个结点是要么是<span style="color: red"><strong>红色</strong></span>或<strong>黑色</strong></li>
<li>根结点必须是<strong>黑色</strong></li>
<li>叶结点（外部结点、空结点）是<strong>黑色</strong></li>
<li><strong><span style="color: red">红色</span><strong>结点不能连续（也就是，红色结点的孩子和父亲都是</strong>黑色</strong>）</li>
<li>对于每个结点，从该点至 <code>nil</code>（树尾端，java 中为 <code>null</code> 的结点)的任何路径都包含所相同个数的<strong>黑色</strong>结点</li>
</ol>
<h2 id="红黑树与-b-树的等价变换">红黑树与 B 树的等价变换<a title="#红黑树与-b-树的等价变换" href="#红黑树与-b-树的等价变换"></a></h2>
<p><img src="/2020/red-black-tree/red-black-tree.png" alt class="φcx"></p>
<p>根据上面的性质，可以画出这样一棵红黑树。接下来对红黑树做<strong>等价变换</strong>，即<strong>将所有的红色结点上升一层与它的父结点放在同一行</strong>，这就很像一棵 <strong>4 阶 B 树</strong>，转换效果如下图所示。</p>
<p><img src="/2020/red-black-tree/red-black-tree-2-b-tree.png" alt class="φcx"></p>
<p>可以得出结论：</p>
<ul>
<li>红黑树与 4 阶 B 树（2-3-4 树）具有等价性</li>
<li>黑色结点与红色子结点融合在一起，形成 1 个 B 树结点</li>
<li>红黑树的黑色结点个数与 4 阶 B 树的结点总个数相等</li>
</ul>
<h2 id="红黑树的基本操作">红黑树的基本操作<a title="#红黑树的基本操作" href="#红黑树的基本操作"></a></h2>
<p>当我们对一棵平衡二叉搜索树进行插入、删除的时候，很可能会让这棵树变得<strong>失衡</strong>（最坏可能导致所有祖先结点失衡，但是父结点和非祖先结点都不可能失衡），为了达到平衡，需要对树进行旋转。而红黑树能够达到自平衡，靠的也就是<strong>左旋</strong>、<strong>右旋</strong>和<strong>变色</strong>。</p>
<p>旋转操作是局部的。当一侧子树的结点少了，向另一侧“借”一些结点；当一侧子树的结点多了，则“租”一些结点给另一侧。</p>
<p>为了更清楚地讲解这部分内容，先声明几个概念：</p>
<p><img src="/2020/red-black-tree/red-black-tree-node-definition.png" alt class="φcx"></p>
<ul>
<li>N - node：当前结点</li>
<li>P - parent：父结点</li>
<li>S - sibling：兄弟结点</li>
<li>U - uncle：叔父结点（P 的兄弟结点）</li>
<li>G - grand：祖父结点（P 的父结点）</li>
</ul>
<h3 id="左旋">左旋<a title="#左旋" href="#左旋"></a></h3>
<p><strong>左旋</strong>指的是以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变。</p>
<p><img src="/2020/red-black-tree/left-rotation.png" alt class="φcx"></p>
<p>不考虑结点颜色，可以看到左旋只影响旋转结点和其右子树的结构，把右子树的结点往左子树移动。</p>
<h3 id="右旋">右旋<a title="#右旋" href="#右旋"></a></h3>
<p><strong>右旋</strong>指的是以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变。</p>
<p><img src="/2020/red-black-tree/right-rotation.png" alt class="φcx"></p>
<p>不考虑结点颜色，可以看到右旋只影响旋转结点和其左子树的结构，把左子树的结点往右子树移动。</p>
<h3 id="变色">变色<a title="#变色" href="#变色"></a></h3>
<p><strong>变色</strong>指的是结点的颜色由红变黑或由黑变红。</p>
<h3 id="变换规则">变换规则<a title="#变换规则" href="#变换规则"></a></h3>
<p>将左旋、右旋和变色结合起来，得到一套<strong>变换规则</strong>：</p>
<p><strong><span id="change-color">变色</span></strong>：如果当前结点的父结点和叔父结点是<span style="color: red"><strong>红色</strong></span>，那么：</p>
<ul>
<li>把父结点和叔父结点变为<strong>黑色</strong></li>
<li>把祖父结点变为<span style="color: red"><strong>红色</strong></span></li>
<li>把指针定义到<strong>祖父结点</strong></li>
</ul>
<p><strong><span id="turn-left">左旋</span></strong>：当前结点是<strong>右子树</strong>，且父结点是<span style="color: red"><strong>红色</strong></span>，叔父结点是<strong>黑色</strong>，对它的<strong>父结点</strong>左旋</p>
<p><strong><span id="turn-right">右旋</span></strong>：当前结点是<strong>左子树</strong>，且父结点是<span style="color: red"><strong>红色</strong></span>，叔父结点是<strong>黑色</strong>，那么：</p>
<ul>
<li>把父结点变为<strong>黑色</strong></li>
<li>把祖父结点变为<span style="color: red"><strong>红色</strong></span></li>
<li>对<strong>祖父结点</strong>右旋</li>
</ul>
<h2 id="&lt;span-id=&quot;rbtree-search&quot;&gt;红黑树搜索&lt;/span&gt;"><span id="rbtree-search">红黑树搜索</span><a title="#&lt;span-id=&quot;rbtree-search&quot;&gt;红黑树搜索&lt;/span&gt;" href="#&lt;span-id=&quot;rbtree-search&quot;&gt;红黑树搜索&lt;/span&gt;"></a></h2>
<p>由于红黑树本来就是平衡二叉搜索树，并且搜索也不会破坏树的平衡，所以搜索算法也与平衡二叉搜索树一致：</p>
<p><img src="/2020/red-black-tree/rbtree-search-flow-chart.png" alt class="φcx"></p>
<p>具体步骤：</p>
<ol>
<li>从<strong>根结点</strong>开始检索，把根结点设置为当前结点；</li>
<li>若当前结点为<strong>空</strong>，<strong>返回 nil</strong>。</li>
<li>若当前结点不为空，比较当前结点 key 与搜索 key 的大小；</li>
<li>若当前结点 key <strong>等于</strong>搜索 key，那么该 key 就是搜索目标，<strong>返回当前结点</strong>。</li>
<li>若当前结点 key <strong>大于</strong>搜索 key，把当前结点的<strong>左子结点</strong>设置为当前结点，重复步骤 2；</li>
<li>若当前结点 key <strong>小于</strong>搜索 key，把当前结点的<strong>右子结点</strong>设置为当前结点，重复步骤 2；</li>
</ol>
<h2 id="红黑树插入">红黑树插入<a title="#红黑树插入" href="#红黑树插入"></a></h2>
<p>红黑树插入操作分为下面两步：</p>
<h3 id="定位插入的位置">定位插入的位置<a title="#定位插入的位置" href="#定位插入的位置"></a></h3>
<p><img src="/2020/red-black-tree/rbtree-add-flow-chart.png" alt class="φcx"></p>
<p>具体步骤：</p>
<ol>
<li>从根结点开始检索；</li>
<li>若根结点为空，那么<strong>插入结点设为根结点</strong>，结束。</li>
<li>若根结点不为空，那么把根结点设为当前结点；</li>
<li>若当前结点为 nil，<strong>返回当前结点的父结点</strong>，结束。</li>
<li>若当前结点 key <strong>等于</strong>搜索 key，那么该 key 所在结点就是插入结点，<strong>更新结点的值</strong>，结束。</li>
<li>若当前结点 key <strong>大于</strong>搜索 key，把当前结点的<strong>左子结点</strong>设置为当前结点，重复步骤 4；</li>
<li>若当前结点 key <strong>小于</strong>搜索 key，把当前结点的<strong>右子结点</strong>设置为当前结点，重复步骤 4；</li>
</ol>
<h3 id="插入后实现自平衡">插入后实现自平衡<a title="#插入后实现自平衡" href="#插入后实现自平衡"></a></h3>
<p>建议新添加的结点默认为<span style="color: red"><strong>红色</strong></span>，因此这样能够让红黑树的性质尽快满足。不过如果添加的结点是<strong>根结点</strong>，设为黑色即可。</p>
<p>总结一下<strong>红黑树插入</strong>可能出现的<strong>所有场景</strong>。</p>
<p><img src="/2020/red-black-tree/rbtree-insert-all.png" alt class="φcx"></p>
<p><strong>场景 1：红黑树为空树</strong></p>
<p>红黑树的性质 2：根结点必须是黑色。</p>
<p><strong>处理</strong>：直接把插入结点设成黑色并作为根结点。</p>
<p><strong>场景 2：插入结点的 key 已存在</strong></p>
<p>二叉搜索树中不能插入相同元素，既然结点的 key 已经存在，红黑树也已平衡，无需重复插入。</p>
<p><strong>处理</strong>：</p>
<ul>
<li>将插入结点设为将要替换结点的颜色</li>
<li>更新当前结点的值为插入结点的值</li>
</ul>
<p><strong>场景 3：插入结点的父结点为黑色</strong></p>
<p>插入的结点默认是红色的，当它的父结点是黑色时，并不会破坏平衡。</p>
<p><strong>处理</strong>：直接插入。</p>
<p><strong>场景 4：插入结点的父结点为红色</strong></p>
<p>如果插入结点的父结点为红色，那么父结点不可能为根结点，所以插入结点总是存在祖父结点。这点很重要，后续的旋转操作需要祖父结点的参与。</p>
<p><strong>场景 4.1：存在叔父结点，且为红色</strong></p>
<p>由红黑树性质 4 可知：红色结点不能连续。那么此时该插入子树的红黑层数的情况是：黑-红-红。显然最简单的处理方式就是将其改为：红-黑-红。</p>
<p><img src="/2020/red-black-tree/rbtree-insert-4-1.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将父结点和叔父结点变为黑色</li>
<li>将祖父结点变为红色</li>
<li>将祖父结点设置为当前插入结点</li>
</ul>
<p><strong>场景 4.2：叔父结点不存在或为黑色，插入结点的父结点是祖父结点的左子结点</strong></p>
<p>这种场景下，叔父结点所在的子树的黑色结点就比父结点所在子树的多，不满足红黑树的性质 5。</p>
<p><strong>场景 4.2.1：插入结点是左子树</strong></p>
<p><img src="/2020/red-black-tree/rbtree-insert-4-2-1.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将父结点变为黑色</li>
<li>将祖父结点变为红色</li>
<li>将祖父结点右旋</li>
</ul>
<p><strong>场景 4.2.2：插入结点是左子树</strong></p>
<p>这种场景显然可以转换为 4.2.1。</p>
<p><img src="/2020/red-black-tree/rbtree-insert-4-2-2.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将父结点进行左旋</li>
<li>将父结点设为插入结点，得到场景 4.2.1</li>
<li>进行场景 4.2.1 的处理</li>
</ul>
<p><strong>场景 4.3：叔父结点不存在或为黑色，插入结点的父结点是祖父结点的右子结点</strong></p>
<p>相当于场景 4.2 的方向反转，直接看图。</p>
<p><strong>场景 4.3.1：插入结点是左子树</strong></p>
<p><img src="/2020/red-black-tree/rbtree-insert-4-3-1.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将父结点变为黑色</li>
<li>将祖父结点变为红色</li>
<li>对祖父结点进行左旋</li>
</ul>
<p><strong>场景 4.3.2：插入结点是右子树</strong></p>
<p><img src="/2020/red-black-tree/rbtree-insert-4-3-2.png" alt class="φcx"></p>
<p><strong>处理：</strong></p>
<ul>
<li>将父结点进行右旋</li>
<li>将父结点设置为插入结点，得到场景 4.3.1</li>
<li>进行场景 4.3.1 的处理</li>
</ul>
<p>下面举个例子，往一棵红黑树中插入元素，整棵树的变换如下图所示：</p>
<p><img src="/2020/red-black-tree/rbtree-insert-example.png" alt class="φcx"></p>
<h2 id="红黑树删除">红黑树删除<a title="#红黑树删除" href="#红黑树删除"></a></h2>
<p>红黑树删除操作也分为两步：</p>
<h3 id="定位删除的位置">定位删除的位置<a title="#定位删除的位置" href="#定位删除的位置"></a></h3>
<p>定位删除位置可以复用<a href="#rbtree-search">红黑树搜索</a>的操作。</p>
<p>如果不存在目标结点，忽略本次操作；如果找到目标结点，删除后进行自平衡处理。</p>
<h3 id="删除后实现自平衡">删除后实现自平衡<a title="#删除后实现自平衡" href="#删除后实现自平衡"></a></h3>
<p><strong>二叉搜索树删除</strong>的时候可能出现三种场景：</p>
<ul>
<li>场景一：若删除结点<strong>无</strong>子结点，<strong>直接删除</strong>即可；</li>
<li>场景二：若删除结点只有<strong>一个</strong>子结点，用<strong>子结点</strong>替换删除结点；</li>
<li>场景三：若删除结点有<strong>两个</strong>子结点，用**后继结点（大于删除结点的最小结点）**替换删除结点。</li>
</ul>
<p>具体应用，可以借助这张图理解：</p>
<p><img src="/2020/red-black-tree/binary-tree-delete-example.png" alt class="φcx"></p>
<p>我们可以发现，另外两种二叉树的删除场景都可以通过相互转换变为场景一。</p>
<p>在场景二情况下：删除结点用其唯一的子结点替换，子结点替换为删除结点后，可以认为删除的是子结点，若子结点又有两个子结点，那么相当于转换为场景三，一直自顶向下转换，总是能转换为场景一。</p>
<p>在场景三情况下：删除结点用后继结点，如果后继结点有右子结点，那么相当于转换为场景二，否则转为场景一。</p>
<p><img src="/2020/red-black-tree/binary-tree-delete-situation.png" alt class="φcx"></p>
<p>综上所述，<strong>删除的结点可以看作删除替换结点</strong>，且<strong>替换结点最后总是在树末</strong>。</p>
<p>下面总结一下<strong>红黑树删除</strong>可能出现的<strong>所有场景</strong>。</p>
<p><img src="/2020/red-black-tree/rbtree-delete-all.png" alt class="φcx"></p>
<p>为了方面理解，我们先约定一下结点的叫法：</p>
<p><img src="/2020/red-black-tree/rbtree-delete-node-definition.png" alt class="φcx"></p>
<ul>
<li>R - <strong>替换结点</strong></li>
<li>P - 替换结点的<strong>父结点</strong></li>
<li>S - 替换结点的<strong>兄弟结点</strong></li>
<li>SL - 兄弟结点的<strong>左子结点</strong></li>
<li>SR - 兄弟结点的<strong>右子结点</strong></li>
<li>灰色 - 结点颜色可能是红色，也可能是黑色</li>
</ul>
<p>注意：<strong>R 是即将被替换到删除结点的位置的替换结点</strong>，在删除前，它还在原来所在位置参与树的子平衡，平衡后再替换到删除结点的位置，才算删除完成。</p>
<p><strong>场景 1：替换结点为红色</strong></p>
<p>我们把替换结点换到了删除结点的位置时，由于替换结点为红色，删除也了不会影响红黑树的平衡，只要把替换结点的颜色变为删除的结点的颜色即可重新平衡。</p>
<p><strong>处理</strong>：替换结点颜色变为删除结点的颜色。</p>
<p><strong>场景 2：替换结点为黑色</strong></p>
<p>当替换结点是黑色时，就必须进行自平衡处理了，我们可以通过区分替换结点是其父结点的左子结点还是右子结点，来做不同的旋转，使树重新平衡。</p>
<p><strong>场景 2.1：替换结点是左子树</strong></p>
<p><strong>场景 2.1.1：替换结点的兄弟结点为红色</strong></p>
<p>若兄弟结点是红结点，那么根据红黑树性质 4，兄弟结点的父结点和子结点肯定为黑色，按照下图方式处理，得到删除场景 2.1.2.3。</p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-1-1.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将兄弟结点变为黑色</li>
<li>将父结点变为红色</li>
<li>对父结点进行左旋，得到场景 2.1.2.3</li>
<li>进行场景 2.1.2.3 的处理</li>
</ul>
<p><strong>场景 2.1.2：替换结点的兄弟结点为黑色</strong></p>
<p>当兄弟结点为黑时，其父结点和子结点的具体颜色也无法确定，此时又得考虑多种子场景。</p>
<p><strong>场景 2.1.2.1：替换结点的兄弟结点的右子结点为红色，左子结点任意颜色</strong></p>
<p>即将删除的左子树的一个黑色结点，显然左子树的黑色结点少 1 了，然而右子结点又是红色，那么我们直接向右子树“借”个红结点来补充黑结点，并进行旋转处理。如图所示：</p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-1-2-1.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将兄弟结点的颜色变为父结点的颜色</li>
<li>将父结点变为黑色</li>
<li>将兄弟结点的右子结点变为黑色</li>
<li>对父结点进行左旋</li>
</ul>
<p><strong>场景 2.1.2.2：替换结点的兄弟结点的右子结点为黑色，左子结点为红色</strong></p>
<p>兄弟结点所在的子树有红结点，又可以向兄弟子树“借”个红结点过来，这就转换回了场景 2.1.2.1。如图所示：</p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-1-2-2.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将兄弟结点变为红色</li>
<li>将兄弟结点的左子结点变为黑色</li>
<li>对兄弟结点进行右旋，得到场景 2.1.2.1</li>
<li>进行场景 2.1.2.1 的处理</li>
</ul>
<p><strong>场景 2.1.2.3：替换结点的兄弟结点的子结点都为黑色</strong></p>
<p>兄弟子树没有红结点可以“借”了，再向父结点“借”。如果父结点是黑色，为了让父结点在所在的子树中保证平衡（替换结点即将删除，少了一个黑色结点，子树也需要少一个）先把兄弟结点变为红色，再让父结点成为新的替换结点。</p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-1-2-3.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>如果父结点为黑色
<ul>
<li>将兄弟结点变为红色</li>
<li>将父结点作为新的替换结点</li>
<li>重新进行删除结点的场景处理</li>
</ul>
</li>
<li>如果父结点为红色
<ul>
<li>替换结点的父结点和替换结点的兄弟结点颜色交换</li>
<li>删除结点和替换结点的值交换后，删除替换结点</li>
</ul>
</li>
</ul>
<p><strong>场景 2.2：替换结点是右子树</strong></p>
<p>实际上是场景 2.1 的镜像操作。</p>
<p><strong>场景 2.2.1：替换结点的兄弟结点为红色</strong></p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-2-1.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将兄弟结点变为黑色</li>
<li>将父结点变为红色</li>
<li>对父结点进行右旋，得到场景 2.2.2.3</li>
<li>进行场景 2.2.2.3 的处理</li>
</ul>
<p><strong>场景 2.2.2：替换结点的兄弟结点为黑色</strong></p>
<p><strong>场景 2.2.2.1：替换结点的兄弟结点的左子结点为红色，右子结点任意颜色</strong></p>
<p><strong>处理</strong></p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-2-2-1.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将兄弟结点的颜色变为父结点的颜色</li>
<li>将父结点变为黑色</li>
<li>将兄弟结点的左子结点变为黑色</li>
<li>对父结点进行右旋</li>
</ul>
<p><strong>场景 2.2.2.2：替换结点的兄弟结点的左子结点为黑色，右子结点为红色</strong></p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-2-2-2.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>将兄弟结点变为红色</li>
<li>将兄弟结点的右子结点设为黑色</li>
<li>对兄弟结点进行左旋，得到场景 2.2.2.1</li>
<li>进行场景 2.2.2.1 的处理</li>
</ul>
<p><strong>场景 2.2.2.3：替换结点的兄弟结点的子结点都为黑色</strong></p>
<p><img src="/2020/red-black-tree/rbtree-delete-2-2-2-3.png" alt class="φcx"></p>
<p><strong>处理</strong>：</p>
<ul>
<li>如果父结点为黑色
<ul>
<li>将兄弟结点变为红色</li>
<li>将父结点作为新的替换结点</li>
<li>重新进行删除结点的场景处理</li>
</ul>
</li>
<li>如果父结点为红色
<ul>
<li>替换结点的父结点和替换结点的兄弟结点颜色交换</li>
<li>删除结点和替换结点的值交换后，删除替换结点</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>AVL 树</tag>
        <tag>B 树</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>动画详解十大经典排序算法（C 语言版）</title>
    <url>/2019/sorting-algorithm/</url>
    <content><![CDATA[<p>排序算法是程序员必备的基础知识，弄明白它们的原理和实现很有必要。本文中将通过非常细节的动画展示出算法的原理，配合代码更容易理解。</p>
<a id="more"></a>
<h2 id="概述">概述<a title="#概述" href="#概述"></a></h2>
<p>由于待排序的元素数量不同，使得排序过程中涉及的存储器不同，可将排序方法分为两类：一类是<strong>内部排序</strong>，指的是待排序列存放在计算机随机存储器中进行的排序过程；另一类是<strong>外部排序</strong>，指的是待排序的元素的数量很大，以致内存一次不能容纳全部记录，在排序过程中尚需对外存进行访问的排序过程。</p>
<p>我们可以将常见的<strong>内部排序算法</strong>可以分成两类：</p>
<p><img src="/2019/sorting-algorithm/sort-category.png" alt class="φcx"></p>
<p><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，时间复杂度为 O(nlogn)～O(n²)。属于比较类的有：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">最差情况</th>
<th style="text-align:center">最好情况</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">排序方式</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="#bubble-sort">冒泡排序</a></td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)​</td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">✔</td>
</tr>
<tr>
<td style="text-align:center"><a href="#quick-sort">快速排序</a></td>
<td style="text-align:center">O(nlogn)​</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(nlogn)​</td>
<td style="text-align:center">O(logn)​</td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">✘</td>
</tr>
<tr>
<td style="text-align:center"><a href="#insertion-sort">插入排序</a></td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n)​</td>
<td style="text-align:center">O(1)​</td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">✔</td>
</tr>
<tr>
<td style="text-align:center"><a href="#shell-sort">希尔排序</a></td>
<td style="text-align:center">O(nlog²n)​</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n)​</td>
<td style="text-align:center">O(1)​</td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">✘</td>
</tr>
<tr>
<td style="text-align:center"><a href="#selection-sort">选择排序</a></td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(1)​</td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">✘</td>
</tr>
<tr>
<td style="text-align:center"><a href="#heap-sort">堆排序</a></td>
<td style="text-align:center">O(nlogn)​</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)​</td>
<td style="text-align:center">O(1)​</td>
<td style="text-align:center">In-place</td>
<td style="text-align:center">✘</td>
</tr>
<tr>
<td style="text-align:center"><a href="#merge-sort">归并排序</a></td>
<td style="text-align:center">O(nlogn)​</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(nlogn)​</td>
<td style="text-align:center">O(n)​</td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">✔</td>
</tr>
</tbody>
</table></div></div><p><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，其时间复杂度可以突破 O(nlogn)，以线性时间运行。属于非比较类的有：</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">最差情况</th>
<th style="text-align:center">最好情况</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">排序方式</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="#bucket-sort">桶排序</a></td>
<td style="text-align:center">O(n+nlog(n/r))​</td>
<td style="text-align:center">O(n²)</td>
<td style="text-align:center">O(n)​</td>
<td style="text-align:center">O(n+r)​</td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">✔</td>
</tr>
<tr>
<td style="text-align:center"><a href="#counting-sort">计数排序</a></td>
<td style="text-align:center">O(n+r)​</td>
<td style="text-align:center">O(n+r)​</td>
<td style="text-align:center">O(n+r)​</td>
<td style="text-align:center">O(n+r)​</td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">✔</td>
</tr>
<tr>
<td style="text-align:center"><a href="#radix-sort">基数排序</a></td>
<td style="text-align:center">O(d(n+r))​</td>
<td style="text-align:center">O(d(n+r))</td>
<td style="text-align:center">O(d(n+r))</td>
<td style="text-align:center">O(n+r)​</td>
<td style="text-align:center">Out-place</td>
<td style="text-align:center">✔</td>
</tr>
</tbody>
</table></div></div><p><strong>名词解释</strong>：</p>
<p><strong><a href="https://blog.fiteen.top/2017/asymptotic-time-complexity-and-space-complexity" target="_blank">时间/空间复杂度</a></strong>：描述一个算法执行时间/占用空间与数据规模的增长关系</p>
<p><strong>n</strong>：待排序列的个数</p>
<p><strong>r</strong>：“桶”的个数（上面的三种非比较类排序都是基于“桶”的思想实现的）</p>
<p><strong>d</strong>：待排序列的最高位数</p>
<p><strong>In-place</strong>：原地算法，指的是占用常用内存，不占用额外内存。空间复杂度为 O(1) 的都可以认为是原地算法</p>
<p><strong>Out-place</strong>：非原地算法，占用额外内存</p>
<p><strong>稳定性</strong>：假设待排序列中两元素相等，排序前后这两个相等元素的相对位置不变，则认为是稳定的。</p>
<h2 id="&lt;span-id=&quot;bubble-sort&quot;&gt;冒泡排序&lt;/span&gt;"><span id="bubble-sort">冒泡排序</span><a title="#&lt;span-id=&quot;bubble-sort&quot;&gt;冒泡排序&lt;/span&gt;" href="#&lt;span-id=&quot;bubble-sort&quot;&gt;冒泡排序&lt;/span&gt;"></a></h2>
<p>冒泡排序（Bubble Sort），顾名思义，就是指越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<h3 id="算法原理">算法原理<a title="#算法原理" href="#算法原理"></a></h3>
<ol>
<li>从左到右，依次比较相邻的元素大小，更大的元素交换到右边；</li>
<li>从第一组相邻元素比较到最后一组相邻元素，这一步结束最后一个元素必然是参与比较的元素中最大的元素；</li>
<li>按照大的居右原则，重新从左到后比较，前一轮中得到的最后一个元素不参与比较，得出新一轮的最大元素；</li>
<li>按照上述规则，每一轮结束会减少一个元素参与比较，直到没有任何一组元素需要比较。</li>
</ol>
<h3 id="动图演示">动图演示<a title="#动图演示" href="#动图演示"></a></h3>
<p><img src="/2019/sorting-algorithm/bubble-sort.gif" alt class="φcx"></p>
<h3 id="代码实现">代码实现<a title="#代码实现" href="#代码实现"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(arr, j, j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析">算法分析<a title="#算法分析" href="#算法分析"></a></h3>
<p>冒泡排序属于<strong>交换排序</strong>，是<strong>稳定排序</strong>，平均时间复杂度为 O(n²)，空间复杂度为 O(1)。</p>
<p>但是我们常看到冒泡排序的<strong>最优时间复杂度是 O(n)</strong>，那要如何优化呢？</p>
<p>我们可以用一个 flag 参数记录新一轮的排序中元素是否做过交换，如果没有，说明前面参与比较过的元素已经是正序，那就没必要再从头比较了。代码实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort_quicker</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, flag;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(arr, j, j+<span class="number">1</span>);</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="&lt;span-id=&quot;quick-sort&quot;&gt;快速排序&lt;/span&gt;"><span id="quick-sort">快速排序</span><a title="#&lt;span-id=&quot;quick-sort&quot;&gt;快速排序&lt;/span&gt;" href="#&lt;span-id=&quot;quick-sort&quot;&gt;快速排序&lt;/span&gt;"></a></h2>
<p>快速排序（Quick Sort），是冒泡排序的改进版，之所以“快速”，是因为使用了<strong>分治法</strong>。它也属于<strong>交换排序</strong>，通过元素之间的位置交换来达到排序的目的。</p>
<h3 id="基本思想">基本思想<a title="#基本思想" href="#基本思想"></a></h3>
<p>在序列中随机挑选一个元素作基准，将小于基准的元素放在基准之前，大于基准的元素放在基准之后，再分别对小数区与大数区进行排序。</p>
<p><strong>一趟快速排序</strong>的具体做法是：</p>
<ol>
<li>设两个指针 i 和 j，分别指向序列的头部和尾部；</li>
<li>先从 j 所指的位置向前搜索，找到第一个比基准小的值，把它与基准交换位置；</li>
<li>再从 i 所指的位置向后搜索，找到第一个比基准大的值，把它与基准交换位置；</li>
<li>重复 2、3 两步，直到 i = j。</li>
</ol>
<p>仔细研究一下上述算法我们会发现，在排序过程中，对基准的移动其实是多余的，因为只有一趟排序结束时，也就是 i = j 的位置才是基准的最终位置。</p>
<p>由此可以<strong>优化</strong>一下算法：</p>
<ol>
<li>设两个指针 i 和 j，分别指向序列的头部和尾部；</li>
<li>先从 j 所指的位置向前搜索，找到第一个比基准小的数值后停下来，再从 i 所指的位置向后搜索，找到第一个比基准大的数值后停下来，把 i 和 j 指向的两个值交换位置；</li>
<li>重复步骤 2，直到 i = j，最后将相遇点指向的值与基准交换位置。</li>
</ol>
<h3 id="动图演示-1">动图演示<a title="#动图演示-1" href="#动图演示-1"></a></h3>
<p><img src="/2019/sorting-algorithm/quick-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-1">代码实现<a title="#代码实现-1" href="#代码实现-1"></a></h3>
<p>这里取序列的第一个元素为基准。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选取序列的第一个元素作为基准 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select_pivot</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[low];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, pivot;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">    pivot = select_pivot(arr, low);</span><br><span class="line">    i = low;</span><br><span class="line">    j = high;</span><br><span class="line">    <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[j] &gt;= pivot &amp;&amp; i &lt; j) j--;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] &lt;= pivot &amp;&amp; i &lt; j) i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(arr, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = arr[i];</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    quick_sort(arr, low, i - <span class="number">1</span>);</span><br><span class="line">    quick_sort(arr, i + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-1">算法分析<a title="#算法分析-1" href="#算法分析-1"></a></h3>
<p>快速排序是<strong>不稳定排序</strong>，它的平均时间复杂度为 O(nlogn)，平均空间复杂度为 O(logn)。</p>
<p>快速排序中，基准的选取非常重要，它将影响排序的效率。举个例子，假如序列本身顺序随机，快速排序是所有同数量级时间复杂度的排序算法中平均性能最好的，但如果序列本身已经有序或基本有序，直接<strong>选取固定位置，例如第一个元素</strong>作为基准，会使快速排序就会沦为冒泡排序，时间复杂度为 O(n²)。为了避免发生这种情况，引入下面两种获取基准的方法：</p>
<p><strong>随机选取</strong></p>
<p>就是选取序列中的任意一个数为基准的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 随机选择基准的位置，区间在 low 和 high 之间 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select_pivot_random</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">int</span> pivot = rand()%(high - low) + low;</span><br><span class="line">    swap(arr, pivot, low);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr[low];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>三者取中</strong></p>
<p>就是取起始位置、中间位置、末尾位置指向的元素，对这三个元素排序后取中间数作为基准。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 取起始位置、中间位置、末尾位置指向的元素三者的中间值作为基准 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select_pivot_median_of_three</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算数组中间的元素的下标</span></span><br><span class="line">    <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 排序，使 arr[mid] &lt;= arr[low] &lt;= arr[high]</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &gt; arr[high]) swap(arr, mid, high);</span><br><span class="line">    <span class="keyword">if</span> (arr[low] &gt; arr[high]) swap(arr, low, high);</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &gt; arr[low]) swap(arr, low, mid);</span><br><span class="line">    <span class="comment">// 使用 low 位置的元素作为基准</span></span><br><span class="line">    <span class="keyword">return</span> arr[low];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经验证明，三者取中的规则可以大大改善快速排序在最坏情况下的性能。</p>
<h2 id="&lt;span-id=&quot;insertion-sort&quot;&gt;插入排序&lt;/span&gt;"><span id="insertion-sort">插入排序</span><a title="#&lt;span-id=&quot;insertion-sort&quot;&gt;插入排序&lt;/span&gt;" href="#&lt;span-id=&quot;insertion-sort&quot;&gt;插入排序&lt;/span&gt;"></a></h2>
<p>直接插入排序（Straight Insertion Sort），是一种简单直观的排序算法，它的基本操作是不断地将尚未排好序的数插入到已经排好序的部分，好比打扑克牌时一张张抓牌的动作。在冒泡排序中，经过每一轮的排序处理后，序列后端的数是排好序的；而对于插入排序来说，经过每一轮的排序处理后，序列前端的数都是排好序的。</p>
<h3 id="基本思想-1">基本思想<a title="#基本思想-1" href="#基本思想-1"></a></h3>
<p>先将第一个元素视为一个有序子序列，然后从第二个元素起逐个进行插入，直至整个序列变成元素非递减有序序列为止。如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入大相等元素的后面。整个排序过程进行 n-1 趟插入。</p>
<h3 id="动图演示-2">动图演示<a title="#动图演示-2" href="#动图演示-2"></a></h3>
<p><img src="/2019/sorting-algorithm/insertion-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-2">代码实现<a title="#代码实现-2" href="#代码实现-2"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp; j--)</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-2">算法分析<a title="#算法分析-2" href="#算法分析-2"></a></h3>
<p>插入排序是<strong>稳定排序</strong>，平均时间复杂度为 O(n²)，空间复杂度为 O(1)。</p>
<h2 id="&lt;span-id=&quot;shell-sort&quot;&gt;希尔排序&lt;/span&gt;"><span id="shell-sort">希尔排序</span><a title="#&lt;span-id=&quot;shell-sort&quot;&gt;希尔排序&lt;/span&gt;" href="#&lt;span-id=&quot;shell-sort&quot;&gt;希尔排序&lt;/span&gt;"></a></h2>
<p>希尔排序（Shell’s Sort）是第一个突破 O(n²) 的排序算法，是直接插入排序的改进版，又称“<strong>缩小增量排序</strong>”（Diminishing Increment Sort）。它与直接插入排序不同之处在于，它会优先比较距离较远的元素。</p>
<h3 id="基本思想-2">基本思想<a title="#基本思想-2" href="#基本思想-2"></a></h3>
<p>先将整个待排序列分割成若干个字序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行一次直接插入排序。</p>
<p>子序列的构成不是简单地“逐段分割”，将相隔某个增量的记录组成一个子序列，让增量逐趟缩短，直到增量为 1 为止。</p>
<h3 id="动图演示-3">动图演示<a title="#动图演示-3" href="#动图演示-3"></a></h3>
<p><img src="/2019/sorting-algorithm/shell-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-3">代码实现<a title="#代码实现-3" href="#代码实现-3"></a></h3>
<p>增量序列可以有各种取法，例如上面动图所示，增量序列满足 [n / 2, n / 2 / 2, …, 1]，n 是序列本身的长度，这也是一种比较流行的增量序列定义方式。这时希尔排序的算法可以通过下面的代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort_split_half</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, dk, temp;</span><br><span class="line">    <span class="keyword">for</span> (dk = n &gt;&gt; <span class="number">1</span>; dk &gt; <span class="number">0</span>; dk = dk &gt;&gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = dk; i &lt; n; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - dk; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= dk)</span><br><span class="line">                arr[j + dk] = arr[j];</span><br><span class="line">            arr[j + dk] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增量序列也可以有其它的定义方式，那么希尔排序的实现可以归纳成这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_insert</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> dk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = dk; i &lt; n; i += dk) &#123;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        j = i - dk;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]) &#123;</span><br><span class="line">            arr[j + dk] = arr[j];</span><br><span class="line">            j -= dk;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + dk] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> dlta[], <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; t; ++k) &#123;</span><br><span class="line">        <span class="comment">// 一趟增量为 dlta[k] 的插入排序</span></span><br><span class="line">        shell_insert(arr, n, dlta[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-3">算法分析<a title="#算法分析-3" href="#算法分析-3"></a></h3>
<p>希尔排序是<strong>不稳定排序</strong>，它的分析是一个复杂的问题，因为它的运行时间依赖于增量序列的选择，它的平均时间复杂度为 O(n^1.3)，最好情况是 O(n)，最差情况是 O(n²)。空间复杂度为 O(1)。</p>
<h2 id="&lt;span-id=&quot;selection-sort&quot;&gt;选择排序&lt;/span&gt;"><span id="selection-sort">选择排序</span><a title="#&lt;span-id=&quot;selection-sort&quot;&gt;选择排序&lt;/span&gt;" href="#&lt;span-id=&quot;selection-sort&quot;&gt;选择排序&lt;/span&gt;"></a></h2>
<p>选择排序（Selection Sort）是一种简单直观的排序算法。它的基本思想就是，每一趟 n-i+1(i=1,2,…,n-1) 个记录中选取关键字最小的记录作为有序序列的第 i 个记录。</p>
<h3 id="算法步骤">算法步骤<a title="#算法步骤" href="#算法步骤"></a></h3>
<p><strong>简单选择排序</strong>：</p>
<ol>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置;</li>
<li>在剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾;</li>
<li>重复步骤 2，直到所有元素排序完毕。</li>
</ol>
<h3 id="动图演示-4">动图演示<a title="#动图演示-4" href="#动图演示-4"></a></h3>
<p><img src="/2019/sorting-algorithm/selection-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-4">代码实现<a title="#代码实现-4" href="#代码实现-4"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">                min = j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, min, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-4">算法分析<a title="#算法分析-4" href="#算法分析-4"></a></h3>
<p>选择排序是<strong>不稳定排序</strong>，时间复杂度固定为 O(n²)，因此它不适用于数据规模较大的序列。不过它也有优点，就是不占用额外的内存空间。</p>
<h2 id="&lt;span-id=&quot;heap-sort&quot;&gt;堆排序&lt;/span&gt;"><span id="heap-sort">堆排序</span><a title="#&lt;span-id=&quot;heap-sort&quot;&gt;堆排序&lt;/span&gt;" href="#&lt;span-id=&quot;heap-sort&quot;&gt;堆排序&lt;/span&gt;"></a></h2>
<p>堆排序（Heap Sort）是指利用堆这种数据结构所设计的一种排序算法。堆的特点：</p>
<ul>
<li>一颗完全二叉树（也就是会所生成节点的顺序是：从上往下、从左往右）</li>
<li>每一个节点必须满足父节点的值不大于/不小于子节点的值</li>
</ul>
<h3 id="基本思想-3">基本思想<a title="#基本思想-3" href="#基本思想-3"></a></h3>
<p>实现堆排序需要解决两个问题：</p>
<ul>
<li>
<p>如何将一个无序序列构建成堆？</p>
</li>
<li>
<p>如何在输出堆顶元素后，调整剩余元素成为一个新的堆？</p>
</li>
</ul>
<p>以升序为例，算法实现的思路为：</p>
<ol>
<li>建立一个 <code>build_heap</code> 函数，将数组 tree[0,…n-1] 建立成堆，n 表示数组长度。函数里需要维护的是所有节点的父节点，最后一个子节点下标为 n-1，那么它对应的父节点下标就是 (n-1-1)/2。</li>
<li>构建完一次堆后，最大元素就会被存放在根节点 tree[0]。将 tree[0] 与最后一个元素交换，每一轮通过这种不断将最大元素后移的方式，来实现排序。</li>
<li>而交换后新的根节点可能不满足堆的特点了，因此需要一个调整函数 heapify 来对剩余的数组元素进行最大堆性质的维护。如果 tree[i] 表示其中的某个节点，那么 tree[2*i+1] 是左孩子，tree[2*i+2] 是右孩子，选出三者中的最大元素的下标，存放于 max 值中，若 max 不等于 i，则将最大元素交换到 i 下标的位置。但是，此时以 tree[max] 为根节点的子树可能不满足堆的性质，需要递归调用自身。</li>
</ol>
<h3 id="动图演示-5">动图演示<a title="#动图演示-5" href="#动图演示-5"></a></h3>
<p><img src="/2019/sorting-algorithm/heap-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-5">代码实现<a title="#代码实现-5" href="#代码实现-5"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> tree[], <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// n 表示序列长度，i 表示父节点下标</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 左侧子节点下标</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 右侧子节点下标</span></span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max = i;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; tree[left] &gt; tree[max]) max = left;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; tree[right] &gt; tree[max]) max = right;</span><br><span class="line">    <span class="keyword">if</span> (max != i) &#123;</span><br><span class="line">        swap(tree, max, i);</span><br><span class="line">        heapify(tree, n, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_heap</span><span class="params">(<span class="keyword">int</span> tree[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 树最后一个节点的下标</span></span><br><span class="line">    <span class="keyword">int</span> last_node = n - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 最后一个节点对应的父节点下标</span></span><br><span class="line">    <span class="keyword">int</span> parent = (last_node - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = parent; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(tree, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> tree[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    build_heap(tree, n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 将堆顶元素与最后一个元素交换</span></span><br><span class="line">        swap(tree, i, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 调整成大顶堆</span></span><br><span class="line">        heapify(tree, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-5">算法分析<a title="#算法分析-5" href="#算法分析-5"></a></h3>
<p>堆排序是<strong>不稳定排序</strong>，适合数据量较大的序列，它的平均时间复杂度为 Ο(nlogn)，空间复杂度为 O(1)。堆排序仅需一个记录大小供交换用的辅助存储空间。</p>
<h2 id="&lt;span-id=&quot;merge-sort&quot;&gt;归并排序&lt;/span&gt;"><span id="merge-sort">归并排序</span><a title="#&lt;span-id=&quot;merge-sort&quot;&gt;归并排序&lt;/span&gt;" href="#&lt;span-id=&quot;merge-sort&quot;&gt;归并排序&lt;/span&gt;"></a></h2>
<p>归并排序（Merge Sort）是建立在<strong>归并</strong>操作上的一种排序算法。它和快速排序一样，采用了<strong>分治法</strong>。</p>
<h3 id="基本思想-4">基本思想<a title="#基本思想-4" href="#基本思想-4"></a></h3>
<p>归并的含义是将两个或两个以上的有序表组合成一个新的有序表。也就是说，从几个数据段中逐个选出最小的元素移入新数据段的末尾，使之有序。</p>
<p>那么归并排序的算法我们可以这样理解：</p>
<p>假如初始序列含有 n 个记录，则可以看成是 n 个有序的子序列，每个子序列的长度为 1。然后两两归并，得到 n/2 个长度为 2 或 1 的有序子序列；再两两归并，……，如此重复，直到得到一个长度为 n 的有序序列为止，这种排序方法称为 <strong>二路归并排序</strong>，下文介绍的也是这种排序方式。</p>
<h3 id="动图演示-6">动图演示<a title="#动图演示-6" href="#动图演示-6"></a></h3>
<p><img src="/2019/sorting-algorithm/merge-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-6">代码实现<a title="#代码实现-6" href="#代码实现-6"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将 arr[L..M] 和 arr[M+1..R] 归并 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> L, <span class="keyword">int</span> M, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> LEFT_SIZE = M - L + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> RIGHT_SIZE = R - M;</span><br><span class="line">    <span class="keyword">int</span> left[LEFT_SIZE];</span><br><span class="line">    <span class="keyword">int</span> right[RIGHT_SIZE];</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="comment">// 以 M 为分割线，把原数组分成左右子数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = L; i &lt;= M; i++) left[i - L] = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (i = M + <span class="number">1</span>; i &lt;= R; i++) right[i - M - <span class="number">1</span>] = arr[i];</span><br><span class="line">    <span class="comment">// 再合并成一个有序数组（从两个序列中选出最小值依次插入）</span></span><br><span class="line">    i = <span class="number">0</span>; j = <span class="number">0</span>; k = L;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; LEFT_SIZE &amp;&amp; j &lt; RIGHT_SIZE) arr[k++] = left[i] &lt; right[j] ? left[i++] : right[j++];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; LEFT_SIZE) arr[k++] = left[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt; RIGHT_SIZE) arr[k++] = right[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 将 arr[L..R] 平分为 arr[L..M] 和 arr[M+1..R]</span></span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 分别递归地将子序列排序为有序数列</span></span><br><span class="line">    merge_sort(arr, L, M);</span><br><span class="line">    merge_sort(arr, M + <span class="number">1</span>, R);</span><br><span class="line">    <span class="comment">// 将两个排序后的子序列再归并到 arr</span></span><br><span class="line">    merge(arr, L, M, R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-6">算法分析<a title="#算法分析-6" href="#算法分析-6"></a></h3>
<p>归并排序是<strong>稳定排序</strong>，它和选择排序一样，性能不受输入数据的影响，但表现比选择排序更好，它的时间复杂度始终为 O(nlogn)，但它需要额外的内存空间，空间复杂度为 O(n)。</p>
<h2 id="&lt;span-id=&quot;bucket-sort&quot;&gt;桶排序&lt;/span&gt;"><span id="bucket-sort">桶排序</span><a title="#&lt;span-id=&quot;bucket-sort&quot;&gt;桶排序&lt;/span&gt;" href="#&lt;span-id=&quot;bucket-sort&quot;&gt;桶排序&lt;/span&gt;"></a></h2>
<p>桶排序（Bucket sort）是<a href="#counting-sort">计数排序</a>的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>
<p>桶排序的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（也有可能是使用别的排序算法或是以递归方式继续用桶排序进行排序）。</p>
<h3 id="算法步骤-1">算法步骤<a title="#算法步骤-1" href="#算法步骤-1"></a></h3>
<ol>
<li>设置固定数量的空桶；</li>
<li>把数据放在对应的桶内；</li>
<li>分别对每个非空桶内数据进行排序；</li>
<li>拼接非空的桶内数据，得到最终的结果。</li>
</ol>
<h3 id="动图演示-7">动图演示<a title="#动图演示-7" href="#动图演示-7"></a></h3>
<p><img src="/2019/sorting-algorithm/bucket-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-7">代码实现<a title="#代码实现-7" href="#代码实现-7"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span> || r &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据最大/最小元素和桶数量，计算出每个桶对应的元素范围</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) max = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) min = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> range = (max - min + <span class="number">1</span>) / r + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立桶对应的二维数组，一个桶里最多可能出现 n 个元素</span></span><br><span class="line">    <span class="keyword">int</span> buckets[r][n];</span><br><span class="line">    <span class="built_in">memset</span>(buckets, <span class="number">0</span>, <span class="keyword">sizeof</span>(buckets));</span><br><span class="line">    <span class="keyword">int</span> counts[r];</span><br><span class="line">    <span class="built_in">memset</span>(counts, <span class="number">0</span>, <span class="keyword">sizeof</span>(counts));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = (arr[i] - min) / range;</span><br><span class="line">        buckets[k][counts[k]++] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">        <span class="comment">// 分别对每个非空桶内数据进行排序，比如计数排序</span></span><br><span class="line">        <span class="keyword">if</span> (counts[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        counting_sort(buckets[i], counts[i]);</span><br><span class="line">        <span class="comment">// 拼接非空的桶内数据，得到最终的结果</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; counts[i]; j++) &#123;</span><br><span class="line">            arr[index++] = buckets[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-7">算法分析<a title="#算法分析-7" href="#算法分析-7"></a></h3>
<p>桶排序是<strong>稳定排序</strong>，但仅限于桶排序本身，假如桶内排序采用了快速排序之类的非稳定排序，那么就是不稳定的。</p>
<h4 id="时间复杂度">时间复杂度<a title="#时间复杂度" href="#时间复杂度"></a></h4>
<p>桶排序的时间复杂度可以这样看：</p>
<ul>
<li>n 次循环，每个数据装入桶</li>
<li>r 次循环，每个桶中的数据进行排序（每个桶中平均有 n/r 个数据）</li>
</ul>
<p>假如桶内排序用的是选择排序这类时间复杂度较高的排序，整个桶排序的时间复杂度就是 O(n)+O(n²)，视作 O(n²)，这是最差的情况；</p>
<p>假如桶内排序用的是比较先进的排序算法，时间复杂度为 O(nlogn)，那么整个桶排序的时间复杂度为 O(n)+O(r*(n/r)*log(n/r))=O(n+nlog(n/r))。k=nlog(n/r)，桶排序的平均时间复杂度为 O(n+k)。当 r 接近于 n 时，k 趋近于 0，这时桶排序的时间复杂度是最优的，就可以认为是 O(n)。也就是说如果数据被分配到同一个桶中，排序效率最低；但如果数据可以均匀分配到每一个桶中，时间效率最高，可以线性时间运行。但同样地，桶越多，空间就越大。</p>
<h4 id="空间复杂度">空间复杂度<a title="#空间复杂度" href="#空间复杂度"></a></h4>
<p>占用额外内存，需要创建 r 个桶的额外空间，以及 n 个元素的额外空间，所以桶排序的空间复杂度为 O(n+r)。</p>
<h2 id="&lt;span-id=&quot;counting-sort&quot;&gt;计数排序&lt;/span&gt;"><span id="counting-sort">计数排序</span><a title="#&lt;span-id=&quot;counting-sort&quot;&gt;计数排序&lt;/span&gt;" href="#&lt;span-id=&quot;counting-sort&quot;&gt;计数排序&lt;/span&gt;"></a></h2>
<p>计数排序（Counting Sort）是一种<strong>非比较性质</strong>的排序算法，利用了<strong>桶</strong>的思想。它的核心在于将<strong>输入的数据值转化为键存储在额外开辟的辅助空间中</strong>，也就是说这个辅助空间的长度取决于待排序列中的数据范围。</p>
<p>如何转化成桶思想来理解呢？我们设立 r 个桶，桶的键值分别对应从序列最小值升序到最大值的所有数值。接着，按照键值，依次把元素放进对应的桶中，然后统计出每个桶中分别有多少元素，再通过对桶内数据的计算，即可确定每一个元素最终的位置。</p>
<h3 id="算法步骤-2">算法步骤<a title="#算法步骤-2" href="#算法步骤-2"></a></h3>
<ol>
<li>找出待排序列中最大值 max 和最小值 min，算出序列的数据范围 r = max - min + 1，申请辅助空间 C[r]；</li>
<li>遍历待排序列，统计序列中每个值为 i 的元素出现的次数，记录在辅助空间的第 i 位；</li>
<li>对辅助空间内的数据进行计算（从空间中的第一个元素开始，每一项和前一项相加），以确定值为 i 的元素在数组中出现的位置；</li>
<li>反向填充目标数组：将每个元素 i 放在目标数组的第 C[i] 位，每放一个元素就将 C[i] 减 1，直到 C 中所有值都是 0</li>
</ol>
<h3 id="动图演示-8">动图演示<a title="#动图演示-8" href="#动图演示-8"></a></h3>
<p><img src="/2019/sorting-algorithm/counting-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-8">代码实现<a title="#代码实现-8" href="#代码实现-8"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counting_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 定义辅助空间并初始化</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) max = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) min = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = max - min + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> C[r];</span><br><span class="line">    <span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="keyword">sizeof</span>(C));</span><br><span class="line">    <span class="comment">// 定义目标数组</span></span><br><span class="line">    <span class="keyword">int</span> R[n];</span><br><span class="line">    <span class="comment">// 统计每个元素出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) C[arr[i] - min]++;</span><br><span class="line">    <span class="comment">// 对辅助空间内数据进行计算</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; r; i++) C[i] += C[i - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 反向填充目标数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) R[--C[arr[i] - min]] = arr[i];</span><br><span class="line">    <span class="comment">// 目标数组里的结果重新赋值给 arr</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) arr[i] = R[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-8">算法分析<a title="#算法分析-8" href="#算法分析-8"></a></h3>
<p>计数排序属于<strong>非交换排序</strong>，是<strong>稳定排序</strong>，适合数据范围不显著大于数据数量的序列。</p>
<h4 id="时间复杂度-1">时间复杂度<a title="#时间复杂度-1" href="#时间复杂度-1"></a></h4>
<p>它的时间复杂度是线性的，为 O(n+r)，r 表示待排序列中的数据范围，也就是桶的个数。可以这样理解：将 n 个数据依次放进对应的桶中，再从 r 个桶中把数据按顺序取出来。</p>
<h4 id="空间复杂度-1">空间复杂度<a title="#空间复杂度-1" href="#空间复杂度-1"></a></h4>
<p>占用额外内存，还需要 r 个桶，因此空间复杂度是 O(n+r)，计数排序快于任何比较排序算法，但这是通过牺牲空间换取时间来实现的。</p>
<h2 id="&lt;span-id=&quot;radix-sort&quot;&gt;基数排序&lt;/span&gt;"><span id="radix-sort">基数排序</span><a title="#&lt;span-id=&quot;radix-sort&quot;&gt;基数排序&lt;/span&gt;" href="#&lt;span-id=&quot;radix-sort&quot;&gt;基数排序&lt;/span&gt;"></a></h2>
<p>基数排序（Radix Sort）是<strong>非比较型</strong>排序算法，它和<a href="#counting-sort">计数排序</a>、<a href="#bucket-sort">桶排序</a>一样，利用了“<strong>桶</strong>”的概念。基数排序不需要进行记录关键字间的比较，是一种<strong>借助多关键字排序的思想对单逻辑关键字进行排序</strong>的方法。比如数字 100，它的个位、十位、百位就是不同的关键字。</p>
<p>那么，对于一组乱序的数字，基数排序的实现原理就是将整数按位数（关键字）切割成不同的数字，然后按每个位数分别比较。对于关键字的选择，有最高位优先法（MSD 法）和最低位优先法（LSD 法）两种方式。MSD 必须将序列先逐层分割成若干子序列，然后再对各子序列进行排序；而 LSD 进行排序时，不必分成子序列，对每个关键字都是整个序列参加排序。</p>
<h3 id="算法步骤-3">算法步骤<a title="#算法步骤-3" href="#算法步骤-3"></a></h3>
<p>以 <strong>LSD 法</strong>为例：</p>
<ol>
<li>将所有待比较数值（非负整数）统一为同样的数位长度，数位不足的数值前面补零</li>
<li>从最低位（个位）开始，依次进行一次排序</li>
<li>从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列</li>
</ol>
<p>如果要支持负数参加排序，可以将序列中所有的值加上一个常数，使这些值都成为非负数，排好序后，所有的值再减去这个常数。</p>
<h3 id="动图演示-9">动图演示<a title="#动图演示-9" href="#动图演示-9"></a></h3>
<p><img src="/2019/sorting-algorithm/radix-sort.gif" alt class="φcx"></p>
<h3 id="代码实现-9">代码实现<a title="#代码实现-9" href="#代码实现-9"></a></h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基数，范围0~9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RADIX 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取最大值和最小值</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j, l;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) max = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) min = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 假如序列中有负数，所有数加上一个常数，使序列中所有值变成正数</span></span><br><span class="line">    <span class="keyword">if</span> (min &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) arr[i] -= min;</span><br><span class="line">        max -= min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取最大值位数</span></span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (max &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        max /= RADIX;</span><br><span class="line">        d ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">queue</span>[RADIX][n];</span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">queue</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line">    <span class="keyword">int</span> count[RADIX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        <span class="comment">// 分配数据</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> key = arr[j] % (<span class="keyword">int</span>)<span class="built_in">pow</span>(RADIX, i + <span class="number">1</span>) / (<span class="keyword">int</span>)<span class="built_in">pow</span>(RADIX, i);</span><br><span class="line">            <span class="built_in">queue</span>[key][count[key]++] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 收集数据</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; RADIX; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; count[j]; l++) &#123;</span><br><span class="line">                arr[c++] = <span class="built_in">queue</span>[j][l];</span><br><span class="line">                <span class="built_in">queue</span>[j][l] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 假如序列中有负数，收集排序结果时再减去前面加上的常数</span></span><br><span class="line">    <span class="keyword">if</span> (min &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) arr[i] += min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算法分析-9">算法分析<a title="#算法分析-9" href="#算法分析-9"></a></h3>
<p>基数排序是<strong>稳定排序</strong>，适用于关键字取值范围固定的排序。</p>
<h4 id="时间复杂度-2">时间复杂度<a title="#时间复杂度-2" href="#时间复杂度-2"></a></h4>
<p>基数排序可以看作是若干次“分配”和“收集”的过程。假设给定 n 个数，它的最高位数是 d，基数（也就是桶的个数）为 r，那么可以这样理解：共进行 d 趟排序，每趟排序都要对 n 个数据进行分配，再从 r 个桶中收集回来。所以算法的时间复杂度为 O(d(n+r))，在整数的排序中，r = 10，因此可以简化成 O(dn)，是<strong>线性阶</strong>的排序。</p>
<h4 id="空间复杂度-2">空间复杂度<a title="#空间复杂度-2" href="#空间复杂度-2"></a></h4>
<p>占用额外内存，需要创建 r 个桶的额外空间，以及 n 个元素的额外空间，所以基数排序的空间复杂度为 O(n+r)。</p>
<h3 id="计数排序-&amp;-桶排序-&amp;-基数排序">计数排序 &amp; 桶排序 &amp; 基数排序<a title="#计数排序-&amp;-桶排序-&amp;-基数排序" href="#计数排序-&amp;-桶排序-&amp;-基数排序"></a></h3>
<p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>
<ul>
<li>桶排序：每个桶存储一定范围的数值，适用于元素尽可能分布均匀的排序；</li>
<li>计数排序：每个桶只存储单一键值，适用于最大值和最小值尽可能接近的排序；</li>
<li>基数排序：根据键值的每位数字来分配桶，适用于非负整数间的排序，且最大值和最小值尽可能接近。</li>
</ul>
<hr>
<p>本文关联<a href="https://github.com/fiteen/Sorting-Algorithm" target="_blank">项目地址</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】Fucking SwiftUI</title>
    <url>/2019/fucking-swift-ui/</url>
    <content><![CDATA[<blockquote>
<p>原文：<a href="https://fuckingswiftui.com/" target="_blank">Fucking Swift UI - Cheat Sheet</a><br>
译者的话：翻译过程中，发现了原文中的几个错误，我向作者<a href="https://twitter.com/sarunw" target="_blank">@sarunw</a>提出意见后，直接在译文中改掉了，如果您发现文中内容有误，欢迎与我联系。</p>
</blockquote>
<a id="more"></a>
<p>关于 SwiftUI，您在下文中看到的所有答案并不是完整详细的，它只能充当一份备忘单，或是检索表。</p>
<h2 id="常见问题">常见问题<a title="#常见问题" href="#常见问题"></a></h2>
<p>关于 SwiftUI 的常见问题：</p>
<p><strong>是否需要学 SwiftUI？</strong></p>
<p>是</p>
<p><strong>是否有必要现在就学 SwiftUI？</strong></p>
<p>看情况，因为 SwiftUI 目前只能在 iOS 13、macOS 10.15、tvOS 13 和 watchOS 6 上运行。如果您要开发的新应用计划仅针对前面提到的 OS 系统，我会说是。 但是，如果您打算找工作或是无法确保会在此 OS 版本的客户端项目上工作，则可能要等一两年，再考虑迁移成 SwiftUI，毕竟大多数客户端工作都希望支持尽可能多的用户，这意味着您的应用必须兼容多个 OS 系统。 因此，一年后再去体验优雅的 SwiftUI 也许是最好的时机。</p>
<p><strong>是否需要学 UIKit/AppKit/WatchKit？</strong></p>
<p>是的，就长时间来看，UIKit 仍将是 iOS 架构的重要组成部分。现在的 SwiftUI 并不成熟完善，我认为即使您打算用 SwiftUI 来开发，仍然不时需要用到 UIKit。</p>
<p><strong>SwiftUI 能代替 UIKit/AppKit/WatchKit 吗?</strong></p>
<p>现在不行，但将来也许会。SwiftUI 虽然是刚刚推出的，它看起来已经很不错。我希望两者能长期共存，SwiftUI 还很年轻，它还需要几年的打磨成长才能去代替 UIKit/AppKit/WatchKit。</p>
<p><strong>如果我现在只能学习一种，那么应该选择 UIKit/AppKit/WatchKit 还是 SwiftUI？</strong></p>
<p>UIKit。 您始终可以依赖 UIKit，它用起来一直不错，且未来一段时间仍然可用。如果您直接从 SwiftUI 开始学习，可能会遗漏了解一些功能。</p>
<p><strong>SwiftUI 的控制器在哪里？</strong></p>
<p>没有了。 如今页面间直接通过响应式编程框架 Combine 交互。Combine 也作为新的通信方式替代了 UIViewController。</p>
<h2 id="要求">要求<a title="#要求" href="#要求"></a></h2>
<ul>
<li>Xcode 11 Beta（<a href="https://developer.apple.com/download/" target="_blank">从 Apple 官网下载</a>）</li>
<li>iOS 13 / macOS 10.15 / tvOS 13 / watchOS 6</li>
<li>macOS Catalina，以便在画布上呈现 SwiftUI（<a href="https://developer.apple.com/download/" target="_blank">从 Apple 官网下载</a>）</li>
</ul>
<blockquote>
<p><strong>想要体验 SwiftUI 画布，但不想在您的电脑上安装 macOS Catalina beta 系统</strong><br>
您可以与当前的 macOS 版本并行安装 Catalina。这里介绍了<a href="https://support.apple.com/en-us/HT208891" target="_blank">如何在单独的 APFS 卷上安装 macOS</a></p>
</blockquote>
<h2 id="swiftui-中等效的-uikit">SwiftUI 中等效的 UIKit<a title="#swiftui-中等效的-uikit" href="#swiftui-中等效的-uikit"></a></h2>
<h3 id="视图控制器">视图控制器<a title="#视图控制器" href="#视图控制器"></a></h3>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">UIKit</th>
<th style="text-align:center">SwiftUI</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">UIViewController</td>
<td style="text-align:center">View</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UITableViewController</td>
<td style="text-align:center"><a href="#list">List</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UICollectionViewController</td>
<td style="text-align:center">-</td>
<td style="text-align:center">目前，还没有 SwiftUI 的替代品，但是您可以像<a href="https://developer.apple.com/tutorials/swiftui/composing-complex-interfaces" target="_blank">Composing Complex Interfaces’s tutorial</a>里那样，使用 List 的组成来模拟布局</td>
</tr>
<tr>
<td style="text-align:left">UISplitViewController</td>
<td style="text-align:center"><a href="#navigationview">NavigationView</a></td>
<td style="text-align:center">Beta 5 中有部分支持，但仍然无法使用。</td>
</tr>
<tr>
<td style="text-align:left">UINavigationController</td>
<td style="text-align:center"><a href="#navigationview">NavigationView</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIPageViewController</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UITabBarController</td>
<td style="text-align:center"><a href="#tabview">TabView</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UISearchController</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIImagePickerController</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIVideoEditorController</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIActivityViewController</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIAlertController</td>
<td style="text-align:center"><a href="#alert">Alert</a></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table></div></div><h3 id="视图和控件">视图和控件<a title="#视图和控件" href="#视图和控件"></a></h3>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">UIKit</th>
<th style="text-align:center">SwiftUI</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">UILabel</td>
<td style="text-align:center"><a href="#text">Text</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UITabBar</td>
<td style="text-align:center"><a href="#tabview">TabView</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UITabBarItem</td>
<td style="text-align:center"><a href="#tabview">TabView</a></td>
<td style="text-align:center"><a href="#tabview">TabView</a> 里的 <code>.tabItem</code></td>
</tr>
<tr>
<td style="text-align:left">UITextField</td>
<td style="text-align:center"><a href="#textfield">TextField</a></td>
<td style="text-align:center">Beta 5 中有部分支持，但仍然无法使用。</td>
</tr>
<tr>
<td style="text-align:left">UITableView</td>
<td style="text-align:center"><a href="#list">List</a></td>
<td style="text-align:center"><a href="#vstack">VStack</a> 和 <a href="#form">Form</a> 也可以</td>
</tr>
<tr>
<td style="text-align:left">UINavigationBar</td>
<td style="text-align:center"><a href="#navigationview">NavigationView</a></td>
<td style="text-align:center"><a href="#navigationview">NavigationView</a> 的一部分</td>
</tr>
<tr>
<td style="text-align:left">UIBarButtonItem</td>
<td style="text-align:center"><a href="#navigationview">NavigationView</a></td>
<td style="text-align:center"><a href="#navigationview">NavigationView</a> 里的 <code>.navigationBarItems</code></td>
</tr>
<tr>
<td style="text-align:left">UICollectionView</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIStackView</td>
<td style="text-align:center"><a href="#hstack">HStack</a></td>
<td style="text-align:center"><code>.axis == .Horizontal</code></td>
</tr>
<tr>
<td style="text-align:left">UIStackView</td>
<td style="text-align:center"><a href="#vstack">VStack</a></td>
<td style="text-align:center"><code>.axis == .Vertical </code></td>
</tr>
<tr>
<td style="text-align:left">UIScrollView</td>
<td style="text-align:center"><a href="#scrollview">ScrollView</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIActivityIndicatorView</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIImageView</td>
<td style="text-align:center"><a href="#image">Image</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIPickerView</td>
<td style="text-align:center"><a href="#picker">Picker</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIButton</td>
<td style="text-align:center"><a href="#button">Button</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIDatePicker</td>
<td style="text-align:center"><a href="#datepicker">DatePicker</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIPageControl</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UISegmentedControl</td>
<td style="text-align:center"><a href="#picker">Picker</a></td>
<td style="text-align:center"><a href="#picker">Picker</a> 中的一种样式 <code>SegmentedPickerStyle</code></td>
</tr>
<tr>
<td style="text-align:left">UISlider</td>
<td style="text-align:center"><a href="#slider">Slider</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIStepper</td>
<td style="text-align:center"><a href="#stepper">Stepper</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UISwitch</td>
<td style="text-align:center"><a href="#toggle">Toggle</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIToolBar</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table></div></div><h3 id="框架集成---swiftui-中的-uikit">框架集成 - SwiftUI 中的 UIKit<a title="#框架集成---swiftui-中的-uikit" href="#框架集成---swiftui-中的-uikit"></a></h3>
<p>将 SwiftUI 视图集成到现有应用程序中，并将 UIKit 视图和控制器嵌入 SwiftUI 视图层次结构中。</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">UIKit</th>
<th style="text-align:left">SwiftUI</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">UIView</td>
<td style="text-align:left"><a href="#uiviewrepresentable">UIViewRepresentable</a></td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:left">UIViewController</td>
<td style="text-align:left"><a href="#uiviewcontrollerrepresentable">UIViewControllerRepresentable</a></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table></div></div><h3 id="框架集成---uikit-中的-swiftui">框架集成 - UIKit 中的 SwiftUI<a title="#框架集成---uikit-中的-swiftui" href="#框架集成---uikit-中的-swiftui"></a></h3>
<p>将 SwiftUI 视图集成到现有应用程序中，并将 UIKit 视图和控制器嵌入 SwiftUI 视图层次结构中。</p>
<div class="φcy"><div class="φda"><table><thead>
<tr>
<th style="text-align:left">UIKit</th>
<th style="text-align:left">SwiftUI</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">UIView (<a href="#uihostingcontroller">UIHostingController</a>)</td>
<td style="text-align:left">View</td>
<td style="text-align:center">没有直接转换为 UIView 的方法，但是您可以使用容器视图将 UIViewController 中的视图添加到视图层次结构中</td>
</tr>
<tr>
<td style="text-align:left">UIViewController (<a href="#uihostingcontroller">UIHostingController</a>)</td>
<td style="text-align:left">View</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table></div></div><h2 id="swiftui---视图和控件">SwiftUI - 视图和控件<a title="#swiftui---视图和控件" href="#swiftui---视图和控件"></a></h2>
<h3 id="&lt;span-id=&quot;text&quot;&gt;text&lt;/span&gt;"><span id="text">Text</span><a title="#&lt;span-id=&quot;text&quot;&gt;text&lt;/span&gt;" href="#&lt;span-id=&quot;text&quot;&gt;text&lt;/span&gt;"></a></h3>
<p>显示一行或多行只读文本的视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>样式:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">  .bold()</span><br><span class="line">  .italic()</span><br><span class="line">  .underline()</span><br><span class="line">  .lineLimit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p><code>Text</code> 中填入的字符串也用作 <code>LocalizedStringKey</code>，因此也会直接获得 <code>NSLocalizedString</code> 的特性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;This text used as localized key&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>直接在文本视图里格式化文本。 实际上，这不是 SwiftUI 的功能，而是 Swift 5 的字符串插入特性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">let</span> dateFormatter: <span class="type">DateFormatter</span> = &#123;</span><br><span class="line">    <span class="keyword">let</span> formatter = <span class="type">DateFormatter</span>()</span><br><span class="line">    formatter.dateStyle = .long</span><br><span class="line">    <span class="keyword">return</span> formatter</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> now = <span class="type">Date</span>()</span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;What time is it?: \(now, formatter: Self.dateFormatter)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以直接用 <code>+</code> 拼接 <code>Text</code> 文本:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello &quot;</span>) + <span class="type">Text</span>(<span class="string">&quot;World!&quot;</span>).bold()</span><br></pre></td></tr></table></figure>
<p>文字对齐方式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello\nWorld!&quot;</span>).multilineTextAlignment(.center)</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/text" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;textfield&quot;&gt;textfield&lt;/span&gt;"><span id="textfield">TextField</span><a title="#&lt;span-id=&quot;textfield&quot;&gt;textfield&lt;/span&gt;" href="#&lt;span-id=&quot;textfield&quot;&gt;textfield&lt;/span&gt;"></a></h3>
<p>显示可编辑文本界面的控件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">&quot;John&quot;</span>    </span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;Name&#x27;s placeholder&quot;</span>, text: $name)</span><br><span class="line">        .textFieldStyle(<span class="type">RoundedBorderTextFieldStyle</span>())</span><br><span class="line">        .padding()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/textfield" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;securefield&quot;&gt;securefield&lt;/span&gt;"><span id="securefield">SecureField</span><a title="#&lt;span-id=&quot;securefield&quot;&gt;securefield&lt;/span&gt;" href="#&lt;span-id=&quot;securefield&quot;&gt;securefield&lt;/span&gt;"></a></h3>
<p>用户安全地输入私人文本的控件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> password: <span class="type">String</span> = <span class="string">&quot;1234&quot;</span>    </span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">SecureField</span>($password)</span><br><span class="line">        .textFieldStyle(<span class="type">RoundedBorderTextFieldStyle</span>())</span><br><span class="line">        .padding()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/securefield" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;image&quot;&gt;image&lt;/span&gt;"><span id="image">Image</span><a title="#&lt;span-id=&quot;image&quot;&gt;image&lt;/span&gt;" href="#&lt;span-id=&quot;image&quot;&gt;image&lt;/span&gt;"></a></h3>
<p>显示图像的视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;foo&quot;</span>) <span class="comment">//图像名字为 foo</span></span><br></pre></td></tr></table></figure>
<p>我们可以使用新的 SF Symbols：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;clock.fill&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>您可以通过为系统图标添加样式，来匹配您使用的字体：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;cloud.heavyrain.fill&quot;</span>)</span><br><span class="line">    .foregroundColor(.red)</span><br><span class="line">    .font(.title)</span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;clock&quot;</span>)</span><br><span class="line">    .foregroundColor(.red)</span><br><span class="line">    .font(<span class="type">Font</span>.system(.largeTitle).bold())</span><br></pre></td></tr></table></figure>
<p>为图片增加样式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    .resizable() <span class="comment">// 调整大小，以便填充所有可用空间</span></span><br><span class="line">    .aspectRatio(contentMode: .fit)</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/image" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;button&quot;&gt;button&lt;/span&gt;"><span id="button">Button</span><a title="#&lt;span-id=&quot;button&quot;&gt;button&lt;/span&gt;" href="#&lt;span-id=&quot;button&quot;&gt;button&lt;/span&gt;"></a></h3>
<p>在触发时执行操作的控件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span>(</span><br><span class="line">    action: &#123;</span><br><span class="line">        <span class="comment">// 点击事件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    label: &#123; <span class="type">Text</span>(<span class="string">&quot;Click Me&quot;</span>) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果按钮的标签只有 <code>Text</code>，则可以通过下面这种简单的方式进行初始化：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span>(<span class="string">&quot;Click Me&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 点击事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您可以像这样给按钮添加属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span>(action: &#123;</span><br><span class="line">                </span><br><span class="line">&#125;, label: &#123;</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;clock&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Click Me&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Subtitle&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">.padding()</span><br><span class="line">.background(<span class="type">Color</span>.blue)</span><br><span class="line">.cornerRadius(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/button" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;navigationlink&quot;&gt;navigationlink&lt;/span&gt;"><span id="navigationlink">NavigationLink</span><a title="#&lt;span-id=&quot;navigationlink&quot;&gt;navigationlink&lt;/span&gt;" href="#&lt;span-id=&quot;navigationlink&quot;&gt;navigationlink&lt;/span&gt;"></a></h3>
<p>按下时会触发导航演示的按钮。它用作代替 <code>pushViewController</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">NavigationLink</span>(destination:</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Detail&quot;</span>)</span><br><span class="line">        .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Detail&quot;</span>))</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Push&quot;</span>)</span><br><span class="line">    &#125;.navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Master&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了增强可读性，可以把 <code>destination</code> 包装成自定义视图 <code>DetailView </code> 的方式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">NavigationLink</span>(destination: <span class="type">DetailView</span>()) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Push&quot;</span>)</span><br><span class="line">    &#125;.navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Master&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但不确定是 Bug 还是设计使然，上述代码 在 Beta 5 中的无法正常执行。尝试像这样把 <code>NavigationLink </code> 包装进列表中试一下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">   <span class="type">List</span> &#123;</span><br><span class="line">       <span class="type">NavigationLink</span>(destination: <span class="type">Text</span>(<span class="string">&quot;Detail&quot;</span>)) &#123;</span><br><span class="line">           <span class="type">Text</span>(<span class="string">&quot;Push&quot;</span>)</span><br><span class="line">       &#125;.navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Master&quot;</span>))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果 <code>NavigationLink</code> 的标签只有 <code>Text</code> ，则可以用这样更简单的方式初始化：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationLink</span>(<span class="string">&quot;Detail&quot;</span>, destination: <span class="type">Text</span>(<span class="string">&quot;Detail&quot;</span>).navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Detail&quot;</span>)))</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/navigationlink" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;toggle&quot;&gt;toggle&lt;/span&gt;"><span id="toggle">Toggle</span><a title="#&lt;span-id=&quot;toggle&quot;&gt;toggle&lt;/span&gt;" href="#&lt;span-id=&quot;toggle&quot;&gt;toggle&lt;/span&gt;"></a></h3>
<p>在开/关状态之间切换的控件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> isShowing = <span class="literal">true</span> <span class="comment">// toggle 状态值</span></span><br><span class="line"></span><br><span class="line"><span class="type">Toggle</span>(isOn: $isShowing) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>Toggle</code> 的标签只有 <code>Text</code>，则可以用这样更简单的方式初始化：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Toggle</span>(<span class="string">&quot;Hello World&quot;</span>, isOn: $isShowing)</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/toggle" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;picker&quot;&gt;picker&lt;/span&gt;"><span id="picker">Picker</span><a title="#&lt;span-id=&quot;picker&quot;&gt;picker&lt;/span&gt;" href="#&lt;span-id=&quot;picker&quot;&gt;picker&lt;/span&gt;"></a></h3>
<p>从一组互斥值中进行选择的控件。</p>
<p>选择器样式根据其被父视图进行更改，在表单或列表下作为一个列表行显示，点击可以推出新界面展示所有的选项卡。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Section</span> &#123;</span><br><span class="line">            <span class="type">Picker</span>(selection: $selection, label:</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Picker Name&quot;</span>)</span><br><span class="line">                , content: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 1&quot;</span>).tag(<span class="number">0</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 2&quot;</span>).tag(<span class="number">1</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 3&quot;</span>).tag(<span class="number">2</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 4&quot;</span>).tag(<span class="number">3</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您可以使用 <code>.pickerStyle(WheelPickerStyle())</code>覆盖样式。</p>
<p>在 iOS 13 中， <code>UISegmentedControl</code> 也只是 <code>Picker</code> 的一种样式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> mapChoioce = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> settings = [<span class="string">&quot;Map&quot;</span>, <span class="string">&quot;Transit&quot;</span>, <span class="string">&quot;Satellite&quot;</span>]</span><br><span class="line"><span class="type">Picker</span>(<span class="string">&quot;Options&quot;</span>, selection: $mapChoioce) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="number">0</span> ..&lt; settings.<span class="built_in">count</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(<span class="keyword">self</span>.settings[index])</span><br><span class="line">            .tag(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;.pickerStyle(<span class="type">SegmentedPickerStyle</span>())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分段控制器在 iOS 13 中也焕然一新了。</p>
</blockquote>
<p><a href="https://developer.apple.com/documentation/swiftui/picker" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;datepicker&quot;&gt;datepicker&lt;/span&gt;"><span id="datepicker">DatePicker</span><a title="#&lt;span-id=&quot;datepicker&quot;&gt;datepicker&lt;/span&gt;" href="#&lt;span-id=&quot;datepicker&quot;&gt;datepicker&lt;/span&gt;"></a></h3>
<p>选择日期的控件。</p>
<p>日期选择器样式也会根据其父视图进行更改，在表单或列表下作为一个列表行显示，点击可以扩展到日期选择器（就像日历 App 一样）。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> selectedDate = <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dateClosedRange: <span class="type">ClosedRange</span>&lt;<span class="type">Date</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">min</span> = <span class="type">Calendar</span>.current.date(byAdding: .day, value: -<span class="number">1</span>, to: <span class="type">Date</span>())!</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">max</span> = <span class="type">Calendar</span>.current.date(byAdding: .day, value: <span class="number">1</span>, to: <span class="type">Date</span>())!</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>...<span class="built_in">max</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Section</span> &#123;</span><br><span class="line">            <span class="type">DatePicker</span>(</span><br><span class="line">                selection: $selectedDate,</span><br><span class="line">                <span class="keyword">in</span>: dateClosedRange,</span><br><span class="line">                displayedComponents: .date,</span><br><span class="line">                label: &#123; <span class="type">Text</span>(<span class="string">&quot;Due Date&quot;</span>) &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不在表单或列表里，它就可以作为普通的旋转选择器。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> selectedDate = <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dateClosedRange: <span class="type">ClosedRange</span>&lt;<span class="type">Date</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">min</span> = <span class="type">Calendar</span>.current.date(byAdding: .day, value: -<span class="number">1</span>, to: <span class="type">Date</span>())!</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">max</span> = <span class="type">Calendar</span>.current.date(byAdding: .day, value: <span class="number">1</span>, to: <span class="type">Date</span>())!</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>...<span class="built_in">max</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">DatePicker</span>(</span><br><span class="line">    selection: $selectedDate,</span><br><span class="line">    <span class="keyword">in</span>: dateClosedRange,</span><br><span class="line">    displayedComponents: [.hourAndMinute, .date],</span><br><span class="line">    label: &#123; <span class="type">Text</span>(<span class="string">&quot;Due Date&quot;</span>) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果 <code>DatePicker</code> 的标签只有 <code>Text</code>，则可以用这样更简单的方式初始化：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;Due Date&quot;</span>,</span><br><span class="line">            selection: $selectedDate,</span><br><span class="line">            <span class="keyword">in</span>: dateClosedRange,</span><br><span class="line">            displayedComponents: [.hourAndMinute, .date])</span><br></pre></td></tr></table></figure>
<p>可以使用 <a href="https://developer.apple.com/documentation/swift/closedrange" target="_blank"><code>ClosedRange</code></a>、<a href="https://developer.apple.com/documentation/swift/partialrangethrough" target="_blank"><code>PartialRangeThrough</code></a> 和 <a href="https://developer.apple.com/documentation/swift/partialrangefrom" target="_blank"><code>PartialRangeFrom</code></a> 来设置 <code>minimumDate</code> 和 <code>maximumDate</code> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;Minimum Date&quot;</span>,</span><br><span class="line">    selection: $selectedDate,</span><br><span class="line">    <span class="keyword">in</span>: <span class="type">Date</span>()...,</span><br><span class="line">    displayedComponents: [.date])</span><br><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;Maximum Date&quot;</span>,</span><br><span class="line">    selection: $selectedDate,</span><br><span class="line">    <span class="keyword">in</span>: ...<span class="type">Date</span>(),</span><br><span class="line">    displayedComponents: [.date])</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/datepicker" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;slider&quot;&gt;slider&lt;/span&gt;"><span id="slider">Slider</span><a title="#&lt;span-id=&quot;slider&quot;&gt;slider&lt;/span&gt;" href="#&lt;span-id=&quot;slider&quot;&gt;slider&lt;/span&gt;"></a></h3>
<p>从有界的线性范围中选择一个值的控件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> progress: <span class="type">Float</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="type">Slider</span>(value: $progress, from: <span class="number">0.0</span>, through: <span class="number">100.0</span>, by: <span class="number">5.0</span>)    </span><br></pre></td></tr></table></figure>
<p>Slider 虽然没有 <code>minimumValueImage</code> 和 <code>maximumValueImage</code> 属性， 但可以借助 <code>HStack</code>实现。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> progress: <span class="type">Float</span> = <span class="number">0</span></span><br><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;sun.min&quot;</span>)</span><br><span class="line">    <span class="type">Slider</span>(value: $progress, from: <span class="number">0.0</span>, through: <span class="number">100.0</span>, by: <span class="number">5.0</span>)</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;sun.max.fill&quot;</span>)</span><br><span class="line">&#125;.padding()</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/slider" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;stepper&quot;&gt;stepper&lt;/span&gt;"><span id="stepper">Stepper</span><a title="#&lt;span-id=&quot;stepper&quot;&gt;stepper&lt;/span&gt;" href="#&lt;span-id=&quot;stepper&quot;&gt;stepper&lt;/span&gt;"></a></h3>
<p>用于执行语义上递增和递减动作的控件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> quantity: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"><span class="type">Stepper</span>(value: $quantity, <span class="keyword">in</span>: <span class="number">0</span>...<span class="number">10</span>, label: &#123; <span class="type">Text</span>(<span class="string">&quot;Quantity \(quantity)&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>
<p>如果您的 <code>Stepper</code> 的标签只有 <code>Text</code>，则可以用这样更简单的方式初始化：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Stepper</span>(<span class="string">&quot;Quantity \(quantity)&quot;</span>, value: $quantity, <span class="keyword">in</span>: <span class="number">0</span>...<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>如果您要一个自己管理的数据源的控件，可以这样写：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> quantity: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"><span class="type">Stepper</span>(onIncrement: &#123;</span><br><span class="line">    <span class="keyword">self</span>.quantity += <span class="number">1</span></span><br><span class="line">&#125;, onDecrement: &#123;</span><br><span class="line">    <span class="keyword">self</span>.quantity -= <span class="number">1</span></span><br><span class="line">&#125;, label: &#123; <span class="type">Text</span>(<span class="string">&quot;Quantity \(quantity)&quot;</span>) &#125;)</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/stepper" target="_blank">文档</a></p>
<h2 id="swiftui---页面布局与演示">SwiftUI - 页面布局与演示<a title="#swiftui---页面布局与演示" href="#swiftui---页面布局与演示"></a></h2>
<h3 id="&lt;span-id=&quot;hstack&quot;&gt;hstack&lt;/span&gt;"><span id="hstack">HStack</span><a title="#&lt;span-id=&quot;hstack&quot;&gt;hstack&lt;/span&gt;" href="#&lt;span-id=&quot;hstack&quot;&gt;hstack&lt;/span&gt;"></a></h3>
<p>水平排列子元素的视图。</p>
<p>创建一个水平排列的静态列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">HStack</span> (alignment: .center, spacing: <span class="number">20</span>)&#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    <span class="type">Divider</span>()</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/hstack" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;vstack&quot;&gt;vstack&lt;/span&gt;"><span id="vstack">VStack</span><a title="#&lt;span-id=&quot;vstack&quot;&gt;vstack&lt;/span&gt;" href="#&lt;span-id=&quot;vstack&quot;&gt;vstack&lt;/span&gt;"></a></h3>
<p>垂直排列子元素的视图。</p>
<p>创建一个垂直排列的静态列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">VStack</span> (alignment: .center, spacing: <span class="number">20</span>)&#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    <span class="type">Divider</span>()</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/vstack" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;zstack&quot;&gt;zstack&lt;/span&gt;"><span id="zstack">ZStack</span><a title="#&lt;span-id=&quot;zstack&quot;&gt;zstack&lt;/span&gt;" href="#&lt;span-id=&quot;zstack&quot;&gt;zstack&lt;/span&gt;"></a></h3>
<p>子元素会在 z 轴方向上叠加，同时在垂直/水平轴上对齐的视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ZStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.red)</span><br><span class="line">        .opacity(<span class="number">0.8</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">        .padding(<span class="number">20</span>)</span><br><span class="line">        .background(<span class="type">Color</span>.red)</span><br><span class="line">        .offset(x: <span class="number">0</span>, y: <span class="number">40</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/zstack" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;list&quot;&gt;list&lt;/span&gt;"><span id="list">List</span><a title="#&lt;span-id=&quot;list&quot;&gt;list&lt;/span&gt;" href="#&lt;span-id=&quot;list&quot;&gt;list&lt;/span&gt;"></a></h3>
<p>用于显示排列一系列数据行的容器。</p>
<p>创建一个静态可滚动列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表单里的内容可以混搭：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;clock&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个动态列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Seed&quot;</span>]</span><br><span class="line"><span class="type">List</span>(names) &#123; name <span class="keyword">in</span></span><br><span class="line">    <span class="type">Text</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加入分区：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;UIKit&quot;</span>), footer: <span class="type">Text</span>(<span class="string">&quot;We will miss you&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;UITableView&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;SwiftUI&quot;</span>), footer: <span class="type">Text</span>(<span class="string">&quot;A lot to learn&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;List&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要使其成为分组列表，请添加 <code>.listStyle(GroupedListStyle())</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;UIKit&quot;</span>), footer: <span class="type">Text</span>(<span class="string">&quot;We will miss you&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;UITableView&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;SwiftUI&quot;</span>), footer: <span class="type">Text</span>(<span class="string">&quot;A lot to learn&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;List&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.listStyle(<span class="type">GroupedListStyle</span>())</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/list" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;scrollview&quot;&gt;scrollview&lt;/span&gt;"><span id="scrollview">ScrollView</span><a title="#&lt;span-id=&quot;scrollview&quot;&gt;scrollview&lt;/span&gt;" href="#&lt;span-id=&quot;scrollview&quot;&gt;scrollview&lt;/span&gt;"></a></h3>
<p>滚动视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ScrollView</span>(alwaysBounceVertical: <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">Image</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/scrollview" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;form&quot;&gt;form&lt;/span&gt;"><span id="form">Form</span><a title="#&lt;span-id=&quot;form&quot;&gt;form&lt;/span&gt;" href="#&lt;span-id=&quot;form&quot;&gt;form&lt;/span&gt;"></a></h3>
<p>对数据输入的控件进行分组的容器，例如在设置或检查器中。</p>
<p>您可以往表单中插入任何内容，它将为表单渲染适当的样式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Section</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Plain Text&quot;</span>)</span><br><span class="line">            <span class="type">Stepper</span>(value: $quantity, <span class="keyword">in</span>: <span class="number">0</span>...<span class="number">10</span>, label: &#123; <span class="type">Text</span>(<span class="string">&quot;Quantity&quot;</span>) &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Section</span> &#123;</span><br><span class="line">            <span class="type">DatePicker</span>($date, label: &#123; <span class="type">Text</span>(<span class="string">&quot;Due Date&quot;</span>) &#125;)</span><br><span class="line">            <span class="type">Picker</span>(selection: $selection, label:</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Picker Name&quot;</span>)</span><br><span class="line">                , content: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 1&quot;</span>).tag(<span class="number">0</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 2&quot;</span>).tag(<span class="number">1</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 3&quot;</span>).tag(<span class="number">2</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Value 4&quot;</span>).tag(<span class="number">3</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/form" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;spacer&quot;&gt;spacer&lt;/span&gt;"><span id="spacer">Spacer</span><a title="#&lt;span-id=&quot;spacer&quot;&gt;spacer&lt;/span&gt;" href="#&lt;span-id=&quot;spacer&quot;&gt;spacer&lt;/span&gt;"></a></h3>
<p>一块既能在包含栈布局时沿主轴伸展，也能在不包含栈时沿两个轴展开的灵活空间。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;clock&quot;</span>)</span><br><span class="line">    <span class="type">Spacer</span>()</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Time&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/spacer" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;divider&quot;&gt;divider&lt;/span&gt;"><span id="divider">Divider</span><a title="#&lt;span-id=&quot;divider&quot;&gt;divider&lt;/span&gt;" href="#&lt;span-id=&quot;divider&quot;&gt;divider&lt;/span&gt;"></a></h3>
<p>用于分隔其它内容的可视化元素。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;clock&quot;</span>)</span><br><span class="line">    <span class="type">Divider</span>()</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Time&quot;</span>)</span><br><span class="line">&#125;.fixedSize()</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/divider" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;navigationview&quot;&gt;navigationview&lt;/span&gt;"><span id="navigationview">NavigationView</span><a title="#&lt;span-id=&quot;navigationview&quot;&gt;navigationview&lt;/span&gt;" href="#&lt;span-id=&quot;navigationview&quot;&gt;navigationview&lt;/span&gt;"></a></h3>
<p>用于渲染视图堆栈的视图，这些视图会展示导航层次结构中的可见路径。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;            </span><br><span class="line">    <span class="type">List</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Navigation Title&quot;</span>)) <span class="comment">// 默认使用大标题样式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于旧样式标题：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;            </span><br><span class="line">    <span class="type">List</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Navigation Title&quot;</span>), displayMode: .inline)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加 <code>UIBarButtonItem</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">List</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .navigationBarItems(trailing:</span><br><span class="line">        <span class="type">Button</span>(action: &#123;</span><br><span class="line">            <span class="comment">// Add action</span></span><br><span class="line">        &#125;, label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Add&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">    .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Navigation Title&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 <a href="#navigationlink">NavigationLink</a> 添加 <code>show</code>/<code>push</code> 功能。</p>
<p>作为 <code>UISplitViewController</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">List</span> &#123;</span><br><span class="line">        <span class="type">NavigationLink</span>(<span class="string">&quot;Go to detail&quot;</span>, destination: <span class="type">Text</span>(<span class="string">&quot;New Detail&quot;</span>))</span><br><span class="line">    &#125;.navigationBarTitle(<span class="string">&quot;Master&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Placeholder for Detail&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您可以使用两种新的样式属性：<code>stack</code> 和 <code>doubleColumn</code> 为 NavigationView 设置样式。默认情况下，iPhone 和 Apple TV 上的导航栏上显示导航堆栈，而在 iPad 和 Mac 上，显示的是拆分样式的导航视图。</p>
<p>您可以通过 <code>.navigationViewStyle</code> 重写样式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">MyMasterView</span>()</span><br><span class="line">    <span class="type">MyDetailView</span>()</span><br><span class="line">&#125;</span><br><span class="line">.navigationViewStyle(<span class="type">StackNavigationViewStyle</span>())</span><br></pre></td></tr></table></figure>
<p>在 beta 3 中，<code>NavigationView</code> 支持拆分视图，但它仅支持非常基本的结构，其中主视图为列表，详细视图为叶视图，我期待在下一个 release 版本中能有优化补充。</p>
<p><a href="https://developer.apple.com/documentation/swiftui/navigationview" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;tabview&quot;&gt;tabview&lt;/span&gt;"><span id="tabview">TabView</span><a title="#&lt;span-id=&quot;tabview&quot;&gt;tabview&lt;/span&gt;" href="#&lt;span-id=&quot;tabview&quot;&gt;tabview&lt;/span&gt;"></a></h3>
<p>使用交互式用户界面元素在多个子视图之间切换的视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">TabView</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;First View&quot;</span>)</span><br><span class="line">        .font(.title)</span><br><span class="line">        .tabItem(&#123; <span class="type">Text</span>(<span class="string">&quot;First&quot;</span>) &#125;)</span><br><span class="line">        .tag(<span class="number">0</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Second View&quot;</span>)</span><br><span class="line">        .font(.title)</span><br><span class="line">        .tabItem(&#123; <span class="type">Text</span>(<span class="string">&quot;Second&quot;</span>) &#125;)</span><br><span class="line">        .tag(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>标签元素支持同时显示图像和文本， 您也可以使用 SF Symbols。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">TabView</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;First View&quot;</span>)</span><br><span class="line">        .font(.title)</span><br><span class="line">        .tabItem(&#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;First&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .tag(<span class="number">0</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Second View&quot;</span>)</span><br><span class="line">        .font(.title)</span><br><span class="line">        .tabItem(<span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(<span class="string">&quot;second&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Second&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .tag(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您也可以省略 <code>VStack</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">TabView</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;First View&quot;</span>)</span><br><span class="line">        .font(.title)</span><br><span class="line">        .tabItem(&#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;First&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .tag(<span class="number">0</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Second View&quot;</span>)</span><br><span class="line">        .font(.title)</span><br><span class="line">        .tabItem(&#123;</span><br><span class="line">            <span class="type">Image</span>(<span class="string">&quot;second&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Second&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .tag(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/tabview" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;alert&quot;&gt;alert&lt;/span&gt;"><span id="alert">Alert</span><a title="#&lt;span-id=&quot;alert&quot;&gt;alert&lt;/span&gt;" href="#&lt;span-id=&quot;alert&quot;&gt;alert&lt;/span&gt;"></a></h3>
<p>一个展示警告信息的容器。</p>
<p>我们可以根据布尔值显示 <code>Alert</code> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> isError: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Button</span>(<span class="string">&quot;Alert&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.isError = <span class="literal">true</span></span><br><span class="line">&#125;.alert(isPresented: $isError, content: &#123;</span><br><span class="line">    <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">&quot;Error&quot;</span>), message: <span class="type">Text</span>(<span class="string">&quot;Error Reason&quot;</span>), dismissButton: .<span class="keyword">default</span>(<span class="type">Text</span>(<span class="string">&quot;OK&quot;</span>)))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>它也可与 <code>Identifiable</code> 项目绑定。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> error: <span class="type">AlertError?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Alert Error&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.error = <span class="type">AlertError</span>(reason: <span class="string">&quot;Reason&quot;</span>)</span><br><span class="line">    &#125;.alert(item: $error, content: &#123; error <span class="keyword">in</span></span><br><span class="line">        alert(reason: error.reason)</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alert</span><span class="params">(reason: String)</span></span> -&gt; <span class="type">Alert</span> &#123;</span><br><span class="line">    <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">&quot;Error&quot;</span>),</span><br><span class="line">            message: <span class="type">Text</span>(reason),</span><br><span class="line">            dismissButton: .<span class="keyword">default</span>(<span class="type">Text</span>(<span class="string">&quot;OK&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AlertError</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reason</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> reason: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/alert" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;modal&quot;&gt;modal&lt;/span&gt;"><span id="modal">Modal</span><a title="#&lt;span-id=&quot;modal&quot;&gt;modal&lt;/span&gt;" href="#&lt;span-id=&quot;modal&quot;&gt;modal&lt;/span&gt;"></a></h3>
<p>模态视图的存储类型。</p>
<p>我们可以根据布尔值显示 <code>Modal</code> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> isModal: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> modal: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Modal&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span>(<span class="string">&quot;Modal&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.isModal = <span class="literal">true</span></span><br><span class="line">&#125;.sheet(isPresented: $isModal, content: &#123;</span><br><span class="line">    <span class="keyword">self</span>.modal</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/view/3352791-sheet" target="_blank">文档</a></p>
<p>它也可与 <code>Identifiable</code> 项目绑定。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> detail: <span class="type">ModalDetail?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Modal&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.detail = <span class="type">ModalDetail</span>(body: <span class="string">&quot;Detail&quot;</span>)</span><br><span class="line">    &#125;.sheet(item: $detail, content: &#123; detail <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>.modal(detail: detail.body)</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modal</span><span class="params">(detail: String)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(detail)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ModalDetail</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> body</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> body: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/view/3352792-sheet" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;actionsheet&quot;&gt;actionsheet&lt;/span&gt;"><span id="actionsheet">ActionSheet</span><a title="#&lt;span-id=&quot;actionsheet&quot;&gt;actionsheet&lt;/span&gt;" href="#&lt;span-id=&quot;actionsheet&quot;&gt;actionsheet&lt;/span&gt;"></a></h3>
<p>操作表视图的存储类型。</p>
<p>我们可以根据布尔值显示 <code>ActionSheet</code> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> isSheet: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> actionSheet: <span class="type">ActionSheet</span> &#123;</span><br><span class="line">    <span class="type">ActionSheet</span>(title: <span class="type">Text</span>(<span class="string">&quot;Action&quot;</span>),</span><br><span class="line">                message: <span class="type">Text</span>(<span class="string">&quot;Description&quot;</span>),</span><br><span class="line">                buttons: [</span><br><span class="line">                    .<span class="keyword">default</span>(<span class="type">Text</span>(<span class="string">&quot;OK&quot;</span>), action: &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;),</span><br><span class="line">                    .destructive(<span class="type">Text</span>(<span class="string">&quot;Delete&quot;</span>), action: &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;)</span><br><span class="line">                ]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span>(<span class="string">&quot;Action Sheet&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.isSheet = <span class="literal">true</span></span><br><span class="line">&#125;.actionSheet(isPresented: $isSheet, content: &#123;</span><br><span class="line">    <span class="keyword">self</span>.actionSheet</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>它也可与 <code>Identifiable</code> 项目绑定。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> sheetDetail: <span class="type">SheetDetail?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Action Sheet&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.sheetDetail = <span class="type">ModSheetDetail</span>(body: <span class="string">&quot;Detail&quot;</span>)</span><br><span class="line">    &#125;.actionSheet(item: $sheetDetail, content: &#123; detail <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>.sheet(detail: detail.body)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sheet</span><span class="params">(detail: String)</span></span> -&gt; <span class="type">ActionSheet</span> &#123;</span><br><span class="line">    <span class="type">ActionSheet</span>(title: <span class="type">Text</span>(<span class="string">&quot;Action&quot;</span>),</span><br><span class="line">                message: <span class="type">Text</span>(detail),</span><br><span class="line">                buttons: [</span><br><span class="line">                    .<span class="keyword">default</span>(<span class="type">Text</span>(<span class="string">&quot;OK&quot;</span>), action: &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;),</span><br><span class="line">                    .destructive(<span class="type">Text</span>(<span class="string">&quot;Delete&quot;</span>), action: &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;)</span><br><span class="line">                ]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SheetDetail</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> body</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> body: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/actionsheet" target="_blank">文档</a></p>
<h2 id="框架集成---swiftui-中的-uikit-1">框架集成 - SwiftUI 中的 UIKit<a title="#框架集成---swiftui-中的-uikit-1" href="#框架集成---swiftui-中的-uikit-1"></a></h2>
<h3 id="&lt;span-id=&quot;uiviewrepresentable&quot;&gt;uiviewrepresentable&lt;/span&gt;"><span id="uiviewrepresentable">UIViewRepresentable</span><a title="#&lt;span-id=&quot;uiviewrepresentable&quot;&gt;uiviewrepresentable&lt;/span&gt;" href="#&lt;span-id=&quot;uiviewrepresentable&quot;&gt;uiviewrepresentable&lt;/span&gt;"></a></h3>
<p>表示 UIKit 视图的视图，当您想在 SwiftUI 中使用 UIView 时，请使用它。</p>
<p>要使任何 UIView 在 SwiftUI 中可用，请创建一个符合 UIViewRepresentable 的包装器视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ActivityIndicator</span>: <span class="title">UIViewRepresentable</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> isAnimating: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">UIActivityIndicatorView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> v = <span class="type">UIActivityIndicatorView</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIView</span><span class="params">(<span class="number">_</span> uiView: UIActivityIndicatorView, context: Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> isAnimating &#123;</span><br><span class="line">            uiView.startAnimating()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            uiView.stopAnimating()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果您想要桥接 UIKit 里的数据绑定 (delegate, target/action) 就使用 <code>Coordinator</code>， 具体见 <a href="https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit" target="_blank">SwiftUI 教程</a>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageControl</span>: <span class="title">UIViewRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfPages: <span class="type">Int</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> currentPage: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">UIPageControl</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> control = <span class="type">UIPageControl</span>()</span><br><span class="line">        control.numberOfPages = numberOfPages</span><br><span class="line">        control.addTarget(</span><br><span class="line">            context.coordinator,</span><br><span class="line">            action: #selector(<span class="type">Coordinator</span>.updateCurrentPage(sender:)),</span><br><span class="line">            <span class="keyword">for</span>: .valueChanged)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> control</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIView</span><span class="params">(<span class="number">_</span> uiView: UIPageControl, context: Context)</span></span> &#123;</span><br><span class="line">        uiView.currentPage = currentPage</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is where old paradigm located</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> control: <span class="type">PageControl</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span>(<span class="number">_</span> control: <span class="type">PageControl</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.control = control</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">updateCurrentPage</span><span class="params">(sender: UIPageControl)</span></span> &#123;</span><br><span class="line">            control.currentPage = sender.currentPage</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/uiviewrepresentable" target="_blank">文档</a></p>
<h3 id="&lt;span-id=&quot;uiviewcontrollerrepresentable&quot;&gt;uiviewcontrollerrepresentable&lt;/span&gt;"><span id="uiviewcontrollerrepresentable">UIViewControllerRepresentable</span><a title="#&lt;span-id=&quot;uiviewcontrollerrepresentable&quot;&gt;uiviewcontrollerrepresentable&lt;/span&gt;" href="#&lt;span-id=&quot;uiviewcontrollerrepresentable&quot;&gt;uiviewcontrollerrepresentable&lt;/span&gt;"></a></h3>
<p>表示 UIKit 视图控制器的视图。当您想在 SwiftUI 中使用 UIViewController 时，请使用它。</p>
<p>要使任何 UIViewController 在 SwiftUI 中可用，请创建一个符合 UIViewControllerRepresentable 的包装器视图，具体见 <a href="https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit" target="_blank">SwiftUI 教程</a>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageViewController</span>: <span class="title">UIViewControllerRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> controllers: [<span class="type">UIViewController</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIViewController</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">UIPageViewController</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pageViewController = <span class="type">UIPageViewController</span>(</span><br><span class="line">            transitionStyle: .scroll,</span><br><span class="line">            navigationOrientation: .horizontal)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageViewController</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, context: Context)</span></span> &#123;</span><br><span class="line">        pageViewController.setViewControllers(</span><br><span class="line">            [controllers[<span class="number">0</span>]], direction: .forward, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable" target="_blank">文档</a></p>
<h2 id="框架集成---uikit-中的-swiftui-1">框架集成 - UIKit 中的 SwiftUI<a title="#框架集成---uikit-中的-swiftui-1" href="#框架集成---uikit-中的-swiftui-1"></a></h2>
<h3 id="&lt;span-id=&quot;uihostingcontroller&quot;&gt;uihostingcontroller&lt;/span&gt;"><span id="uihostingcontroller">UIHostingController</span><a title="#&lt;span-id=&quot;uihostingcontroller&quot;&gt;uihostingcontroller&lt;/span&gt;" href="#&lt;span-id=&quot;uihostingcontroller&quot;&gt;uihostingcontroller&lt;/span&gt;"></a></h3>
<p>表示 SwiftUI 视图的 UIViewController。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vc = <span class="type">UIHostingController</span>(rootView: <span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>))</span><br><span class="line"><span class="keyword">let</span> vc = <span class="type">UIHostingController</span>(rootView: <span class="type">ContentView</span>())</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.apple.com/documentation/swiftui/uihostingcontroller" target="_blank">文档</a></p>
<h2 id="来源">来源<a title="#来源" href="#来源"></a></h2>
<ul>
<li><a href="https://developer.apple.com/documentation/swiftui/" target="_blank">API 文档</a></li>
<li><a href="https://developer.apple.com/tutorials/swiftui/tutorials" target="_blank">官方教程</a></li>
<li><a href="https://developer.apple.com/videos/wwdc2019/" target="_blank">WWDC 2019</a>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/204/" target="_blank">介绍 SwiftUI: 创建您的第一个 App</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/216/" target="_blank">SwiftUI 基础</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/226/" target="_blank">SwiftUI 数据流</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/237/" target="_blank">使用 SwiftUI 构建自定义视图</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/231/" target="_blank">集成 SwiftUI</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/238/" target="_blank">SwiftUI 中的可访问性</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/240/" target="_blank">所有设备上的 SwiftUI</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/219/" target="_blank">watchOS 上的 SwiftUI</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/233/" target="_blank">掌握 Xcode 预览</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
      </tags>
  </entry>
</search>
